
SR_Mycha.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ed14  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000554  0800eea8  0800eea8  0000fea8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f3fc  0800f3fc  000113d8  2**0
                  CONTENTS
  4 .ARM          00000008  0800f3fc  0800f3fc  000103fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f404  0800f404  000113d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f404  0800f404  00010404  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f408  0800f408  00010408  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000003d8  20000000  0800f40c  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000c64  200003d8  0800f7e4  000113d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000103c  0800f7e4  0001203c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000113d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00022d9d  00000000  00000000  00011408  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005857  00000000  00000000  000341a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002058  00000000  00000000  00039a00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001d90  00000000  00000000  0003ba58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002ea16  00000000  00000000  0003d7e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00029d9c  00000000  00000000  0006c1fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00102920  00000000  00000000  00095f9a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001988ba  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009ae8  00000000  00000000  00198900  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200003d8 	.word	0x200003d8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800ee8c 	.word	0x0800ee8c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200003dc 	.word	0x200003dc
 80001cc:	0800ee8c 	.word	0x0800ee8c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9be 	b.w	800101c <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	@ (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	@ (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	468e      	mov	lr, r1
 8000d2c:	4604      	mov	r4, r0
 8000d2e:	4688      	mov	r8, r1
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d14a      	bne.n	8000dca <__udivmoddi4+0xa6>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4617      	mov	r7, r2
 8000d38:	d962      	bls.n	8000e00 <__udivmoddi4+0xdc>
 8000d3a:	fab2 f682 	clz	r6, r2
 8000d3e:	b14e      	cbz	r6, 8000d54 <__udivmoddi4+0x30>
 8000d40:	f1c6 0320 	rsb	r3, r6, #32
 8000d44:	fa01 f806 	lsl.w	r8, r1, r6
 8000d48:	fa20 f303 	lsr.w	r3, r0, r3
 8000d4c:	40b7      	lsls	r7, r6
 8000d4e:	ea43 0808 	orr.w	r8, r3, r8
 8000d52:	40b4      	lsls	r4, r6
 8000d54:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d58:	fa1f fc87 	uxth.w	ip, r7
 8000d5c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000d60:	0c23      	lsrs	r3, r4, #16
 8000d62:	fb0e 8811 	mls	r8, lr, r1, r8
 8000d66:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d6a:	fb01 f20c 	mul.w	r2, r1, ip
 8000d6e:	429a      	cmp	r2, r3
 8000d70:	d909      	bls.n	8000d86 <__udivmoddi4+0x62>
 8000d72:	18fb      	adds	r3, r7, r3
 8000d74:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d78:	f080 80ea 	bcs.w	8000f50 <__udivmoddi4+0x22c>
 8000d7c:	429a      	cmp	r2, r3
 8000d7e:	f240 80e7 	bls.w	8000f50 <__udivmoddi4+0x22c>
 8000d82:	3902      	subs	r1, #2
 8000d84:	443b      	add	r3, r7
 8000d86:	1a9a      	subs	r2, r3, r2
 8000d88:	b2a3      	uxth	r3, r4
 8000d8a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d8e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d92:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d96:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d9a:	459c      	cmp	ip, r3
 8000d9c:	d909      	bls.n	8000db2 <__udivmoddi4+0x8e>
 8000d9e:	18fb      	adds	r3, r7, r3
 8000da0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000da4:	f080 80d6 	bcs.w	8000f54 <__udivmoddi4+0x230>
 8000da8:	459c      	cmp	ip, r3
 8000daa:	f240 80d3 	bls.w	8000f54 <__udivmoddi4+0x230>
 8000dae:	443b      	add	r3, r7
 8000db0:	3802      	subs	r0, #2
 8000db2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000db6:	eba3 030c 	sub.w	r3, r3, ip
 8000dba:	2100      	movs	r1, #0
 8000dbc:	b11d      	cbz	r5, 8000dc6 <__udivmoddi4+0xa2>
 8000dbe:	40f3      	lsrs	r3, r6
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	e9c5 3200 	strd	r3, r2, [r5]
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	428b      	cmp	r3, r1
 8000dcc:	d905      	bls.n	8000dda <__udivmoddi4+0xb6>
 8000dce:	b10d      	cbz	r5, 8000dd4 <__udivmoddi4+0xb0>
 8000dd0:	e9c5 0100 	strd	r0, r1, [r5]
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	4608      	mov	r0, r1
 8000dd8:	e7f5      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000dda:	fab3 f183 	clz	r1, r3
 8000dde:	2900      	cmp	r1, #0
 8000de0:	d146      	bne.n	8000e70 <__udivmoddi4+0x14c>
 8000de2:	4573      	cmp	r3, lr
 8000de4:	d302      	bcc.n	8000dec <__udivmoddi4+0xc8>
 8000de6:	4282      	cmp	r2, r0
 8000de8:	f200 8105 	bhi.w	8000ff6 <__udivmoddi4+0x2d2>
 8000dec:	1a84      	subs	r4, r0, r2
 8000dee:	eb6e 0203 	sbc.w	r2, lr, r3
 8000df2:	2001      	movs	r0, #1
 8000df4:	4690      	mov	r8, r2
 8000df6:	2d00      	cmp	r5, #0
 8000df8:	d0e5      	beq.n	8000dc6 <__udivmoddi4+0xa2>
 8000dfa:	e9c5 4800 	strd	r4, r8, [r5]
 8000dfe:	e7e2      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000e00:	2a00      	cmp	r2, #0
 8000e02:	f000 8090 	beq.w	8000f26 <__udivmoddi4+0x202>
 8000e06:	fab2 f682 	clz	r6, r2
 8000e0a:	2e00      	cmp	r6, #0
 8000e0c:	f040 80a4 	bne.w	8000f58 <__udivmoddi4+0x234>
 8000e10:	1a8a      	subs	r2, r1, r2
 8000e12:	0c03      	lsrs	r3, r0, #16
 8000e14:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e18:	b280      	uxth	r0, r0
 8000e1a:	b2bc      	uxth	r4, r7
 8000e1c:	2101      	movs	r1, #1
 8000e1e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e22:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e26:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e2a:	fb04 f20c 	mul.w	r2, r4, ip
 8000e2e:	429a      	cmp	r2, r3
 8000e30:	d907      	bls.n	8000e42 <__udivmoddi4+0x11e>
 8000e32:	18fb      	adds	r3, r7, r3
 8000e34:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000e38:	d202      	bcs.n	8000e40 <__udivmoddi4+0x11c>
 8000e3a:	429a      	cmp	r2, r3
 8000e3c:	f200 80e0 	bhi.w	8001000 <__udivmoddi4+0x2dc>
 8000e40:	46c4      	mov	ip, r8
 8000e42:	1a9b      	subs	r3, r3, r2
 8000e44:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e48:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e4c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000e50:	fb02 f404 	mul.w	r4, r2, r4
 8000e54:	429c      	cmp	r4, r3
 8000e56:	d907      	bls.n	8000e68 <__udivmoddi4+0x144>
 8000e58:	18fb      	adds	r3, r7, r3
 8000e5a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000e5e:	d202      	bcs.n	8000e66 <__udivmoddi4+0x142>
 8000e60:	429c      	cmp	r4, r3
 8000e62:	f200 80ca 	bhi.w	8000ffa <__udivmoddi4+0x2d6>
 8000e66:	4602      	mov	r2, r0
 8000e68:	1b1b      	subs	r3, r3, r4
 8000e6a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e6e:	e7a5      	b.n	8000dbc <__udivmoddi4+0x98>
 8000e70:	f1c1 0620 	rsb	r6, r1, #32
 8000e74:	408b      	lsls	r3, r1
 8000e76:	fa22 f706 	lsr.w	r7, r2, r6
 8000e7a:	431f      	orrs	r7, r3
 8000e7c:	fa0e f401 	lsl.w	r4, lr, r1
 8000e80:	fa20 f306 	lsr.w	r3, r0, r6
 8000e84:	fa2e fe06 	lsr.w	lr, lr, r6
 8000e88:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000e8c:	4323      	orrs	r3, r4
 8000e8e:	fa00 f801 	lsl.w	r8, r0, r1
 8000e92:	fa1f fc87 	uxth.w	ip, r7
 8000e96:	fbbe f0f9 	udiv	r0, lr, r9
 8000e9a:	0c1c      	lsrs	r4, r3, #16
 8000e9c:	fb09 ee10 	mls	lr, r9, r0, lr
 8000ea0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000ea4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000ea8:	45a6      	cmp	lr, r4
 8000eaa:	fa02 f201 	lsl.w	r2, r2, r1
 8000eae:	d909      	bls.n	8000ec4 <__udivmoddi4+0x1a0>
 8000eb0:	193c      	adds	r4, r7, r4
 8000eb2:	f100 3aff 	add.w	sl, r0, #4294967295
 8000eb6:	f080 809c 	bcs.w	8000ff2 <__udivmoddi4+0x2ce>
 8000eba:	45a6      	cmp	lr, r4
 8000ebc:	f240 8099 	bls.w	8000ff2 <__udivmoddi4+0x2ce>
 8000ec0:	3802      	subs	r0, #2
 8000ec2:	443c      	add	r4, r7
 8000ec4:	eba4 040e 	sub.w	r4, r4, lr
 8000ec8:	fa1f fe83 	uxth.w	lr, r3
 8000ecc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ed0:	fb09 4413 	mls	r4, r9, r3, r4
 8000ed4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000ed8:	fb03 fc0c 	mul.w	ip, r3, ip
 8000edc:	45a4      	cmp	ip, r4
 8000ede:	d908      	bls.n	8000ef2 <__udivmoddi4+0x1ce>
 8000ee0:	193c      	adds	r4, r7, r4
 8000ee2:	f103 3eff 	add.w	lr, r3, #4294967295
 8000ee6:	f080 8082 	bcs.w	8000fee <__udivmoddi4+0x2ca>
 8000eea:	45a4      	cmp	ip, r4
 8000eec:	d97f      	bls.n	8000fee <__udivmoddi4+0x2ca>
 8000eee:	3b02      	subs	r3, #2
 8000ef0:	443c      	add	r4, r7
 8000ef2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000ef6:	eba4 040c 	sub.w	r4, r4, ip
 8000efa:	fba0 ec02 	umull	lr, ip, r0, r2
 8000efe:	4564      	cmp	r4, ip
 8000f00:	4673      	mov	r3, lr
 8000f02:	46e1      	mov	r9, ip
 8000f04:	d362      	bcc.n	8000fcc <__udivmoddi4+0x2a8>
 8000f06:	d05f      	beq.n	8000fc8 <__udivmoddi4+0x2a4>
 8000f08:	b15d      	cbz	r5, 8000f22 <__udivmoddi4+0x1fe>
 8000f0a:	ebb8 0203 	subs.w	r2, r8, r3
 8000f0e:	eb64 0409 	sbc.w	r4, r4, r9
 8000f12:	fa04 f606 	lsl.w	r6, r4, r6
 8000f16:	fa22 f301 	lsr.w	r3, r2, r1
 8000f1a:	431e      	orrs	r6, r3
 8000f1c:	40cc      	lsrs	r4, r1
 8000f1e:	e9c5 6400 	strd	r6, r4, [r5]
 8000f22:	2100      	movs	r1, #0
 8000f24:	e74f      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000f26:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f2a:	0c01      	lsrs	r1, r0, #16
 8000f2c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f30:	b280      	uxth	r0, r0
 8000f32:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f36:	463b      	mov	r3, r7
 8000f38:	4638      	mov	r0, r7
 8000f3a:	463c      	mov	r4, r7
 8000f3c:	46b8      	mov	r8, r7
 8000f3e:	46be      	mov	lr, r7
 8000f40:	2620      	movs	r6, #32
 8000f42:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f46:	eba2 0208 	sub.w	r2, r2, r8
 8000f4a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f4e:	e766      	b.n	8000e1e <__udivmoddi4+0xfa>
 8000f50:	4601      	mov	r1, r0
 8000f52:	e718      	b.n	8000d86 <__udivmoddi4+0x62>
 8000f54:	4610      	mov	r0, r2
 8000f56:	e72c      	b.n	8000db2 <__udivmoddi4+0x8e>
 8000f58:	f1c6 0220 	rsb	r2, r6, #32
 8000f5c:	fa2e f302 	lsr.w	r3, lr, r2
 8000f60:	40b7      	lsls	r7, r6
 8000f62:	40b1      	lsls	r1, r6
 8000f64:	fa20 f202 	lsr.w	r2, r0, r2
 8000f68:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f6c:	430a      	orrs	r2, r1
 8000f6e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000f72:	b2bc      	uxth	r4, r7
 8000f74:	fb0e 3318 	mls	r3, lr, r8, r3
 8000f78:	0c11      	lsrs	r1, r2, #16
 8000f7a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f7e:	fb08 f904 	mul.w	r9, r8, r4
 8000f82:	40b0      	lsls	r0, r6
 8000f84:	4589      	cmp	r9, r1
 8000f86:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000f8a:	b280      	uxth	r0, r0
 8000f8c:	d93e      	bls.n	800100c <__udivmoddi4+0x2e8>
 8000f8e:	1879      	adds	r1, r7, r1
 8000f90:	f108 3cff 	add.w	ip, r8, #4294967295
 8000f94:	d201      	bcs.n	8000f9a <__udivmoddi4+0x276>
 8000f96:	4589      	cmp	r9, r1
 8000f98:	d81f      	bhi.n	8000fda <__udivmoddi4+0x2b6>
 8000f9a:	eba1 0109 	sub.w	r1, r1, r9
 8000f9e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fa2:	fb09 f804 	mul.w	r8, r9, r4
 8000fa6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000faa:	b292      	uxth	r2, r2
 8000fac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fb0:	4542      	cmp	r2, r8
 8000fb2:	d229      	bcs.n	8001008 <__udivmoddi4+0x2e4>
 8000fb4:	18ba      	adds	r2, r7, r2
 8000fb6:	f109 31ff 	add.w	r1, r9, #4294967295
 8000fba:	d2c4      	bcs.n	8000f46 <__udivmoddi4+0x222>
 8000fbc:	4542      	cmp	r2, r8
 8000fbe:	d2c2      	bcs.n	8000f46 <__udivmoddi4+0x222>
 8000fc0:	f1a9 0102 	sub.w	r1, r9, #2
 8000fc4:	443a      	add	r2, r7
 8000fc6:	e7be      	b.n	8000f46 <__udivmoddi4+0x222>
 8000fc8:	45f0      	cmp	r8, lr
 8000fca:	d29d      	bcs.n	8000f08 <__udivmoddi4+0x1e4>
 8000fcc:	ebbe 0302 	subs.w	r3, lr, r2
 8000fd0:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000fd4:	3801      	subs	r0, #1
 8000fd6:	46e1      	mov	r9, ip
 8000fd8:	e796      	b.n	8000f08 <__udivmoddi4+0x1e4>
 8000fda:	eba7 0909 	sub.w	r9, r7, r9
 8000fde:	4449      	add	r1, r9
 8000fe0:	f1a8 0c02 	sub.w	ip, r8, #2
 8000fe4:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fe8:	fb09 f804 	mul.w	r8, r9, r4
 8000fec:	e7db      	b.n	8000fa6 <__udivmoddi4+0x282>
 8000fee:	4673      	mov	r3, lr
 8000ff0:	e77f      	b.n	8000ef2 <__udivmoddi4+0x1ce>
 8000ff2:	4650      	mov	r0, sl
 8000ff4:	e766      	b.n	8000ec4 <__udivmoddi4+0x1a0>
 8000ff6:	4608      	mov	r0, r1
 8000ff8:	e6fd      	b.n	8000df6 <__udivmoddi4+0xd2>
 8000ffa:	443b      	add	r3, r7
 8000ffc:	3a02      	subs	r2, #2
 8000ffe:	e733      	b.n	8000e68 <__udivmoddi4+0x144>
 8001000:	f1ac 0c02 	sub.w	ip, ip, #2
 8001004:	443b      	add	r3, r7
 8001006:	e71c      	b.n	8000e42 <__udivmoddi4+0x11e>
 8001008:	4649      	mov	r1, r9
 800100a:	e79c      	b.n	8000f46 <__udivmoddi4+0x222>
 800100c:	eba1 0109 	sub.w	r1, r1, r9
 8001010:	46c4      	mov	ip, r8
 8001012:	fbb1 f9fe 	udiv	r9, r1, lr
 8001016:	fb09 f804 	mul.w	r8, r9, r4
 800101a:	e7c4      	b.n	8000fa6 <__udivmoddi4+0x282>

0800101c <__aeabi_idiv0>:
 800101c:	4770      	bx	lr
 800101e:	bf00      	nop

08001020 <accInit>:
#define LPF_ALPHA 0.3f       // 0,1 usuwa szumy o częstotliwości wyższej od 0,88 Hz

#include "accelerometer.h"

uint8_t accInit(){
 8001020:	b580      	push	{r7, lr}
 8001022:	b082      	sub	sp, #8
 8001024:	af00      	add	r7, sp, #0
	uint8_t idAcc = LSM303C_AccReadID();
 8001026:	f001 f951 	bl	80022cc <LSM303C_AccReadID>
 800102a:	4603      	mov	r3, r0
 800102c:	71fb      	strb	r3, [r7, #7]
	if(idAcc != LMS303C_ACC_ID){
 800102e:	79fb      	ldrb	r3, [r7, #7]
 8001030:	2b41      	cmp	r3, #65	@ 0x41
 8001032:	d006      	beq.n	8001042 <accInit+0x22>
		printf("ERR, acc id: 0x%X\r\n",idAcc);
 8001034:	79fb      	ldrb	r3, [r7, #7]
 8001036:	4619      	mov	r1, r3
 8001038:	480a      	ldr	r0, [pc, #40]	@ (8001064 <accInit+0x44>)
 800103a:	f00a fb27 	bl	800b68c <iprintf>
		return 1;
 800103e:	2301      	movs	r3, #1
 8001040:	e00c      	b.n	800105c <accInit+0x3c>
	}

	COMPASS_StatusTypeDef stanAcc = BSP_COMPASS_Init();
 8001042:	f001 fe6f 	bl	8002d24 <BSP_COMPASS_Init>
 8001046:	4603      	mov	r3, r0
 8001048:	71bb      	strb	r3, [r7, #6]
	if(stanAcc == COMPASS_ERROR){
 800104a:	79bb      	ldrb	r3, [r7, #6]
 800104c:	2b01      	cmp	r3, #1
 800104e:	d104      	bne.n	800105a <accInit+0x3a>
		printf("ERR acc init\r\n");
 8001050:	4805      	ldr	r0, [pc, #20]	@ (8001068 <accInit+0x48>)
 8001052:	f00a fb83 	bl	800b75c <puts>
		return 2;
 8001056:	2302      	movs	r3, #2
 8001058:	e000      	b.n	800105c <accInit+0x3c>
	}
	return 0;
 800105a:	2300      	movs	r3, #0
}
 800105c:	4618      	mov	r0, r3
 800105e:	3708      	adds	r7, #8
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}
 8001064:	0800eea8 	.word	0x0800eea8
 8001068:	0800eebc 	.word	0x0800eebc

0800106c <accGetData>:

void accGetData(int16_t accDataRaw[3], float accDataFiltered[3]){
 800106c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001070:	b088      	sub	sp, #32
 8001072:	af04      	add	r7, sp, #16
 8001074:	6078      	str	r0, [r7, #4]
 8001076:	6039      	str	r1, [r7, #0]
	LSM303C_AccReadXYZ(accDataRaw);
 8001078:	6878      	ldr	r0, [r7, #4]
 800107a:	f001 f96a 	bl	8002352 <LSM303C_AccReadXYZ>
	for (int i = 0; i < 3; ++i) {
 800107e:	2300      	movs	r3, #0
 8001080:	60fb      	str	r3, [r7, #12]
 8001082:	e022      	b.n	80010ca <accGetData+0x5e>
		accDataFiltered[i] = LPF_ALPHA * accDataRaw[i] + (1.0f - LPF_ALPHA) * accDataFiltered[i];
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	005b      	lsls	r3, r3, #1
 8001088:	687a      	ldr	r2, [r7, #4]
 800108a:	4413      	add	r3, r2
 800108c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001090:	ee07 3a90 	vmov	s15, r3
 8001094:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001098:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 800111c <accGetData+0xb0>
 800109c:	ee27 7a87 	vmul.f32	s14, s15, s14
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	009b      	lsls	r3, r3, #2
 80010a4:	683a      	ldr	r2, [r7, #0]
 80010a6:	4413      	add	r3, r2
 80010a8:	edd3 7a00 	vldr	s15, [r3]
 80010ac:	eddf 6a1c 	vldr	s13, [pc, #112]	@ 8001120 <accGetData+0xb4>
 80010b0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	009b      	lsls	r3, r3, #2
 80010b8:	683a      	ldr	r2, [r7, #0]
 80010ba:	4413      	add	r3, r2
 80010bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010c0:	edc3 7a00 	vstr	s15, [r3]
	for (int i = 0; i < 3; ++i) {
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	3301      	adds	r3, #1
 80010c8:	60fb      	str	r3, [r7, #12]
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	2b02      	cmp	r3, #2
 80010ce:	ddd9      	ble.n	8001084 <accGetData+0x18>
	}
	printf("Accelerometer: X: %f,Y: %f,Z: %f\r\n",accDataFiltered[0],accDataFiltered[1],accDataFiltered[2]);
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	4618      	mov	r0, r3
 80010d6:	f7ff fa37 	bl	8000548 <__aeabi_f2d>
 80010da:	4680      	mov	r8, r0
 80010dc:	4689      	mov	r9, r1
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	3304      	adds	r3, #4
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	4618      	mov	r0, r3
 80010e6:	f7ff fa2f 	bl	8000548 <__aeabi_f2d>
 80010ea:	4604      	mov	r4, r0
 80010ec:	460d      	mov	r5, r1
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	3308      	adds	r3, #8
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	4618      	mov	r0, r3
 80010f6:	f7ff fa27 	bl	8000548 <__aeabi_f2d>
 80010fa:	4602      	mov	r2, r0
 80010fc:	460b      	mov	r3, r1
 80010fe:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001102:	e9cd 4500 	strd	r4, r5, [sp]
 8001106:	4642      	mov	r2, r8
 8001108:	464b      	mov	r3, r9
 800110a:	4806      	ldr	r0, [pc, #24]	@ (8001124 <accGetData+0xb8>)
 800110c:	f00a fabe 	bl	800b68c <iprintf>
}
 8001110:	bf00      	nop
 8001112:	3710      	adds	r7, #16
 8001114:	46bd      	mov	sp, r7
 8001116:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800111a:	bf00      	nop
 800111c:	3e99999a 	.word	0x3e99999a
 8001120:	3f333333 	.word	0x3f333333
 8001124:	0800eecc 	.word	0x0800eecc

08001128 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b08c      	sub	sp, #48	@ 0x30
 800112c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800112e:	f107 031c 	add.w	r3, r7, #28
 8001132:	2200      	movs	r2, #0
 8001134:	601a      	str	r2, [r3, #0]
 8001136:	605a      	str	r2, [r3, #4]
 8001138:	609a      	str	r2, [r3, #8]
 800113a:	60da      	str	r2, [r3, #12]
 800113c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800113e:	4b82      	ldr	r3, [pc, #520]	@ (8001348 <MX_GPIO_Init+0x220>)
 8001140:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001142:	4a81      	ldr	r2, [pc, #516]	@ (8001348 <MX_GPIO_Init+0x220>)
 8001144:	f043 0304 	orr.w	r3, r3, #4
 8001148:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800114a:	4b7f      	ldr	r3, [pc, #508]	@ (8001348 <MX_GPIO_Init+0x220>)
 800114c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800114e:	f003 0304 	and.w	r3, r3, #4
 8001152:	61bb      	str	r3, [r7, #24]
 8001154:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001156:	4b7c      	ldr	r3, [pc, #496]	@ (8001348 <MX_GPIO_Init+0x220>)
 8001158:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800115a:	4a7b      	ldr	r2, [pc, #492]	@ (8001348 <MX_GPIO_Init+0x220>)
 800115c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001160:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001162:	4b79      	ldr	r3, [pc, #484]	@ (8001348 <MX_GPIO_Init+0x220>)
 8001164:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001166:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800116a:	617b      	str	r3, [r7, #20]
 800116c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800116e:	4b76      	ldr	r3, [pc, #472]	@ (8001348 <MX_GPIO_Init+0x220>)
 8001170:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001172:	4a75      	ldr	r2, [pc, #468]	@ (8001348 <MX_GPIO_Init+0x220>)
 8001174:	f043 0301 	orr.w	r3, r3, #1
 8001178:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800117a:	4b73      	ldr	r3, [pc, #460]	@ (8001348 <MX_GPIO_Init+0x220>)
 800117c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800117e:	f003 0301 	and.w	r3, r3, #1
 8001182:	613b      	str	r3, [r7, #16]
 8001184:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001186:	4b70      	ldr	r3, [pc, #448]	@ (8001348 <MX_GPIO_Init+0x220>)
 8001188:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800118a:	4a6f      	ldr	r2, [pc, #444]	@ (8001348 <MX_GPIO_Init+0x220>)
 800118c:	f043 0302 	orr.w	r3, r3, #2
 8001190:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001192:	4b6d      	ldr	r3, [pc, #436]	@ (8001348 <MX_GPIO_Init+0x220>)
 8001194:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001196:	f003 0302 	and.w	r3, r3, #2
 800119a:	60fb      	str	r3, [r7, #12]
 800119c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800119e:	4b6a      	ldr	r3, [pc, #424]	@ (8001348 <MX_GPIO_Init+0x220>)
 80011a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011a2:	4a69      	ldr	r2, [pc, #420]	@ (8001348 <MX_GPIO_Init+0x220>)
 80011a4:	f043 0310 	orr.w	r3, r3, #16
 80011a8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011aa:	4b67      	ldr	r3, [pc, #412]	@ (8001348 <MX_GPIO_Init+0x220>)
 80011ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011ae:	f003 0310 	and.w	r3, r3, #16
 80011b2:	60bb      	str	r3, [r7, #8]
 80011b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80011b6:	4b64      	ldr	r3, [pc, #400]	@ (8001348 <MX_GPIO_Init+0x220>)
 80011b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011ba:	4a63      	ldr	r2, [pc, #396]	@ (8001348 <MX_GPIO_Init+0x220>)
 80011bc:	f043 0308 	orr.w	r3, r3, #8
 80011c0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011c2:	4b61      	ldr	r3, [pc, #388]	@ (8001348 <MX_GPIO_Init+0x220>)
 80011c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011c6:	f003 0308 	and.w	r3, r3, #8
 80011ca:	607b      	str	r3, [r7, #4]
 80011cc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, MAG_CS_Pin|OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80011ce:	2201      	movs	r2, #1
 80011d0:	f240 2101 	movw	r1, #513	@ 0x201
 80011d4:	485d      	ldr	r0, [pc, #372]	@ (800134c <MX_GPIO_Init+0x224>)
 80011d6:	f002 fa25 	bl	8003624 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD_R_Pin|M3V3_REG_ON_Pin, GPIO_PIN_RESET);
 80011da:	2200      	movs	r2, #0
 80011dc:	210c      	movs	r1, #12
 80011de:	485c      	ldr	r0, [pc, #368]	@ (8001350 <MX_GPIO_Init+0x228>)
 80011e0:	f002 fa20 	bl	8003624 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LD_G_Pin|XL_CS_Pin, GPIO_PIN_RESET);
 80011e4:	2200      	movs	r2, #0
 80011e6:	f240 1101 	movw	r1, #257	@ 0x101
 80011ea:	485a      	ldr	r0, [pc, #360]	@ (8001354 <MX_GPIO_Init+0x22c>)
 80011ec:	f002 fa1a 	bl	8003624 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GYRO_CS_GPIO_Port, GYRO_CS_Pin, GPIO_PIN_SET);
 80011f0:	2201      	movs	r2, #1
 80011f2:	2180      	movs	r1, #128	@ 0x80
 80011f4:	4858      	ldr	r0, [pc, #352]	@ (8001358 <MX_GPIO_Init+0x230>)
 80011f6:	f002 fa15 	bl	8003624 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = MAG_CS_Pin|OTG_FS_PowerSwitchOn_Pin;
 80011fa:	f240 2301 	movw	r3, #513	@ 0x201
 80011fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001200:	2301      	movs	r3, #1
 8001202:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001204:	2300      	movs	r3, #0
 8001206:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001208:	2300      	movs	r3, #0
 800120a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800120c:	f107 031c 	add.w	r3, r7, #28
 8001210:	4619      	mov	r1, r3
 8001212:	484e      	ldr	r0, [pc, #312]	@ (800134c <MX_GPIO_Init+0x224>)
 8001214:	f002 f85c 	bl	80032d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin */
  GPIO_InitStruct.Pin = JOY_CENTER_Pin|JOY_LEFT_Pin|JOY_RIGHT_Pin|JOY_UP_Pin
 8001218:	232f      	movs	r3, #47	@ 0x2f
 800121a:	61fb      	str	r3, [r7, #28]
                          |JOY_DOWN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800121c:	2300      	movs	r3, #0
 800121e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001220:	2302      	movs	r3, #2
 8001222:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001224:	f107 031c 	add.w	r3, r7, #28
 8001228:	4619      	mov	r1, r3
 800122a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800122e:	f002 f84f 	bl	80032d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MFX_WAKEUP_Pin;
 8001232:	2310      	movs	r3, #16
 8001234:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001236:	4b49      	ldr	r3, [pc, #292]	@ (800135c <MX_GPIO_Init+0x234>)
 8001238:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800123a:	2300      	movs	r3, #0
 800123c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MFX_WAKEUP_GPIO_Port, &GPIO_InitStruct);
 800123e:	f107 031c 	add.w	r3, r7, #28
 8001242:	4619      	mov	r1, r3
 8001244:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001248:	f002 f842 	bl	80032d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD_R_Pin;
 800124c:	2304      	movs	r3, #4
 800124e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001250:	2301      	movs	r3, #1
 8001252:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001254:	2301      	movs	r3, #1
 8001256:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001258:	2303      	movs	r3, #3
 800125a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LD_R_GPIO_Port, &GPIO_InitStruct);
 800125c:	f107 031c 	add.w	r3, r7, #28
 8001260:	4619      	mov	r1, r3
 8001262:	483b      	ldr	r0, [pc, #236]	@ (8001350 <MX_GPIO_Init+0x228>)
 8001264:	f002 f834 	bl	80032d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD_G_Pin;
 8001268:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800126c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800126e:	2301      	movs	r3, #1
 8001270:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001272:	2301      	movs	r3, #1
 8001274:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001276:	2303      	movs	r3, #3
 8001278:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LD_G_GPIO_Port, &GPIO_InitStruct);
 800127a:	f107 031c 	add.w	r3, r7, #28
 800127e:	4619      	mov	r1, r3
 8001280:	4834      	ldr	r0, [pc, #208]	@ (8001354 <MX_GPIO_Init+0x22c>)
 8001282:	f002 f825 	bl	80032d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001286:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800128a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800128c:	4b33      	ldr	r3, [pc, #204]	@ (800135c <MX_GPIO_Init+0x234>)
 800128e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001290:	2300      	movs	r3, #0
 8001292:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001294:	f107 031c 	add.w	r3, r7, #28
 8001298:	4619      	mov	r1, r3
 800129a:	482c      	ldr	r0, [pc, #176]	@ (800134c <MX_GPIO_Init+0x224>)
 800129c:	f002 f818 	bl	80032d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = EXT_RST_Pin|GYRO_INT1_Pin;
 80012a0:	2305      	movs	r3, #5
 80012a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80012a4:	4b2d      	ldr	r3, [pc, #180]	@ (800135c <MX_GPIO_Init+0x234>)
 80012a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a8:	2300      	movs	r3, #0
 80012aa:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012ac:	f107 031c 	add.w	r3, r7, #28
 80012b0:	4619      	mov	r1, r3
 80012b2:	4829      	ldr	r0, [pc, #164]	@ (8001358 <MX_GPIO_Init+0x230>)
 80012b4:	f002 f80c 	bl	80032d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = GYRO_CS_Pin;
 80012b8:	2380      	movs	r3, #128	@ 0x80
 80012ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012bc:	2301      	movs	r3, #1
 80012be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c0:	2300      	movs	r3, #0
 80012c2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012c4:	2303      	movs	r3, #3
 80012c6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GYRO_CS_GPIO_Port, &GPIO_InitStruct);
 80012c8:	f107 031c 	add.w	r3, r7, #28
 80012cc:	4619      	mov	r1, r3
 80012ce:	4822      	ldr	r0, [pc, #136]	@ (8001358 <MX_GPIO_Init+0x230>)
 80012d0:	f001 fffe 	bl	80032d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = M3V3_REG_ON_Pin;
 80012d4:	2308      	movs	r3, #8
 80012d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012d8:	2301      	movs	r3, #1
 80012da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012dc:	2300      	movs	r3, #0
 80012de:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012e0:	2300      	movs	r3, #0
 80012e2:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(M3V3_REG_ON_GPIO_Port, &GPIO_InitStruct);
 80012e4:	f107 031c 	add.w	r3, r7, #28
 80012e8:	4619      	mov	r1, r3
 80012ea:	4819      	ldr	r0, [pc, #100]	@ (8001350 <MX_GPIO_Init+0x228>)
 80012ec:	f001 fff0 	bl	80032d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = GYRO_INT2_Pin;
 80012f0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80012f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80012f6:	4b19      	ldr	r3, [pc, #100]	@ (800135c <MX_GPIO_Init+0x234>)
 80012f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012fa:	2300      	movs	r3, #0
 80012fc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GYRO_INT2_GPIO_Port, &GPIO_InitStruct);
 80012fe:	f107 031c 	add.w	r3, r7, #28
 8001302:	4619      	mov	r1, r3
 8001304:	4812      	ldr	r0, [pc, #72]	@ (8001350 <MX_GPIO_Init+0x228>)
 8001306:	f001 ffe3 	bl	80032d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = XL_CS_Pin;
 800130a:	2301      	movs	r3, #1
 800130c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800130e:	2301      	movs	r3, #1
 8001310:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001312:	2300      	movs	r3, #0
 8001314:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001316:	2300      	movs	r3, #0
 8001318:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(XL_CS_GPIO_Port, &GPIO_InitStruct);
 800131a:	f107 031c 	add.w	r3, r7, #28
 800131e:	4619      	mov	r1, r3
 8001320:	480c      	ldr	r0, [pc, #48]	@ (8001354 <MX_GPIO_Init+0x22c>)
 8001322:	f001 ffd5 	bl	80032d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = XL_INT_Pin;
 8001326:	2302      	movs	r3, #2
 8001328:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800132a:	4b0c      	ldr	r3, [pc, #48]	@ (800135c <MX_GPIO_Init+0x234>)
 800132c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800132e:	2300      	movs	r3, #0
 8001330:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(XL_INT_GPIO_Port, &GPIO_InitStruct);
 8001332:	f107 031c 	add.w	r3, r7, #28
 8001336:	4619      	mov	r1, r3
 8001338:	4806      	ldr	r0, [pc, #24]	@ (8001354 <MX_GPIO_Init+0x22c>)
 800133a:	f001 ffc9 	bl	80032d0 <HAL_GPIO_Init>

}
 800133e:	bf00      	nop
 8001340:	3730      	adds	r7, #48	@ 0x30
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	40021000 	.word	0x40021000
 800134c:	48000800 	.word	0x48000800
 8001350:	48000400 	.word	0x48000400
 8001354:	48001000 	.word	0x48001000
 8001358:	48000c00 	.word	0x48000c00
 800135c:	10120000 	.word	0x10120000

08001360 <gyroInit>:
#include "gyroscope.h"

#define LPF_ALPHA 0.1f

uint8_t gyroInit(){
 8001360:	b580      	push	{r7, lr}
 8001362:	b082      	sub	sp, #8
 8001364:	af00      	add	r7, sp, #0
	uint8_t idGyro = L3GD20_ReadID();
 8001366:	f000 fdc4 	bl	8001ef2 <L3GD20_ReadID>
 800136a:	4603      	mov	r3, r0
 800136c:	71fb      	strb	r3, [r7, #7]
	if(idGyro != I_AM_L3GD20){
 800136e:	79fb      	ldrb	r3, [r7, #7]
 8001370:	2bd4      	cmp	r3, #212	@ 0xd4
 8001372:	d006      	beq.n	8001382 <gyroInit+0x22>
		printf("ERR, gyro id: 0x%X\r\n",idGyro);
 8001374:	79fb      	ldrb	r3, [r7, #7]
 8001376:	4619      	mov	r1, r3
 8001378:	480a      	ldr	r0, [pc, #40]	@ (80013a4 <gyroInit+0x44>)
 800137a:	f00a f987 	bl	800b68c <iprintf>
		return 1;
 800137e:	2301      	movs	r3, #1
 8001380:	e00c      	b.n	800139c <gyroInit+0x3c>
	}

	uint8_t stanGyro = BSP_GYRO_Init();
 8001382:	f001 fd4b 	bl	8002e1c <BSP_GYRO_Init>
 8001386:	4603      	mov	r3, r0
 8001388:	71bb      	strb	r3, [r7, #6]
//	uint16_t gyroInit = 0b0001000000001111;
//	L3GD20_Init(gyroInit);
	if(stanGyro == GYRO_ERROR){
 800138a:	79bb      	ldrb	r3, [r7, #6]
 800138c:	2b01      	cmp	r3, #1
 800138e:	d104      	bne.n	800139a <gyroInit+0x3a>
		printf("ERR gyro init\r\n");
 8001390:	4805      	ldr	r0, [pc, #20]	@ (80013a8 <gyroInit+0x48>)
 8001392:	f00a f9e3 	bl	800b75c <puts>
		return 2;
 8001396:	2302      	movs	r3, #2
 8001398:	e000      	b.n	800139c <gyroInit+0x3c>
	}
	return 0;
 800139a:	2300      	movs	r3, #0
}
 800139c:	4618      	mov	r0, r3
 800139e:	3708      	adds	r7, #8
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bd80      	pop	{r7, pc}
 80013a4:	0800eef0 	.word	0x0800eef0
 80013a8:	0800ef08 	.word	0x0800ef08

080013ac <gyroGetData>:

void gyroGetData(float gyroDataFiltered[3]){
 80013ac:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80013b0:	b08a      	sub	sp, #40	@ 0x28
 80013b2:	af04      	add	r7, sp, #16
 80013b4:	6078      	str	r0, [r7, #4]
	float gyroDataRaw[3] = {0};
 80013b6:	f107 0308 	add.w	r3, r7, #8
 80013ba:	2200      	movs	r2, #0
 80013bc:	601a      	str	r2, [r3, #0]
 80013be:	605a      	str	r2, [r3, #4]
 80013c0:	609a      	str	r2, [r3, #8]
	L3GD20_ReadXYZAngRate(gyroDataRaw);
 80013c2:	f107 0308 	add.w	r3, r7, #8
 80013c6:	4618      	mov	r0, r3
 80013c8:	f000 feb4 	bl	8002134 <L3GD20_ReadXYZAngRate>
	for (int i = 0; i < 3; ++i) {
 80013cc:	2300      	movs	r3, #0
 80013ce:	617b      	str	r3, [r7, #20]
 80013d0:	e01f      	b.n	8001412 <gyroGetData+0x66>
		gyroDataFiltered[i] = LPF_ALPHA * gyroDataRaw[i] + (1.0f - LPF_ALPHA) * gyroDataFiltered[i];
 80013d2:	697b      	ldr	r3, [r7, #20]
 80013d4:	009b      	lsls	r3, r3, #2
 80013d6:	3318      	adds	r3, #24
 80013d8:	443b      	add	r3, r7
 80013da:	3b10      	subs	r3, #16
 80013dc:	edd3 7a00 	vldr	s15, [r3]
 80013e0:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 8001464 <gyroGetData+0xb8>
 80013e4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80013e8:	697b      	ldr	r3, [r7, #20]
 80013ea:	009b      	lsls	r3, r3, #2
 80013ec:	687a      	ldr	r2, [r7, #4]
 80013ee:	4413      	add	r3, r2
 80013f0:	edd3 7a00 	vldr	s15, [r3]
 80013f4:	eddf 6a1c 	vldr	s13, [pc, #112]	@ 8001468 <gyroGetData+0xbc>
 80013f8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80013fc:	697b      	ldr	r3, [r7, #20]
 80013fe:	009b      	lsls	r3, r3, #2
 8001400:	687a      	ldr	r2, [r7, #4]
 8001402:	4413      	add	r3, r2
 8001404:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001408:	edc3 7a00 	vstr	s15, [r3]
	for (int i = 0; i < 3; ++i) {
 800140c:	697b      	ldr	r3, [r7, #20]
 800140e:	3301      	adds	r3, #1
 8001410:	617b      	str	r3, [r7, #20]
 8001412:	697b      	ldr	r3, [r7, #20]
 8001414:	2b02      	cmp	r3, #2
 8001416:	dddc      	ble.n	80013d2 <gyroGetData+0x26>
	}
	printf("Gyroscope : X: %f,Y: %f,Z: %f\r\n",gyroDataFiltered[0],gyroDataFiltered[1],gyroDataFiltered[2]);
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	4618      	mov	r0, r3
 800141e:	f7ff f893 	bl	8000548 <__aeabi_f2d>
 8001422:	4680      	mov	r8, r0
 8001424:	4689      	mov	r9, r1
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	3304      	adds	r3, #4
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	4618      	mov	r0, r3
 800142e:	f7ff f88b 	bl	8000548 <__aeabi_f2d>
 8001432:	4604      	mov	r4, r0
 8001434:	460d      	mov	r5, r1
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	3308      	adds	r3, #8
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	4618      	mov	r0, r3
 800143e:	f7ff f883 	bl	8000548 <__aeabi_f2d>
 8001442:	4602      	mov	r2, r0
 8001444:	460b      	mov	r3, r1
 8001446:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800144a:	e9cd 4500 	strd	r4, r5, [sp]
 800144e:	4642      	mov	r2, r8
 8001450:	464b      	mov	r3, r9
 8001452:	4806      	ldr	r0, [pc, #24]	@ (800146c <gyroGetData+0xc0>)
 8001454:	f00a f91a 	bl	800b68c <iprintf>
}
 8001458:	bf00      	nop
 800145a:	3718      	adds	r7, #24
 800145c:	46bd      	mov	sp, r7
 800145e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001462:	bf00      	nop
 8001464:	3dcccccd 	.word	0x3dcccccd
 8001468:	3f666666 	.word	0x3f666666
 800146c:	0800ef18 	.word	0x0800ef18

08001470 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8001474:	4b1b      	ldr	r3, [pc, #108]	@ (80014e4 <MX_I2C1_Init+0x74>)
 8001476:	4a1c      	ldr	r2, [pc, #112]	@ (80014e8 <MX_I2C1_Init+0x78>)
 8001478:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 800147a:	4b1a      	ldr	r3, [pc, #104]	@ (80014e4 <MX_I2C1_Init+0x74>)
 800147c:	4a1b      	ldr	r2, [pc, #108]	@ (80014ec <MX_I2C1_Init+0x7c>)
 800147e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001480:	4b18      	ldr	r3, [pc, #96]	@ (80014e4 <MX_I2C1_Init+0x74>)
 8001482:	2200      	movs	r2, #0
 8001484:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001486:	4b17      	ldr	r3, [pc, #92]	@ (80014e4 <MX_I2C1_Init+0x74>)
 8001488:	2201      	movs	r2, #1
 800148a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800148c:	4b15      	ldr	r3, [pc, #84]	@ (80014e4 <MX_I2C1_Init+0x74>)
 800148e:	2200      	movs	r2, #0
 8001490:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001492:	4b14      	ldr	r3, [pc, #80]	@ (80014e4 <MX_I2C1_Init+0x74>)
 8001494:	2200      	movs	r2, #0
 8001496:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001498:	4b12      	ldr	r3, [pc, #72]	@ (80014e4 <MX_I2C1_Init+0x74>)
 800149a:	2200      	movs	r2, #0
 800149c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800149e:	4b11      	ldr	r3, [pc, #68]	@ (80014e4 <MX_I2C1_Init+0x74>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80014a4:	4b0f      	ldr	r3, [pc, #60]	@ (80014e4 <MX_I2C1_Init+0x74>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80014aa:	480e      	ldr	r0, [pc, #56]	@ (80014e4 <MX_I2C1_Init+0x74>)
 80014ac:	f002 f8ec 	bl	8003688 <HAL_I2C_Init>
 80014b0:	4603      	mov	r3, r0
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d001      	beq.n	80014ba <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80014b6:	f000 f94f 	bl	8001758 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80014ba:	2100      	movs	r1, #0
 80014bc:	4809      	ldr	r0, [pc, #36]	@ (80014e4 <MX_I2C1_Init+0x74>)
 80014be:	f002 f972 	bl	80037a6 <HAL_I2CEx_ConfigAnalogFilter>
 80014c2:	4603      	mov	r3, r0
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d001      	beq.n	80014cc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80014c8:	f000 f946 	bl	8001758 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80014cc:	2100      	movs	r1, #0
 80014ce:	4805      	ldr	r0, [pc, #20]	@ (80014e4 <MX_I2C1_Init+0x74>)
 80014d0:	f002 f9b4 	bl	800383c <HAL_I2CEx_ConfigDigitalFilter>
 80014d4:	4603      	mov	r3, r0
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d001      	beq.n	80014de <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80014da:	f000 f93d 	bl	8001758 <Error_Handler>
  }

}
 80014de:	bf00      	nop
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	200003f4 	.word	0x200003f4
 80014e8:	40005400 	.word	0x40005400
 80014ec:	10909cec 	.word	0x10909cec

080014f0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b08a      	sub	sp, #40	@ 0x28
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014f8:	f107 0314 	add.w	r3, r7, #20
 80014fc:	2200      	movs	r2, #0
 80014fe:	601a      	str	r2, [r3, #0]
 8001500:	605a      	str	r2, [r3, #4]
 8001502:	609a      	str	r2, [r3, #8]
 8001504:	60da      	str	r2, [r3, #12]
 8001506:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	4a17      	ldr	r2, [pc, #92]	@ (800156c <HAL_I2C_MspInit+0x7c>)
 800150e:	4293      	cmp	r3, r2
 8001510:	d127      	bne.n	8001562 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001512:	4b17      	ldr	r3, [pc, #92]	@ (8001570 <HAL_I2C_MspInit+0x80>)
 8001514:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001516:	4a16      	ldr	r2, [pc, #88]	@ (8001570 <HAL_I2C_MspInit+0x80>)
 8001518:	f043 0302 	orr.w	r3, r3, #2
 800151c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800151e:	4b14      	ldr	r3, [pc, #80]	@ (8001570 <HAL_I2C_MspInit+0x80>)
 8001520:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001522:	f003 0302 	and.w	r3, r3, #2
 8001526:	613b      	str	r3, [r7, #16]
 8001528:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 800152a:	23c0      	movs	r3, #192	@ 0xc0
 800152c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800152e:	2312      	movs	r3, #18
 8001530:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001532:	2301      	movs	r3, #1
 8001534:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001536:	2303      	movs	r3, #3
 8001538:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800153a:	2304      	movs	r3, #4
 800153c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800153e:	f107 0314 	add.w	r3, r7, #20
 8001542:	4619      	mov	r1, r3
 8001544:	480b      	ldr	r0, [pc, #44]	@ (8001574 <HAL_I2C_MspInit+0x84>)
 8001546:	f001 fec3 	bl	80032d0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800154a:	4b09      	ldr	r3, [pc, #36]	@ (8001570 <HAL_I2C_MspInit+0x80>)
 800154c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800154e:	4a08      	ldr	r2, [pc, #32]	@ (8001570 <HAL_I2C_MspInit+0x80>)
 8001550:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001554:	6593      	str	r3, [r2, #88]	@ 0x58
 8001556:	4b06      	ldr	r3, [pc, #24]	@ (8001570 <HAL_I2C_MspInit+0x80>)
 8001558:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800155a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800155e:	60fb      	str	r3, [r7, #12]
 8001560:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001562:	bf00      	nop
 8001564:	3728      	adds	r7, #40	@ 0x28
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	40005400 	.word	0x40005400
 8001570:	40021000 	.word	0x40021000
 8001574:	48000400 	.word	0x48000400

08001578 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int _write(int file, char *ptr, int len) {
 8001578:	b580      	push	{r7, lr}
 800157a:	b084      	sub	sp, #16
 800157c:	af00      	add	r7, sp, #0
 800157e:	60f8      	str	r0, [r7, #12]
 8001580:	60b9      	str	r1, [r7, #8]
 8001582:	607a      	str	r2, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t*) ptr, len, 100);
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	b29a      	uxth	r2, r3
 8001588:	2364      	movs	r3, #100	@ 0x64
 800158a:	68b9      	ldr	r1, [r7, #8]
 800158c:	4803      	ldr	r0, [pc, #12]	@ (800159c <_write+0x24>)
 800158e:	f004 ffdf 	bl	8006550 <HAL_UART_Transmit>
    return len;
 8001592:	687b      	ldr	r3, [r7, #4]
}
 8001594:	4618      	mov	r0, r3
 8001596:	3710      	adds	r7, #16
 8001598:	46bd      	mov	sp, r7
 800159a:	bd80      	pop	{r7, pc}
 800159c:	20000518 	.word	0x20000518

080015a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80015a4:	f001 fca2 	bl	8002eec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80015a8:	f000 f838 	bl	800161c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80015ac:	f7ff fdbc 	bl	8001128 <MX_GPIO_Init>
  MX_I2C1_Init();
 80015b0:	f7ff ff5e 	bl	8001470 <MX_I2C1_Init>
  MX_SPI2_Init();
 80015b4:	f000 f8de 	bl	8001774 <MX_SPI2_Init>
  MX_USART2_UART_Init();
 80015b8:	f000 fafe 	bl	8001bb8 <MX_USART2_UART_Init>
  MX_TIM6_Init();
 80015bc:	f000 faa6 	bl	8001b0c <MX_TIM6_Init>
  MX_USB_DEVICE_Init();
 80015c0:	f008 fb4c 	bl	8009c5c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

  printf(" - - Start programu - - \r\n");
 80015c4:	4810      	ldr	r0, [pc, #64]	@ (8001608 <main+0x68>)
 80015c6:	f00a f8c9 	bl	800b75c <puts>

  if(!gyroInit()){Error_Handler();}
 80015ca:	f7ff fec9 	bl	8001360 <gyroInit>
 80015ce:	4603      	mov	r3, r0
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d101      	bne.n	80015d8 <main+0x38>
 80015d4:	f000 f8c0 	bl	8001758 <Error_Handler>
  if(!accInit()){Error_Handler();}
 80015d8:	f7ff fd22 	bl	8001020 <accInit>
 80015dc:	4603      	mov	r3, r0
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d101      	bne.n	80015e6 <main+0x46>
 80015e2:	f000 f8b9 	bl	8001758 <Error_Handler>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  gyroGetData(filteredGyro);
 80015e6:	4809      	ldr	r0, [pc, #36]	@ (800160c <main+0x6c>)
 80015e8:	f7ff fee0 	bl	80013ac <gyroGetData>
	  accGetData(dataAcc,filteredAcc);
 80015ec:	4908      	ldr	r1, [pc, #32]	@ (8001610 <main+0x70>)
 80015ee:	4809      	ldr	r0, [pc, #36]	@ (8001614 <main+0x74>)
 80015f0:	f7ff fd3c 	bl	800106c <accGetData>
	  AccToMouse_Process(mousehid,filteredAcc);
 80015f4:	4b08      	ldr	r3, [pc, #32]	@ (8001618 <main+0x78>)
 80015f6:	4906      	ldr	r1, [pc, #24]	@ (8001610 <main+0x70>)
 80015f8:	6818      	ldr	r0, [r3, #0]
 80015fa:	f000 fb59 	bl	8001cb0 <AccToMouse_Process>

	  HAL_Delay(20);
 80015fe:	2014      	movs	r0, #20
 8001600:	f001 fcf0 	bl	8002fe4 <HAL_Delay>
	  gyroGetData(filteredGyro);
 8001604:	bf00      	nop
 8001606:	e7ee      	b.n	80015e6 <main+0x46>
 8001608:	0800ef38 	.word	0x0800ef38
 800160c:	20000440 	.word	0x20000440
 8001610:	20000454 	.word	0x20000454
 8001614:	2000044c 	.word	0x2000044c
 8001618:	20000460 	.word	0x20000460

0800161c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b0b8      	sub	sp, #224	@ 0xe0
 8001620:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001622:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001626:	2244      	movs	r2, #68	@ 0x44
 8001628:	2100      	movs	r1, #0
 800162a:	4618      	mov	r0, r3
 800162c:	f00a f998 	bl	800b960 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001630:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8001634:	2200      	movs	r2, #0
 8001636:	601a      	str	r2, [r3, #0]
 8001638:	605a      	str	r2, [r3, #4]
 800163a:	609a      	str	r2, [r3, #8]
 800163c:	60da      	str	r2, [r3, #12]
 800163e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001640:	463b      	mov	r3, r7
 8001642:	2288      	movs	r2, #136	@ 0x88
 8001644:	2100      	movs	r1, #0
 8001646:	4618      	mov	r0, r3
 8001648:	f00a f98a 	bl	800b960 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800164c:	f003 f9ca 	bl	80049e4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001650:	4b40      	ldr	r3, [pc, #256]	@ (8001754 <SystemClock_Config+0x138>)
 8001652:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001656:	4a3f      	ldr	r2, [pc, #252]	@ (8001754 <SystemClock_Config+0x138>)
 8001658:	f023 0318 	bic.w	r3, r3, #24
 800165c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8001660:	2314      	movs	r3, #20
 8001662:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001666:	2301      	movs	r3, #1
 8001668:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800166c:	2301      	movs	r3, #1
 800166e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001672:	2300      	movs	r3, #0
 8001674:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001678:	2360      	movs	r3, #96	@ 0x60
 800167a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800167e:	2302      	movs	r3, #2
 8001680:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001684:	2301      	movs	r3, #1
 8001686:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 800168a:	2301      	movs	r3, #1
 800168c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
  RCC_OscInitStruct.PLL.PLLN = 40;
 8001690:	2328      	movs	r3, #40	@ 0x28
 8001692:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001696:	2307      	movs	r3, #7
 8001698:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800169c:	2302      	movs	r3, #2
 800169e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80016a2:	2302      	movs	r3, #2
 80016a4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016a8:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80016ac:	4618      	mov	r0, r3
 80016ae:	f003 fa1d 	bl	8004aec <HAL_RCC_OscConfig>
 80016b2:	4603      	mov	r3, r0
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d001      	beq.n	80016bc <SystemClock_Config+0xa0>
  {
    Error_Handler();
 80016b8:	f000 f84e 	bl	8001758 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016bc:	230f      	movs	r3, #15
 80016be:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016c2:	2303      	movs	r3, #3
 80016c4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016c8:	2300      	movs	r3, #0
 80016ca:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80016ce:	2300      	movs	r3, #0
 80016d0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80016d4:	2300      	movs	r3, #0
 80016d6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80016da:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 80016de:	2104      	movs	r1, #4
 80016e0:	4618      	mov	r0, r3
 80016e2:	f003 fdeb 	bl	80052bc <HAL_RCC_ClockConfig>
 80016e6:	4603      	mov	r3, r0
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d001      	beq.n	80016f0 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80016ec:	f000 f834 	bl	8001758 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1
 80016f0:	f242 0342 	movw	r3, #8258	@ 0x2042
 80016f4:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_USB;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80016f6:	2300      	movs	r3, #0
 80016f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80016fa:	2300      	movs	r3, #0
 80016fc:	653b      	str	r3, [r7, #80]	@ 0x50
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 80016fe:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8001702:	66fb      	str	r3, [r7, #108]	@ 0x6c
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8001704:	2301      	movs	r3, #1
 8001706:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001708:	2301      	movs	r3, #1
 800170a:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 800170c:	2318      	movs	r3, #24
 800170e:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001710:	2307      	movs	r3, #7
 8001712:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001714:	2302      	movs	r3, #2
 8001716:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001718:	2302      	movs	r3, #2
 800171a:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 800171c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001720:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001722:	463b      	mov	r3, r7
 8001724:	4618      	mov	r0, r3
 8001726:	f003 ffcf 	bl	80056c8 <HAL_RCCEx_PeriphCLKConfig>
 800172a:	4603      	mov	r3, r0
 800172c:	2b00      	cmp	r3, #0
 800172e:	d001      	beq.n	8001734 <SystemClock_Config+0x118>
  {
    Error_Handler();
 8001730:	f000 f812 	bl	8001758 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001734:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001738:	f003 f972 	bl	8004a20 <HAL_PWREx_ControlVoltageScaling>
 800173c:	4603      	mov	r3, r0
 800173e:	2b00      	cmp	r3, #0
 8001740:	d001      	beq.n	8001746 <SystemClock_Config+0x12a>
  {
    Error_Handler();
 8001742:	f000 f809 	bl	8001758 <Error_Handler>
  }
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8001746:	f004 faa9 	bl	8005c9c <HAL_RCCEx_EnableMSIPLLMode>
}
 800174a:	bf00      	nop
 800174c:	37e0      	adds	r7, #224	@ 0xe0
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	40021000 	.word	0x40021000

08001758 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_2);
 800175c:	2104      	movs	r1, #4
 800175e:	4804      	ldr	r0, [pc, #16]	@ (8001770 <Error_Handler+0x18>)
 8001760:	f001 ff78 	bl	8003654 <HAL_GPIO_TogglePin>
	HAL_Delay(500);
 8001764:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001768:	f001 fc3c 	bl	8002fe4 <HAL_Delay>

  /* USER CODE END Error_Handler_Debug */
}
 800176c:	bf00      	nop
 800176e:	bd80      	pop	{r7, pc}
 8001770:	48000400 	.word	0x48000400

08001774 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	af00      	add	r7, sp, #0

  hspi2.Instance = SPI2;
 8001778:	4b1b      	ldr	r3, [pc, #108]	@ (80017e8 <MX_SPI2_Init+0x74>)
 800177a:	4a1c      	ldr	r2, [pc, #112]	@ (80017ec <MX_SPI2_Init+0x78>)
 800177c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800177e:	4b1a      	ldr	r3, [pc, #104]	@ (80017e8 <MX_SPI2_Init+0x74>)
 8001780:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001784:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001786:	4b18      	ldr	r3, [pc, #96]	@ (80017e8 <MX_SPI2_Init+0x74>)
 8001788:	2200      	movs	r2, #0
 800178a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800178c:	4b16      	ldr	r3, [pc, #88]	@ (80017e8 <MX_SPI2_Init+0x74>)
 800178e:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8001792:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001794:	4b14      	ldr	r3, [pc, #80]	@ (80017e8 <MX_SPI2_Init+0x74>)
 8001796:	2200      	movs	r2, #0
 8001798:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800179a:	4b13      	ldr	r3, [pc, #76]	@ (80017e8 <MX_SPI2_Init+0x74>)
 800179c:	2200      	movs	r2, #0
 800179e:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80017a0:	4b11      	ldr	r3, [pc, #68]	@ (80017e8 <MX_SPI2_Init+0x74>)
 80017a2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80017a6:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80017a8:	4b0f      	ldr	r3, [pc, #60]	@ (80017e8 <MX_SPI2_Init+0x74>)
 80017aa:	2220      	movs	r2, #32
 80017ac:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80017ae:	4b0e      	ldr	r3, [pc, #56]	@ (80017e8 <MX_SPI2_Init+0x74>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80017b4:	4b0c      	ldr	r3, [pc, #48]	@ (80017e8 <MX_SPI2_Init+0x74>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80017ba:	4b0b      	ldr	r3, [pc, #44]	@ (80017e8 <MX_SPI2_Init+0x74>)
 80017bc:	2200      	movs	r2, #0
 80017be:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 80017c0:	4b09      	ldr	r3, [pc, #36]	@ (80017e8 <MX_SPI2_Init+0x74>)
 80017c2:	2207      	movs	r2, #7
 80017c4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80017c6:	4b08      	ldr	r3, [pc, #32]	@ (80017e8 <MX_SPI2_Init+0x74>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80017cc:	4b06      	ldr	r3, [pc, #24]	@ (80017e8 <MX_SPI2_Init+0x74>)
 80017ce:	2208      	movs	r2, #8
 80017d0:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80017d2:	4805      	ldr	r0, [pc, #20]	@ (80017e8 <MX_SPI2_Init+0x74>)
 80017d4:	f004 fc44 	bl	8006060 <HAL_SPI_Init>
 80017d8:	4603      	mov	r3, r0
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d001      	beq.n	80017e2 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80017de:	f7ff ffbb 	bl	8001758 <Error_Handler>
  }

}
 80017e2:	bf00      	nop
 80017e4:	bd80      	pop	{r7, pc}
 80017e6:	bf00      	nop
 80017e8:	20000464 	.word	0x20000464
 80017ec:	40003800 	.word	0x40003800

080017f0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b08a      	sub	sp, #40	@ 0x28
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017f8:	f107 0314 	add.w	r3, r7, #20
 80017fc:	2200      	movs	r2, #0
 80017fe:	601a      	str	r2, [r3, #0]
 8001800:	605a      	str	r2, [r3, #4]
 8001802:	609a      	str	r2, [r3, #8]
 8001804:	60da      	str	r2, [r3, #12]
 8001806:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	4a17      	ldr	r2, [pc, #92]	@ (800186c <HAL_SPI_MspInit+0x7c>)
 800180e:	4293      	cmp	r3, r2
 8001810:	d127      	bne.n	8001862 <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001812:	4b17      	ldr	r3, [pc, #92]	@ (8001870 <HAL_SPI_MspInit+0x80>)
 8001814:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001816:	4a16      	ldr	r2, [pc, #88]	@ (8001870 <HAL_SPI_MspInit+0x80>)
 8001818:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800181c:	6593      	str	r3, [r2, #88]	@ 0x58
 800181e:	4b14      	ldr	r3, [pc, #80]	@ (8001870 <HAL_SPI_MspInit+0x80>)
 8001820:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001822:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001826:	613b      	str	r3, [r7, #16]
 8001828:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800182a:	4b11      	ldr	r3, [pc, #68]	@ (8001870 <HAL_SPI_MspInit+0x80>)
 800182c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800182e:	4a10      	ldr	r2, [pc, #64]	@ (8001870 <HAL_SPI_MspInit+0x80>)
 8001830:	f043 0308 	orr.w	r3, r3, #8
 8001834:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001836:	4b0e      	ldr	r3, [pc, #56]	@ (8001870 <HAL_SPI_MspInit+0x80>)
 8001838:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800183a:	f003 0308 	and.w	r3, r3, #8
 800183e:	60fb      	str	r3, [r7, #12]
 8001840:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PD1     ------> SPI2_SCK
    PD3     ------> SPI2_MISO
    PD4     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = MEMS_SCK_Pin|MEMS_MISO_Pin|MEMS_MOSI_Pin;
 8001842:	231a      	movs	r3, #26
 8001844:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001846:	2302      	movs	r3, #2
 8001848:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800184a:	2300      	movs	r3, #0
 800184c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800184e:	2303      	movs	r3, #3
 8001850:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001852:	2305      	movs	r3, #5
 8001854:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001856:	f107 0314 	add.w	r3, r7, #20
 800185a:	4619      	mov	r1, r3
 800185c:	4805      	ldr	r0, [pc, #20]	@ (8001874 <HAL_SPI_MspInit+0x84>)
 800185e:	f001 fd37 	bl	80032d0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8001862:	bf00      	nop
 8001864:	3728      	adds	r7, #40	@ 0x28
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}
 800186a:	bf00      	nop
 800186c:	40003800 	.word	0x40003800
 8001870:	40021000 	.word	0x40021000
 8001874:	48000c00 	.word	0x48000c00

08001878 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001878:	b480      	push	{r7}
 800187a:	b083      	sub	sp, #12
 800187c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800187e:	4b0f      	ldr	r3, [pc, #60]	@ (80018bc <HAL_MspInit+0x44>)
 8001880:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001882:	4a0e      	ldr	r2, [pc, #56]	@ (80018bc <HAL_MspInit+0x44>)
 8001884:	f043 0301 	orr.w	r3, r3, #1
 8001888:	6613      	str	r3, [r2, #96]	@ 0x60
 800188a:	4b0c      	ldr	r3, [pc, #48]	@ (80018bc <HAL_MspInit+0x44>)
 800188c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800188e:	f003 0301 	and.w	r3, r3, #1
 8001892:	607b      	str	r3, [r7, #4]
 8001894:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001896:	4b09      	ldr	r3, [pc, #36]	@ (80018bc <HAL_MspInit+0x44>)
 8001898:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800189a:	4a08      	ldr	r2, [pc, #32]	@ (80018bc <HAL_MspInit+0x44>)
 800189c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80018a0:	6593      	str	r3, [r2, #88]	@ 0x58
 80018a2:	4b06      	ldr	r3, [pc, #24]	@ (80018bc <HAL_MspInit+0x44>)
 80018a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018aa:	603b      	str	r3, [r7, #0]
 80018ac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018ae:	bf00      	nop
 80018b0:	370c      	adds	r7, #12
 80018b2:	46bd      	mov	sp, r7
 80018b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b8:	4770      	bx	lr
 80018ba:	bf00      	nop
 80018bc:	40021000 	.word	0x40021000

080018c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018c0:	b480      	push	{r7}
 80018c2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80018c4:	bf00      	nop
 80018c6:	46bd      	mov	sp, r7
 80018c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018cc:	4770      	bx	lr

080018ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018ce:	b480      	push	{r7}
 80018d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018d2:	bf00      	nop
 80018d4:	e7fd      	b.n	80018d2 <HardFault_Handler+0x4>

080018d6 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018d6:	b480      	push	{r7}
 80018d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018da:	bf00      	nop
 80018dc:	e7fd      	b.n	80018da <MemManage_Handler+0x4>

080018de <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018de:	b480      	push	{r7}
 80018e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018e2:	bf00      	nop
 80018e4:	e7fd      	b.n	80018e2 <BusFault_Handler+0x4>

080018e6 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018e6:	b480      	push	{r7}
 80018e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018ea:	bf00      	nop
 80018ec:	e7fd      	b.n	80018ea <UsageFault_Handler+0x4>

080018ee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018ee:	b480      	push	{r7}
 80018f0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018f2:	bf00      	nop
 80018f4:	46bd      	mov	sp, r7
 80018f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fa:	4770      	bx	lr

080018fc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018fc:	b480      	push	{r7}
 80018fe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001900:	bf00      	nop
 8001902:	46bd      	mov	sp, r7
 8001904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001908:	4770      	bx	lr

0800190a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800190a:	b480      	push	{r7}
 800190c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800190e:	bf00      	nop
 8001910:	46bd      	mov	sp, r7
 8001912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001916:	4770      	bx	lr

08001918 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800191c:	f001 fb42 	bl	8002fa4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001920:	bf00      	nop
 8001922:	bd80      	pop	{r7, pc}

08001924 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001928:	4802      	ldr	r0, [pc, #8]	@ (8001934 <USART2_IRQHandler+0x10>)
 800192a:	f004 fea3 	bl	8006674 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800192e:	bf00      	nop
 8001930:	bd80      	pop	{r7, pc}
 8001932:	bf00      	nop
 8001934:	20000518 	.word	0x20000518

08001938 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800193c:	4802      	ldr	r0, [pc, #8]	@ (8001948 <OTG_FS_IRQHandler+0x10>)
 800193e:	f002 f91c 	bl	8003b7a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001942:	bf00      	nop
 8001944:	bd80      	pop	{r7, pc}
 8001946:	bf00      	nop
 8001948:	20000ae8 	.word	0x20000ae8

0800194c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800194c:	b480      	push	{r7}
 800194e:	af00      	add	r7, sp, #0
	return 1;
 8001950:	2301      	movs	r3, #1
}
 8001952:	4618      	mov	r0, r3
 8001954:	46bd      	mov	sp, r7
 8001956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195a:	4770      	bx	lr

0800195c <_kill>:

int _kill(int pid, int sig)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b082      	sub	sp, #8
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
 8001964:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001966:	f00a f85d 	bl	800ba24 <__errno>
 800196a:	4603      	mov	r3, r0
 800196c:	2216      	movs	r2, #22
 800196e:	601a      	str	r2, [r3, #0]
	return -1;
 8001970:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001974:	4618      	mov	r0, r3
 8001976:	3708      	adds	r7, #8
 8001978:	46bd      	mov	sp, r7
 800197a:	bd80      	pop	{r7, pc}

0800197c <_exit>:

void _exit (int status)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b082      	sub	sp, #8
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001984:	f04f 31ff 	mov.w	r1, #4294967295
 8001988:	6878      	ldr	r0, [r7, #4]
 800198a:	f7ff ffe7 	bl	800195c <_kill>
	while (1) {}		/* Make sure we hang here */
 800198e:	bf00      	nop
 8001990:	e7fd      	b.n	800198e <_exit+0x12>

08001992 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001992:	b580      	push	{r7, lr}
 8001994:	b086      	sub	sp, #24
 8001996:	af00      	add	r7, sp, #0
 8001998:	60f8      	str	r0, [r7, #12]
 800199a:	60b9      	str	r1, [r7, #8]
 800199c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800199e:	2300      	movs	r3, #0
 80019a0:	617b      	str	r3, [r7, #20]
 80019a2:	e00a      	b.n	80019ba <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80019a4:	f3af 8000 	nop.w
 80019a8:	4601      	mov	r1, r0
 80019aa:	68bb      	ldr	r3, [r7, #8]
 80019ac:	1c5a      	adds	r2, r3, #1
 80019ae:	60ba      	str	r2, [r7, #8]
 80019b0:	b2ca      	uxtb	r2, r1
 80019b2:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019b4:	697b      	ldr	r3, [r7, #20]
 80019b6:	3301      	adds	r3, #1
 80019b8:	617b      	str	r3, [r7, #20]
 80019ba:	697a      	ldr	r2, [r7, #20]
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	429a      	cmp	r2, r3
 80019c0:	dbf0      	blt.n	80019a4 <_read+0x12>
	}

return len;
 80019c2:	687b      	ldr	r3, [r7, #4]
}
 80019c4:	4618      	mov	r0, r3
 80019c6:	3718      	adds	r7, #24
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bd80      	pop	{r7, pc}

080019cc <_close>:
	}
	return len;
}

int _close(int file)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b083      	sub	sp, #12
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
	return -1;
 80019d4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80019d8:	4618      	mov	r0, r3
 80019da:	370c      	adds	r7, #12
 80019dc:	46bd      	mov	sp, r7
 80019de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e2:	4770      	bx	lr

080019e4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80019e4:	b480      	push	{r7}
 80019e6:	b083      	sub	sp, #12
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
 80019ec:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80019f4:	605a      	str	r2, [r3, #4]
	return 0;
 80019f6:	2300      	movs	r3, #0
}
 80019f8:	4618      	mov	r0, r3
 80019fa:	370c      	adds	r7, #12
 80019fc:	46bd      	mov	sp, r7
 80019fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a02:	4770      	bx	lr

08001a04 <_isatty>:

int _isatty(int file)
{
 8001a04:	b480      	push	{r7}
 8001a06:	b083      	sub	sp, #12
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
	return 1;
 8001a0c:	2301      	movs	r3, #1
}
 8001a0e:	4618      	mov	r0, r3
 8001a10:	370c      	adds	r7, #12
 8001a12:	46bd      	mov	sp, r7
 8001a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a18:	4770      	bx	lr

08001a1a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001a1a:	b480      	push	{r7}
 8001a1c:	b085      	sub	sp, #20
 8001a1e:	af00      	add	r7, sp, #0
 8001a20:	60f8      	str	r0, [r7, #12]
 8001a22:	60b9      	str	r1, [r7, #8]
 8001a24:	607a      	str	r2, [r7, #4]
	return 0;
 8001a26:	2300      	movs	r3, #0
}
 8001a28:	4618      	mov	r0, r3
 8001a2a:	3714      	adds	r7, #20
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a32:	4770      	bx	lr

08001a34 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b086      	sub	sp, #24
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a3c:	4a14      	ldr	r2, [pc, #80]	@ (8001a90 <_sbrk+0x5c>)
 8001a3e:	4b15      	ldr	r3, [pc, #84]	@ (8001a94 <_sbrk+0x60>)
 8001a40:	1ad3      	subs	r3, r2, r3
 8001a42:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a44:	697b      	ldr	r3, [r7, #20]
 8001a46:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a48:	4b13      	ldr	r3, [pc, #76]	@ (8001a98 <_sbrk+0x64>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d102      	bne.n	8001a56 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a50:	4b11      	ldr	r3, [pc, #68]	@ (8001a98 <_sbrk+0x64>)
 8001a52:	4a12      	ldr	r2, [pc, #72]	@ (8001a9c <_sbrk+0x68>)
 8001a54:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a56:	4b10      	ldr	r3, [pc, #64]	@ (8001a98 <_sbrk+0x64>)
 8001a58:	681a      	ldr	r2, [r3, #0]
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	4413      	add	r3, r2
 8001a5e:	693a      	ldr	r2, [r7, #16]
 8001a60:	429a      	cmp	r2, r3
 8001a62:	d207      	bcs.n	8001a74 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a64:	f009 ffde 	bl	800ba24 <__errno>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	220c      	movs	r2, #12
 8001a6c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a6e:	f04f 33ff 	mov.w	r3, #4294967295
 8001a72:	e009      	b.n	8001a88 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a74:	4b08      	ldr	r3, [pc, #32]	@ (8001a98 <_sbrk+0x64>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a7a:	4b07      	ldr	r3, [pc, #28]	@ (8001a98 <_sbrk+0x64>)
 8001a7c:	681a      	ldr	r2, [r3, #0]
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	4413      	add	r3, r2
 8001a82:	4a05      	ldr	r2, [pc, #20]	@ (8001a98 <_sbrk+0x64>)
 8001a84:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a86:	68fb      	ldr	r3, [r7, #12]
}
 8001a88:	4618      	mov	r0, r3
 8001a8a:	3718      	adds	r7, #24
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bd80      	pop	{r7, pc}
 8001a90:	20018000 	.word	0x20018000
 8001a94:	00000400 	.word	0x00000400
 8001a98:	200004c8 	.word	0x200004c8
 8001a9c:	20001040 	.word	0x20001040

08001aa0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001aa4:	4b17      	ldr	r3, [pc, #92]	@ (8001b04 <SystemInit+0x64>)
 8001aa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001aaa:	4a16      	ldr	r2, [pc, #88]	@ (8001b04 <SystemInit+0x64>)
 8001aac:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001ab0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001ab4:	4b14      	ldr	r3, [pc, #80]	@ (8001b08 <SystemInit+0x68>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	4a13      	ldr	r2, [pc, #76]	@ (8001b08 <SystemInit+0x68>)
 8001aba:	f043 0301 	orr.w	r3, r3, #1
 8001abe:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001ac0:	4b11      	ldr	r3, [pc, #68]	@ (8001b08 <SystemInit+0x68>)
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001ac6:	4b10      	ldr	r3, [pc, #64]	@ (8001b08 <SystemInit+0x68>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	4a0f      	ldr	r2, [pc, #60]	@ (8001b08 <SystemInit+0x68>)
 8001acc:	f023 53a8 	bic.w	r3, r3, #352321536	@ 0x15000000
 8001ad0:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 8001ad4:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001ad6:	4b0c      	ldr	r3, [pc, #48]	@ (8001b08 <SystemInit+0x68>)
 8001ad8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001adc:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001ade:	4b0a      	ldr	r3, [pc, #40]	@ (8001b08 <SystemInit+0x68>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	4a09      	ldr	r2, [pc, #36]	@ (8001b08 <SystemInit+0x68>)
 8001ae4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001ae8:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001aea:	4b07      	ldr	r3, [pc, #28]	@ (8001b08 <SystemInit+0x68>)
 8001aec:	2200      	movs	r2, #0
 8001aee:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001af0:	4b04      	ldr	r3, [pc, #16]	@ (8001b04 <SystemInit+0x64>)
 8001af2:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001af6:	609a      	str	r2, [r3, #8]
#endif
}
 8001af8:	bf00      	nop
 8001afa:	46bd      	mov	sp, r7
 8001afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b00:	4770      	bx	lr
 8001b02:	bf00      	nop
 8001b04:	e000ed00 	.word	0xe000ed00
 8001b08:	40021000 	.word	0x40021000

08001b0c <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b084      	sub	sp, #16
 8001b10:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b12:	1d3b      	adds	r3, r7, #4
 8001b14:	2200      	movs	r2, #0
 8001b16:	601a      	str	r2, [r3, #0]
 8001b18:	605a      	str	r2, [r3, #4]
 8001b1a:	609a      	str	r2, [r3, #8]

  htim6.Instance = TIM6;
 8001b1c:	4b14      	ldr	r3, [pc, #80]	@ (8001b70 <MX_TIM6_Init+0x64>)
 8001b1e:	4a15      	ldr	r2, [pc, #84]	@ (8001b74 <MX_TIM6_Init+0x68>)
 8001b20:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8001b22:	4b13      	ldr	r3, [pc, #76]	@ (8001b70 <MX_TIM6_Init+0x64>)
 8001b24:	2200      	movs	r2, #0
 8001b26:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b28:	4b11      	ldr	r3, [pc, #68]	@ (8001b70 <MX_TIM6_Init+0x64>)
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8001b2e:	4b10      	ldr	r3, [pc, #64]	@ (8001b70 <MX_TIM6_Init+0x64>)
 8001b30:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001b34:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b36:	4b0e      	ldr	r3, [pc, #56]	@ (8001b70 <MX_TIM6_Init+0x64>)
 8001b38:	2200      	movs	r2, #0
 8001b3a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001b3c:	480c      	ldr	r0, [pc, #48]	@ (8001b70 <MX_TIM6_Init+0x64>)
 8001b3e:	f004 fb40 	bl	80061c2 <HAL_TIM_Base_Init>
 8001b42:	4603      	mov	r3, r0
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d001      	beq.n	8001b4c <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001b48:	f7ff fe06 	bl	8001758 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b50:	2300      	movs	r3, #0
 8001b52:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001b54:	1d3b      	adds	r3, r7, #4
 8001b56:	4619      	mov	r1, r3
 8001b58:	4805      	ldr	r0, [pc, #20]	@ (8001b70 <MX_TIM6_Init+0x64>)
 8001b5a:	f004 fc23 	bl	80063a4 <HAL_TIMEx_MasterConfigSynchronization>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d001      	beq.n	8001b68 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001b64:	f7ff fdf8 	bl	8001758 <Error_Handler>
  }

}
 8001b68:	bf00      	nop
 8001b6a:	3710      	adds	r7, #16
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bd80      	pop	{r7, pc}
 8001b70:	200004cc 	.word	0x200004cc
 8001b74:	40001000 	.word	0x40001000

08001b78 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	b085      	sub	sp, #20
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	4a0a      	ldr	r2, [pc, #40]	@ (8001bb0 <HAL_TIM_Base_MspInit+0x38>)
 8001b86:	4293      	cmp	r3, r2
 8001b88:	d10b      	bne.n	8001ba2 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001b8a:	4b0a      	ldr	r3, [pc, #40]	@ (8001bb4 <HAL_TIM_Base_MspInit+0x3c>)
 8001b8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b8e:	4a09      	ldr	r2, [pc, #36]	@ (8001bb4 <HAL_TIM_Base_MspInit+0x3c>)
 8001b90:	f043 0310 	orr.w	r3, r3, #16
 8001b94:	6593      	str	r3, [r2, #88]	@ 0x58
 8001b96:	4b07      	ldr	r3, [pc, #28]	@ (8001bb4 <HAL_TIM_Base_MspInit+0x3c>)
 8001b98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b9a:	f003 0310 	and.w	r3, r3, #16
 8001b9e:	60fb      	str	r3, [r7, #12]
 8001ba0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8001ba2:	bf00      	nop
 8001ba4:	3714      	adds	r7, #20
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bac:	4770      	bx	lr
 8001bae:	bf00      	nop
 8001bb0:	40001000 	.word	0x40001000
 8001bb4:	40021000 	.word	0x40021000

08001bb8 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8001bbc:	4b14      	ldr	r3, [pc, #80]	@ (8001c10 <MX_USART2_UART_Init+0x58>)
 8001bbe:	4a15      	ldr	r2, [pc, #84]	@ (8001c14 <MX_USART2_UART_Init+0x5c>)
 8001bc0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001bc2:	4b13      	ldr	r3, [pc, #76]	@ (8001c10 <MX_USART2_UART_Init+0x58>)
 8001bc4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001bc8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001bca:	4b11      	ldr	r3, [pc, #68]	@ (8001c10 <MX_USART2_UART_Init+0x58>)
 8001bcc:	2200      	movs	r2, #0
 8001bce:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001bd0:	4b0f      	ldr	r3, [pc, #60]	@ (8001c10 <MX_USART2_UART_Init+0x58>)
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001bd6:	4b0e      	ldr	r3, [pc, #56]	@ (8001c10 <MX_USART2_UART_Init+0x58>)
 8001bd8:	2200      	movs	r2, #0
 8001bda:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001bdc:	4b0c      	ldr	r3, [pc, #48]	@ (8001c10 <MX_USART2_UART_Init+0x58>)
 8001bde:	220c      	movs	r2, #12
 8001be0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001be2:	4b0b      	ldr	r3, [pc, #44]	@ (8001c10 <MX_USART2_UART_Init+0x58>)
 8001be4:	2200      	movs	r2, #0
 8001be6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001be8:	4b09      	ldr	r3, [pc, #36]	@ (8001c10 <MX_USART2_UART_Init+0x58>)
 8001bea:	2200      	movs	r2, #0
 8001bec:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001bee:	4b08      	ldr	r3, [pc, #32]	@ (8001c10 <MX_USART2_UART_Init+0x58>)
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001bf4:	4b06      	ldr	r3, [pc, #24]	@ (8001c10 <MX_USART2_UART_Init+0x58>)
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001bfa:	4805      	ldr	r0, [pc, #20]	@ (8001c10 <MX_USART2_UART_Init+0x58>)
 8001bfc:	f004 fc5a 	bl	80064b4 <HAL_UART_Init>
 8001c00:	4603      	mov	r3, r0
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d001      	beq.n	8001c0a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001c06:	f7ff fda7 	bl	8001758 <Error_Handler>
  }

}
 8001c0a:	bf00      	nop
 8001c0c:	bd80      	pop	{r7, pc}
 8001c0e:	bf00      	nop
 8001c10:	20000518 	.word	0x20000518
 8001c14:	40004400 	.word	0x40004400

08001c18 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b08a      	sub	sp, #40	@ 0x28
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c20:	f107 0314 	add.w	r3, r7, #20
 8001c24:	2200      	movs	r2, #0
 8001c26:	601a      	str	r2, [r3, #0]
 8001c28:	605a      	str	r2, [r3, #4]
 8001c2a:	609a      	str	r2, [r3, #8]
 8001c2c:	60da      	str	r2, [r3, #12]
 8001c2e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	4a1b      	ldr	r2, [pc, #108]	@ (8001ca4 <HAL_UART_MspInit+0x8c>)
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d12f      	bne.n	8001c9a <HAL_UART_MspInit+0x82>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001c3a:	4b1b      	ldr	r3, [pc, #108]	@ (8001ca8 <HAL_UART_MspInit+0x90>)
 8001c3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c3e:	4a1a      	ldr	r2, [pc, #104]	@ (8001ca8 <HAL_UART_MspInit+0x90>)
 8001c40:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001c44:	6593      	str	r3, [r2, #88]	@ 0x58
 8001c46:	4b18      	ldr	r3, [pc, #96]	@ (8001ca8 <HAL_UART_MspInit+0x90>)
 8001c48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c4e:	613b      	str	r3, [r7, #16]
 8001c50:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c52:	4b15      	ldr	r3, [pc, #84]	@ (8001ca8 <HAL_UART_MspInit+0x90>)
 8001c54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c56:	4a14      	ldr	r2, [pc, #80]	@ (8001ca8 <HAL_UART_MspInit+0x90>)
 8001c58:	f043 0308 	orr.w	r3, r3, #8
 8001c5c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001c5e:	4b12      	ldr	r3, [pc, #72]	@ (8001ca8 <HAL_UART_MspInit+0x90>)
 8001c60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c62:	f003 0308 	and.w	r3, r3, #8
 8001c66:	60fb      	str	r3, [r7, #12]
 8001c68:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001c6a:	2360      	movs	r3, #96	@ 0x60
 8001c6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c6e:	2302      	movs	r3, #2
 8001c70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c72:	2301      	movs	r3, #1
 8001c74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c76:	2303      	movs	r3, #3
 8001c78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001c7a:	2307      	movs	r3, #7
 8001c7c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c7e:	f107 0314 	add.w	r3, r7, #20
 8001c82:	4619      	mov	r1, r3
 8001c84:	4809      	ldr	r0, [pc, #36]	@ (8001cac <HAL_UART_MspInit+0x94>)
 8001c86:	f001 fb23 	bl	80032d0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	2100      	movs	r1, #0
 8001c8e:	2026      	movs	r0, #38	@ 0x26
 8001c90:	f001 faa7 	bl	80031e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001c94:	2026      	movs	r0, #38	@ 0x26
 8001c96:	f001 fac0 	bl	800321a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001c9a:	bf00      	nop
 8001c9c:	3728      	adds	r7, #40	@ 0x28
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}
 8001ca2:	bf00      	nop
 8001ca4:	40004400 	.word	0x40004400
 8001ca8:	40021000 	.word	0x40021000
 8001cac:	48000c00 	.word	0x48000c00

08001cb0 <AccToMouse_Process>:
#define MOUSE_STEP_MAX    10      // opcjonalne ograniczenie skalowania

extern USBD_HandleTypeDef hUsbDeviceFS;

void AccToMouse_Process(mouseHID mousehid,float filteredAcc[3])
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b084      	sub	sp, #16
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
 8001cb8:	6039      	str	r1, [r7, #0]
    static int16_t baseX, baseY;
    static uint8_t  calibrated = 0;
    int16_t dx, dy;
    int8_t  mx = 0, my = 0;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	73fb      	strb	r3, [r7, #15]
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	73bb      	strb	r3, [r7, #14]


    if (!calibrated) {
 8001cc2:	4b5c      	ldr	r3, [pc, #368]	@ (8001e34 <AccToMouse_Process+0x184>)
 8001cc4:	781b      	ldrb	r3, [r3, #0]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d118      	bne.n	8001cfc <AccToMouse_Process+0x4c>
        baseX = filteredAcc[0];
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	edd3 7a00 	vldr	s15, [r3]
 8001cd0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001cd4:	ee17 3a90 	vmov	r3, s15
 8001cd8:	b21a      	sxth	r2, r3
 8001cda:	4b57      	ldr	r3, [pc, #348]	@ (8001e38 <AccToMouse_Process+0x188>)
 8001cdc:	801a      	strh	r2, [r3, #0]
        baseY = filteredAcc[1];
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	3304      	adds	r3, #4
 8001ce2:	edd3 7a00 	vldr	s15, [r3]
 8001ce6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001cea:	ee17 3a90 	vmov	r3, s15
 8001cee:	b21a      	sxth	r2, r3
 8001cf0:	4b52      	ldr	r3, [pc, #328]	@ (8001e3c <AccToMouse_Process+0x18c>)
 8001cf2:	801a      	strh	r2, [r3, #0]
        calibrated = 1;
 8001cf4:	4b4f      	ldr	r3, [pc, #316]	@ (8001e34 <AccToMouse_Process+0x184>)
 8001cf6:	2201      	movs	r2, #1
 8001cf8:	701a      	strb	r2, [r3, #0]
        return;
 8001cfa:	e098      	b.n	8001e2e <AccToMouse_Process+0x17e>
    }

    dx = filteredAcc[0] - baseX;
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	ed93 7a00 	vldr	s14, [r3]
 8001d02:	4b4d      	ldr	r3, [pc, #308]	@ (8001e38 <AccToMouse_Process+0x188>)
 8001d04:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d08:	ee07 3a90 	vmov	s15, r3
 8001d0c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d10:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d14:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001d18:	ee17 3a90 	vmov	r3, s15
 8001d1c:	81bb      	strh	r3, [r7, #12]
    dy = filteredAcc[1] - baseY;
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	3304      	adds	r3, #4
 8001d22:	ed93 7a00 	vldr	s14, [r3]
 8001d26:	4b45      	ldr	r3, [pc, #276]	@ (8001e3c <AccToMouse_Process+0x18c>)
 8001d28:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d2c:	ee07 3a90 	vmov	s15, r3
 8001d30:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d34:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d38:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001d3c:	ee17 3a90 	vmov	r3, s15
 8001d40:	817b      	strh	r3, [r7, #10]

    // X-axis
    if (dx < -MOUSE_THRESHOLD) {
 8001d42:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001d46:	4a3e      	ldr	r2, [pc, #248]	@ (8001e40 <AccToMouse_Process+0x190>)
 8001d48:	4293      	cmp	r3, r2
 8001d4a:	da14      	bge.n	8001d76 <AccToMouse_Process+0xc6>
        mx = (int8_t)(((-dx - MOUSE_THRESHOLD) / 1000) + MOUSE_STEP_MIN);
 8001d4c:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001d50:	4b3b      	ldr	r3, [pc, #236]	@ (8001e40 <AccToMouse_Process+0x190>)
 8001d52:	1a9b      	subs	r3, r3, r2
 8001d54:	4a3b      	ldr	r2, [pc, #236]	@ (8001e44 <AccToMouse_Process+0x194>)
 8001d56:	fb82 1203 	smull	r1, r2, r2, r3
 8001d5a:	1192      	asrs	r2, r2, #6
 8001d5c:	17db      	asrs	r3, r3, #31
 8001d5e:	1ad3      	subs	r3, r2, r3
 8001d60:	b2db      	uxtb	r3, r3
 8001d62:	3301      	adds	r3, #1
 8001d64:	b2db      	uxtb	r3, r3
 8001d66:	73fb      	strb	r3, [r7, #15]
        if (mx > MOUSE_STEP_MAX) mx = MOUSE_STEP_MAX;
 8001d68:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d6c:	2b0a      	cmp	r3, #10
 8001d6e:	dd1c      	ble.n	8001daa <AccToMouse_Process+0xfa>
 8001d70:	230a      	movs	r3, #10
 8001d72:	73fb      	strb	r3, [r7, #15]
 8001d74:	e019      	b.n	8001daa <AccToMouse_Process+0xfa>
    } else if (dx > MOUSE_THRESHOLD) {
 8001d76:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001d7a:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	dd13      	ble.n	8001daa <AccToMouse_Process+0xfa>
        mx = -(int8_t)(((dx - MOUSE_THRESHOLD) / 1000) + MOUSE_STEP_MIN);
 8001d82:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001d86:	f6a3 33b8 	subw	r3, r3, #3000	@ 0xbb8
 8001d8a:	4a2e      	ldr	r2, [pc, #184]	@ (8001e44 <AccToMouse_Process+0x194>)
 8001d8c:	fb82 1203 	smull	r1, r2, r2, r3
 8001d90:	1192      	asrs	r2, r2, #6
 8001d92:	17db      	asrs	r3, r3, #31
 8001d94:	1ad3      	subs	r3, r2, r3
 8001d96:	b25b      	sxtb	r3, r3
 8001d98:	43db      	mvns	r3, r3
 8001d9a:	73fb      	strb	r3, [r7, #15]
        if (mx < -MOUSE_STEP_MAX) mx = -MOUSE_STEP_MAX;
 8001d9c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001da0:	f113 0f0a 	cmn.w	r3, #10
 8001da4:	da01      	bge.n	8001daa <AccToMouse_Process+0xfa>
 8001da6:	23f6      	movs	r3, #246	@ 0xf6
 8001da8:	73fb      	strb	r3, [r7, #15]
    }

    // Y-axis
    if (dy > MOUSE_THRESHOLD) {
 8001daa:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001dae:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8001db2:	4293      	cmp	r3, r2
 8001db4:	dd14      	ble.n	8001de0 <AccToMouse_Process+0x130>
        my = -(int8_t)(((dy - MOUSE_THRESHOLD) / 1000) + MOUSE_STEP_MIN);
 8001db6:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001dba:	f6a3 33b8 	subw	r3, r3, #3000	@ 0xbb8
 8001dbe:	4a21      	ldr	r2, [pc, #132]	@ (8001e44 <AccToMouse_Process+0x194>)
 8001dc0:	fb82 1203 	smull	r1, r2, r2, r3
 8001dc4:	1192      	asrs	r2, r2, #6
 8001dc6:	17db      	asrs	r3, r3, #31
 8001dc8:	1ad3      	subs	r3, r2, r3
 8001dca:	b25b      	sxtb	r3, r3
 8001dcc:	43db      	mvns	r3, r3
 8001dce:	73bb      	strb	r3, [r7, #14]
        if (my < -MOUSE_STEP_MAX) my = -MOUSE_STEP_MAX;
 8001dd0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001dd4:	f113 0f0a 	cmn.w	r3, #10
 8001dd8:	da1b      	bge.n	8001e12 <AccToMouse_Process+0x162>
 8001dda:	23f6      	movs	r3, #246	@ 0xf6
 8001ddc:	73bb      	strb	r3, [r7, #14]
 8001dde:	e018      	b.n	8001e12 <AccToMouse_Process+0x162>
    } else if (dy < -MOUSE_THRESHOLD) {
 8001de0:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001de4:	4a16      	ldr	r2, [pc, #88]	@ (8001e40 <AccToMouse_Process+0x190>)
 8001de6:	4293      	cmp	r3, r2
 8001de8:	da13      	bge.n	8001e12 <AccToMouse_Process+0x162>
        my = (int8_t)(((-dy - MOUSE_THRESHOLD) / 1000) + MOUSE_STEP_MIN);
 8001dea:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8001dee:	4b14      	ldr	r3, [pc, #80]	@ (8001e40 <AccToMouse_Process+0x190>)
 8001df0:	1a9b      	subs	r3, r3, r2
 8001df2:	4a14      	ldr	r2, [pc, #80]	@ (8001e44 <AccToMouse_Process+0x194>)
 8001df4:	fb82 1203 	smull	r1, r2, r2, r3
 8001df8:	1192      	asrs	r2, r2, #6
 8001dfa:	17db      	asrs	r3, r3, #31
 8001dfc:	1ad3      	subs	r3, r2, r3
 8001dfe:	b2db      	uxtb	r3, r3
 8001e00:	3301      	adds	r3, #1
 8001e02:	b2db      	uxtb	r3, r3
 8001e04:	73bb      	strb	r3, [r7, #14]
        if (my > MOUSE_STEP_MAX) my = MOUSE_STEP_MAX;
 8001e06:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001e0a:	2b0a      	cmp	r3, #10
 8001e0c:	dd01      	ble.n	8001e12 <AccToMouse_Process+0x162>
 8001e0e:	230a      	movs	r3, #10
 8001e10:	73bb      	strb	r3, [r7, #14]
    }

    mousehid.buttons = 0;
 8001e12:	2300      	movs	r3, #0
 8001e14:	713b      	strb	r3, [r7, #4]
    mousehid.mouse_x = mx;
 8001e16:	7bfb      	ldrb	r3, [r7, #15]
 8001e18:	717b      	strb	r3, [r7, #5]
    mousehid.mouse_y = my;
 8001e1a:	7bbb      	ldrb	r3, [r7, #14]
 8001e1c:	71bb      	strb	r3, [r7, #6]
    mousehid.wheel = 0;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	71fb      	strb	r3, [r7, #7]
    USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t*)&mousehid, sizeof(mousehid));
 8001e22:	1d3b      	adds	r3, r7, #4
 8001e24:	2204      	movs	r2, #4
 8001e26:	4619      	mov	r1, r3
 8001e28:	4807      	ldr	r0, [pc, #28]	@ (8001e48 <AccToMouse_Process+0x198>)
 8001e2a:	f006 fd7f 	bl	800892c <USBD_HID_SendReport>
}
 8001e2e:	3710      	adds	r7, #16
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bd80      	pop	{r7, pc}
 8001e34:	20000598 	.word	0x20000598
 8001e38:	2000059a 	.word	0x2000059a
 8001e3c:	2000059c 	.word	0x2000059c
 8001e40:	fffff448 	.word	0xfffff448
 8001e44:	10624dd3 	.word	0x10624dd3
 8001e48:	20000618 	.word	0x20000618

08001e4c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001e4c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001e84 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001e50:	f7ff fe26 	bl	8001aa0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001e54:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001e56:	e003      	b.n	8001e60 <LoopCopyDataInit>

08001e58 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001e58:	4b0b      	ldr	r3, [pc, #44]	@ (8001e88 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001e5a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001e5c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001e5e:	3104      	adds	r1, #4

08001e60 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001e60:	480a      	ldr	r0, [pc, #40]	@ (8001e8c <LoopForever+0xa>)
	ldr	r3, =_edata
 8001e62:	4b0b      	ldr	r3, [pc, #44]	@ (8001e90 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001e64:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001e66:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001e68:	d3f6      	bcc.n	8001e58 <CopyDataInit>
	ldr	r2, =_sbss
 8001e6a:	4a0a      	ldr	r2, [pc, #40]	@ (8001e94 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001e6c:	e002      	b.n	8001e74 <LoopFillZerobss>

08001e6e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001e6e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001e70:	f842 3b04 	str.w	r3, [r2], #4

08001e74 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001e74:	4b08      	ldr	r3, [pc, #32]	@ (8001e98 <LoopForever+0x16>)
	cmp	r2, r3
 8001e76:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001e78:	d3f9      	bcc.n	8001e6e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001e7a:	f009 fdd9 	bl	800ba30 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001e7e:	f7ff fb8f 	bl	80015a0 <main>

08001e82 <LoopForever>:

LoopForever:
    b LoopForever
 8001e82:	e7fe      	b.n	8001e82 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001e84:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8001e88:	0800f40c 	.word	0x0800f40c
	ldr	r0, =_sdata
 8001e8c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001e90:	200003d8 	.word	0x200003d8
	ldr	r2, =_sbss
 8001e94:	200003d8 	.word	0x200003d8
	ldr	r3, = _ebss
 8001e98:	2000103c 	.word	0x2000103c

08001e9c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001e9c:	e7fe      	b.n	8001e9c <ADC1_2_IRQHandler>

08001e9e <L3GD20_Init>:
  * @param  L3GD20_InitStruct: pointer to a L3GD20_InitTypeDef structure 
  *         that contains the configuration setting for the L3GD20.
  * @retval None
  */
void L3GD20_Init(uint16_t InitStruct)
{  
 8001e9e:	b580      	push	{r7, lr}
 8001ea0:	b084      	sub	sp, #16
 8001ea2:	af00      	add	r7, sp, #0
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	73fb      	strb	r3, [r7, #15]
  
  /* Configure the low level interface */
  GYRO_IO_Init();
 8001eac:	f000 fe1a 	bl	8002ae4 <GYRO_IO_Init>
  
  /* Write value to MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 8001eb0:	88fb      	ldrh	r3, [r7, #6]
 8001eb2:	b2db      	uxtb	r3, r3
 8001eb4:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG1_ADDR, 1);
 8001eb6:	f107 030f 	add.w	r3, r7, #15
 8001eba:	2201      	movs	r2, #1
 8001ebc:	2120      	movs	r1, #32
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	f000 feb0 	bl	8002c24 <GYRO_IO_Write>
  
  /* Write value to MEMS CTRL_REG4 register */  
  ctrl = (uint8_t) (InitStruct >> 8);
 8001ec4:	88fb      	ldrh	r3, [r7, #6]
 8001ec6:	0a1b      	lsrs	r3, r3, #8
 8001ec8:	b29b      	uxth	r3, r3
 8001eca:	b2db      	uxtb	r3, r3
 8001ecc:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG4_ADDR, 1);
 8001ece:	f107 030f 	add.w	r3, r7, #15
 8001ed2:	2201      	movs	r2, #1
 8001ed4:	2123      	movs	r1, #35	@ 0x23
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	f000 fea4 	bl	8002c24 <GYRO_IO_Write>
}
 8001edc:	bf00      	nop
 8001ede:	3710      	adds	r7, #16
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bd80      	pop	{r7, pc}

08001ee4 <L3GD20_DeInit>:
  * @brief L3GD20 De-initialization
  * @param  None
  * @retval None
  */
void L3GD20_DeInit(void)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	af00      	add	r7, sp, #0
}
 8001ee8:	bf00      	nop
 8001eea:	46bd      	mov	sp, r7
 8001eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef0:	4770      	bx	lr

08001ef2 <L3GD20_ReadID>:
  * @brief  Read ID address of L3GD20
  * @param  None
  * @retval ID name
  */
uint8_t L3GD20_ReadID(void)
{
 8001ef2:	b580      	push	{r7, lr}
 8001ef4:	b082      	sub	sp, #8
 8001ef6:	af00      	add	r7, sp, #0
  uint8_t tmp;
  
  /* Configure the low level interface */
  GYRO_IO_Init();
 8001ef8:	f000 fdf4 	bl	8002ae4 <GYRO_IO_Init>
  
  /* Read WHO I AM register */
  GYRO_IO_Read(&tmp, L3GD20_WHO_AM_I_ADDR, 1);
 8001efc:	1dfb      	adds	r3, r7, #7
 8001efe:	2201      	movs	r2, #1
 8001f00:	210f      	movs	r1, #15
 8001f02:	4618      	mov	r0, r3
 8001f04:	f000 feca 	bl	8002c9c <GYRO_IO_Read>
  
  /* Return the ID */
  return (uint8_t)tmp;
 8001f08:	79fb      	ldrb	r3, [r7, #7]
}
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	3708      	adds	r7, #8
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}

08001f12 <L3GD20_RebootCmd>:
  * @brief  Reboot memory content of L3GD20
  * @param  None
  * @retval None
  */
void L3GD20_RebootCmd(void)
{
 8001f12:	b580      	push	{r7, lr}
 8001f14:	b082      	sub	sp, #8
 8001f16:	af00      	add	r7, sp, #0
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 8001f18:	1dfb      	adds	r3, r7, #7
 8001f1a:	2201      	movs	r2, #1
 8001f1c:	2124      	movs	r1, #36	@ 0x24
 8001f1e:	4618      	mov	r0, r3
 8001f20:	f000 febc 	bl	8002c9c <GYRO_IO_Read>
  
  /* Enable or Disable the reboot memory */
  tmpreg |= L3GD20_BOOT_REBOOTMEMORY;
 8001f24:	79fb      	ldrb	r3, [r7, #7]
 8001f26:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001f2a:	b2db      	uxtb	r3, r3
 8001f2c:	71fb      	strb	r3, [r7, #7]
  
  /* Write value to MEMS CTRL_REG5 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 8001f2e:	1dfb      	adds	r3, r7, #7
 8001f30:	2201      	movs	r2, #1
 8001f32:	2124      	movs	r1, #36	@ 0x24
 8001f34:	4618      	mov	r0, r3
 8001f36:	f000 fe75 	bl	8002c24 <GYRO_IO_Write>
}
 8001f3a:	bf00      	nop
 8001f3c:	3708      	adds	r7, #8
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd80      	pop	{r7, pc}

08001f42 <L3GD20_LowPower>:
  * @brief Set L3GD20 in low-power mode
  * @param 
  * @retval  None
  */
void L3GD20_LowPower(uint16_t InitStruct)
{  
 8001f42:	b580      	push	{r7, lr}
 8001f44:	b084      	sub	sp, #16
 8001f46:	af00      	add	r7, sp, #0
 8001f48:	4603      	mov	r3, r0
 8001f4a:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	73fb      	strb	r3, [r7, #15]

  /* Write value to MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 8001f50:	88fb      	ldrh	r3, [r7, #6]
 8001f52:	b2db      	uxtb	r3, r3
 8001f54:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG1_ADDR, 1);
 8001f56:	f107 030f 	add.w	r3, r7, #15
 8001f5a:	2201      	movs	r2, #1
 8001f5c:	2120      	movs	r1, #32
 8001f5e:	4618      	mov	r0, r3
 8001f60:	f000 fe60 	bl	8002c24 <GYRO_IO_Write>
}
 8001f64:	bf00      	nop
 8001f66:	3710      	adds	r7, #16
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	bd80      	pop	{r7, pc}

08001f6c <L3GD20_INT1InterruptConfig>:
  * @brief  Set L3GD20 Interrupt INT1 configuration
  * @param  Int1Config: the configuration setting for the L3GD20 Interrupt.
  * @retval None
  */
void L3GD20_INT1InterruptConfig(uint16_t Int1Config)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b084      	sub	sp, #16
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	4603      	mov	r3, r0
 8001f74:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl_cfr = 0x00, ctrl3 = 0x00;
 8001f76:	2300      	movs	r3, #0
 8001f78:	73fb      	strb	r3, [r7, #15]
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	73bb      	strb	r3, [r7, #14]
  
  /* Read INT1_CFG register */
  GYRO_IO_Read(&ctrl_cfr, L3GD20_INT1_CFG_ADDR, 1);
 8001f7e:	f107 030f 	add.w	r3, r7, #15
 8001f82:	2201      	movs	r2, #1
 8001f84:	2130      	movs	r1, #48	@ 0x30
 8001f86:	4618      	mov	r0, r3
 8001f88:	f000 fe88 	bl	8002c9c <GYRO_IO_Read>
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&ctrl3, L3GD20_CTRL_REG3_ADDR, 1);
 8001f8c:	f107 030e 	add.w	r3, r7, #14
 8001f90:	2201      	movs	r2, #1
 8001f92:	2122      	movs	r1, #34	@ 0x22
 8001f94:	4618      	mov	r0, r3
 8001f96:	f000 fe81 	bl	8002c9c <GYRO_IO_Read>
  
  ctrl_cfr &= 0x80;
 8001f9a:	7bfb      	ldrb	r3, [r7, #15]
 8001f9c:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8001fa0:	b2db      	uxtb	r3, r3
 8001fa2:	73fb      	strb	r3, [r7, #15]
  ctrl_cfr |= ((uint8_t) Int1Config >> 8);
 8001fa4:	88fb      	ldrh	r3, [r7, #6]
 8001fa6:	b2db      	uxtb	r3, r3
 8001fa8:	121b      	asrs	r3, r3, #8
 8001faa:	b25a      	sxtb	r2, r3
 8001fac:	7bfb      	ldrb	r3, [r7, #15]
 8001fae:	b25b      	sxtb	r3, r3
 8001fb0:	4313      	orrs	r3, r2
 8001fb2:	b25b      	sxtb	r3, r3
 8001fb4:	b2db      	uxtb	r3, r3
 8001fb6:	73fb      	strb	r3, [r7, #15]
  
  ctrl3 &= 0xDF;
 8001fb8:	7bbb      	ldrb	r3, [r7, #14]
 8001fba:	f023 0320 	bic.w	r3, r3, #32
 8001fbe:	b2db      	uxtb	r3, r3
 8001fc0:	73bb      	strb	r3, [r7, #14]
  ctrl3 |= ((uint8_t) Int1Config);   
 8001fc2:	88fb      	ldrh	r3, [r7, #6]
 8001fc4:	b2da      	uxtb	r2, r3
 8001fc6:	7bbb      	ldrb	r3, [r7, #14]
 8001fc8:	4313      	orrs	r3, r2
 8001fca:	b2db      	uxtb	r3, r3
 8001fcc:	73bb      	strb	r3, [r7, #14]
  
  /* Write value to MEMS INT1_CFG register */
  GYRO_IO_Write(&ctrl_cfr, L3GD20_INT1_CFG_ADDR, 1);
 8001fce:	f107 030f 	add.w	r3, r7, #15
 8001fd2:	2201      	movs	r2, #1
 8001fd4:	2130      	movs	r1, #48	@ 0x30
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	f000 fe24 	bl	8002c24 <GYRO_IO_Write>
  
  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&ctrl3, L3GD20_CTRL_REG3_ADDR, 1);
 8001fdc:	f107 030e 	add.w	r3, r7, #14
 8001fe0:	2201      	movs	r2, #1
 8001fe2:	2122      	movs	r1, #34	@ 0x22
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	f000 fe1d 	bl	8002c24 <GYRO_IO_Write>
}
 8001fea:	bf00      	nop
 8001fec:	3710      	adds	r7, #16
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd80      	pop	{r7, pc}

08001ff2 <L3GD20_EnableIT>:
  *        @arg L3GD20_INT1
  *        @arg L3GD20_INT2   
  * @retval None
  */
void L3GD20_EnableIT(uint8_t IntSel)
{  
 8001ff2:	b580      	push	{r7, lr}
 8001ff4:	b084      	sub	sp, #16
 8001ff6:	af00      	add	r7, sp, #0
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 8001ffc:	f107 030f 	add.w	r3, r7, #15
 8002000:	2201      	movs	r2, #1
 8002002:	2122      	movs	r1, #34	@ 0x22
 8002004:	4618      	mov	r0, r3
 8002006:	f000 fe49 	bl	8002c9c <GYRO_IO_Read>
  
  if(IntSel == L3GD20_INT1)
 800200a:	79fb      	ldrb	r3, [r7, #7]
 800200c:	2b00      	cmp	r3, #0
 800200e:	d10a      	bne.n	8002026 <L3GD20_EnableIT+0x34>
  {
    tmpreg &= 0x7F;	
 8002010:	7bfb      	ldrb	r3, [r7, #15]
 8002012:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002016:	b2db      	uxtb	r3, r3
 8002018:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT1INTERRUPT_ENABLE;
 800201a:	7bfb      	ldrb	r3, [r7, #15]
 800201c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002020:	b2db      	uxtb	r3, r3
 8002022:	73fb      	strb	r3, [r7, #15]
 8002024:	e00c      	b.n	8002040 <L3GD20_EnableIT+0x4e>
  }
  else if(IntSel == L3GD20_INT2)
 8002026:	79fb      	ldrb	r3, [r7, #7]
 8002028:	2b01      	cmp	r3, #1
 800202a:	d109      	bne.n	8002040 <L3GD20_EnableIT+0x4e>
  {
    tmpreg &= 0xF7;
 800202c:	7bfb      	ldrb	r3, [r7, #15]
 800202e:	f023 0308 	bic.w	r3, r3, #8
 8002032:	b2db      	uxtb	r3, r3
 8002034:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT2INTERRUPT_ENABLE;
 8002036:	7bfb      	ldrb	r3, [r7, #15]
 8002038:	f043 0308 	orr.w	r3, r3, #8
 800203c:	b2db      	uxtb	r3, r3
 800203e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 8002040:	f107 030f 	add.w	r3, r7, #15
 8002044:	2201      	movs	r2, #1
 8002046:	2122      	movs	r1, #34	@ 0x22
 8002048:	4618      	mov	r0, r3
 800204a:	f000 fdeb 	bl	8002c24 <GYRO_IO_Write>
}
 800204e:	bf00      	nop
 8002050:	3710      	adds	r7, #16
 8002052:	46bd      	mov	sp, r7
 8002054:	bd80      	pop	{r7, pc}

08002056 <L3GD20_DisableIT>:
  *        @arg L3GD20_INT1
  *        @arg L3GD20_INT2   
  * @retval None
  */
void L3GD20_DisableIT(uint8_t IntSel)
{  
 8002056:	b580      	push	{r7, lr}
 8002058:	b084      	sub	sp, #16
 800205a:	af00      	add	r7, sp, #0
 800205c:	4603      	mov	r3, r0
 800205e:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 8002060:	f107 030f 	add.w	r3, r7, #15
 8002064:	2201      	movs	r2, #1
 8002066:	2122      	movs	r1, #34	@ 0x22
 8002068:	4618      	mov	r0, r3
 800206a:	f000 fe17 	bl	8002c9c <GYRO_IO_Read>
  
  if(IntSel == L3GD20_INT1)
 800206e:	79fb      	ldrb	r3, [r7, #7]
 8002070:	2b00      	cmp	r3, #0
 8002072:	d107      	bne.n	8002084 <L3GD20_DisableIT+0x2e>
  {
    tmpreg &= 0x7F;	
 8002074:	7bfb      	ldrb	r3, [r7, #15]
 8002076:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800207a:	b2db      	uxtb	r3, r3
 800207c:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT1INTERRUPT_DISABLE;
 800207e:	7bfb      	ldrb	r3, [r7, #15]
 8002080:	73fb      	strb	r3, [r7, #15]
 8002082:	e009      	b.n	8002098 <L3GD20_DisableIT+0x42>
  }
  else if(IntSel == L3GD20_INT2)
 8002084:	79fb      	ldrb	r3, [r7, #7]
 8002086:	2b01      	cmp	r3, #1
 8002088:	d106      	bne.n	8002098 <L3GD20_DisableIT+0x42>
  {
    tmpreg &= 0xF7;
 800208a:	7bfb      	ldrb	r3, [r7, #15]
 800208c:	f023 0308 	bic.w	r3, r3, #8
 8002090:	b2db      	uxtb	r3, r3
 8002092:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT2INTERRUPT_DISABLE;
 8002094:	7bfb      	ldrb	r3, [r7, #15]
 8002096:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 8002098:	f107 030f 	add.w	r3, r7, #15
 800209c:	2201      	movs	r2, #1
 800209e:	2122      	movs	r1, #34	@ 0x22
 80020a0:	4618      	mov	r0, r3
 80020a2:	f000 fdbf 	bl	8002c24 <GYRO_IO_Write>
}
 80020a6:	bf00      	nop
 80020a8:	3710      	adds	r7, #16
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd80      	pop	{r7, pc}

080020ae <L3GD20_FilterConfig>:
  * @brief  Set High Pass Filter Modality
  * @param  FilterStruct: contains the configuration setting for the L3GD20.        
  * @retval None
  */
void L3GD20_FilterConfig(uint8_t FilterStruct) 
{
 80020ae:	b580      	push	{r7, lr}
 80020b0:	b084      	sub	sp, #16
 80020b2:	af00      	add	r7, sp, #0
 80020b4:	4603      	mov	r3, r0
 80020b6:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG2_ADDR, 1);
 80020b8:	f107 030f 	add.w	r3, r7, #15
 80020bc:	2201      	movs	r2, #1
 80020be:	2121      	movs	r1, #33	@ 0x21
 80020c0:	4618      	mov	r0, r3
 80020c2:	f000 fdeb 	bl	8002c9c <GYRO_IO_Read>
  
  tmpreg &= 0xC0;
 80020c6:	7bfb      	ldrb	r3, [r7, #15]
 80020c8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80020cc:	b2db      	uxtb	r3, r3
 80020ce:	73fb      	strb	r3, [r7, #15]
  
  /* Configure MEMS: mode and cutoff frequency */
  tmpreg |= FilterStruct;
 80020d0:	7bfa      	ldrb	r2, [r7, #15]
 80020d2:	79fb      	ldrb	r3, [r7, #7]
 80020d4:	4313      	orrs	r3, r2
 80020d6:	b2db      	uxtb	r3, r3
 80020d8:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG2 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG2_ADDR, 1);
 80020da:	f107 030f 	add.w	r3, r7, #15
 80020de:	2201      	movs	r2, #1
 80020e0:	2121      	movs	r1, #33	@ 0x21
 80020e2:	4618      	mov	r0, r3
 80020e4:	f000 fd9e 	bl	8002c24 <GYRO_IO_Write>
}
 80020e8:	bf00      	nop
 80020ea:	3710      	adds	r7, #16
 80020ec:	46bd      	mov	sp, r7
 80020ee:	bd80      	pop	{r7, pc}

080020f0 <L3GD20_FilterCmd>:
  *         @arg: L3GD20_HIGHPASSFILTER_DISABLE 
  *         @arg: L3GD20_HIGHPASSFILTER_ENABLE          
  * @retval None
  */
void L3GD20_FilterCmd(uint8_t HighPassFilterState)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b084      	sub	sp, #16
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	4603      	mov	r3, r0
 80020f8:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 80020fa:	f107 030f 	add.w	r3, r7, #15
 80020fe:	2201      	movs	r2, #1
 8002100:	2124      	movs	r1, #36	@ 0x24
 8002102:	4618      	mov	r0, r3
 8002104:	f000 fdca 	bl	8002c9c <GYRO_IO_Read>
  
  tmpreg &= 0xEF;
 8002108:	7bfb      	ldrb	r3, [r7, #15]
 800210a:	f023 0310 	bic.w	r3, r3, #16
 800210e:	b2db      	uxtb	r3, r3
 8002110:	73fb      	strb	r3, [r7, #15]
  
  tmpreg |= HighPassFilterState;
 8002112:	7bfa      	ldrb	r2, [r7, #15]
 8002114:	79fb      	ldrb	r3, [r7, #7]
 8002116:	4313      	orrs	r3, r2
 8002118:	b2db      	uxtb	r3, r3
 800211a:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG5 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 800211c:	f107 030f 	add.w	r3, r7, #15
 8002120:	2201      	movs	r2, #1
 8002122:	2124      	movs	r1, #36	@ 0x24
 8002124:	4618      	mov	r0, r3
 8002126:	f000 fd7d 	bl	8002c24 <GYRO_IO_Write>
}
 800212a:	bf00      	nop
 800212c:	3710      	adds	r7, #16
 800212e:	46bd      	mov	sp, r7
 8002130:	bd80      	pop	{r7, pc}
	...

08002134 <L3GD20_ReadXYZAngRate>:
* @brief  Calculate the L3GD20 angular data.
* @param  pfData: Data out pointer
* @retval None
*/
void L3GD20_ReadXYZAngRate(float *pfData)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b08a      	sub	sp, #40	@ 0x28
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
  uint8_t tmpbuffer[6] ={0};
 800213c:	f107 0318 	add.w	r3, r7, #24
 8002140:	2200      	movs	r2, #0
 8002142:	601a      	str	r2, [r3, #0]
 8002144:	809a      	strh	r2, [r3, #4]
  int16_t RawData[3] = {0};
 8002146:	f107 0310 	add.w	r3, r7, #16
 800214a:	2200      	movs	r2, #0
 800214c:	601a      	str	r2, [r3, #0]
 800214e:	809a      	strh	r2, [r3, #4]
  uint8_t tmpreg = 0;
 8002150:	2300      	movs	r3, #0
 8002152:	73fb      	strb	r3, [r7, #15]
  float sensitivity = 0;
 8002154:	f04f 0300 	mov.w	r3, #0
 8002158:	627b      	str	r3, [r7, #36]	@ 0x24
  int i =0;
 800215a:	2300      	movs	r3, #0
 800215c:	623b      	str	r3, [r7, #32]
  
  GYRO_IO_Read(&tmpreg,L3GD20_CTRL_REG4_ADDR,1);
 800215e:	f107 030f 	add.w	r3, r7, #15
 8002162:	2201      	movs	r2, #1
 8002164:	2123      	movs	r1, #35	@ 0x23
 8002166:	4618      	mov	r0, r3
 8002168:	f000 fd98 	bl	8002c9c <GYRO_IO_Read>
  
  GYRO_IO_Read(tmpbuffer,L3GD20_OUT_X_L_ADDR,6);
 800216c:	f107 0318 	add.w	r3, r7, #24
 8002170:	2206      	movs	r2, #6
 8002172:	2128      	movs	r1, #40	@ 0x28
 8002174:	4618      	mov	r0, r3
 8002176:	f000 fd91 	bl	8002c9c <GYRO_IO_Read>
  
  /* check in the control register 4 the data alignment (Big Endian or Little Endian)*/
  if(!(tmpreg & L3GD20_BLE_MSB))
 800217a:	7bfb      	ldrb	r3, [r7, #15]
 800217c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002180:	2b00      	cmp	r3, #0
 8002182:	d121      	bne.n	80021c8 <L3GD20_ReadXYZAngRate+0x94>
  {
    for(i=0; i<3; i++)
 8002184:	2300      	movs	r3, #0
 8002186:	623b      	str	r3, [r7, #32]
 8002188:	e01a      	b.n	80021c0 <L3GD20_ReadXYZAngRate+0x8c>
    {
      RawData[i]=(int16_t)(((uint16_t)tmpbuffer[2*i+1] << 8) + tmpbuffer[2*i]);
 800218a:	6a3b      	ldr	r3, [r7, #32]
 800218c:	005b      	lsls	r3, r3, #1
 800218e:	3301      	adds	r3, #1
 8002190:	3328      	adds	r3, #40	@ 0x28
 8002192:	443b      	add	r3, r7
 8002194:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8002198:	021b      	lsls	r3, r3, #8
 800219a:	b29b      	uxth	r3, r3
 800219c:	6a3a      	ldr	r2, [r7, #32]
 800219e:	0052      	lsls	r2, r2, #1
 80021a0:	3228      	adds	r2, #40	@ 0x28
 80021a2:	443a      	add	r2, r7
 80021a4:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 80021a8:	4413      	add	r3, r2
 80021aa:	b29b      	uxth	r3, r3
 80021ac:	b21a      	sxth	r2, r3
 80021ae:	6a3b      	ldr	r3, [r7, #32]
 80021b0:	005b      	lsls	r3, r3, #1
 80021b2:	3328      	adds	r3, #40	@ 0x28
 80021b4:	443b      	add	r3, r7
 80021b6:	f823 2c18 	strh.w	r2, [r3, #-24]
    for(i=0; i<3; i++)
 80021ba:	6a3b      	ldr	r3, [r7, #32]
 80021bc:	3301      	adds	r3, #1
 80021be:	623b      	str	r3, [r7, #32]
 80021c0:	6a3b      	ldr	r3, [r7, #32]
 80021c2:	2b02      	cmp	r3, #2
 80021c4:	dde1      	ble.n	800218a <L3GD20_ReadXYZAngRate+0x56>
 80021c6:	e020      	b.n	800220a <L3GD20_ReadXYZAngRate+0xd6>
    }
  }
  else
  {
    for(i=0; i<3; i++)
 80021c8:	2300      	movs	r3, #0
 80021ca:	623b      	str	r3, [r7, #32]
 80021cc:	e01a      	b.n	8002204 <L3GD20_ReadXYZAngRate+0xd0>
    {
      RawData[i]=(int16_t)(((uint16_t)tmpbuffer[2*i] << 8) + tmpbuffer[2*i+1]);
 80021ce:	6a3b      	ldr	r3, [r7, #32]
 80021d0:	005b      	lsls	r3, r3, #1
 80021d2:	3328      	adds	r3, #40	@ 0x28
 80021d4:	443b      	add	r3, r7
 80021d6:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80021da:	021b      	lsls	r3, r3, #8
 80021dc:	b29b      	uxth	r3, r3
 80021de:	6a3a      	ldr	r2, [r7, #32]
 80021e0:	0052      	lsls	r2, r2, #1
 80021e2:	3201      	adds	r2, #1
 80021e4:	3228      	adds	r2, #40	@ 0x28
 80021e6:	443a      	add	r2, r7
 80021e8:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 80021ec:	4413      	add	r3, r2
 80021ee:	b29b      	uxth	r3, r3
 80021f0:	b21a      	sxth	r2, r3
 80021f2:	6a3b      	ldr	r3, [r7, #32]
 80021f4:	005b      	lsls	r3, r3, #1
 80021f6:	3328      	adds	r3, #40	@ 0x28
 80021f8:	443b      	add	r3, r7
 80021fa:	f823 2c18 	strh.w	r2, [r3, #-24]
    for(i=0; i<3; i++)
 80021fe:	6a3b      	ldr	r3, [r7, #32]
 8002200:	3301      	adds	r3, #1
 8002202:	623b      	str	r3, [r7, #32]
 8002204:	6a3b      	ldr	r3, [r7, #32]
 8002206:	2b02      	cmp	r3, #2
 8002208:	dde1      	ble.n	80021ce <L3GD20_ReadXYZAngRate+0x9a>
    }
  }
  
  /* Switch the sensitivity value set in the CRTL4 */
  switch(tmpreg & L3GD20_FULLSCALE_SELECTION)
 800220a:	7bfb      	ldrb	r3, [r7, #15]
 800220c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8002210:	2b20      	cmp	r3, #32
 8002212:	d00c      	beq.n	800222e <L3GD20_ReadXYZAngRate+0xfa>
 8002214:	2b20      	cmp	r3, #32
 8002216:	dc0d      	bgt.n	8002234 <L3GD20_ReadXYZAngRate+0x100>
 8002218:	2b00      	cmp	r3, #0
 800221a:	d002      	beq.n	8002222 <L3GD20_ReadXYZAngRate+0xee>
 800221c:	2b10      	cmp	r3, #16
 800221e:	d003      	beq.n	8002228 <L3GD20_ReadXYZAngRate+0xf4>
 8002220:	e008      	b.n	8002234 <L3GD20_ReadXYZAngRate+0x100>
  {
  case L3GD20_FULLSCALE_250:
    sensitivity=L3GD20_SENSITIVITY_250DPS;
 8002222:	4b15      	ldr	r3, [pc, #84]	@ (8002278 <L3GD20_ReadXYZAngRate+0x144>)
 8002224:	627b      	str	r3, [r7, #36]	@ 0x24
    break;
 8002226:	e005      	b.n	8002234 <L3GD20_ReadXYZAngRate+0x100>
    
  case L3GD20_FULLSCALE_500:
    sensitivity=L3GD20_SENSITIVITY_500DPS;
 8002228:	4b14      	ldr	r3, [pc, #80]	@ (800227c <L3GD20_ReadXYZAngRate+0x148>)
 800222a:	627b      	str	r3, [r7, #36]	@ 0x24
    break;
 800222c:	e002      	b.n	8002234 <L3GD20_ReadXYZAngRate+0x100>
    
  case L3GD20_FULLSCALE_2000:
    sensitivity=L3GD20_SENSITIVITY_2000DPS;
 800222e:	4b14      	ldr	r3, [pc, #80]	@ (8002280 <L3GD20_ReadXYZAngRate+0x14c>)
 8002230:	627b      	str	r3, [r7, #36]	@ 0x24
    break;
 8002232:	bf00      	nop
  }
  /* Divide by sensitivity */
  for(i=0; i<3; i++)
 8002234:	2300      	movs	r3, #0
 8002236:	623b      	str	r3, [r7, #32]
 8002238:	e016      	b.n	8002268 <L3GD20_ReadXYZAngRate+0x134>
  {
    pfData[i]=(float)(RawData[i] * sensitivity);
 800223a:	6a3b      	ldr	r3, [r7, #32]
 800223c:	005b      	lsls	r3, r3, #1
 800223e:	3328      	adds	r3, #40	@ 0x28
 8002240:	443b      	add	r3, r7
 8002242:	f933 3c18 	ldrsh.w	r3, [r3, #-24]
 8002246:	ee07 3a90 	vmov	s15, r3
 800224a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800224e:	6a3b      	ldr	r3, [r7, #32]
 8002250:	009b      	lsls	r3, r3, #2
 8002252:	687a      	ldr	r2, [r7, #4]
 8002254:	4413      	add	r3, r2
 8002256:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800225a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800225e:	edc3 7a00 	vstr	s15, [r3]
  for(i=0; i<3; i++)
 8002262:	6a3b      	ldr	r3, [r7, #32]
 8002264:	3301      	adds	r3, #1
 8002266:	623b      	str	r3, [r7, #32]
 8002268:	6a3b      	ldr	r3, [r7, #32]
 800226a:	2b02      	cmp	r3, #2
 800226c:	dde5      	ble.n	800223a <L3GD20_ReadXYZAngRate+0x106>
  }
}
 800226e:	bf00      	nop
 8002270:	bf00      	nop
 8002272:	3728      	adds	r7, #40	@ 0x28
 8002274:	46bd      	mov	sp, r7
 8002276:	bd80      	pop	{r7, pc}
 8002278:	410c0000 	.word	0x410c0000
 800227c:	418c0000 	.word	0x418c0000
 8002280:	428c0000 	.word	0x428c0000

08002284 <LSM303C_AccInit>:
  * @brief  Set LSM303C Accelerometer Initialization.
  * @param  InitStruct: Init parameters
  * @retval None
  */
void LSM303C_AccInit(uint16_t InitStruct)
{  
 8002284:	b580      	push	{r7, lr}
 8002286:	b084      	sub	sp, #16
 8002288:	af00      	add	r7, sp, #0
 800228a:	4603      	mov	r3, r0
 800228c:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 800228e:	2300      	movs	r3, #0
 8002290:	73fb      	strb	r3, [r7, #15]
  
  /*  Low level init */
  ACCELERO_IO_Init();
 8002292:	f000 fae3 	bl	800285c <ACCELERO_IO_Init>
  
  /* Write value to ACC MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 8002296:	88fb      	ldrh	r3, [r7, #6]
 8002298:	73fb      	strb	r3, [r7, #15]
  ACCELERO_IO_Write(LSM303C_CTRL_REG1_A, ctrl);
 800229a:	7bfb      	ldrb	r3, [r7, #15]
 800229c:	4619      	mov	r1, r3
 800229e:	2020      	movs	r0, #32
 80022a0:	f000 fb08 	bl	80028b4 <ACCELERO_IO_Write>
  
  /* Write value to ACC MEMS CTRL_REG4 register */
  ctrl = ((uint8_t) (InitStruct >> 8));
 80022a4:	88fb      	ldrh	r3, [r7, #6]
 80022a6:	0a1b      	lsrs	r3, r3, #8
 80022a8:	b29b      	uxth	r3, r3
 80022aa:	73fb      	strb	r3, [r7, #15]
  ACCELERO_IO_Write(LSM303C_CTRL_REG4_A, ctrl);
 80022ac:	7bfb      	ldrb	r3, [r7, #15]
 80022ae:	4619      	mov	r1, r3
 80022b0:	2023      	movs	r0, #35	@ 0x23
 80022b2:	f000 faff 	bl	80028b4 <ACCELERO_IO_Write>
}
 80022b6:	bf00      	nop
 80022b8:	3710      	adds	r7, #16
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd80      	pop	{r7, pc}

080022be <LSM303C_AccDeInit>:
  * @brief  LSM303C Accelerometer De-initialization.
  * @param  None
  * @retval None
  */
void LSM303C_AccDeInit(void)
{  
 80022be:	b480      	push	{r7}
 80022c0:	af00      	add	r7, sp, #0
}
 80022c2:	bf00      	nop
 80022c4:	46bd      	mov	sp, r7
 80022c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ca:	4770      	bx	lr

080022cc <LSM303C_AccReadID>:
  * @brief  Read LSM303C ID.
  * @param  None
  * @retval ID 
  */
uint8_t LSM303C_AccReadID(void)
{  
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b082      	sub	sp, #8
 80022d0:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 80022d2:	2300      	movs	r3, #0
 80022d4:	71fb      	strb	r3, [r7, #7]
  
  /* Low level init */
  ACCELERO_IO_Init();
 80022d6:	f000 fac1 	bl	800285c <ACCELERO_IO_Init>
  
  /* Enabled SPI/I2C read communication */
  ACCELERO_IO_Write(LSM303C_CTRL_REG4_A, 0x5);
 80022da:	2105      	movs	r1, #5
 80022dc:	2023      	movs	r0, #35	@ 0x23
 80022de:	f000 fae9 	bl	80028b4 <ACCELERO_IO_Write>
  
  /* Read value at Who am I register address */
  ctrl = ACCELERO_IO_Read(LSM303C_WHO_AM_I_ADDR);
 80022e2:	200f      	movs	r0, #15
 80022e4:	f000 fb18 	bl	8002918 <ACCELERO_IO_Read>
 80022e8:	4603      	mov	r3, r0
 80022ea:	71fb      	strb	r3, [r7, #7]
  
  return ctrl;
 80022ec:	79fb      	ldrb	r3, [r7, #7]
}
 80022ee:	4618      	mov	r0, r3
 80022f0:	3708      	adds	r7, #8
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd80      	pop	{r7, pc}

080022f6 <LSM303C_AccLowPower>:
  * @param  Mode equal to LSM303C_ACC_ODR_OFF means enable Low Power Mode, otherwise Output data rate is set.
  *         This parameter can be a value of @ref Acc_OutPut_DataRate_Selection
  * @retval None 
  */
void LSM303C_AccLowPower(uint16_t Mode)
{  
 80022f6:	b580      	push	{r7, lr}
 80022f8:	b084      	sub	sp, #16
 80022fa:	af00      	add	r7, sp, #0
 80022fc:	4603      	mov	r3, r0
 80022fe:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8002300:	2300      	movs	r3, #0
 8002302:	73fb      	strb	r3, [r7, #15]
  
  /* Read control register 1 value */
  ctrl = ACCELERO_IO_Read(LSM303C_CTRL_REG1_A);
 8002304:	2020      	movs	r0, #32
 8002306:	f000 fb07 	bl	8002918 <ACCELERO_IO_Read>
 800230a:	4603      	mov	r3, r0
 800230c:	73fb      	strb	r3, [r7, #15]

  /* Clear ODR bits */
  ctrl &= ~(LSM303C_ACC_ODR_BITPOSITION);
 800230e:	7bfb      	ldrb	r3, [r7, #15]
 8002310:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002314:	73fb      	strb	r3, [r7, #15]

  /* Set Power down */
  ctrl |= (uint8_t)Mode;
 8002316:	88fb      	ldrh	r3, [r7, #6]
 8002318:	b2da      	uxtb	r2, r3
 800231a:	7bfb      	ldrb	r3, [r7, #15]
 800231c:	4313      	orrs	r3, r2
 800231e:	73fb      	strb	r3, [r7, #15]
  
  /* write back control register */
  ACCELERO_IO_Write(LSM303C_CTRL_REG1_A, ctrl);
 8002320:	7bfb      	ldrb	r3, [r7, #15]
 8002322:	4619      	mov	r1, r3
 8002324:	2020      	movs	r0, #32
 8002326:	f000 fac5 	bl	80028b4 <ACCELERO_IO_Write>
}
 800232a:	bf00      	nop
 800232c:	3710      	adds	r7, #16
 800232e:	46bd      	mov	sp, r7
 8002330:	bd80      	pop	{r7, pc}

08002332 <LSM303C_AccFilterConfig>:
  * @brief  Set High Pass Filter Modality
  * @param  FilterStruct: contains data for filter config
  * @retval None
  */
void LSM303C_AccFilterConfig(uint8_t FilterStruct) 
{
 8002332:	b580      	push	{r7, lr}
 8002334:	b084      	sub	sp, #16
 8002336:	af00      	add	r7, sp, #0
 8002338:	4603      	mov	r3, r0
 800233a:	71fb      	strb	r3, [r7, #7]
  
//  /* Read CTRL_REG2 register */
//  tmpreg = ACCELERO_IO_Read(LSM303C_CTRL_REG2_A);
//  
//  tmpreg &= 0x0C;
  tmpreg = FilterStruct;
 800233c:	79fb      	ldrb	r3, [r7, #7]
 800233e:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to ACC MEMS CTRL_REG2 register */
  ACCELERO_IO_Write(LSM303C_CTRL_REG2_A, tmpreg);
 8002340:	7bfb      	ldrb	r3, [r7, #15]
 8002342:	4619      	mov	r1, r3
 8002344:	2021      	movs	r0, #33	@ 0x21
 8002346:	f000 fab5 	bl	80028b4 <ACCELERO_IO_Write>
}
 800234a:	bf00      	nop
 800234c:	3710      	adds	r7, #16
 800234e:	46bd      	mov	sp, r7
 8002350:	bd80      	pop	{r7, pc}

08002352 <LSM303C_AccReadXYZ>:
  * @brief  Read X, Y & Z Acceleration values 
  * @param  pData: Data out pointer
  * @retval None
  */
void LSM303C_AccReadXYZ(int16_t* pData)
{
 8002352:	b580      	push	{r7, lr}
 8002354:	b088      	sub	sp, #32
 8002356:	af00      	add	r7, sp, #0
 8002358:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlx[2]={0,0};
 800235a:	2300      	movs	r3, #0
 800235c:	82bb      	strh	r3, [r7, #20]
  uint8_t buffer[6];
  uint8_t i = 0;
 800235e:	2300      	movs	r3, #0
 8002360:	77fb      	strb	r3, [r7, #31]
  uint8_t sensitivity = LSM303C_ACC_SENSITIVITY_2G;
 8002362:	2301      	movs	r3, #1
 8002364:	77bb      	strb	r3, [r7, #30]
  
  /* Read the acceleration control register content */
  ctrlx[0] = ACCELERO_IO_Read(LSM303C_CTRL_REG4_A);
 8002366:	2023      	movs	r0, #35	@ 0x23
 8002368:	f000 fad6 	bl	8002918 <ACCELERO_IO_Read>
 800236c:	4603      	mov	r3, r0
 800236e:	753b      	strb	r3, [r7, #20]
  ctrlx[1] = ACCELERO_IO_Read(LSM303C_CTRL_REG5_A);
 8002370:	2024      	movs	r0, #36	@ 0x24
 8002372:	f000 fad1 	bl	8002918 <ACCELERO_IO_Read>
 8002376:	4603      	mov	r3, r0
 8002378:	757b      	strb	r3, [r7, #21]
  
  /* Read output register X, Y & Z acceleration */
  buffer[0] = ACCELERO_IO_Read(LSM303C_OUT_X_L_A); 
 800237a:	2028      	movs	r0, #40	@ 0x28
 800237c:	f000 facc 	bl	8002918 <ACCELERO_IO_Read>
 8002380:	4603      	mov	r3, r0
 8002382:	733b      	strb	r3, [r7, #12]
  buffer[1] = ACCELERO_IO_Read(LSM303C_OUT_X_H_A);
 8002384:	2029      	movs	r0, #41	@ 0x29
 8002386:	f000 fac7 	bl	8002918 <ACCELERO_IO_Read>
 800238a:	4603      	mov	r3, r0
 800238c:	737b      	strb	r3, [r7, #13]
  buffer[2] = ACCELERO_IO_Read(LSM303C_OUT_Y_L_A);
 800238e:	202a      	movs	r0, #42	@ 0x2a
 8002390:	f000 fac2 	bl	8002918 <ACCELERO_IO_Read>
 8002394:	4603      	mov	r3, r0
 8002396:	73bb      	strb	r3, [r7, #14]
  buffer[3] = ACCELERO_IO_Read(LSM303C_OUT_Y_H_A);
 8002398:	202b      	movs	r0, #43	@ 0x2b
 800239a:	f000 fabd 	bl	8002918 <ACCELERO_IO_Read>
 800239e:	4603      	mov	r3, r0
 80023a0:	73fb      	strb	r3, [r7, #15]
  buffer[4] = ACCELERO_IO_Read(LSM303C_OUT_Z_L_A);
 80023a2:	202c      	movs	r0, #44	@ 0x2c
 80023a4:	f000 fab8 	bl	8002918 <ACCELERO_IO_Read>
 80023a8:	4603      	mov	r3, r0
 80023aa:	743b      	strb	r3, [r7, #16]
  buffer[5] = ACCELERO_IO_Read(LSM303C_OUT_Z_H_A);
 80023ac:	202d      	movs	r0, #45	@ 0x2d
 80023ae:	f000 fab3 	bl	8002918 <ACCELERO_IO_Read>
 80023b2:	4603      	mov	r3, r0
 80023b4:	747b      	strb	r3, [r7, #17]
  
  for(i=0; i<3; i++)
 80023b6:	2300      	movs	r3, #0
 80023b8:	77fb      	strb	r3, [r7, #31]
 80023ba:	e01a      	b.n	80023f2 <LSM303C_AccReadXYZ+0xa0>
  {
    pnRawData[i]=((int16_t)((uint16_t)buffer[2*i+1] << 8) + buffer[2*i]);
 80023bc:	7ffb      	ldrb	r3, [r7, #31]
 80023be:	005b      	lsls	r3, r3, #1
 80023c0:	3301      	adds	r3, #1
 80023c2:	3320      	adds	r3, #32
 80023c4:	443b      	add	r3, r7
 80023c6:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 80023ca:	021b      	lsls	r3, r3, #8
 80023cc:	b29b      	uxth	r3, r3
 80023ce:	7ffa      	ldrb	r2, [r7, #31]
 80023d0:	0052      	lsls	r2, r2, #1
 80023d2:	3220      	adds	r2, #32
 80023d4:	443a      	add	r2, r7
 80023d6:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 80023da:	4413      	add	r3, r2
 80023dc:	b29a      	uxth	r2, r3
 80023de:	7ffb      	ldrb	r3, [r7, #31]
 80023e0:	b212      	sxth	r2, r2
 80023e2:	005b      	lsls	r3, r3, #1
 80023e4:	3320      	adds	r3, #32
 80023e6:	443b      	add	r3, r7
 80023e8:	f823 2c08 	strh.w	r2, [r3, #-8]
  for(i=0; i<3; i++)
 80023ec:	7ffb      	ldrb	r3, [r7, #31]
 80023ee:	3301      	adds	r3, #1
 80023f0:	77fb      	strb	r3, [r7, #31]
 80023f2:	7ffb      	ldrb	r3, [r7, #31]
 80023f4:	2b02      	cmp	r3, #2
 80023f6:	d9e1      	bls.n	80023bc <LSM303C_AccReadXYZ+0x6a>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL4 */
  switch(ctrlx[0] & LSM303C_ACC_FULLSCALE_8G)
 80023f8:	7d3b      	ldrb	r3, [r7, #20]
 80023fa:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80023fe:	2b30      	cmp	r3, #48	@ 0x30
 8002400:	d00c      	beq.n	800241c <LSM303C_AccReadXYZ+0xca>
 8002402:	2b30      	cmp	r3, #48	@ 0x30
 8002404:	dc0d      	bgt.n	8002422 <LSM303C_AccReadXYZ+0xd0>
 8002406:	2b00      	cmp	r3, #0
 8002408:	d002      	beq.n	8002410 <LSM303C_AccReadXYZ+0xbe>
 800240a:	2b20      	cmp	r3, #32
 800240c:	d003      	beq.n	8002416 <LSM303C_AccReadXYZ+0xc4>
 800240e:	e008      	b.n	8002422 <LSM303C_AccReadXYZ+0xd0>
  {
  case LSM303C_ACC_FULLSCALE_2G:
    sensitivity = LSM303C_ACC_SENSITIVITY_2G;
 8002410:	2301      	movs	r3, #1
 8002412:	77bb      	strb	r3, [r7, #30]
    break;
 8002414:	e005      	b.n	8002422 <LSM303C_AccReadXYZ+0xd0>
  case LSM303C_ACC_FULLSCALE_4G:
    sensitivity = LSM303C_ACC_SENSITIVITY_4G;
 8002416:	2302      	movs	r3, #2
 8002418:	77bb      	strb	r3, [r7, #30]
    break;
 800241a:	e002      	b.n	8002422 <LSM303C_AccReadXYZ+0xd0>
  case LSM303C_ACC_FULLSCALE_8G:
    sensitivity = LSM303C_ACC_SENSITIVITY_8G;
 800241c:	2304      	movs	r3, #4
 800241e:	77bb      	strb	r3, [r7, #30]
    break;
 8002420:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 8002422:	2300      	movs	r3, #0
 8002424:	77fb      	strb	r3, [r7, #31]
 8002426:	e014      	b.n	8002452 <LSM303C_AccReadXYZ+0x100>
  {
    pData[i]=(pnRawData[i] * sensitivity);
 8002428:	7ffb      	ldrb	r3, [r7, #31]
 800242a:	005b      	lsls	r3, r3, #1
 800242c:	3320      	adds	r3, #32
 800242e:	443b      	add	r3, r7
 8002430:	f933 3c08 	ldrsh.w	r3, [r3, #-8]
 8002434:	b29a      	uxth	r2, r3
 8002436:	7fbb      	ldrb	r3, [r7, #30]
 8002438:	b29b      	uxth	r3, r3
 800243a:	fb12 f303 	smulbb	r3, r2, r3
 800243e:	b299      	uxth	r1, r3
 8002440:	7ffb      	ldrb	r3, [r7, #31]
 8002442:	005b      	lsls	r3, r3, #1
 8002444:	687a      	ldr	r2, [r7, #4]
 8002446:	4413      	add	r3, r2
 8002448:	b20a      	sxth	r2, r1
 800244a:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 800244c:	7ffb      	ldrb	r3, [r7, #31]
 800244e:	3301      	adds	r3, #1
 8002450:	77fb      	strb	r3, [r7, #31]
 8002452:	7ffb      	ldrb	r3, [r7, #31]
 8002454:	2b02      	cmp	r3, #2
 8002456:	d9e7      	bls.n	8002428 <LSM303C_AccReadXYZ+0xd6>
  }
}
 8002458:	bf00      	nop
 800245a:	bf00      	nop
 800245c:	3720      	adds	r7, #32
 800245e:	46bd      	mov	sp, r7
 8002460:	bd80      	pop	{r7, pc}

08002462 <LSM303C_MagInit>:
  * @param  LSM303C_InitStruct: pointer to a LSM303C_MagInitTypeDef structure 
  *         that contains the configuration setting for the LSM303C.
  * @retval None
  */
void LSM303C_MagInit(MAGNETO_InitTypeDef LSM303C_InitStruct)
{  
 8002462:	b580      	push	{r7, lr}
 8002464:	b082      	sub	sp, #8
 8002466:	af00      	add	r7, sp, #0
 8002468:	463b      	mov	r3, r7
 800246a:	e883 0003 	stmia.w	r3, {r0, r1}
  MAGNETO_IO_Write(LSM303C_CTRL_REG1_M, LSM303C_InitStruct.Register1);
 800246e:	783b      	ldrb	r3, [r7, #0]
 8002470:	4619      	mov	r1, r3
 8002472:	2020      	movs	r0, #32
 8002474:	f000 fac0 	bl	80029f8 <MAGNETO_IO_Write>
  MAGNETO_IO_Write(LSM303C_CTRL_REG2_M, LSM303C_InitStruct.Register2);
 8002478:	787b      	ldrb	r3, [r7, #1]
 800247a:	4619      	mov	r1, r3
 800247c:	2021      	movs	r0, #33	@ 0x21
 800247e:	f000 fabb 	bl	80029f8 <MAGNETO_IO_Write>
  MAGNETO_IO_Write(LSM303C_CTRL_REG3_M, LSM303C_InitStruct.Register3);
 8002482:	78bb      	ldrb	r3, [r7, #2]
 8002484:	4619      	mov	r1, r3
 8002486:	2022      	movs	r0, #34	@ 0x22
 8002488:	f000 fab6 	bl	80029f8 <MAGNETO_IO_Write>
  MAGNETO_IO_Write(LSM303C_CTRL_REG4_M, LSM303C_InitStruct.Register4);
 800248c:	78fb      	ldrb	r3, [r7, #3]
 800248e:	4619      	mov	r1, r3
 8002490:	2023      	movs	r0, #35	@ 0x23
 8002492:	f000 fab1 	bl	80029f8 <MAGNETO_IO_Write>
  MAGNETO_IO_Write(LSM303C_CTRL_REG5_M, LSM303C_InitStruct.Register5);
 8002496:	793b      	ldrb	r3, [r7, #4]
 8002498:	4619      	mov	r1, r3
 800249a:	2024      	movs	r0, #36	@ 0x24
 800249c:	f000 faac 	bl	80029f8 <MAGNETO_IO_Write>
}
 80024a0:	bf00      	nop
 80024a2:	3708      	adds	r7, #8
 80024a4:	46bd      	mov	sp, r7
 80024a6:	bd80      	pop	{r7, pc}

080024a8 <LSM303C_MagDeInit>:
  * @brief  LSM303C Magnetometer De-initialization.
  * @param  None
  * @retval None
  */
void LSM303C_MagDeInit(void)
{  
 80024a8:	b480      	push	{r7}
 80024aa:	af00      	add	r7, sp, #0
}
 80024ac:	bf00      	nop
 80024ae:	46bd      	mov	sp, r7
 80024b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b4:	4770      	bx	lr

080024b6 <LSM303C_MagReadID>:
  * @brief  Read LSM303C ID.
  * @param  None
  * @retval ID 
  */
uint8_t LSM303C_MagReadID(void)
{  
 80024b6:	b580      	push	{r7, lr}
 80024b8:	af00      	add	r7, sp, #0
  /* Low level init */
  MAGNETO_IO_Init();
 80024ba:	f000 fa71 	bl	80029a0 <MAGNETO_IO_Init>
  
  /* Enabled the SPI/I2C read operation */
  MAGNETO_IO_Write(LSM303C_CTRL_REG3_M, 0x84);
 80024be:	2184      	movs	r1, #132	@ 0x84
 80024c0:	2022      	movs	r0, #34	@ 0x22
 80024c2:	f000 fa99 	bl	80029f8 <MAGNETO_IO_Write>
  
  /* Read value at Who am I register address */
  return MAGNETO_IO_Read(LSM303C_WHO_AM_I_ADDR);
 80024c6:	200f      	movs	r0, #15
 80024c8:	f000 fac8 	bl	8002a5c <MAGNETO_IO_Read>
 80024cc:	4603      	mov	r3, r0
}
 80024ce:	4618      	mov	r0, r3
 80024d0:	bd80      	pop	{r7, pc}

080024d2 <LSM303C_MagLowPower>:
  * @param  Mode equal to LSM303C_MAG_POWERDOWN2_MODE means enable deepest Low Power Mode, otherwise other mode is set.
  *         This parameter can be a value of @ref Mag_Operation_Mode
  * @retval None 
  */
void LSM303C_MagLowPower(uint16_t Mode)
{  
 80024d2:	b580      	push	{r7, lr}
 80024d4:	b084      	sub	sp, #16
 80024d6:	af00      	add	r7, sp, #0
 80024d8:	4603      	mov	r3, r0
 80024da:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 80024dc:	2300      	movs	r3, #0
 80024de:	73fb      	strb	r3, [r7, #15]
  
  /* Read control register 1 value */
  ctrl = MAGNETO_IO_Read(LSM303C_CTRL_REG3_M);
 80024e0:	2022      	movs	r0, #34	@ 0x22
 80024e2:	f000 fabb 	bl	8002a5c <MAGNETO_IO_Read>
 80024e6:	4603      	mov	r3, r0
 80024e8:	73fb      	strb	r3, [r7, #15]

  /* Clear ODR bits */
  ctrl &= ~(LSM303C_MAG_SELECTION_MODE);
 80024ea:	7bfb      	ldrb	r3, [r7, #15]
 80024ec:	f023 0303 	bic.w	r3, r3, #3
 80024f0:	73fb      	strb	r3, [r7, #15]

  /* Set mode */
  ctrl |= (uint8_t)Mode;
 80024f2:	88fb      	ldrh	r3, [r7, #6]
 80024f4:	b2da      	uxtb	r2, r3
 80024f6:	7bfb      	ldrb	r3, [r7, #15]
 80024f8:	4313      	orrs	r3, r2
 80024fa:	73fb      	strb	r3, [r7, #15]
  
  /* write back control register */
  MAGNETO_IO_Write(LSM303C_CTRL_REG3_M, ctrl);
 80024fc:	7bfb      	ldrb	r3, [r7, #15]
 80024fe:	4619      	mov	r1, r3
 8002500:	2022      	movs	r0, #34	@ 0x22
 8002502:	f000 fa79 	bl	80029f8 <MAGNETO_IO_Write>
}
 8002506:	bf00      	nop
 8002508:	3710      	adds	r7, #16
 800250a:	46bd      	mov	sp, r7
 800250c:	bd80      	pop	{r7, pc}

0800250e <LSM303C_MagReadXYZ>:
  * @brief  Read X, Y & Z Magnetometer values 
  * @param  pData: Data out pointer
  * @retval None
  */
void LSM303C_MagReadXYZ(int16_t* pData)
{
 800250e:	b580      	push	{r7, lr}
 8002510:	b084      	sub	sp, #16
 8002512:	af00      	add	r7, sp, #0
 8002514:	6078      	str	r0, [r7, #4]
  uint8_t ctrlx;
  uint8_t buffer[6];
  uint8_t i=0;
 8002516:	2300      	movs	r3, #0
 8002518:	73fb      	strb	r3, [r7, #15]
  
  /* Read the magnetometer control register content */
  ctrlx = MAGNETO_IO_Read(LSM303C_CTRL_REG4_M);
 800251a:	2023      	movs	r0, #35	@ 0x23
 800251c:	f000 fa9e 	bl	8002a5c <MAGNETO_IO_Read>
 8002520:	4603      	mov	r3, r0
 8002522:	73bb      	strb	r3, [r7, #14]

  /* Read output register X, Y & Z magnetometer */
  buffer[0] = MAGNETO_IO_Read(LSM303C_OUT_X_L_M); 
 8002524:	2028      	movs	r0, #40	@ 0x28
 8002526:	f000 fa99 	bl	8002a5c <MAGNETO_IO_Read>
 800252a:	4603      	mov	r3, r0
 800252c:	723b      	strb	r3, [r7, #8]
  buffer[1] = MAGNETO_IO_Read(LSM303C_OUT_X_H_M);
 800252e:	2029      	movs	r0, #41	@ 0x29
 8002530:	f000 fa94 	bl	8002a5c <MAGNETO_IO_Read>
 8002534:	4603      	mov	r3, r0
 8002536:	727b      	strb	r3, [r7, #9]
  buffer[2] = MAGNETO_IO_Read(LSM303C_OUT_Y_L_M);
 8002538:	202a      	movs	r0, #42	@ 0x2a
 800253a:	f000 fa8f 	bl	8002a5c <MAGNETO_IO_Read>
 800253e:	4603      	mov	r3, r0
 8002540:	72bb      	strb	r3, [r7, #10]
  buffer[3] = MAGNETO_IO_Read(LSM303C_OUT_Y_H_M);
 8002542:	202b      	movs	r0, #43	@ 0x2b
 8002544:	f000 fa8a 	bl	8002a5c <MAGNETO_IO_Read>
 8002548:	4603      	mov	r3, r0
 800254a:	72fb      	strb	r3, [r7, #11]
  buffer[4] = MAGNETO_IO_Read(LSM303C_OUT_Z_L_M);
 800254c:	202c      	movs	r0, #44	@ 0x2c
 800254e:	f000 fa85 	bl	8002a5c <MAGNETO_IO_Read>
 8002552:	4603      	mov	r3, r0
 8002554:	733b      	strb	r3, [r7, #12]
  buffer[5] = MAGNETO_IO_Read(LSM303C_OUT_Z_H_M);
 8002556:	202d      	movs	r0, #45	@ 0x2d
 8002558:	f000 fa80 	bl	8002a5c <MAGNETO_IO_Read>
 800255c:	4603      	mov	r3, r0
 800255e:	737b      	strb	r3, [r7, #13]
  
  /* Check in the control register4 the data alignment*/
  if((ctrlx & LSM303C_MAG_BLE_MSB)) 
 8002560:	7bbb      	ldrb	r3, [r7, #14]
 8002562:	f003 0302 	and.w	r3, r3, #2
 8002566:	2b00      	cmp	r3, #0
 8002568:	d020      	beq.n	80025ac <LSM303C_MagReadXYZ+0x9e>
  {
    for(i=0; i<3; i++)
 800256a:	2300      	movs	r3, #0
 800256c:	73fb      	strb	r3, [r7, #15]
 800256e:	e019      	b.n	80025a4 <LSM303C_MagReadXYZ+0x96>
    {
      pData[i]=((int16_t)((uint16_t)buffer[2*i] << 8) + buffer[2*i+1]);
 8002570:	7bfb      	ldrb	r3, [r7, #15]
 8002572:	005b      	lsls	r3, r3, #1
 8002574:	3310      	adds	r3, #16
 8002576:	443b      	add	r3, r7
 8002578:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 800257c:	021b      	lsls	r3, r3, #8
 800257e:	b29b      	uxth	r3, r3
 8002580:	7bfa      	ldrb	r2, [r7, #15]
 8002582:	0052      	lsls	r2, r2, #1
 8002584:	3201      	adds	r2, #1
 8002586:	3210      	adds	r2, #16
 8002588:	443a      	add	r2, r7
 800258a:	f812 2c08 	ldrb.w	r2, [r2, #-8]
 800258e:	4413      	add	r3, r2
 8002590:	b299      	uxth	r1, r3
 8002592:	7bfb      	ldrb	r3, [r7, #15]
 8002594:	005b      	lsls	r3, r3, #1
 8002596:	687a      	ldr	r2, [r7, #4]
 8002598:	4413      	add	r3, r2
 800259a:	b20a      	sxth	r2, r1
 800259c:	801a      	strh	r2, [r3, #0]
    for(i=0; i<3; i++)
 800259e:	7bfb      	ldrb	r3, [r7, #15]
 80025a0:	3301      	adds	r3, #1
 80025a2:	73fb      	strb	r3, [r7, #15]
 80025a4:	7bfb      	ldrb	r3, [r7, #15]
 80025a6:	2b02      	cmp	r3, #2
 80025a8:	d9e2      	bls.n	8002570 <LSM303C_MagReadXYZ+0x62>
    for(i=0; i<3; i++)
    {
      pData[i]=((int16_t)((uint16_t)buffer[2*i+1] << 8) + buffer[2*i]);
    }
  }
}
 80025aa:	e01f      	b.n	80025ec <LSM303C_MagReadXYZ+0xde>
    for(i=0; i<3; i++)
 80025ac:	2300      	movs	r3, #0
 80025ae:	73fb      	strb	r3, [r7, #15]
 80025b0:	e019      	b.n	80025e6 <LSM303C_MagReadXYZ+0xd8>
      pData[i]=((int16_t)((uint16_t)buffer[2*i+1] << 8) + buffer[2*i]);
 80025b2:	7bfb      	ldrb	r3, [r7, #15]
 80025b4:	005b      	lsls	r3, r3, #1
 80025b6:	3301      	adds	r3, #1
 80025b8:	3310      	adds	r3, #16
 80025ba:	443b      	add	r3, r7
 80025bc:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 80025c0:	021b      	lsls	r3, r3, #8
 80025c2:	b29b      	uxth	r3, r3
 80025c4:	7bfa      	ldrb	r2, [r7, #15]
 80025c6:	0052      	lsls	r2, r2, #1
 80025c8:	3210      	adds	r2, #16
 80025ca:	443a      	add	r2, r7
 80025cc:	f812 2c08 	ldrb.w	r2, [r2, #-8]
 80025d0:	4413      	add	r3, r2
 80025d2:	b299      	uxth	r1, r3
 80025d4:	7bfb      	ldrb	r3, [r7, #15]
 80025d6:	005b      	lsls	r3, r3, #1
 80025d8:	687a      	ldr	r2, [r7, #4]
 80025da:	4413      	add	r3, r2
 80025dc:	b20a      	sxth	r2, r1
 80025de:	801a      	strh	r2, [r3, #0]
    for(i=0; i<3; i++)
 80025e0:	7bfb      	ldrb	r3, [r7, #15]
 80025e2:	3301      	adds	r3, #1
 80025e4:	73fb      	strb	r3, [r7, #15]
 80025e6:	7bfb      	ldrb	r3, [r7, #15]
 80025e8:	2b02      	cmp	r3, #2
 80025ea:	d9e2      	bls.n	80025b2 <LSM303C_MagReadXYZ+0xa4>
}
 80025ec:	bf00      	nop
 80025ee:	3710      	adds	r7, #16
 80025f0:	46bd      	mov	sp, r7
 80025f2:	bd80      	pop	{r7, pc}

080025f4 <SPIx_Init>:
/**
  * @brief SPIx Bus initialization
  * @retval None
  */
static void SPIx_Init(void)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	af00      	add	r7, sp, #0
  if (HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 80025f8:	481a      	ldr	r0, [pc, #104]	@ (8002664 <SPIx_Init+0x70>)
 80025fa:	f003 fdd4 	bl	80061a6 <HAL_SPI_GetState>
 80025fe:	4603      	mov	r3, r0
 8002600:	2b00      	cmp	r3, #0
 8002602:	d12c      	bne.n	800265e <SPIx_Init+0x6a>
  {
    /* SPI Config */
    SpiHandle.Instance = DISCOVERY_SPIx;
 8002604:	4b17      	ldr	r3, [pc, #92]	@ (8002664 <SPIx_Init+0x70>)
 8002606:	4a18      	ldr	r2, [pc, #96]	@ (8002668 <SPIx_Init+0x74>)
 8002608:	601a      	str	r2, [r3, #0]
    /* SPI baudrate is set to 10 MHz (PCLK1/SPI_BaudRatePrescaler = 80/8 = 10 MHz)
      to verify these constraints:
      lsm303c SPI interface max baudrate is 10MHz for write/read
      PCLK1 max frequency is set to 80 MHz
      */
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800260a:	4b16      	ldr	r3, [pc, #88]	@ (8002664 <SPIx_Init+0x70>)
 800260c:	2210      	movs	r2, #16
 800260e:	61da      	str	r2, [r3, #28]
    SpiHandle.Init.Direction = SPI_DIRECTION_2LINES;
 8002610:	4b14      	ldr	r3, [pc, #80]	@ (8002664 <SPIx_Init+0x70>)
 8002612:	2200      	movs	r2, #0
 8002614:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002616:	4b13      	ldr	r3, [pc, #76]	@ (8002664 <SPIx_Init+0x70>)
 8002618:	2200      	movs	r2, #0
 800261a:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity = SPI_POLARITY_LOW;
 800261c:	4b11      	ldr	r3, [pc, #68]	@ (8002664 <SPIx_Init+0x70>)
 800261e:	2200      	movs	r2, #0
 8002620:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002622:	4b10      	ldr	r3, [pc, #64]	@ (8002664 <SPIx_Init+0x70>)
 8002624:	2200      	movs	r2, #0
 8002626:	629a      	str	r2, [r3, #40]	@ 0x28
    SpiHandle.Init.CRCPolynomial = 7;
 8002628:	4b0e      	ldr	r3, [pc, #56]	@ (8002664 <SPIx_Init+0x70>)
 800262a:	2207      	movs	r2, #7
 800262c:	62da      	str	r2, [r3, #44]	@ 0x2c
    SpiHandle.Init.DataSize = SPI_DATASIZE_8BIT;
 800262e:	4b0d      	ldr	r3, [pc, #52]	@ (8002664 <SPIx_Init+0x70>)
 8002630:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8002634:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002636:	4b0b      	ldr	r3, [pc, #44]	@ (8002664 <SPIx_Init+0x70>)
 8002638:	2200      	movs	r2, #0
 800263a:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS = SPI_NSS_SOFT;
 800263c:	4b09      	ldr	r3, [pc, #36]	@ (8002664 <SPIx_Init+0x70>)
 800263e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002642:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode = SPI_TIMODE_DISABLE;
 8002644:	4b07      	ldr	r3, [pc, #28]	@ (8002664 <SPIx_Init+0x70>)
 8002646:	2200      	movs	r2, #0
 8002648:	625a      	str	r2, [r3, #36]	@ 0x24
    SpiHandle.Init.Mode = SPI_MODE_MASTER;
 800264a:	4b06      	ldr	r3, [pc, #24]	@ (8002664 <SPIx_Init+0x70>)
 800264c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002650:	605a      	str	r2, [r3, #4]

    SPIx_MspInit(&SpiHandle);
 8002652:	4804      	ldr	r0, [pc, #16]	@ (8002664 <SPIx_Init+0x70>)
 8002654:	f000 f80a 	bl	800266c <SPIx_MspInit>
    HAL_SPI_Init(&SpiHandle);
 8002658:	4802      	ldr	r0, [pc, #8]	@ (8002664 <SPIx_Init+0x70>)
 800265a:	f003 fd01 	bl	8006060 <HAL_SPI_Init>
  }
}
 800265e:	bf00      	nop
 8002660:	bd80      	pop	{r7, pc}
 8002662:	bf00      	nop
 8002664:	200005a0 	.word	0x200005a0
 8002668:	40003800 	.word	0x40003800

0800266c <SPIx_MspInit>:
  * @brief SPI MSP Init
  * @param hspi: SPI handle
  * @retval None
  */
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b08a      	sub	sp, #40	@ 0x28
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPIx clock  */
  DISCOVERY_SPIx_CLOCK_ENABLE();
 8002674:	4b15      	ldr	r3, [pc, #84]	@ (80026cc <SPIx_MspInit+0x60>)
 8002676:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002678:	4a14      	ldr	r2, [pc, #80]	@ (80026cc <SPIx_MspInit+0x60>)
 800267a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800267e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002680:	4b12      	ldr	r3, [pc, #72]	@ (80026cc <SPIx_MspInit+0x60>)
 8002682:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002684:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002688:	613b      	str	r3, [r7, #16]
 800268a:	693b      	ldr	r3, [r7, #16]

  /* enable SPIx gpio clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 800268c:	4b0f      	ldr	r3, [pc, #60]	@ (80026cc <SPIx_MspInit+0x60>)
 800268e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002690:	4a0e      	ldr	r2, [pc, #56]	@ (80026cc <SPIx_MspInit+0x60>)
 8002692:	f043 0308 	orr.w	r3, r3, #8
 8002696:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002698:	4b0c      	ldr	r3, [pc, #48]	@ (80026cc <SPIx_MspInit+0x60>)
 800269a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800269c:	f003 0308 	and.w	r3, r3, #8
 80026a0:	60fb      	str	r3, [r7, #12]
 80026a2:	68fb      	ldr	r3, [r7, #12]

  /* configure SPIx SCK, MOSI and MISO */
  GPIO_InitStructure.Pin = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 80026a4:	231a      	movs	r3, #26
 80026a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 80026a8:	2302      	movs	r3, #2
 80026aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull  = GPIO_NOPULL; // GPIO_PULLDOWN;
 80026ac:	2300      	movs	r3, #0
 80026ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 80026b0:	2302      	movs	r3, #2
 80026b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 80026b4:	2305      	movs	r3, #5
 80026b6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);
 80026b8:	f107 0314 	add.w	r3, r7, #20
 80026bc:	4619      	mov	r1, r3
 80026be:	4804      	ldr	r0, [pc, #16]	@ (80026d0 <SPIx_MspInit+0x64>)
 80026c0:	f000 fe06 	bl	80032d0 <HAL_GPIO_Init>
}
 80026c4:	bf00      	nop
 80026c6:	3728      	adds	r7, #40	@ 0x28
 80026c8:	46bd      	mov	sp, r7
 80026ca:	bd80      	pop	{r7, pc}
 80026cc:	40021000 	.word	0x40021000
 80026d0:	48000c00 	.word	0x48000c00

080026d4 <SPIx_WriteRead>:
  *         from the SPI bus.
  * @param  Byte : Byte send.
  * @retval none.
  */
static uint8_t SPIx_WriteRead(uint8_t Byte)
{
 80026d4:	b480      	push	{r7}
 80026d6:	b085      	sub	sp, #20
 80026d8:	af00      	add	r7, sp, #0
 80026da:	4603      	mov	r3, r0
 80026dc:	71fb      	strb	r3, [r7, #7]
  uint8_t receivedbyte;

  /* Enable the SPI */
  __HAL_SPI_ENABLE(&SpiHandle);
 80026de:	4b20      	ldr	r3, [pc, #128]	@ (8002760 <SPIx_WriteRead+0x8c>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	681a      	ldr	r2, [r3, #0]
 80026e4:	4b1e      	ldr	r3, [pc, #120]	@ (8002760 <SPIx_WriteRead+0x8c>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80026ec:	601a      	str	r2, [r3, #0]
  /* check TXE flag */
  while ((SpiHandle.Instance->SR & SPI_FLAG_TXE) != SPI_FLAG_TXE);
 80026ee:	bf00      	nop
 80026f0:	4b1b      	ldr	r3, [pc, #108]	@ (8002760 <SPIx_WriteRead+0x8c>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	689b      	ldr	r3, [r3, #8]
 80026f6:	f003 0302 	and.w	r3, r3, #2
 80026fa:	2b02      	cmp	r3, #2
 80026fc:	d1f8      	bne.n	80026f0 <SPIx_WriteRead+0x1c>

  /* Write the data */
  *((__IO uint8_t *)&SpiHandle.Instance->DR) = Byte;
 80026fe:	4b18      	ldr	r3, [pc, #96]	@ (8002760 <SPIx_WriteRead+0x8c>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	330c      	adds	r3, #12
 8002704:	79fa      	ldrb	r2, [r7, #7]
 8002706:	701a      	strb	r2, [r3, #0]

  while ((SpiHandle.Instance->SR & SPI_FLAG_RXNE) != SPI_FLAG_RXNE);
 8002708:	bf00      	nop
 800270a:	4b15      	ldr	r3, [pc, #84]	@ (8002760 <SPIx_WriteRead+0x8c>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	689b      	ldr	r3, [r3, #8]
 8002710:	f003 0301 	and.w	r3, r3, #1
 8002714:	2b01      	cmp	r3, #1
 8002716:	d1f8      	bne.n	800270a <SPIx_WriteRead+0x36>
  receivedbyte = *((__IO uint8_t *)&SpiHandle.Instance->DR);
 8002718:	4b11      	ldr	r3, [pc, #68]	@ (8002760 <SPIx_WriteRead+0x8c>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	330c      	adds	r3, #12
 800271e:	781b      	ldrb	r3, [r3, #0]
 8002720:	73fb      	strb	r3, [r7, #15]

  /* Wait BSY flag */
  while ((SpiHandle.Instance->SR & SPI_FLAG_FTLVL) != SPI_FTLVL_EMPTY);
 8002722:	bf00      	nop
 8002724:	4b0e      	ldr	r3, [pc, #56]	@ (8002760 <SPIx_WriteRead+0x8c>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	689b      	ldr	r3, [r3, #8]
 800272a:	f403 53c0 	and.w	r3, r3, #6144	@ 0x1800
 800272e:	2b00      	cmp	r3, #0
 8002730:	d1f8      	bne.n	8002724 <SPIx_WriteRead+0x50>
  while ((SpiHandle.Instance->SR & SPI_FLAG_BSY) == SPI_FLAG_BSY);
 8002732:	bf00      	nop
 8002734:	4b0a      	ldr	r3, [pc, #40]	@ (8002760 <SPIx_WriteRead+0x8c>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	689b      	ldr	r3, [r3, #8]
 800273a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800273e:	2b80      	cmp	r3, #128	@ 0x80
 8002740:	d0f8      	beq.n	8002734 <SPIx_WriteRead+0x60>

  /* disable the SPI */
  __HAL_SPI_DISABLE(&SpiHandle);
 8002742:	4b07      	ldr	r3, [pc, #28]	@ (8002760 <SPIx_WriteRead+0x8c>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	681a      	ldr	r2, [r3, #0]
 8002748:	4b05      	ldr	r3, [pc, #20]	@ (8002760 <SPIx_WriteRead+0x8c>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002750:	601a      	str	r2, [r3, #0]

  return receivedbyte;
 8002752:	7bfb      	ldrb	r3, [r7, #15]
}
 8002754:	4618      	mov	r0, r3
 8002756:	3714      	adds	r7, #20
 8002758:	46bd      	mov	sp, r7
 800275a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275e:	4770      	bx	lr
 8002760:	200005a0 	.word	0x200005a0

08002764 <SPIx_Write>:
  * @brief  Sends a Byte through the SPI interface.
  * @param  Byte : Byte to send.
  * @retval none.
  */
static void SPIx_Write(uint8_t Byte)
{
 8002764:	b480      	push	{r7}
 8002766:	b083      	sub	sp, #12
 8002768:	af00      	add	r7, sp, #0
 800276a:	4603      	mov	r3, r0
 800276c:	71fb      	strb	r3, [r7, #7]
  /* Enable the SPI */
  __HAL_SPI_ENABLE(&SpiHandle);
 800276e:	4b15      	ldr	r3, [pc, #84]	@ (80027c4 <SPIx_Write+0x60>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	681a      	ldr	r2, [r3, #0]
 8002774:	4b13      	ldr	r3, [pc, #76]	@ (80027c4 <SPIx_Write+0x60>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800277c:	601a      	str	r2, [r3, #0]
  /* check TXE flag */
  while ((SpiHandle.Instance->SR & SPI_FLAG_TXE) != SPI_FLAG_TXE);
 800277e:	bf00      	nop
 8002780:	4b10      	ldr	r3, [pc, #64]	@ (80027c4 <SPIx_Write+0x60>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	689b      	ldr	r3, [r3, #8]
 8002786:	f003 0302 	and.w	r3, r3, #2
 800278a:	2b02      	cmp	r3, #2
 800278c:	d1f8      	bne.n	8002780 <SPIx_Write+0x1c>

  /* Write the data */
  *((__IO uint8_t *)&SpiHandle.Instance->DR) = Byte;
 800278e:	4b0d      	ldr	r3, [pc, #52]	@ (80027c4 <SPIx_Write+0x60>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	330c      	adds	r3, #12
 8002794:	79fa      	ldrb	r2, [r7, #7]
 8002796:	701a      	strb	r2, [r3, #0]

  /* Wait BSY flag */
  while ((SpiHandle.Instance->SR & SPI_FLAG_BSY) == SPI_FLAG_BSY);
 8002798:	bf00      	nop
 800279a:	4b0a      	ldr	r3, [pc, #40]	@ (80027c4 <SPIx_Write+0x60>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	689b      	ldr	r3, [r3, #8]
 80027a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80027a4:	2b80      	cmp	r3, #128	@ 0x80
 80027a6:	d0f8      	beq.n	800279a <SPIx_Write+0x36>

  /* disable the SPI */
  __HAL_SPI_DISABLE(&SpiHandle);
 80027a8:	4b06      	ldr	r3, [pc, #24]	@ (80027c4 <SPIx_Write+0x60>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	681a      	ldr	r2, [r3, #0]
 80027ae:	4b05      	ldr	r3, [pc, #20]	@ (80027c4 <SPIx_Write+0x60>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80027b6:	601a      	str	r2, [r3, #0]
}
 80027b8:	bf00      	nop
 80027ba:	370c      	adds	r7, #12
 80027bc:	46bd      	mov	sp, r7
 80027be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c2:	4770      	bx	lr
 80027c4:	200005a0 	.word	0x200005a0

080027c8 <SPIx_Read>:
/**
  * @brief  Receives a Byte from the SPI bus.
  * @retval The received byte value
  */
static uint8_t SPIx_Read(void)
{
 80027c8:	b480      	push	{r7}
 80027ca:	b083      	sub	sp, #12
 80027cc:	af00      	add	r7, sp, #0
  uint8_t receivedbyte;

  __HAL_SPI_ENABLE(&SpiHandle);
 80027ce:	4b22      	ldr	r3, [pc, #136]	@ (8002858 <SPIx_Read+0x90>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	681a      	ldr	r2, [r3, #0]
 80027d4:	4b20      	ldr	r3, [pc, #128]	@ (8002858 <SPIx_Read+0x90>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80027dc:	601a      	str	r2, [r3, #0]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80027de:	f3bf 8f4f 	dsb	sy
}
 80027e2:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 80027e4:	f3bf 8f4f 	dsb	sy
}
 80027e8:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 80027ea:	f3bf 8f4f 	dsb	sy
}
 80027ee:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 80027f0:	f3bf 8f4f 	dsb	sy
}
 80027f4:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 80027f6:	f3bf 8f4f 	dsb	sy
}
 80027fa:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 80027fc:	f3bf 8f4f 	dsb	sy
}
 8002800:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 8002802:	f3bf 8f4f 	dsb	sy
}
 8002806:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 8002808:	f3bf 8f4f 	dsb	sy
}
 800280c:	bf00      	nop
  __DSB();
  __DSB();
  __DSB();
  __DSB();
  __DSB();
  __HAL_SPI_DISABLE(&SpiHandle);
 800280e:	4b12      	ldr	r3, [pc, #72]	@ (8002858 <SPIx_Read+0x90>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	681a      	ldr	r2, [r3, #0]
 8002814:	4b10      	ldr	r3, [pc, #64]	@ (8002858 <SPIx_Read+0x90>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800281c:	601a      	str	r2, [r3, #0]

  while ((SpiHandle.Instance->SR & SPI_FLAG_RXNE) != SPI_FLAG_RXNE);
 800281e:	bf00      	nop
 8002820:	4b0d      	ldr	r3, [pc, #52]	@ (8002858 <SPIx_Read+0x90>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	689b      	ldr	r3, [r3, #8]
 8002826:	f003 0301 	and.w	r3, r3, #1
 800282a:	2b01      	cmp	r3, #1
 800282c:	d1f8      	bne.n	8002820 <SPIx_Read+0x58>
  /* read the received data */
  receivedbyte = *(__IO uint8_t *)&SpiHandle.Instance->DR;
 800282e:	4b0a      	ldr	r3, [pc, #40]	@ (8002858 <SPIx_Read+0x90>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	330c      	adds	r3, #12
 8002834:	781b      	ldrb	r3, [r3, #0]
 8002836:	71fb      	strb	r3, [r7, #7]

  /* Wait for the BSY flag reset */
  while ((SpiHandle.Instance->SR & SPI_FLAG_BSY) == SPI_FLAG_BSY);
 8002838:	bf00      	nop
 800283a:	4b07      	ldr	r3, [pc, #28]	@ (8002858 <SPIx_Read+0x90>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	689b      	ldr	r3, [r3, #8]
 8002840:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002844:	2b80      	cmp	r3, #128	@ 0x80
 8002846:	d0f8      	beq.n	800283a <SPIx_Read+0x72>


  return receivedbyte;
 8002848:	79fb      	ldrb	r3, [r7, #7]
}
 800284a:	4618      	mov	r0, r3
 800284c:	370c      	adds	r7, #12
 800284e:	46bd      	mov	sp, r7
 8002850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002854:	4770      	bx	lr
 8002856:	bf00      	nop
 8002858:	200005a0 	.word	0x200005a0

0800285c <ACCELERO_IO_Init>:
/**
  * @brief  Configures COMPASS/ACCELEROMETER io interface.
  * @retval None
  */
void ACCELERO_IO_Init(void)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b086      	sub	sp, #24
 8002860:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable CS GPIO clock and  Configure GPIO PIN for Gyroscope Chip select */
  ACCELERO_CS_GPIO_CLK_ENABLE();
 8002862:	4b12      	ldr	r3, [pc, #72]	@ (80028ac <ACCELERO_IO_Init+0x50>)
 8002864:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002866:	4a11      	ldr	r2, [pc, #68]	@ (80028ac <ACCELERO_IO_Init+0x50>)
 8002868:	f043 0310 	orr.w	r3, r3, #16
 800286c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800286e:	4b0f      	ldr	r3, [pc, #60]	@ (80028ac <ACCELERO_IO_Init+0x50>)
 8002870:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002872:	f003 0310 	and.w	r3, r3, #16
 8002876:	603b      	str	r3, [r7, #0]
 8002878:	683b      	ldr	r3, [r7, #0]
  GPIO_InitStructure.Pin = ACCELERO_CS_PIN;
 800287a:	2301      	movs	r3, #1
 800287c:	607b      	str	r3, [r7, #4]
  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 800287e:	2301      	movs	r3, #1
 8002880:	60bb      	str	r3, [r7, #8]
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 8002882:	2300      	movs	r3, #0
 8002884:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002886:	2303      	movs	r3, #3
 8002888:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(ACCELERO_CS_GPIO_PORT, &GPIO_InitStructure);
 800288a:	1d3b      	adds	r3, r7, #4
 800288c:	4619      	mov	r1, r3
 800288e:	4808      	ldr	r0, [pc, #32]	@ (80028b0 <ACCELERO_IO_Init+0x54>)
 8002890:	f000 fd1e 	bl	80032d0 <HAL_GPIO_Init>

  /* Deselect : Chip Select high */
  ACCELERO_CS_HIGH();
 8002894:	2201      	movs	r2, #1
 8002896:	2101      	movs	r1, #1
 8002898:	4805      	ldr	r0, [pc, #20]	@ (80028b0 <ACCELERO_IO_Init+0x54>)
 800289a:	f000 fec3 	bl	8003624 <HAL_GPIO_WritePin>

  SPIx_Init();
 800289e:	f7ff fea9 	bl	80025f4 <SPIx_Init>
}
 80028a2:	bf00      	nop
 80028a4:	3718      	adds	r7, #24
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bd80      	pop	{r7, pc}
 80028aa:	bf00      	nop
 80028ac:	40021000 	.word	0x40021000
 80028b0:	48001000 	.word	0x48001000

080028b4 <ACCELERO_IO_Write>:
  * @param  RegisterAddr specifies the COMPASS / ACCELEROMETER register to be written.
  * @param  Value : Data to be written
  * @retval   None
 */
void ACCELERO_IO_Write(uint8_t RegisterAddr, uint8_t Value)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b082      	sub	sp, #8
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	4603      	mov	r3, r0
 80028bc:	460a      	mov	r2, r1
 80028be:	71fb      	strb	r3, [r7, #7]
 80028c0:	4613      	mov	r3, r2
 80028c2:	71bb      	strb	r3, [r7, #6]
  ACCELERO_CS_LOW();
 80028c4:	2200      	movs	r2, #0
 80028c6:	2101      	movs	r1, #1
 80028c8:	4811      	ldr	r0, [pc, #68]	@ (8002910 <ACCELERO_IO_Write+0x5c>)
 80028ca:	f000 feab 	bl	8003624 <HAL_GPIO_WritePin>
  __SPI_DIRECTION_1LINE_TX(&SpiHandle);
 80028ce:	4b11      	ldr	r3, [pc, #68]	@ (8002914 <ACCELERO_IO_Write+0x60>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	681a      	ldr	r2, [r3, #0]
 80028d4:	4b0f      	ldr	r3, [pc, #60]	@ (8002914 <ACCELERO_IO_Write+0x60>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f422 4244 	bic.w	r2, r2, #50176	@ 0xc400
 80028dc:	601a      	str	r2, [r3, #0]
 80028de:	4b0d      	ldr	r3, [pc, #52]	@ (8002914 <ACCELERO_IO_Write+0x60>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	681a      	ldr	r2, [r3, #0]
 80028e4:	4b0b      	ldr	r3, [pc, #44]	@ (8002914 <ACCELERO_IO_Write+0x60>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 80028ec:	601a      	str	r2, [r3, #0]
  /* call SPI Read data bus function */
  SPIx_Write(RegisterAddr);
 80028ee:	79fb      	ldrb	r3, [r7, #7]
 80028f0:	4618      	mov	r0, r3
 80028f2:	f7ff ff37 	bl	8002764 <SPIx_Write>
  SPIx_Write(Value);
 80028f6:	79bb      	ldrb	r3, [r7, #6]
 80028f8:	4618      	mov	r0, r3
 80028fa:	f7ff ff33 	bl	8002764 <SPIx_Write>
  ACCELERO_CS_HIGH();
 80028fe:	2201      	movs	r2, #1
 8002900:	2101      	movs	r1, #1
 8002902:	4803      	ldr	r0, [pc, #12]	@ (8002910 <ACCELERO_IO_Write+0x5c>)
 8002904:	f000 fe8e 	bl	8003624 <HAL_GPIO_WritePin>
}
 8002908:	bf00      	nop
 800290a:	3708      	adds	r7, #8
 800290c:	46bd      	mov	sp, r7
 800290e:	bd80      	pop	{r7, pc}
 8002910:	48001000 	.word	0x48001000
 8002914:	200005a0 	.word	0x200005a0

08002918 <ACCELERO_IO_Read>:
  * @brief  Reads a block of data from the COMPASS / ACCELEROMETER.
  * @param  RegisterAddr : specifies the COMPASS / ACCELEROMETER internal address register to read from
  * @retval ACCELEROMETER register value
  */
uint8_t ACCELERO_IO_Read(uint8_t RegisterAddr)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b084      	sub	sp, #16
 800291c:	af00      	add	r7, sp, #0
 800291e:	4603      	mov	r3, r0
 8002920:	71fb      	strb	r3, [r7, #7]
  RegisterAddr = RegisterAddr | ((uint8_t)0x80);
 8002922:	79fb      	ldrb	r3, [r7, #7]
 8002924:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002928:	71fb      	strb	r3, [r7, #7]
  ACCELERO_CS_LOW();
 800292a:	2200      	movs	r2, #0
 800292c:	2101      	movs	r1, #1
 800292e:	481a      	ldr	r0, [pc, #104]	@ (8002998 <ACCELERO_IO_Read+0x80>)
 8002930:	f000 fe78 	bl	8003624 <HAL_GPIO_WritePin>
  __SPI_DIRECTION_1LINE_TX(&SpiHandle);
 8002934:	4b19      	ldr	r3, [pc, #100]	@ (800299c <ACCELERO_IO_Read+0x84>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	681a      	ldr	r2, [r3, #0]
 800293a:	4b18      	ldr	r3, [pc, #96]	@ (800299c <ACCELERO_IO_Read+0x84>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f422 4244 	bic.w	r2, r2, #50176	@ 0xc400
 8002942:	601a      	str	r2, [r3, #0]
 8002944:	4b15      	ldr	r3, [pc, #84]	@ (800299c <ACCELERO_IO_Read+0x84>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	681a      	ldr	r2, [r3, #0]
 800294a:	4b14      	ldr	r3, [pc, #80]	@ (800299c <ACCELERO_IO_Read+0x84>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 8002952:	601a      	str	r2, [r3, #0]
  SPIx_Write(RegisterAddr);
 8002954:	79fb      	ldrb	r3, [r7, #7]
 8002956:	4618      	mov	r0, r3
 8002958:	f7ff ff04 	bl	8002764 <SPIx_Write>
  __SPI_DIRECTION_1LINE_RX(&SpiHandle);
 800295c:	4b0f      	ldr	r3, [pc, #60]	@ (800299c <ACCELERO_IO_Read+0x84>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	681a      	ldr	r2, [r3, #0]
 8002962:	4b0e      	ldr	r3, [pc, #56]	@ (800299c <ACCELERO_IO_Read+0x84>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f422 4244 	bic.w	r2, r2, #50176	@ 0xc400
 800296a:	601a      	str	r2, [r3, #0]
 800296c:	4b0b      	ldr	r3, [pc, #44]	@ (800299c <ACCELERO_IO_Read+0x84>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	681a      	ldr	r2, [r3, #0]
 8002972:	4b0a      	ldr	r3, [pc, #40]	@ (800299c <ACCELERO_IO_Read+0x84>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800297a:	601a      	str	r2, [r3, #0]
  uint8_t val = SPIx_Read();
 800297c:	f7ff ff24 	bl	80027c8 <SPIx_Read>
 8002980:	4603      	mov	r3, r0
 8002982:	73fb      	strb	r3, [r7, #15]
  ACCELERO_CS_HIGH();
 8002984:	2201      	movs	r2, #1
 8002986:	2101      	movs	r1, #1
 8002988:	4803      	ldr	r0, [pc, #12]	@ (8002998 <ACCELERO_IO_Read+0x80>)
 800298a:	f000 fe4b 	bl	8003624 <HAL_GPIO_WritePin>
  return val;
 800298e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002990:	4618      	mov	r0, r3
 8002992:	3710      	adds	r7, #16
 8002994:	46bd      	mov	sp, r7
 8002996:	bd80      	pop	{r7, pc}
 8002998:	48001000 	.word	0x48001000
 800299c:	200005a0 	.word	0x200005a0

080029a0 <MAGNETO_IO_Init>:
/**
  * @brief  Configures COMPASS/MAGNETO SPI interface.
  * @retval None
  */
void MAGNETO_IO_Init(void)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b086      	sub	sp, #24
 80029a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable CS GPIO clock and  Configure GPIO PIN for Gyroscope Chip select */
  MAGNETO_CS_GPIO_CLK_ENABLE();
 80029a6:	4b12      	ldr	r3, [pc, #72]	@ (80029f0 <MAGNETO_IO_Init+0x50>)
 80029a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029aa:	4a11      	ldr	r2, [pc, #68]	@ (80029f0 <MAGNETO_IO_Init+0x50>)
 80029ac:	f043 0304 	orr.w	r3, r3, #4
 80029b0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80029b2:	4b0f      	ldr	r3, [pc, #60]	@ (80029f0 <MAGNETO_IO_Init+0x50>)
 80029b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029b6:	f003 0304 	and.w	r3, r3, #4
 80029ba:	603b      	str	r3, [r7, #0]
 80029bc:	683b      	ldr	r3, [r7, #0]
  GPIO_InitStructure.Pin = MAGNETO_CS_PIN;
 80029be:	2301      	movs	r3, #1
 80029c0:	607b      	str	r3, [r7, #4]
  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 80029c2:	2301      	movs	r3, #1
 80029c4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 80029c6:	2300      	movs	r3, #0
 80029c8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029ca:	2303      	movs	r3, #3
 80029cc:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(MAGNETO_CS_GPIO_PORT, &GPIO_InitStructure);
 80029ce:	1d3b      	adds	r3, r7, #4
 80029d0:	4619      	mov	r1, r3
 80029d2:	4808      	ldr	r0, [pc, #32]	@ (80029f4 <MAGNETO_IO_Init+0x54>)
 80029d4:	f000 fc7c 	bl	80032d0 <HAL_GPIO_Init>

  /* Deselect : Chip Select high */
  MAGNETO_CS_HIGH();
 80029d8:	2201      	movs	r2, #1
 80029da:	2101      	movs	r1, #1
 80029dc:	4805      	ldr	r0, [pc, #20]	@ (80029f4 <MAGNETO_IO_Init+0x54>)
 80029de:	f000 fe21 	bl	8003624 <HAL_GPIO_WritePin>

  SPIx_Init();
 80029e2:	f7ff fe07 	bl	80025f4 <SPIx_Init>
}
 80029e6:	bf00      	nop
 80029e8:	3718      	adds	r7, #24
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bd80      	pop	{r7, pc}
 80029ee:	bf00      	nop
 80029f0:	40021000 	.word	0x40021000
 80029f4:	48000800 	.word	0x48000800

080029f8 <MAGNETO_IO_Write>:
  * @param  RegisterAddr specifies the COMPASS/MAGNETO register to be written.
  * @param  Value : Data to be written
  * @retval   None
 */
void MAGNETO_IO_Write(uint8_t RegisterAddr, uint8_t Value)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b082      	sub	sp, #8
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	4603      	mov	r3, r0
 8002a00:	460a      	mov	r2, r1
 8002a02:	71fb      	strb	r3, [r7, #7]
 8002a04:	4613      	mov	r3, r2
 8002a06:	71bb      	strb	r3, [r7, #6]
  MAGNETO_CS_LOW();
 8002a08:	2200      	movs	r2, #0
 8002a0a:	2101      	movs	r1, #1
 8002a0c:	4811      	ldr	r0, [pc, #68]	@ (8002a54 <MAGNETO_IO_Write+0x5c>)
 8002a0e:	f000 fe09 	bl	8003624 <HAL_GPIO_WritePin>
  __SPI_DIRECTION_1LINE_TX(&SpiHandle);
 8002a12:	4b11      	ldr	r3, [pc, #68]	@ (8002a58 <MAGNETO_IO_Write+0x60>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	681a      	ldr	r2, [r3, #0]
 8002a18:	4b0f      	ldr	r3, [pc, #60]	@ (8002a58 <MAGNETO_IO_Write+0x60>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f422 4244 	bic.w	r2, r2, #50176	@ 0xc400
 8002a20:	601a      	str	r2, [r3, #0]
 8002a22:	4b0d      	ldr	r3, [pc, #52]	@ (8002a58 <MAGNETO_IO_Write+0x60>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	681a      	ldr	r2, [r3, #0]
 8002a28:	4b0b      	ldr	r3, [pc, #44]	@ (8002a58 <MAGNETO_IO_Write+0x60>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 8002a30:	601a      	str	r2, [r3, #0]
  /* call SPI Read data bus function */
  SPIx_Write(RegisterAddr);
 8002a32:	79fb      	ldrb	r3, [r7, #7]
 8002a34:	4618      	mov	r0, r3
 8002a36:	f7ff fe95 	bl	8002764 <SPIx_Write>
  SPIx_Write(Value);
 8002a3a:	79bb      	ldrb	r3, [r7, #6]
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	f7ff fe91 	bl	8002764 <SPIx_Write>
  MAGNETO_CS_HIGH();
 8002a42:	2201      	movs	r2, #1
 8002a44:	2101      	movs	r1, #1
 8002a46:	4803      	ldr	r0, [pc, #12]	@ (8002a54 <MAGNETO_IO_Write+0x5c>)
 8002a48:	f000 fdec 	bl	8003624 <HAL_GPIO_WritePin>
}
 8002a4c:	bf00      	nop
 8002a4e:	3708      	adds	r7, #8
 8002a50:	46bd      	mov	sp, r7
 8002a52:	bd80      	pop	{r7, pc}
 8002a54:	48000800 	.word	0x48000800
 8002a58:	200005a0 	.word	0x200005a0

08002a5c <MAGNETO_IO_Read>:
  * @brief  Reads a block of data from the COMPASS/MAGNETO.
  * @param  RegisterAddr : specifies the COMPASS/MAGNETO internal address register to read from
  * @retval ACCELEROMETER register value
  */
uint8_t MAGNETO_IO_Read(uint8_t RegisterAddr)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b084      	sub	sp, #16
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	4603      	mov	r3, r0
 8002a64:	71fb      	strb	r3, [r7, #7]
  MAGNETO_CS_LOW();
 8002a66:	2200      	movs	r2, #0
 8002a68:	2101      	movs	r1, #1
 8002a6a:	481c      	ldr	r0, [pc, #112]	@ (8002adc <MAGNETO_IO_Read+0x80>)
 8002a6c:	f000 fdda 	bl	8003624 <HAL_GPIO_WritePin>
  __SPI_DIRECTION_1LINE_TX(&SpiHandle);
 8002a70:	4b1b      	ldr	r3, [pc, #108]	@ (8002ae0 <MAGNETO_IO_Read+0x84>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	681a      	ldr	r2, [r3, #0]
 8002a76:	4b1a      	ldr	r3, [pc, #104]	@ (8002ae0 <MAGNETO_IO_Read+0x84>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f422 4244 	bic.w	r2, r2, #50176	@ 0xc400
 8002a7e:	601a      	str	r2, [r3, #0]
 8002a80:	4b17      	ldr	r3, [pc, #92]	@ (8002ae0 <MAGNETO_IO_Read+0x84>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	681a      	ldr	r2, [r3, #0]
 8002a86:	4b16      	ldr	r3, [pc, #88]	@ (8002ae0 <MAGNETO_IO_Read+0x84>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 8002a8e:	601a      	str	r2, [r3, #0]
  SPIx_Write(RegisterAddr | 0x80);
 8002a90:	79fb      	ldrb	r3, [r7, #7]
 8002a92:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002a96:	b2db      	uxtb	r3, r3
 8002a98:	4618      	mov	r0, r3
 8002a9a:	f7ff fe63 	bl	8002764 <SPIx_Write>
  __SPI_DIRECTION_1LINE_RX(&SpiHandle);
 8002a9e:	4b10      	ldr	r3, [pc, #64]	@ (8002ae0 <MAGNETO_IO_Read+0x84>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	681a      	ldr	r2, [r3, #0]
 8002aa4:	4b0e      	ldr	r3, [pc, #56]	@ (8002ae0 <MAGNETO_IO_Read+0x84>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f422 4244 	bic.w	r2, r2, #50176	@ 0xc400
 8002aac:	601a      	str	r2, [r3, #0]
 8002aae:	4b0c      	ldr	r3, [pc, #48]	@ (8002ae0 <MAGNETO_IO_Read+0x84>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	681a      	ldr	r2, [r3, #0]
 8002ab4:	4b0a      	ldr	r3, [pc, #40]	@ (8002ae0 <MAGNETO_IO_Read+0x84>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002abc:	601a      	str	r2, [r3, #0]
  uint8_t val = SPIx_Read();
 8002abe:	f7ff fe83 	bl	80027c8 <SPIx_Read>
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	73fb      	strb	r3, [r7, #15]
  MAGNETO_CS_HIGH();
 8002ac6:	2201      	movs	r2, #1
 8002ac8:	2101      	movs	r1, #1
 8002aca:	4804      	ldr	r0, [pc, #16]	@ (8002adc <MAGNETO_IO_Read+0x80>)
 8002acc:	f000 fdaa 	bl	8003624 <HAL_GPIO_WritePin>
  return val;
 8002ad0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	3710      	adds	r7, #16
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	bd80      	pop	{r7, pc}
 8002ada:	bf00      	nop
 8002adc:	48000800 	.word	0x48000800
 8002ae0:	200005a0 	.word	0x200005a0

08002ae4 <GYRO_IO_Init>:
/**
  * @brief  Configures the GYRO SPI interface.
  * @retval None
  */
void GYRO_IO_Init(void)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b08a      	sub	sp, #40	@ 0x28
 8002ae8:	af00      	add	r7, sp, #0

  /* Case GYRO not used in the demonstration software except being set in
     low power mode.
     To avoid access conflicts with accelerometer and magnetometer,
     initialize  XL_CS and MAG_CS pins then deselect these I/O */
  ACCELERO_CS_GPIO_CLK_ENABLE();
 8002aea:	4b49      	ldr	r3, [pc, #292]	@ (8002c10 <GYRO_IO_Init+0x12c>)
 8002aec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002aee:	4a48      	ldr	r2, [pc, #288]	@ (8002c10 <GYRO_IO_Init+0x12c>)
 8002af0:	f043 0310 	orr.w	r3, r3, #16
 8002af4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002af6:	4b46      	ldr	r3, [pc, #280]	@ (8002c10 <GYRO_IO_Init+0x12c>)
 8002af8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002afa:	f003 0310 	and.w	r3, r3, #16
 8002afe:	613b      	str	r3, [r7, #16]
 8002b00:	693b      	ldr	r3, [r7, #16]
  GPIO_InitStructure.Pin = ACCELERO_CS_PIN;
 8002b02:	2301      	movs	r3, #1
 8002b04:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 8002b06:	2301      	movs	r3, #1
 8002b08:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b0e:	2303      	movs	r3, #3
 8002b10:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ACCELERO_CS_GPIO_PORT, &GPIO_InitStructure);
 8002b12:	f107 0314 	add.w	r3, r7, #20
 8002b16:	4619      	mov	r1, r3
 8002b18:	483e      	ldr	r0, [pc, #248]	@ (8002c14 <GYRO_IO_Init+0x130>)
 8002b1a:	f000 fbd9 	bl	80032d0 <HAL_GPIO_Init>

  /* Deselect : Chip Select high */
  ACCELERO_CS_HIGH();
 8002b1e:	2201      	movs	r2, #1
 8002b20:	2101      	movs	r1, #1
 8002b22:	483c      	ldr	r0, [pc, #240]	@ (8002c14 <GYRO_IO_Init+0x130>)
 8002b24:	f000 fd7e 	bl	8003624 <HAL_GPIO_WritePin>

  /* Enable CS GPIO clock and  Configure GPIO PIN for Gyroscope Chip select */
  MAGNETO_CS_GPIO_CLK_ENABLE();
 8002b28:	4b39      	ldr	r3, [pc, #228]	@ (8002c10 <GYRO_IO_Init+0x12c>)
 8002b2a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b2c:	4a38      	ldr	r2, [pc, #224]	@ (8002c10 <GYRO_IO_Init+0x12c>)
 8002b2e:	f043 0304 	orr.w	r3, r3, #4
 8002b32:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002b34:	4b36      	ldr	r3, [pc, #216]	@ (8002c10 <GYRO_IO_Init+0x12c>)
 8002b36:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b38:	f003 0304 	and.w	r3, r3, #4
 8002b3c:	60fb      	str	r3, [r7, #12]
 8002b3e:	68fb      	ldr	r3, [r7, #12]
  GPIO_InitStructure.Pin = MAGNETO_CS_PIN;
 8002b40:	2301      	movs	r3, #1
 8002b42:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 8002b44:	2301      	movs	r3, #1
 8002b46:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 8002b48:	2300      	movs	r3, #0
 8002b4a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b4c:	2303      	movs	r3, #3
 8002b4e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(MAGNETO_CS_GPIO_PORT, &GPIO_InitStructure);
 8002b50:	f107 0314 	add.w	r3, r7, #20
 8002b54:	4619      	mov	r1, r3
 8002b56:	4830      	ldr	r0, [pc, #192]	@ (8002c18 <GYRO_IO_Init+0x134>)
 8002b58:	f000 fbba 	bl	80032d0 <HAL_GPIO_Init>

  /* Deselect : Chip Select high */
  MAGNETO_CS_HIGH();
 8002b5c:	2201      	movs	r2, #1
 8002b5e:	2101      	movs	r1, #1
 8002b60:	482d      	ldr	r0, [pc, #180]	@ (8002c18 <GYRO_IO_Init+0x134>)
 8002b62:	f000 fd5f 	bl	8003624 <HAL_GPIO_WritePin>


  /* Configure the Gyroscope Control pins ---------------------------------*/
  /* Enable CS GPIO clock and  Configure GPIO PIN for Gyroscope Chip select */
  GYRO_CS_GPIO_CLK_ENABLE();
 8002b66:	4b2a      	ldr	r3, [pc, #168]	@ (8002c10 <GYRO_IO_Init+0x12c>)
 8002b68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b6a:	4a29      	ldr	r2, [pc, #164]	@ (8002c10 <GYRO_IO_Init+0x12c>)
 8002b6c:	f043 0308 	orr.w	r3, r3, #8
 8002b70:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002b72:	4b27      	ldr	r3, [pc, #156]	@ (8002c10 <GYRO_IO_Init+0x12c>)
 8002b74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b76:	f003 0308 	and.w	r3, r3, #8
 8002b7a:	60bb      	str	r3, [r7, #8]
 8002b7c:	68bb      	ldr	r3, [r7, #8]
  GPIO_InitStructure.Pin = GYRO_CS_PIN;
 8002b7e:	2380      	movs	r3, #128	@ 0x80
 8002b80:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 8002b82:	2301      	movs	r3, #1
 8002b84:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 8002b86:	2300      	movs	r3, #0
 8002b88:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b8a:	2303      	movs	r3, #3
 8002b8c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GYRO_CS_GPIO_PORT, &GPIO_InitStructure);
 8002b8e:	f107 0314 	add.w	r3, r7, #20
 8002b92:	4619      	mov	r1, r3
 8002b94:	4821      	ldr	r0, [pc, #132]	@ (8002c1c <GYRO_IO_Init+0x138>)
 8002b96:	f000 fb9b 	bl	80032d0 <HAL_GPIO_Init>

  /* Deselect : Chip Select high */
  GYRO_CS_HIGH();
 8002b9a:	2201      	movs	r2, #1
 8002b9c:	2180      	movs	r1, #128	@ 0x80
 8002b9e:	481f      	ldr	r0, [pc, #124]	@ (8002c1c <GYRO_IO_Init+0x138>)
 8002ba0:	f000 fd40 	bl	8003624 <HAL_GPIO_WritePin>

  /* Enable INT1, INT2 GPIO clock and Configure GPIO PINs to detect Interrupts */
  GYRO_INT1_GPIO_CLK_ENABLE();
 8002ba4:	4b1a      	ldr	r3, [pc, #104]	@ (8002c10 <GYRO_IO_Init+0x12c>)
 8002ba6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ba8:	4a19      	ldr	r2, [pc, #100]	@ (8002c10 <GYRO_IO_Init+0x12c>)
 8002baa:	f043 0308 	orr.w	r3, r3, #8
 8002bae:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002bb0:	4b17      	ldr	r3, [pc, #92]	@ (8002c10 <GYRO_IO_Init+0x12c>)
 8002bb2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002bb4:	f003 0308 	and.w	r3, r3, #8
 8002bb8:	607b      	str	r3, [r7, #4]
 8002bba:	687b      	ldr	r3, [r7, #4]
  GPIO_InitStructure.Pin = GYRO_INT1_PIN;
 8002bbc:	2304      	movs	r3, #4
 8002bbe:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bc4:	2303      	movs	r3, #3
 8002bc6:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8002bc8:	2300      	movs	r3, #0
 8002bca:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GYRO_INT1_GPIO_PORT, &GPIO_InitStructure);
 8002bcc:	f107 0314 	add.w	r3, r7, #20
 8002bd0:	4619      	mov	r1, r3
 8002bd2:	4812      	ldr	r0, [pc, #72]	@ (8002c1c <GYRO_IO_Init+0x138>)
 8002bd4:	f000 fb7c 	bl	80032d0 <HAL_GPIO_Init>

  GYRO_INT2_GPIO_CLK_ENABLE();
 8002bd8:	4b0d      	ldr	r3, [pc, #52]	@ (8002c10 <GYRO_IO_Init+0x12c>)
 8002bda:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002bdc:	4a0c      	ldr	r2, [pc, #48]	@ (8002c10 <GYRO_IO_Init+0x12c>)
 8002bde:	f043 0302 	orr.w	r3, r3, #2
 8002be2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002be4:	4b0a      	ldr	r3, [pc, #40]	@ (8002c10 <GYRO_IO_Init+0x12c>)
 8002be6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002be8:	f003 0302 	and.w	r3, r3, #2
 8002bec:	603b      	str	r3, [r7, #0]
 8002bee:	683b      	ldr	r3, [r7, #0]
  GPIO_InitStructure.Pin = GYRO_INT2_PIN;
 8002bf0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002bf4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GYRO_INT2_GPIO_PORT, &GPIO_InitStructure);
 8002bf6:	f107 0314 	add.w	r3, r7, #20
 8002bfa:	4619      	mov	r1, r3
 8002bfc:	4808      	ldr	r0, [pc, #32]	@ (8002c20 <GYRO_IO_Init+0x13c>)
 8002bfe:	f000 fb67 	bl	80032d0 <HAL_GPIO_Init>

  SPIx_Init();
 8002c02:	f7ff fcf7 	bl	80025f4 <SPIx_Init>

}
 8002c06:	bf00      	nop
 8002c08:	3728      	adds	r7, #40	@ 0x28
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bd80      	pop	{r7, pc}
 8002c0e:	bf00      	nop
 8002c10:	40021000 	.word	0x40021000
 8002c14:	48001000 	.word	0x48001000
 8002c18:	48000800 	.word	0x48000800
 8002c1c:	48000c00 	.word	0x48000c00
 8002c20:	48000400 	.word	0x48000400

08002c24 <GYRO_IO_Write>:
  * @param  WriteAddr : GYRO's internal address to write to.
  * @param  NumByteToWrite: Number of bytes to write.
  * @retval None
  */
void GYRO_IO_Write(uint8_t *pBuffer, uint8_t WriteAddr, uint16_t NumByteToWrite)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b082      	sub	sp, #8
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
 8002c2c:	460b      	mov	r3, r1
 8002c2e:	70fb      	strb	r3, [r7, #3]
 8002c30:	4613      	mov	r3, r2
 8002c32:	803b      	strh	r3, [r7, #0]
  /* Configure the MS bit:
       - When 0, the address will remain unchanged in multiple read/write commands.
       - When 1, the address will be auto incremented in multiple read/write commands.
  */
  if (NumByteToWrite > 0x01)
 8002c34:	883b      	ldrh	r3, [r7, #0]
 8002c36:	2b01      	cmp	r3, #1
 8002c38:	d903      	bls.n	8002c42 <GYRO_IO_Write+0x1e>
  {
    WriteAddr |= (uint8_t)MULTIPLEBYTE_CMD;
 8002c3a:	78fb      	ldrb	r3, [r7, #3]
 8002c3c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002c40:	70fb      	strb	r3, [r7, #3]
  }
  /* Set chip select Low at the start of the transmission */
  GYRO_CS_LOW();
 8002c42:	2200      	movs	r2, #0
 8002c44:	2180      	movs	r1, #128	@ 0x80
 8002c46:	4813      	ldr	r0, [pc, #76]	@ (8002c94 <GYRO_IO_Write+0x70>)
 8002c48:	f000 fcec 	bl	8003624 <HAL_GPIO_WritePin>
  __SPI_DIRECTION_2LINES(&SpiHandle);
 8002c4c:	4b12      	ldr	r3, [pc, #72]	@ (8002c98 <GYRO_IO_Write+0x74>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	681a      	ldr	r2, [r3, #0]
 8002c52:	4b11      	ldr	r3, [pc, #68]	@ (8002c98 <GYRO_IO_Write+0x74>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f422 4244 	bic.w	r2, r2, #50176	@ 0xc400
 8002c5a:	601a      	str	r2, [r3, #0]

  /* Send the Address of the indexed register */
  SPIx_WriteRead(WriteAddr);
 8002c5c:	78fb      	ldrb	r3, [r7, #3]
 8002c5e:	4618      	mov	r0, r3
 8002c60:	f7ff fd38 	bl	80026d4 <SPIx_WriteRead>

  /* Send the data that will be written into the device (MSB First) */
  while (NumByteToWrite >= 0x01)
 8002c64:	e00a      	b.n	8002c7c <GYRO_IO_Write+0x58>
  {
    SPIx_WriteRead(*pBuffer);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	781b      	ldrb	r3, [r3, #0]
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	f7ff fd32 	bl	80026d4 <SPIx_WriteRead>
    NumByteToWrite--;
 8002c70:	883b      	ldrh	r3, [r7, #0]
 8002c72:	3b01      	subs	r3, #1
 8002c74:	803b      	strh	r3, [r7, #0]
    pBuffer++;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	3301      	adds	r3, #1
 8002c7a:	607b      	str	r3, [r7, #4]
  while (NumByteToWrite >= 0x01)
 8002c7c:	883b      	ldrh	r3, [r7, #0]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d1f1      	bne.n	8002c66 <GYRO_IO_Write+0x42>
  }

  /* Set chip select High at the end of the transmission */
  GYRO_CS_HIGH();
 8002c82:	2201      	movs	r2, #1
 8002c84:	2180      	movs	r1, #128	@ 0x80
 8002c86:	4803      	ldr	r0, [pc, #12]	@ (8002c94 <GYRO_IO_Write+0x70>)
 8002c88:	f000 fccc 	bl	8003624 <HAL_GPIO_WritePin>
}
 8002c8c:	bf00      	nop
 8002c8e:	3708      	adds	r7, #8
 8002c90:	46bd      	mov	sp, r7
 8002c92:	bd80      	pop	{r7, pc}
 8002c94:	48000c00 	.word	0x48000c00
 8002c98:	200005a0 	.word	0x200005a0

08002c9c <GYRO_IO_Read>:
  * @param  ReadAddr : GYROSCOPE's internal address to read from.
  * @param  NumByteToRead : number of bytes to read from the GYROSCOPE.
  * @retval None
  */
void GYRO_IO_Read(uint8_t *pBuffer, uint8_t ReadAddr, uint16_t NumByteToRead)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b082      	sub	sp, #8
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
 8002ca4:	460b      	mov	r3, r1
 8002ca6:	70fb      	strb	r3, [r7, #3]
 8002ca8:	4613      	mov	r3, r2
 8002caa:	803b      	strh	r3, [r7, #0]
  if (NumByteToRead > 0x01)
 8002cac:	883b      	ldrh	r3, [r7, #0]
 8002cae:	2b01      	cmp	r3, #1
 8002cb0:	d904      	bls.n	8002cbc <GYRO_IO_Read+0x20>
  {
    ReadAddr |= (uint8_t)(READWRITE_CMD | MULTIPLEBYTE_CMD);
 8002cb2:	78fb      	ldrb	r3, [r7, #3]
 8002cb4:	f063 033f 	orn	r3, r3, #63	@ 0x3f
 8002cb8:	70fb      	strb	r3, [r7, #3]
 8002cba:	e003      	b.n	8002cc4 <GYRO_IO_Read+0x28>
  }
  else
  {
    ReadAddr |= (uint8_t)READWRITE_CMD;
 8002cbc:	78fb      	ldrb	r3, [r7, #3]
 8002cbe:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002cc2:	70fb      	strb	r3, [r7, #3]
  }
  /* Set chip select Low at the start of the transmission */
  GYRO_CS_LOW();
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	2180      	movs	r1, #128	@ 0x80
 8002cc8:	4814      	ldr	r0, [pc, #80]	@ (8002d1c <GYRO_IO_Read+0x80>)
 8002cca:	f000 fcab 	bl	8003624 <HAL_GPIO_WritePin>
  __SPI_DIRECTION_2LINES(&SpiHandle);
 8002cce:	4b14      	ldr	r3, [pc, #80]	@ (8002d20 <GYRO_IO_Read+0x84>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	681a      	ldr	r2, [r3, #0]
 8002cd4:	4b12      	ldr	r3, [pc, #72]	@ (8002d20 <GYRO_IO_Read+0x84>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f422 4244 	bic.w	r2, r2, #50176	@ 0xc400
 8002cdc:	601a      	str	r2, [r3, #0]
  /* Send the Address of the indexed register */
  SPIx_WriteRead(ReadAddr);
 8002cde:	78fb      	ldrb	r3, [r7, #3]
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	f7ff fcf7 	bl	80026d4 <SPIx_WriteRead>

  /* Receive the data that will be read from the device (MSB First) */
  while (NumByteToRead > 0x00)
 8002ce6:	e00c      	b.n	8002d02 <GYRO_IO_Read+0x66>
  {
    /* Send dummy byte (0x00) to generate the SPI clock to GYROSCOPE (Slave device) */
    *pBuffer = SPIx_WriteRead(0x00);
 8002ce8:	2000      	movs	r0, #0
 8002cea:	f7ff fcf3 	bl	80026d4 <SPIx_WriteRead>
 8002cee:	4603      	mov	r3, r0
 8002cf0:	461a      	mov	r2, r3
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	701a      	strb	r2, [r3, #0]
    NumByteToRead--;
 8002cf6:	883b      	ldrh	r3, [r7, #0]
 8002cf8:	3b01      	subs	r3, #1
 8002cfa:	803b      	strh	r3, [r7, #0]
    pBuffer++;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	3301      	adds	r3, #1
 8002d00:	607b      	str	r3, [r7, #4]
  while (NumByteToRead > 0x00)
 8002d02:	883b      	ldrh	r3, [r7, #0]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d1ef      	bne.n	8002ce8 <GYRO_IO_Read+0x4c>
  }

  /* Set chip select High at the end of the transmission */
  GYRO_CS_HIGH();
 8002d08:	2201      	movs	r2, #1
 8002d0a:	2180      	movs	r1, #128	@ 0x80
 8002d0c:	4803      	ldr	r0, [pc, #12]	@ (8002d1c <GYRO_IO_Read+0x80>)
 8002d0e:	f000 fc89 	bl	8003624 <HAL_GPIO_WritePin>
}
 8002d12:	bf00      	nop
 8002d14:	3708      	adds	r7, #8
 8002d16:	46bd      	mov	sp, r7
 8002d18:	bd80      	pop	{r7, pc}
 8002d1a:	bf00      	nop
 8002d1c:	48000c00 	.word	0x48000c00
 8002d20:	200005a0 	.word	0x200005a0

08002d24 <BSP_COMPASS_Init>:
/**
  * @brief  Initialize the COMPASS.
  * @retval COMPASS_OK or COMPASS_ERROR
  */
COMPASS_StatusTypeDef BSP_COMPASS_Init(void)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b088      	sub	sp, #32
 8002d28:	af00      	add	r7, sp, #0
  COMPASS_StatusTypeDef ret = COMPASS_OK;
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	77fb      	strb	r3, [r7, #31]
  uint16_t ctrl = 0x0000;
 8002d2e:	2300      	movs	r3, #0
 8002d30:	83bb      	strh	r3, [r7, #28]
  ACCELERO_InitTypeDef LSM303C_InitStructure;
  ACCELERO_FilterConfigTypeDef LSM303C_FilterStructure;
  MAGNETO_InitTypeDef LSM303C_InitStructureMag;

  if (Lsm303cDrv_accelero.ReadID() != LMS303C_ACC_ID)
 8002d32:	4b36      	ldr	r3, [pc, #216]	@ (8002e0c <BSP_COMPASS_Init+0xe8>)
 8002d34:	689b      	ldr	r3, [r3, #8]
 8002d36:	4798      	blx	r3
 8002d38:	4603      	mov	r3, r0
 8002d3a:	2b41      	cmp	r3, #65	@ 0x41
 8002d3c:	d002      	beq.n	8002d44 <BSP_COMPASS_Init+0x20>
  {
    ret = COMPASS_ERROR;
 8002d3e:	2301      	movs	r3, #1
 8002d40:	77fb      	strb	r3, [r7, #31]
 8002d42:	e040      	b.n	8002dc6 <BSP_COMPASS_Init+0xa2>
  }
  else
  {
    /* Initialize the COMPASS accelerometer driver structure */
    AccelerometerDrv = &Lsm303cDrv_accelero;
 8002d44:	4b32      	ldr	r3, [pc, #200]	@ (8002e10 <BSP_COMPASS_Init+0xec>)
 8002d46:	4a31      	ldr	r2, [pc, #196]	@ (8002e0c <BSP_COMPASS_Init+0xe8>)
 8002d48:	601a      	str	r2, [r3, #0]

    /* MEMS configuration ------------------------------------------------------*/
    /* Fill the COMPASS accelerometer structure */
    LSM303C_InitStructure.AccOutput_DataRate = LSM303C_ACC_ODR_50_HZ;
 8002d4a:	2320      	movs	r3, #32
 8002d4c:	757b      	strb	r3, [r7, #21]
    LSM303C_InitStructure.Axes_Enable = LSM303C_ACC_AXES_ENABLE;
 8002d4e:	2307      	movs	r3, #7
 8002d50:	75bb      	strb	r3, [r7, #22]
    LSM303C_InitStructure.AccFull_Scale = LSM303C_ACC_FULLSCALE_2G;
 8002d52:	2300      	movs	r3, #0
 8002d54:	76bb      	strb	r3, [r7, #26]
    LSM303C_InitStructure.BlockData_Update = LSM303C_ACC_BDU_CONTINUOUS;
 8002d56:	2300      	movs	r3, #0
 8002d58:	763b      	strb	r3, [r7, #24]
    LSM303C_InitStructure.High_Resolution = LSM303C_ACC_HR_DISABLE;
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	75fb      	strb	r3, [r7, #23]
    LSM303C_InitStructure.Communication_Mode = LSM303C_ACC_SPI_MODE;
 8002d5e:	2301      	movs	r3, #1
 8002d60:	76fb      	strb	r3, [r7, #27]

    /* Configure MEMS: data rate, power mode, full scale and axes */
    ctrl = (LSM303C_InitStructure.High_Resolution | LSM303C_InitStructure.AccOutput_DataRate | \
 8002d62:	7dfa      	ldrb	r2, [r7, #23]
 8002d64:	7d7b      	ldrb	r3, [r7, #21]
 8002d66:	4313      	orrs	r3, r2
 8002d68:	b2da      	uxtb	r2, r3
            LSM303C_InitStructure.Axes_Enable | LSM303C_InitStructure.BlockData_Update);
 8002d6a:	7dbb      	ldrb	r3, [r7, #22]
    ctrl = (LSM303C_InitStructure.High_Resolution | LSM303C_InitStructure.AccOutput_DataRate | \
 8002d6c:	4313      	orrs	r3, r2
 8002d6e:	b2da      	uxtb	r2, r3
            LSM303C_InitStructure.Axes_Enable | LSM303C_InitStructure.BlockData_Update);
 8002d70:	7e3b      	ldrb	r3, [r7, #24]
    ctrl = (LSM303C_InitStructure.High_Resolution | LSM303C_InitStructure.AccOutput_DataRate | \
 8002d72:	4313      	orrs	r3, r2
 8002d74:	b2db      	uxtb	r3, r3
 8002d76:	83bb      	strh	r3, [r7, #28]

    ctrl |= (LSM303C_InitStructure.AccFull_Scale | LSM303C_InitStructure.Communication_Mode) << 8;
 8002d78:	7eba      	ldrb	r2, [r7, #26]
 8002d7a:	7efb      	ldrb	r3, [r7, #27]
 8002d7c:	4313      	orrs	r3, r2
 8002d7e:	b2db      	uxtb	r3, r3
 8002d80:	b21b      	sxth	r3, r3
 8002d82:	021b      	lsls	r3, r3, #8
 8002d84:	b21a      	sxth	r2, r3
 8002d86:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8002d8a:	4313      	orrs	r3, r2
 8002d8c:	b21b      	sxth	r3, r3
 8002d8e:	83bb      	strh	r3, [r7, #28]

    /* Configure the COMPASS accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 8002d90:	4b1f      	ldr	r3, [pc, #124]	@ (8002e10 <BSP_COMPASS_Init+0xec>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	8bba      	ldrh	r2, [r7, #28]
 8002d98:	4610      	mov	r0, r2
 8002d9a:	4798      	blx	r3

    /* Fill the COMPASS accelerometer HPF structure */
    LSM303C_FilterStructure.HighPassFilter_Mode_Selection = LSM303C_ACC_HPM_NORMAL_MODE;
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	733b      	strb	r3, [r7, #12]
    LSM303C_FilterStructure.HighPassFilter_CutOff_Frequency = LSM303C_ACC_DFC1_ODRDIV50;
 8002da0:	2300      	movs	r3, #0
 8002da2:	737b      	strb	r3, [r7, #13]
    LSM303C_FilterStructure.HighPassFilter_Stat = LSM303C_ACC_HPI2S_INT1_DISABLE | LSM303C_ACC_HPI2S_INT2_DISABLE;
 8002da4:	2300      	movs	r3, #0
 8002da6:	747b      	strb	r3, [r7, #17]

    /* Configure MEMS: mode, cutoff frequency, Filter status, Click, AOI1 and AOI2 */
    ctrl = (uint8_t)(LSM303C_FilterStructure.HighPassFilter_Mode_Selection | \
 8002da8:	7b3a      	ldrb	r2, [r7, #12]
                     LSM303C_FilterStructure.HighPassFilter_CutOff_Frequency | \
 8002daa:	7b7b      	ldrb	r3, [r7, #13]
    ctrl = (uint8_t)(LSM303C_FilterStructure.HighPassFilter_Mode_Selection | \
 8002dac:	4313      	orrs	r3, r2
 8002dae:	b2da      	uxtb	r2, r3
                     LSM303C_FilterStructure.HighPassFilter_Stat);
 8002db0:	7c7b      	ldrb	r3, [r7, #17]
    ctrl = (uint8_t)(LSM303C_FilterStructure.HighPassFilter_Mode_Selection | \
 8002db2:	4313      	orrs	r3, r2
 8002db4:	b2db      	uxtb	r3, r3
 8002db6:	83bb      	strh	r3, [r7, #28]

    /* Configure the COMPASS accelerometer LPF main parameters */
    AccelerometerDrv->FilterConfig(ctrl);
 8002db8:	4b15      	ldr	r3, [pc, #84]	@ (8002e10 <BSP_COMPASS_Init+0xec>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002dbe:	8bba      	ldrh	r2, [r7, #28]
 8002dc0:	b2d2      	uxtb	r2, r2
 8002dc2:	4610      	mov	r0, r2
 8002dc4:	4798      	blx	r3
  }

  if (Lsm303cDrv_magneto.ReadID() != LMS303C_MAG_ID)
 8002dc6:	4b13      	ldr	r3, [pc, #76]	@ (8002e14 <BSP_COMPASS_Init+0xf0>)
 8002dc8:	689b      	ldr	r3, [r3, #8]
 8002dca:	4798      	blx	r3
 8002dcc:	4603      	mov	r3, r0
 8002dce:	2b3d      	cmp	r3, #61	@ 0x3d
 8002dd0:	d002      	beq.n	8002dd8 <BSP_COMPASS_Init+0xb4>
  {
    ret = COMPASS_ERROR;
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	77fb      	strb	r3, [r7, #31]
 8002dd6:	e013      	b.n	8002e00 <BSP_COMPASS_Init+0xdc>
  }
  else
  {
    /* Initialize the COMPASS magnetometer driver structure */
    MagnetoDrv = &Lsm303cDrv_magneto;
 8002dd8:	4b0f      	ldr	r3, [pc, #60]	@ (8002e18 <BSP_COMPASS_Init+0xf4>)
 8002dda:	4a0e      	ldr	r2, [pc, #56]	@ (8002e14 <BSP_COMPASS_Init+0xf0>)
 8002ddc:	601a      	str	r2, [r3, #0]

    /* MEMS configuration ------------------------------------------------------*/
    /* Fill the COMPASS magnetometer structure */
    LSM303C_InitStructureMag.Register1 = LSM303C_MAG_TEMPSENSOR_DISABLE | LSM303C_MAG_OM_XY_ULTRAHIGH | LSM303C_MAG_ODR_40_HZ;
 8002dde:	2378      	movs	r3, #120	@ 0x78
 8002de0:	713b      	strb	r3, [r7, #4]
    LSM303C_InitStructureMag.Register2 = LSM303C_MAG_FS_16_GA | LSM303C_MAG_REBOOT_DEFAULT | LSM303C_MAG_SOFT_RESET_DEFAULT;
 8002de2:	2360      	movs	r3, #96	@ 0x60
 8002de4:	717b      	strb	r3, [r7, #5]
    LSM303C_InitStructureMag.Register3 = LSM303C_MAG_SPI_MODE | LSM303C_MAG_CONFIG_NORMAL_MODE | LSM303C_MAG_CONTINUOUS_MODE;
 8002de6:	2304      	movs	r3, #4
 8002de8:	71bb      	strb	r3, [r7, #6]
    LSM303C_InitStructureMag.Register4 = LSM303C_MAG_OM_Z_ULTRAHIGH | LSM303C_MAG_BLE_LSB;
 8002dea:	230c      	movs	r3, #12
 8002dec:	71fb      	strb	r3, [r7, #7]
    LSM303C_InitStructureMag.Register5 = LSM303C_MAG_BDU_CONTINUOUS;
 8002dee:	2300      	movs	r3, #0
 8002df0:	723b      	strb	r3, [r7, #8]
    /* Configure the COMPASS magnetometer main parameters */
    MagnetoDrv->Init(LSM303C_InitStructureMag);
 8002df2:	4b09      	ldr	r3, [pc, #36]	@ (8002e18 <BSP_COMPASS_Init+0xf4>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	1d3a      	adds	r2, r7, #4
 8002dfa:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002dfe:	4798      	blx	r3
  }

  return ret;
 8002e00:	7ffb      	ldrb	r3, [r7, #31]
}
 8002e02:	4618      	mov	r0, r3
 8002e04:	3720      	adds	r7, #32
 8002e06:	46bd      	mov	sp, r7
 8002e08:	bd80      	pop	{r7, pc}
 8002e0a:	bf00      	nop
 8002e0c:	20000038 	.word	0x20000038
 8002e10:	20000604 	.word	0x20000604
 8002e14:	2000006c 	.word	0x2000006c
 8002e18:	20000608 	.word	0x20000608

08002e1c <BSP_GYRO_Init>:
/**
  * @brief  Initialize Gyroscope.
  * @retval GYRO_OK or GYRO_ERROR
  */
uint8_t BSP_GYRO_Init(void)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b084      	sub	sp, #16
 8002e20:	af00      	add	r7, sp, #0
  uint8_t ret = GYRO_ERROR;
 8002e22:	2301      	movs	r3, #1
 8002e24:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 8002e26:	2300      	movs	r3, #0
 8002e28:	81bb      	strh	r3, [r7, #12]
  GYRO_InitTypeDef L3GD20_InitStructure;
  GYRO_FilterConfigTypeDef L3GD20_FilterStructure = {0, 0};
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	703b      	strb	r3, [r7, #0]
 8002e2e:	2300      	movs	r3, #0
 8002e30:	707b      	strb	r3, [r7, #1]

  if ((L3gd20Drv.ReadID() == I_AM_L3GD20) || (L3gd20Drv.ReadID() == I_AM_L3GD20_TR))
 8002e32:	4b2c      	ldr	r3, [pc, #176]	@ (8002ee4 <BSP_GYRO_Init+0xc8>)
 8002e34:	689b      	ldr	r3, [r3, #8]
 8002e36:	4798      	blx	r3
 8002e38:	4603      	mov	r3, r0
 8002e3a:	2bd4      	cmp	r3, #212	@ 0xd4
 8002e3c:	d005      	beq.n	8002e4a <BSP_GYRO_Init+0x2e>
 8002e3e:	4b29      	ldr	r3, [pc, #164]	@ (8002ee4 <BSP_GYRO_Init+0xc8>)
 8002e40:	689b      	ldr	r3, [r3, #8]
 8002e42:	4798      	blx	r3
 8002e44:	4603      	mov	r3, r0
 8002e46:	2bd5      	cmp	r3, #213	@ 0xd5
 8002e48:	d145      	bne.n	8002ed6 <BSP_GYRO_Init+0xba>
  {
    /* Initialize the gyroscope driver structure */
    GyroscopeDrv = &L3gd20Drv;
 8002e4a:	4b27      	ldr	r3, [pc, #156]	@ (8002ee8 <BSP_GYRO_Init+0xcc>)
 8002e4c:	4a25      	ldr	r2, [pc, #148]	@ (8002ee4 <BSP_GYRO_Init+0xc8>)
 8002e4e:	601a      	str	r2, [r3, #0]

    /* Configure Mems : data rate, power mode, full scale and axes */
    L3GD20_InitStructure.Power_Mode = L3GD20_MODE_ACTIVE;
 8002e50:	2308      	movs	r3, #8
 8002e52:	713b      	strb	r3, [r7, #4]
    L3GD20_InitStructure.Output_DataRate = L3GD20_OUTPUT_DATARATE_1;
 8002e54:	2300      	movs	r3, #0
 8002e56:	717b      	strb	r3, [r7, #5]
    L3GD20_InitStructure.Axes_Enable = L3GD20_AXES_ENABLE;
 8002e58:	2307      	movs	r3, #7
 8002e5a:	71bb      	strb	r3, [r7, #6]
    L3GD20_InitStructure.Band_Width = L3GD20_BANDWIDTH_4;
 8002e5c:	2330      	movs	r3, #48	@ 0x30
 8002e5e:	71fb      	strb	r3, [r7, #7]
    L3GD20_InitStructure.BlockData_Update = L3GD20_BlockDataUpdate_Continous;
 8002e60:	2300      	movs	r3, #0
 8002e62:	723b      	strb	r3, [r7, #8]
    L3GD20_InitStructure.Endianness = L3GD20_BLE_LSB;
 8002e64:	2300      	movs	r3, #0
 8002e66:	727b      	strb	r3, [r7, #9]
    L3GD20_InitStructure.Full_Scale = L3GD20_FULLSCALE_500;
 8002e68:	2310      	movs	r3, #16
 8002e6a:	72bb      	strb	r3, [r7, #10]

    /* Configure MEMS: data rate, power mode, full scale and axes */
    ctrl = (uint16_t)(L3GD20_InitStructure.Power_Mode | L3GD20_InitStructure.Output_DataRate | \
 8002e6c:	793a      	ldrb	r2, [r7, #4]
 8002e6e:	797b      	ldrb	r3, [r7, #5]
 8002e70:	4313      	orrs	r3, r2
 8002e72:	b2da      	uxtb	r2, r3
                      L3GD20_InitStructure.Axes_Enable | L3GD20_InitStructure.Band_Width);
 8002e74:	79bb      	ldrb	r3, [r7, #6]
    ctrl = (uint16_t)(L3GD20_InitStructure.Power_Mode | L3GD20_InitStructure.Output_DataRate | \
 8002e76:	4313      	orrs	r3, r2
 8002e78:	b2da      	uxtb	r2, r3
                      L3GD20_InitStructure.Axes_Enable | L3GD20_InitStructure.Band_Width);
 8002e7a:	79fb      	ldrb	r3, [r7, #7]
    ctrl = (uint16_t)(L3GD20_InitStructure.Power_Mode | L3GD20_InitStructure.Output_DataRate | \
 8002e7c:	4313      	orrs	r3, r2
 8002e7e:	b2db      	uxtb	r3, r3
 8002e80:	81bb      	strh	r3, [r7, #12]

    ctrl |= (uint16_t)((L3GD20_InitStructure.BlockData_Update | L3GD20_InitStructure.Endianness | \
 8002e82:	7a3a      	ldrb	r2, [r7, #8]
 8002e84:	7a7b      	ldrb	r3, [r7, #9]
 8002e86:	4313      	orrs	r3, r2
 8002e88:	b2da      	uxtb	r2, r3
                        L3GD20_InitStructure.Full_Scale) << 8);
 8002e8a:	7abb      	ldrb	r3, [r7, #10]
    ctrl |= (uint16_t)((L3GD20_InitStructure.BlockData_Update | L3GD20_InitStructure.Endianness | \
 8002e8c:	4313      	orrs	r3, r2
 8002e8e:	b2db      	uxtb	r3, r3
 8002e90:	021b      	lsls	r3, r3, #8
 8002e92:	b29a      	uxth	r2, r3
 8002e94:	89bb      	ldrh	r3, [r7, #12]
 8002e96:	4313      	orrs	r3, r2
 8002e98:	81bb      	strh	r3, [r7, #12]

    /* Initialize component */
    GyroscopeDrv->Init(ctrl);
 8002e9a:	4b13      	ldr	r3, [pc, #76]	@ (8002ee8 <BSP_GYRO_Init+0xcc>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	89ba      	ldrh	r2, [r7, #12]
 8002ea2:	4610      	mov	r0, r2
 8002ea4:	4798      	blx	r3

    L3GD20_FilterStructure.HighPassFilter_Mode_Selection = L3GD20_HPM_NORMAL_MODE_RES;
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	703b      	strb	r3, [r7, #0]
    L3GD20_FilterStructure.HighPassFilter_CutOff_Frequency = L3GD20_HPFCF_0;
 8002eaa:	2300      	movs	r3, #0
 8002eac:	707b      	strb	r3, [r7, #1]

    ctrl = (uint8_t)((L3GD20_FilterStructure.HighPassFilter_Mode_Selection | \
 8002eae:	783a      	ldrb	r2, [r7, #0]
                      L3GD20_FilterStructure.HighPassFilter_CutOff_Frequency));
 8002eb0:	787b      	ldrb	r3, [r7, #1]
    ctrl = (uint8_t)((L3GD20_FilterStructure.HighPassFilter_Mode_Selection | \
 8002eb2:	4313      	orrs	r3, r2
 8002eb4:	b2db      	uxtb	r3, r3
 8002eb6:	81bb      	strh	r3, [r7, #12]

    /* Configure component filter */
    GyroscopeDrv->FilterConfig(ctrl) ;
 8002eb8:	4b0b      	ldr	r3, [pc, #44]	@ (8002ee8 <BSP_GYRO_Init+0xcc>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ebe:	89ba      	ldrh	r2, [r7, #12]
 8002ec0:	b2d2      	uxtb	r2, r2
 8002ec2:	4610      	mov	r0, r2
 8002ec4:	4798      	blx	r3

    /* Enable component filter */
    GyroscopeDrv->FilterCmd(L3GD20_HIGHPASSFILTER_ENABLE);
 8002ec6:	4b08      	ldr	r3, [pc, #32]	@ (8002ee8 <BSP_GYRO_Init+0xcc>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ecc:	2010      	movs	r0, #16
 8002ece:	4798      	blx	r3

    ret = GYRO_OK;
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	73fb      	strb	r3, [r7, #15]
 8002ed4:	e001      	b.n	8002eda <BSP_GYRO_Init+0xbe>
  }
  else
  {
    ret = GYRO_ERROR;
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8002eda:	7bfb      	ldrb	r3, [r7, #15]
}
 8002edc:	4618      	mov	r0, r3
 8002ede:	3710      	adds	r7, #16
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	bd80      	pop	{r7, pc}
 8002ee4:	20000004 	.word	0x20000004
 8002ee8:	2000060c 	.word	0x2000060c

08002eec <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b082      	sub	sp, #8
 8002ef0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002ef6:	4b0c      	ldr	r3, [pc, #48]	@ (8002f28 <HAL_Init+0x3c>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	4a0b      	ldr	r2, [pc, #44]	@ (8002f28 <HAL_Init+0x3c>)
 8002efc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f00:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002f02:	2003      	movs	r0, #3
 8002f04:	f000 f962 	bl	80031cc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002f08:	2000      	movs	r0, #0
 8002f0a:	f000 f80f 	bl	8002f2c <HAL_InitTick>
 8002f0e:	4603      	mov	r3, r0
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d002      	beq.n	8002f1a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8002f14:	2301      	movs	r3, #1
 8002f16:	71fb      	strb	r3, [r7, #7]
 8002f18:	e001      	b.n	8002f1e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002f1a:	f7fe fcad 	bl	8001878 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002f1e:	79fb      	ldrb	r3, [r7, #7]
}
 8002f20:	4618      	mov	r0, r3
 8002f22:	3708      	adds	r7, #8
 8002f24:	46bd      	mov	sp, r7
 8002f26:	bd80      	pop	{r7, pc}
 8002f28:	40022000 	.word	0x40022000

08002f2c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b084      	sub	sp, #16
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002f34:	2300      	movs	r3, #0
 8002f36:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002f38:	4b17      	ldr	r3, [pc, #92]	@ (8002f98 <HAL_InitTick+0x6c>)
 8002f3a:	781b      	ldrb	r3, [r3, #0]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d023      	beq.n	8002f88 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002f40:	4b16      	ldr	r3, [pc, #88]	@ (8002f9c <HAL_InitTick+0x70>)
 8002f42:	681a      	ldr	r2, [r3, #0]
 8002f44:	4b14      	ldr	r3, [pc, #80]	@ (8002f98 <HAL_InitTick+0x6c>)
 8002f46:	781b      	ldrb	r3, [r3, #0]
 8002f48:	4619      	mov	r1, r3
 8002f4a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002f4e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002f52:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f56:	4618      	mov	r0, r3
 8002f58:	f000 f96d 	bl	8003236 <HAL_SYSTICK_Config>
 8002f5c:	4603      	mov	r3, r0
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d10f      	bne.n	8002f82 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2b0f      	cmp	r3, #15
 8002f66:	d809      	bhi.n	8002f7c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002f68:	2200      	movs	r2, #0
 8002f6a:	6879      	ldr	r1, [r7, #4]
 8002f6c:	f04f 30ff 	mov.w	r0, #4294967295
 8002f70:	f000 f937 	bl	80031e2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002f74:	4a0a      	ldr	r2, [pc, #40]	@ (8002fa0 <HAL_InitTick+0x74>)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6013      	str	r3, [r2, #0]
 8002f7a:	e007      	b.n	8002f8c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	73fb      	strb	r3, [r7, #15]
 8002f80:	e004      	b.n	8002f8c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002f82:	2301      	movs	r3, #1
 8002f84:	73fb      	strb	r3, [r7, #15]
 8002f86:	e001      	b.n	8002f8c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002f88:	2301      	movs	r3, #1
 8002f8a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002f8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f8e:	4618      	mov	r0, r3
 8002f90:	3710      	adds	r7, #16
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bd80      	pop	{r7, pc}
 8002f96:	bf00      	nop
 8002f98:	200000a4 	.word	0x200000a4
 8002f9c:	20000000 	.word	0x20000000
 8002fa0:	200000a0 	.word	0x200000a0

08002fa4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002fa8:	4b06      	ldr	r3, [pc, #24]	@ (8002fc4 <HAL_IncTick+0x20>)
 8002faa:	781b      	ldrb	r3, [r3, #0]
 8002fac:	461a      	mov	r2, r3
 8002fae:	4b06      	ldr	r3, [pc, #24]	@ (8002fc8 <HAL_IncTick+0x24>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	4413      	add	r3, r2
 8002fb4:	4a04      	ldr	r2, [pc, #16]	@ (8002fc8 <HAL_IncTick+0x24>)
 8002fb6:	6013      	str	r3, [r2, #0]
}
 8002fb8:	bf00      	nop
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc0:	4770      	bx	lr
 8002fc2:	bf00      	nop
 8002fc4:	200000a4 	.word	0x200000a4
 8002fc8:	20000610 	.word	0x20000610

08002fcc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002fcc:	b480      	push	{r7}
 8002fce:	af00      	add	r7, sp, #0
  return uwTick;
 8002fd0:	4b03      	ldr	r3, [pc, #12]	@ (8002fe0 <HAL_GetTick+0x14>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
}
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fdc:	4770      	bx	lr
 8002fde:	bf00      	nop
 8002fe0:	20000610 	.word	0x20000610

08002fe4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b084      	sub	sp, #16
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002fec:	f7ff ffee 	bl	8002fcc <HAL_GetTick>
 8002ff0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ffc:	d005      	beq.n	800300a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002ffe:	4b0a      	ldr	r3, [pc, #40]	@ (8003028 <HAL_Delay+0x44>)
 8003000:	781b      	ldrb	r3, [r3, #0]
 8003002:	461a      	mov	r2, r3
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	4413      	add	r3, r2
 8003008:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800300a:	bf00      	nop
 800300c:	f7ff ffde 	bl	8002fcc <HAL_GetTick>
 8003010:	4602      	mov	r2, r0
 8003012:	68bb      	ldr	r3, [r7, #8]
 8003014:	1ad3      	subs	r3, r2, r3
 8003016:	68fa      	ldr	r2, [r7, #12]
 8003018:	429a      	cmp	r2, r3
 800301a:	d8f7      	bhi.n	800300c <HAL_Delay+0x28>
  {
  }
}
 800301c:	bf00      	nop
 800301e:	bf00      	nop
 8003020:	3710      	adds	r7, #16
 8003022:	46bd      	mov	sp, r7
 8003024:	bd80      	pop	{r7, pc}
 8003026:	bf00      	nop
 8003028:	200000a4 	.word	0x200000a4

0800302c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800302c:	b480      	push	{r7}
 800302e:	b085      	sub	sp, #20
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	f003 0307 	and.w	r3, r3, #7
 800303a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800303c:	4b0c      	ldr	r3, [pc, #48]	@ (8003070 <__NVIC_SetPriorityGrouping+0x44>)
 800303e:	68db      	ldr	r3, [r3, #12]
 8003040:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003042:	68ba      	ldr	r2, [r7, #8]
 8003044:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003048:	4013      	ands	r3, r2
 800304a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003050:	68bb      	ldr	r3, [r7, #8]
 8003052:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003054:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003058:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800305c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800305e:	4a04      	ldr	r2, [pc, #16]	@ (8003070 <__NVIC_SetPriorityGrouping+0x44>)
 8003060:	68bb      	ldr	r3, [r7, #8]
 8003062:	60d3      	str	r3, [r2, #12]
}
 8003064:	bf00      	nop
 8003066:	3714      	adds	r7, #20
 8003068:	46bd      	mov	sp, r7
 800306a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306e:	4770      	bx	lr
 8003070:	e000ed00 	.word	0xe000ed00

08003074 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003074:	b480      	push	{r7}
 8003076:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003078:	4b04      	ldr	r3, [pc, #16]	@ (800308c <__NVIC_GetPriorityGrouping+0x18>)
 800307a:	68db      	ldr	r3, [r3, #12]
 800307c:	0a1b      	lsrs	r3, r3, #8
 800307e:	f003 0307 	and.w	r3, r3, #7
}
 8003082:	4618      	mov	r0, r3
 8003084:	46bd      	mov	sp, r7
 8003086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308a:	4770      	bx	lr
 800308c:	e000ed00 	.word	0xe000ed00

08003090 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003090:	b480      	push	{r7}
 8003092:	b083      	sub	sp, #12
 8003094:	af00      	add	r7, sp, #0
 8003096:	4603      	mov	r3, r0
 8003098:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800309a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	db0b      	blt.n	80030ba <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80030a2:	79fb      	ldrb	r3, [r7, #7]
 80030a4:	f003 021f 	and.w	r2, r3, #31
 80030a8:	4907      	ldr	r1, [pc, #28]	@ (80030c8 <__NVIC_EnableIRQ+0x38>)
 80030aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030ae:	095b      	lsrs	r3, r3, #5
 80030b0:	2001      	movs	r0, #1
 80030b2:	fa00 f202 	lsl.w	r2, r0, r2
 80030b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80030ba:	bf00      	nop
 80030bc:	370c      	adds	r7, #12
 80030be:	46bd      	mov	sp, r7
 80030c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c4:	4770      	bx	lr
 80030c6:	bf00      	nop
 80030c8:	e000e100 	.word	0xe000e100

080030cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80030cc:	b480      	push	{r7}
 80030ce:	b083      	sub	sp, #12
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	4603      	mov	r3, r0
 80030d4:	6039      	str	r1, [r7, #0]
 80030d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	db0a      	blt.n	80030f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	b2da      	uxtb	r2, r3
 80030e4:	490c      	ldr	r1, [pc, #48]	@ (8003118 <__NVIC_SetPriority+0x4c>)
 80030e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030ea:	0112      	lsls	r2, r2, #4
 80030ec:	b2d2      	uxtb	r2, r2
 80030ee:	440b      	add	r3, r1
 80030f0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80030f4:	e00a      	b.n	800310c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	b2da      	uxtb	r2, r3
 80030fa:	4908      	ldr	r1, [pc, #32]	@ (800311c <__NVIC_SetPriority+0x50>)
 80030fc:	79fb      	ldrb	r3, [r7, #7]
 80030fe:	f003 030f 	and.w	r3, r3, #15
 8003102:	3b04      	subs	r3, #4
 8003104:	0112      	lsls	r2, r2, #4
 8003106:	b2d2      	uxtb	r2, r2
 8003108:	440b      	add	r3, r1
 800310a:	761a      	strb	r2, [r3, #24]
}
 800310c:	bf00      	nop
 800310e:	370c      	adds	r7, #12
 8003110:	46bd      	mov	sp, r7
 8003112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003116:	4770      	bx	lr
 8003118:	e000e100 	.word	0xe000e100
 800311c:	e000ed00 	.word	0xe000ed00

08003120 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003120:	b480      	push	{r7}
 8003122:	b089      	sub	sp, #36	@ 0x24
 8003124:	af00      	add	r7, sp, #0
 8003126:	60f8      	str	r0, [r7, #12]
 8003128:	60b9      	str	r1, [r7, #8]
 800312a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	f003 0307 	and.w	r3, r3, #7
 8003132:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003134:	69fb      	ldr	r3, [r7, #28]
 8003136:	f1c3 0307 	rsb	r3, r3, #7
 800313a:	2b04      	cmp	r3, #4
 800313c:	bf28      	it	cs
 800313e:	2304      	movcs	r3, #4
 8003140:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003142:	69fb      	ldr	r3, [r7, #28]
 8003144:	3304      	adds	r3, #4
 8003146:	2b06      	cmp	r3, #6
 8003148:	d902      	bls.n	8003150 <NVIC_EncodePriority+0x30>
 800314a:	69fb      	ldr	r3, [r7, #28]
 800314c:	3b03      	subs	r3, #3
 800314e:	e000      	b.n	8003152 <NVIC_EncodePriority+0x32>
 8003150:	2300      	movs	r3, #0
 8003152:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003154:	f04f 32ff 	mov.w	r2, #4294967295
 8003158:	69bb      	ldr	r3, [r7, #24]
 800315a:	fa02 f303 	lsl.w	r3, r2, r3
 800315e:	43da      	mvns	r2, r3
 8003160:	68bb      	ldr	r3, [r7, #8]
 8003162:	401a      	ands	r2, r3
 8003164:	697b      	ldr	r3, [r7, #20]
 8003166:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003168:	f04f 31ff 	mov.w	r1, #4294967295
 800316c:	697b      	ldr	r3, [r7, #20]
 800316e:	fa01 f303 	lsl.w	r3, r1, r3
 8003172:	43d9      	mvns	r1, r3
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003178:	4313      	orrs	r3, r2
         );
}
 800317a:	4618      	mov	r0, r3
 800317c:	3724      	adds	r7, #36	@ 0x24
 800317e:	46bd      	mov	sp, r7
 8003180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003184:	4770      	bx	lr
	...

08003188 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b082      	sub	sp, #8
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	3b01      	subs	r3, #1
 8003194:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003198:	d301      	bcc.n	800319e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800319a:	2301      	movs	r3, #1
 800319c:	e00f      	b.n	80031be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800319e:	4a0a      	ldr	r2, [pc, #40]	@ (80031c8 <SysTick_Config+0x40>)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	3b01      	subs	r3, #1
 80031a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80031a6:	210f      	movs	r1, #15
 80031a8:	f04f 30ff 	mov.w	r0, #4294967295
 80031ac:	f7ff ff8e 	bl	80030cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80031b0:	4b05      	ldr	r3, [pc, #20]	@ (80031c8 <SysTick_Config+0x40>)
 80031b2:	2200      	movs	r2, #0
 80031b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80031b6:	4b04      	ldr	r3, [pc, #16]	@ (80031c8 <SysTick_Config+0x40>)
 80031b8:	2207      	movs	r2, #7
 80031ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80031bc:	2300      	movs	r3, #0
}
 80031be:	4618      	mov	r0, r3
 80031c0:	3708      	adds	r7, #8
 80031c2:	46bd      	mov	sp, r7
 80031c4:	bd80      	pop	{r7, pc}
 80031c6:	bf00      	nop
 80031c8:	e000e010 	.word	0xe000e010

080031cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b082      	sub	sp, #8
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80031d4:	6878      	ldr	r0, [r7, #4]
 80031d6:	f7ff ff29 	bl	800302c <__NVIC_SetPriorityGrouping>
}
 80031da:	bf00      	nop
 80031dc:	3708      	adds	r7, #8
 80031de:	46bd      	mov	sp, r7
 80031e0:	bd80      	pop	{r7, pc}

080031e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80031e2:	b580      	push	{r7, lr}
 80031e4:	b086      	sub	sp, #24
 80031e6:	af00      	add	r7, sp, #0
 80031e8:	4603      	mov	r3, r0
 80031ea:	60b9      	str	r1, [r7, #8]
 80031ec:	607a      	str	r2, [r7, #4]
 80031ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80031f0:	2300      	movs	r3, #0
 80031f2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80031f4:	f7ff ff3e 	bl	8003074 <__NVIC_GetPriorityGrouping>
 80031f8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80031fa:	687a      	ldr	r2, [r7, #4]
 80031fc:	68b9      	ldr	r1, [r7, #8]
 80031fe:	6978      	ldr	r0, [r7, #20]
 8003200:	f7ff ff8e 	bl	8003120 <NVIC_EncodePriority>
 8003204:	4602      	mov	r2, r0
 8003206:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800320a:	4611      	mov	r1, r2
 800320c:	4618      	mov	r0, r3
 800320e:	f7ff ff5d 	bl	80030cc <__NVIC_SetPriority>
}
 8003212:	bf00      	nop
 8003214:	3718      	adds	r7, #24
 8003216:	46bd      	mov	sp, r7
 8003218:	bd80      	pop	{r7, pc}

0800321a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800321a:	b580      	push	{r7, lr}
 800321c:	b082      	sub	sp, #8
 800321e:	af00      	add	r7, sp, #0
 8003220:	4603      	mov	r3, r0
 8003222:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003224:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003228:	4618      	mov	r0, r3
 800322a:	f7ff ff31 	bl	8003090 <__NVIC_EnableIRQ>
}
 800322e:	bf00      	nop
 8003230:	3708      	adds	r7, #8
 8003232:	46bd      	mov	sp, r7
 8003234:	bd80      	pop	{r7, pc}

08003236 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003236:	b580      	push	{r7, lr}
 8003238:	b082      	sub	sp, #8
 800323a:	af00      	add	r7, sp, #0
 800323c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800323e:	6878      	ldr	r0, [r7, #4]
 8003240:	f7ff ffa2 	bl	8003188 <SysTick_Config>
 8003244:	4603      	mov	r3, r0
}
 8003246:	4618      	mov	r0, r3
 8003248:	3708      	adds	r7, #8
 800324a:	46bd      	mov	sp, r7
 800324c:	bd80      	pop	{r7, pc}

0800324e <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800324e:	b580      	push	{r7, lr}
 8003250:	b084      	sub	sp, #16
 8003252:	af00      	add	r7, sp, #0
 8003254:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003256:	2300      	movs	r3, #0
 8003258:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003260:	b2db      	uxtb	r3, r3
 8003262:	2b02      	cmp	r3, #2
 8003264:	d005      	beq.n	8003272 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2204      	movs	r2, #4
 800326a:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800326c:	2301      	movs	r3, #1
 800326e:	73fb      	strb	r3, [r7, #15]
 8003270:	e029      	b.n	80032c6 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	681a      	ldr	r2, [r3, #0]
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f022 020e 	bic.w	r2, r2, #14
 8003280:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	681a      	ldr	r2, [r3, #0]
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f022 0201 	bic.w	r2, r2, #1
 8003290:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003296:	f003 021c 	and.w	r2, r3, #28
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800329e:	2101      	movs	r1, #1
 80032a0:	fa01 f202 	lsl.w	r2, r1, r2
 80032a4:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	2201      	movs	r2, #1
 80032aa:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	2200      	movs	r2, #0
 80032b2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d003      	beq.n	80032c6 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032c2:	6878      	ldr	r0, [r7, #4]
 80032c4:	4798      	blx	r3
    }
  }
  return status;
 80032c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80032c8:	4618      	mov	r0, r3
 80032ca:	3710      	adds	r7, #16
 80032cc:	46bd      	mov	sp, r7
 80032ce:	bd80      	pop	{r7, pc}

080032d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80032d0:	b480      	push	{r7}
 80032d2:	b087      	sub	sp, #28
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
 80032d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80032da:	2300      	movs	r3, #0
 80032dc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80032de:	e17f      	b.n	80035e0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	681a      	ldr	r2, [r3, #0]
 80032e4:	2101      	movs	r1, #1
 80032e6:	697b      	ldr	r3, [r7, #20]
 80032e8:	fa01 f303 	lsl.w	r3, r1, r3
 80032ec:	4013      	ands	r3, r2
 80032ee:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	f000 8171 	beq.w	80035da <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	2b01      	cmp	r3, #1
 80032fe:	d00b      	beq.n	8003318 <HAL_GPIO_Init+0x48>
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	685b      	ldr	r3, [r3, #4]
 8003304:	2b02      	cmp	r3, #2
 8003306:	d007      	beq.n	8003318 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800330c:	2b11      	cmp	r3, #17
 800330e:	d003      	beq.n	8003318 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	685b      	ldr	r3, [r3, #4]
 8003314:	2b12      	cmp	r3, #18
 8003316:	d130      	bne.n	800337a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	689b      	ldr	r3, [r3, #8]
 800331c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800331e:	697b      	ldr	r3, [r7, #20]
 8003320:	005b      	lsls	r3, r3, #1
 8003322:	2203      	movs	r2, #3
 8003324:	fa02 f303 	lsl.w	r3, r2, r3
 8003328:	43db      	mvns	r3, r3
 800332a:	693a      	ldr	r2, [r7, #16]
 800332c:	4013      	ands	r3, r2
 800332e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	68da      	ldr	r2, [r3, #12]
 8003334:	697b      	ldr	r3, [r7, #20]
 8003336:	005b      	lsls	r3, r3, #1
 8003338:	fa02 f303 	lsl.w	r3, r2, r3
 800333c:	693a      	ldr	r2, [r7, #16]
 800333e:	4313      	orrs	r3, r2
 8003340:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	693a      	ldr	r2, [r7, #16]
 8003346:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	685b      	ldr	r3, [r3, #4]
 800334c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800334e:	2201      	movs	r2, #1
 8003350:	697b      	ldr	r3, [r7, #20]
 8003352:	fa02 f303 	lsl.w	r3, r2, r3
 8003356:	43db      	mvns	r3, r3
 8003358:	693a      	ldr	r2, [r7, #16]
 800335a:	4013      	ands	r3, r2
 800335c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	685b      	ldr	r3, [r3, #4]
 8003362:	091b      	lsrs	r3, r3, #4
 8003364:	f003 0201 	and.w	r2, r3, #1
 8003368:	697b      	ldr	r3, [r7, #20]
 800336a:	fa02 f303 	lsl.w	r3, r2, r3
 800336e:	693a      	ldr	r2, [r7, #16]
 8003370:	4313      	orrs	r3, r2
 8003372:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	693a      	ldr	r2, [r7, #16]
 8003378:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	685b      	ldr	r3, [r3, #4]
 800337e:	f003 0303 	and.w	r3, r3, #3
 8003382:	2b03      	cmp	r3, #3
 8003384:	d118      	bne.n	80033b8 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800338a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800338c:	2201      	movs	r2, #1
 800338e:	697b      	ldr	r3, [r7, #20]
 8003390:	fa02 f303 	lsl.w	r3, r2, r3
 8003394:	43db      	mvns	r3, r3
 8003396:	693a      	ldr	r2, [r7, #16]
 8003398:	4013      	ands	r3, r2
 800339a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	685b      	ldr	r3, [r3, #4]
 80033a0:	08db      	lsrs	r3, r3, #3
 80033a2:	f003 0201 	and.w	r2, r3, #1
 80033a6:	697b      	ldr	r3, [r7, #20]
 80033a8:	fa02 f303 	lsl.w	r3, r2, r3
 80033ac:	693a      	ldr	r2, [r7, #16]
 80033ae:	4313      	orrs	r3, r2
 80033b0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	693a      	ldr	r2, [r7, #16]
 80033b6:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	68db      	ldr	r3, [r3, #12]
 80033bc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80033be:	697b      	ldr	r3, [r7, #20]
 80033c0:	005b      	lsls	r3, r3, #1
 80033c2:	2203      	movs	r2, #3
 80033c4:	fa02 f303 	lsl.w	r3, r2, r3
 80033c8:	43db      	mvns	r3, r3
 80033ca:	693a      	ldr	r2, [r7, #16]
 80033cc:	4013      	ands	r3, r2
 80033ce:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	689a      	ldr	r2, [r3, #8]
 80033d4:	697b      	ldr	r3, [r7, #20]
 80033d6:	005b      	lsls	r3, r3, #1
 80033d8:	fa02 f303 	lsl.w	r3, r2, r3
 80033dc:	693a      	ldr	r2, [r7, #16]
 80033de:	4313      	orrs	r3, r2
 80033e0:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	693a      	ldr	r2, [r7, #16]
 80033e6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	2b02      	cmp	r3, #2
 80033ee:	d003      	beq.n	80033f8 <HAL_GPIO_Init+0x128>
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	685b      	ldr	r3, [r3, #4]
 80033f4:	2b12      	cmp	r3, #18
 80033f6:	d123      	bne.n	8003440 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80033f8:	697b      	ldr	r3, [r7, #20]
 80033fa:	08da      	lsrs	r2, r3, #3
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	3208      	adds	r2, #8
 8003400:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003404:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003406:	697b      	ldr	r3, [r7, #20]
 8003408:	f003 0307 	and.w	r3, r3, #7
 800340c:	009b      	lsls	r3, r3, #2
 800340e:	220f      	movs	r2, #15
 8003410:	fa02 f303 	lsl.w	r3, r2, r3
 8003414:	43db      	mvns	r3, r3
 8003416:	693a      	ldr	r2, [r7, #16]
 8003418:	4013      	ands	r3, r2
 800341a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	691a      	ldr	r2, [r3, #16]
 8003420:	697b      	ldr	r3, [r7, #20]
 8003422:	f003 0307 	and.w	r3, r3, #7
 8003426:	009b      	lsls	r3, r3, #2
 8003428:	fa02 f303 	lsl.w	r3, r2, r3
 800342c:	693a      	ldr	r2, [r7, #16]
 800342e:	4313      	orrs	r3, r2
 8003430:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003432:	697b      	ldr	r3, [r7, #20]
 8003434:	08da      	lsrs	r2, r3, #3
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	3208      	adds	r2, #8
 800343a:	6939      	ldr	r1, [r7, #16]
 800343c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003446:	697b      	ldr	r3, [r7, #20]
 8003448:	005b      	lsls	r3, r3, #1
 800344a:	2203      	movs	r2, #3
 800344c:	fa02 f303 	lsl.w	r3, r2, r3
 8003450:	43db      	mvns	r3, r3
 8003452:	693a      	ldr	r2, [r7, #16]
 8003454:	4013      	ands	r3, r2
 8003456:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	f003 0203 	and.w	r2, r3, #3
 8003460:	697b      	ldr	r3, [r7, #20]
 8003462:	005b      	lsls	r3, r3, #1
 8003464:	fa02 f303 	lsl.w	r3, r2, r3
 8003468:	693a      	ldr	r2, [r7, #16]
 800346a:	4313      	orrs	r3, r2
 800346c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	693a      	ldr	r2, [r7, #16]
 8003472:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	685b      	ldr	r3, [r3, #4]
 8003478:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800347c:	2b00      	cmp	r3, #0
 800347e:	f000 80ac 	beq.w	80035da <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003482:	4b5f      	ldr	r3, [pc, #380]	@ (8003600 <HAL_GPIO_Init+0x330>)
 8003484:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003486:	4a5e      	ldr	r2, [pc, #376]	@ (8003600 <HAL_GPIO_Init+0x330>)
 8003488:	f043 0301 	orr.w	r3, r3, #1
 800348c:	6613      	str	r3, [r2, #96]	@ 0x60
 800348e:	4b5c      	ldr	r3, [pc, #368]	@ (8003600 <HAL_GPIO_Init+0x330>)
 8003490:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003492:	f003 0301 	and.w	r3, r3, #1
 8003496:	60bb      	str	r3, [r7, #8]
 8003498:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800349a:	4a5a      	ldr	r2, [pc, #360]	@ (8003604 <HAL_GPIO_Init+0x334>)
 800349c:	697b      	ldr	r3, [r7, #20]
 800349e:	089b      	lsrs	r3, r3, #2
 80034a0:	3302      	adds	r3, #2
 80034a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034a6:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80034a8:	697b      	ldr	r3, [r7, #20]
 80034aa:	f003 0303 	and.w	r3, r3, #3
 80034ae:	009b      	lsls	r3, r3, #2
 80034b0:	220f      	movs	r2, #15
 80034b2:	fa02 f303 	lsl.w	r3, r2, r3
 80034b6:	43db      	mvns	r3, r3
 80034b8:	693a      	ldr	r2, [r7, #16]
 80034ba:	4013      	ands	r3, r2
 80034bc:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80034c4:	d025      	beq.n	8003512 <HAL_GPIO_Init+0x242>
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	4a4f      	ldr	r2, [pc, #316]	@ (8003608 <HAL_GPIO_Init+0x338>)
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d01f      	beq.n	800350e <HAL_GPIO_Init+0x23e>
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	4a4e      	ldr	r2, [pc, #312]	@ (800360c <HAL_GPIO_Init+0x33c>)
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d019      	beq.n	800350a <HAL_GPIO_Init+0x23a>
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	4a4d      	ldr	r2, [pc, #308]	@ (8003610 <HAL_GPIO_Init+0x340>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	d013      	beq.n	8003506 <HAL_GPIO_Init+0x236>
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	4a4c      	ldr	r2, [pc, #304]	@ (8003614 <HAL_GPIO_Init+0x344>)
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d00d      	beq.n	8003502 <HAL_GPIO_Init+0x232>
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	4a4b      	ldr	r2, [pc, #300]	@ (8003618 <HAL_GPIO_Init+0x348>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d007      	beq.n	80034fe <HAL_GPIO_Init+0x22e>
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	4a4a      	ldr	r2, [pc, #296]	@ (800361c <HAL_GPIO_Init+0x34c>)
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d101      	bne.n	80034fa <HAL_GPIO_Init+0x22a>
 80034f6:	2306      	movs	r3, #6
 80034f8:	e00c      	b.n	8003514 <HAL_GPIO_Init+0x244>
 80034fa:	2307      	movs	r3, #7
 80034fc:	e00a      	b.n	8003514 <HAL_GPIO_Init+0x244>
 80034fe:	2305      	movs	r3, #5
 8003500:	e008      	b.n	8003514 <HAL_GPIO_Init+0x244>
 8003502:	2304      	movs	r3, #4
 8003504:	e006      	b.n	8003514 <HAL_GPIO_Init+0x244>
 8003506:	2303      	movs	r3, #3
 8003508:	e004      	b.n	8003514 <HAL_GPIO_Init+0x244>
 800350a:	2302      	movs	r3, #2
 800350c:	e002      	b.n	8003514 <HAL_GPIO_Init+0x244>
 800350e:	2301      	movs	r3, #1
 8003510:	e000      	b.n	8003514 <HAL_GPIO_Init+0x244>
 8003512:	2300      	movs	r3, #0
 8003514:	697a      	ldr	r2, [r7, #20]
 8003516:	f002 0203 	and.w	r2, r2, #3
 800351a:	0092      	lsls	r2, r2, #2
 800351c:	4093      	lsls	r3, r2
 800351e:	693a      	ldr	r2, [r7, #16]
 8003520:	4313      	orrs	r3, r2
 8003522:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003524:	4937      	ldr	r1, [pc, #220]	@ (8003604 <HAL_GPIO_Init+0x334>)
 8003526:	697b      	ldr	r3, [r7, #20]
 8003528:	089b      	lsrs	r3, r3, #2
 800352a:	3302      	adds	r3, #2
 800352c:	693a      	ldr	r2, [r7, #16]
 800352e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003532:	4b3b      	ldr	r3, [pc, #236]	@ (8003620 <HAL_GPIO_Init+0x350>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	43db      	mvns	r3, r3
 800353c:	693a      	ldr	r2, [r7, #16]
 800353e:	4013      	ands	r3, r2
 8003540:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	685b      	ldr	r3, [r3, #4]
 8003546:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800354a:	2b00      	cmp	r3, #0
 800354c:	d003      	beq.n	8003556 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800354e:	693a      	ldr	r2, [r7, #16]
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	4313      	orrs	r3, r2
 8003554:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003556:	4a32      	ldr	r2, [pc, #200]	@ (8003620 <HAL_GPIO_Init+0x350>)
 8003558:	693b      	ldr	r3, [r7, #16]
 800355a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800355c:	4b30      	ldr	r3, [pc, #192]	@ (8003620 <HAL_GPIO_Init+0x350>)
 800355e:	685b      	ldr	r3, [r3, #4]
 8003560:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	43db      	mvns	r3, r3
 8003566:	693a      	ldr	r2, [r7, #16]
 8003568:	4013      	ands	r3, r2
 800356a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003574:	2b00      	cmp	r3, #0
 8003576:	d003      	beq.n	8003580 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003578:	693a      	ldr	r2, [r7, #16]
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	4313      	orrs	r3, r2
 800357e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003580:	4a27      	ldr	r2, [pc, #156]	@ (8003620 <HAL_GPIO_Init+0x350>)
 8003582:	693b      	ldr	r3, [r7, #16]
 8003584:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003586:	4b26      	ldr	r3, [pc, #152]	@ (8003620 <HAL_GPIO_Init+0x350>)
 8003588:	689b      	ldr	r3, [r3, #8]
 800358a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	43db      	mvns	r3, r3
 8003590:	693a      	ldr	r2, [r7, #16]
 8003592:	4013      	ands	r3, r2
 8003594:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	685b      	ldr	r3, [r3, #4]
 800359a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d003      	beq.n	80035aa <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80035a2:	693a      	ldr	r2, [r7, #16]
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	4313      	orrs	r3, r2
 80035a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80035aa:	4a1d      	ldr	r2, [pc, #116]	@ (8003620 <HAL_GPIO_Init+0x350>)
 80035ac:	693b      	ldr	r3, [r7, #16]
 80035ae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80035b0:	4b1b      	ldr	r3, [pc, #108]	@ (8003620 <HAL_GPIO_Init+0x350>)
 80035b2:	68db      	ldr	r3, [r3, #12]
 80035b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	43db      	mvns	r3, r3
 80035ba:	693a      	ldr	r2, [r7, #16]
 80035bc:	4013      	ands	r3, r2
 80035be:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	685b      	ldr	r3, [r3, #4]
 80035c4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d003      	beq.n	80035d4 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80035cc:	693a      	ldr	r2, [r7, #16]
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	4313      	orrs	r3, r2
 80035d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80035d4:	4a12      	ldr	r2, [pc, #72]	@ (8003620 <HAL_GPIO_Init+0x350>)
 80035d6:	693b      	ldr	r3, [r7, #16]
 80035d8:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80035da:	697b      	ldr	r3, [r7, #20]
 80035dc:	3301      	adds	r3, #1
 80035de:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	681a      	ldr	r2, [r3, #0]
 80035e4:	697b      	ldr	r3, [r7, #20]
 80035e6:	fa22 f303 	lsr.w	r3, r2, r3
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	f47f ae78 	bne.w	80032e0 <HAL_GPIO_Init+0x10>
  }
}
 80035f0:	bf00      	nop
 80035f2:	bf00      	nop
 80035f4:	371c      	adds	r7, #28
 80035f6:	46bd      	mov	sp, r7
 80035f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fc:	4770      	bx	lr
 80035fe:	bf00      	nop
 8003600:	40021000 	.word	0x40021000
 8003604:	40010000 	.word	0x40010000
 8003608:	48000400 	.word	0x48000400
 800360c:	48000800 	.word	0x48000800
 8003610:	48000c00 	.word	0x48000c00
 8003614:	48001000 	.word	0x48001000
 8003618:	48001400 	.word	0x48001400
 800361c:	48001800 	.word	0x48001800
 8003620:	40010400 	.word	0x40010400

08003624 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003624:	b480      	push	{r7}
 8003626:	b083      	sub	sp, #12
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
 800362c:	460b      	mov	r3, r1
 800362e:	807b      	strh	r3, [r7, #2]
 8003630:	4613      	mov	r3, r2
 8003632:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003634:	787b      	ldrb	r3, [r7, #1]
 8003636:	2b00      	cmp	r3, #0
 8003638:	d003      	beq.n	8003642 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800363a:	887a      	ldrh	r2, [r7, #2]
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003640:	e002      	b.n	8003648 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003642:	887a      	ldrh	r2, [r7, #2]
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003648:	bf00      	nop
 800364a:	370c      	adds	r7, #12
 800364c:	46bd      	mov	sp, r7
 800364e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003652:	4770      	bx	lr

08003654 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003654:	b480      	push	{r7}
 8003656:	b085      	sub	sp, #20
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
 800365c:	460b      	mov	r3, r1
 800365e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	695b      	ldr	r3, [r3, #20]
 8003664:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003666:	887a      	ldrh	r2, [r7, #2]
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	4013      	ands	r3, r2
 800366c:	041a      	lsls	r2, r3, #16
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	43d9      	mvns	r1, r3
 8003672:	887b      	ldrh	r3, [r7, #2]
 8003674:	400b      	ands	r3, r1
 8003676:	431a      	orrs	r2, r3
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	619a      	str	r2, [r3, #24]
}
 800367c:	bf00      	nop
 800367e:	3714      	adds	r7, #20
 8003680:	46bd      	mov	sp, r7
 8003682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003686:	4770      	bx	lr

08003688 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	b082      	sub	sp, #8
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2b00      	cmp	r3, #0
 8003694:	d101      	bne.n	800369a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003696:	2301      	movs	r3, #1
 8003698:	e081      	b.n	800379e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80036a0:	b2db      	uxtb	r3, r3
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d106      	bne.n	80036b4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	2200      	movs	r2, #0
 80036aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80036ae:	6878      	ldr	r0, [r7, #4]
 80036b0:	f7fd ff1e 	bl	80014f0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2224      	movs	r2, #36	@ 0x24
 80036b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	681a      	ldr	r2, [r3, #0]
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f022 0201 	bic.w	r2, r2, #1
 80036ca:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	685a      	ldr	r2, [r3, #4]
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80036d8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	689a      	ldr	r2, [r3, #8]
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80036e8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	68db      	ldr	r3, [r3, #12]
 80036ee:	2b01      	cmp	r3, #1
 80036f0:	d107      	bne.n	8003702 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	689a      	ldr	r2, [r3, #8]
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80036fe:	609a      	str	r2, [r3, #8]
 8003700:	e006      	b.n	8003710 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	689a      	ldr	r2, [r3, #8]
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800370e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	68db      	ldr	r3, [r3, #12]
 8003714:	2b02      	cmp	r3, #2
 8003716:	d104      	bne.n	8003722 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003720:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	685b      	ldr	r3, [r3, #4]
 8003728:	687a      	ldr	r2, [r7, #4]
 800372a:	6812      	ldr	r2, [r2, #0]
 800372c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003730:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003734:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	68da      	ldr	r2, [r3, #12]
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003744:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	691a      	ldr	r2, [r3, #16]
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	695b      	ldr	r3, [r3, #20]
 800374e:	ea42 0103 	orr.w	r1, r2, r3
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	699b      	ldr	r3, [r3, #24]
 8003756:	021a      	lsls	r2, r3, #8
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	430a      	orrs	r2, r1
 800375e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	69d9      	ldr	r1, [r3, #28]
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6a1a      	ldr	r2, [r3, #32]
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	430a      	orrs	r2, r1
 800376e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	681a      	ldr	r2, [r3, #0]
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f042 0201 	orr.w	r2, r2, #1
 800377e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2200      	movs	r2, #0
 8003784:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2220      	movs	r2, #32
 800378a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2200      	movs	r2, #0
 8003792:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2200      	movs	r2, #0
 8003798:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800379c:	2300      	movs	r3, #0
}
 800379e:	4618      	mov	r0, r3
 80037a0:	3708      	adds	r7, #8
 80037a2:	46bd      	mov	sp, r7
 80037a4:	bd80      	pop	{r7, pc}

080037a6 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80037a6:	b480      	push	{r7}
 80037a8:	b083      	sub	sp, #12
 80037aa:	af00      	add	r7, sp, #0
 80037ac:	6078      	str	r0, [r7, #4]
 80037ae:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80037b6:	b2db      	uxtb	r3, r3
 80037b8:	2b20      	cmp	r3, #32
 80037ba:	d138      	bne.n	800382e <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80037c2:	2b01      	cmp	r3, #1
 80037c4:	d101      	bne.n	80037ca <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80037c6:	2302      	movs	r3, #2
 80037c8:	e032      	b.n	8003830 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	2201      	movs	r2, #1
 80037ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2224      	movs	r2, #36	@ 0x24
 80037d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	681a      	ldr	r2, [r3, #0]
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f022 0201 	bic.w	r2, r2, #1
 80037e8:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	681a      	ldr	r2, [r3, #0]
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80037f8:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	6819      	ldr	r1, [r3, #0]
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	683a      	ldr	r2, [r7, #0]
 8003806:	430a      	orrs	r2, r1
 8003808:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	681a      	ldr	r2, [r3, #0]
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f042 0201 	orr.w	r2, r2, #1
 8003818:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2220      	movs	r2, #32
 800381e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2200      	movs	r2, #0
 8003826:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800382a:	2300      	movs	r3, #0
 800382c:	e000      	b.n	8003830 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800382e:	2302      	movs	r3, #2
  }
}
 8003830:	4618      	mov	r0, r3
 8003832:	370c      	adds	r7, #12
 8003834:	46bd      	mov	sp, r7
 8003836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383a:	4770      	bx	lr

0800383c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800383c:	b480      	push	{r7}
 800383e:	b085      	sub	sp, #20
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
 8003844:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800384c:	b2db      	uxtb	r3, r3
 800384e:	2b20      	cmp	r3, #32
 8003850:	d139      	bne.n	80038c6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003858:	2b01      	cmp	r3, #1
 800385a:	d101      	bne.n	8003860 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800385c:	2302      	movs	r3, #2
 800385e:	e033      	b.n	80038c8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2201      	movs	r2, #1
 8003864:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2224      	movs	r2, #36	@ 0x24
 800386c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	681a      	ldr	r2, [r3, #0]
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f022 0201 	bic.w	r2, r2, #1
 800387e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800388e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	021b      	lsls	r3, r3, #8
 8003894:	68fa      	ldr	r2, [r7, #12]
 8003896:	4313      	orrs	r3, r2
 8003898:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	68fa      	ldr	r2, [r7, #12]
 80038a0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	681a      	ldr	r2, [r3, #0]
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f042 0201 	orr.w	r2, r2, #1
 80038b0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2220      	movs	r2, #32
 80038b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2200      	movs	r2, #0
 80038be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80038c2:	2300      	movs	r3, #0
 80038c4:	e000      	b.n	80038c8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80038c6:	2302      	movs	r3, #2
  }
}
 80038c8:	4618      	mov	r0, r3
 80038ca:	3714      	adds	r7, #20
 80038cc:	46bd      	mov	sp, r7
 80038ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d2:	4770      	bx	lr

080038d4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80038d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80038d6:	b08f      	sub	sp, #60	@ 0x3c
 80038d8:	af0a      	add	r7, sp, #40	@ 0x28
 80038da:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d101      	bne.n	80038e6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80038e2:	2301      	movs	r3, #1
 80038e4:	e116      	b.n	8003b14 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	f893 33bd 	ldrb.w	r3, [r3, #957]	@ 0x3bd
 80038f2:	b2db      	uxtb	r3, r3
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d106      	bne.n	8003906 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2200      	movs	r2, #0
 80038fc:	f883 23bc 	strb.w	r2, [r3, #956]	@ 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003900:	6878      	ldr	r0, [r7, #4]
 8003902:	f006 faf3 	bl	8009eec <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2203      	movs	r2, #3
 800390a:	f883 23bd 	strb.w	r2, [r3, #957]	@ 0x3bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800390e:	68bb      	ldr	r3, [r7, #8]
 8003910:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003912:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003916:	2b00      	cmp	r3, #0
 8003918:	d102      	bne.n	8003920 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2200      	movs	r2, #0
 800391e:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	4618      	mov	r0, r3
 8003926:	f003 fd74 	bl	8007412 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	603b      	str	r3, [r7, #0]
 8003930:	687e      	ldr	r6, [r7, #4]
 8003932:	466d      	mov	r5, sp
 8003934:	f106 0410 	add.w	r4, r6, #16
 8003938:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800393a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800393c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800393e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003940:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003944:	e885 0003 	stmia.w	r5, {r0, r1}
 8003948:	1d33      	adds	r3, r6, #4
 800394a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800394c:	6838      	ldr	r0, [r7, #0]
 800394e:	f003 fc60 	bl	8007212 <USB_CoreInit>
 8003952:	4603      	mov	r3, r0
 8003954:	2b00      	cmp	r3, #0
 8003956:	d005      	beq.n	8003964 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2202      	movs	r2, #2
 800395c:	f883 23bd 	strb.w	r2, [r3, #957]	@ 0x3bd
    return HAL_ERROR;
 8003960:	2301      	movs	r3, #1
 8003962:	e0d7      	b.n	8003b14 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	2100      	movs	r1, #0
 800396a:	4618      	mov	r0, r3
 800396c:	f003 fd62 	bl	8007434 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003970:	2300      	movs	r3, #0
 8003972:	73fb      	strb	r3, [r7, #15]
 8003974:	e04a      	b.n	8003a0c <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003976:	7bfa      	ldrb	r2, [r7, #15]
 8003978:	6879      	ldr	r1, [r7, #4]
 800397a:	4613      	mov	r3, r2
 800397c:	00db      	lsls	r3, r3, #3
 800397e:	1a9b      	subs	r3, r3, r2
 8003980:	009b      	lsls	r3, r3, #2
 8003982:	440b      	add	r3, r1
 8003984:	333d      	adds	r3, #61	@ 0x3d
 8003986:	2201      	movs	r2, #1
 8003988:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800398a:	7bfa      	ldrb	r2, [r7, #15]
 800398c:	6879      	ldr	r1, [r7, #4]
 800398e:	4613      	mov	r3, r2
 8003990:	00db      	lsls	r3, r3, #3
 8003992:	1a9b      	subs	r3, r3, r2
 8003994:	009b      	lsls	r3, r3, #2
 8003996:	440b      	add	r3, r1
 8003998:	333c      	adds	r3, #60	@ 0x3c
 800399a:	7bfa      	ldrb	r2, [r7, #15]
 800399c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800399e:	7bfa      	ldrb	r2, [r7, #15]
 80039a0:	7bfb      	ldrb	r3, [r7, #15]
 80039a2:	b298      	uxth	r0, r3
 80039a4:	6879      	ldr	r1, [r7, #4]
 80039a6:	4613      	mov	r3, r2
 80039a8:	00db      	lsls	r3, r3, #3
 80039aa:	1a9b      	subs	r3, r3, r2
 80039ac:	009b      	lsls	r3, r3, #2
 80039ae:	440b      	add	r3, r1
 80039b0:	3342      	adds	r3, #66	@ 0x42
 80039b2:	4602      	mov	r2, r0
 80039b4:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80039b6:	7bfa      	ldrb	r2, [r7, #15]
 80039b8:	6879      	ldr	r1, [r7, #4]
 80039ba:	4613      	mov	r3, r2
 80039bc:	00db      	lsls	r3, r3, #3
 80039be:	1a9b      	subs	r3, r3, r2
 80039c0:	009b      	lsls	r3, r3, #2
 80039c2:	440b      	add	r3, r1
 80039c4:	333f      	adds	r3, #63	@ 0x3f
 80039c6:	2200      	movs	r2, #0
 80039c8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80039ca:	7bfa      	ldrb	r2, [r7, #15]
 80039cc:	6879      	ldr	r1, [r7, #4]
 80039ce:	4613      	mov	r3, r2
 80039d0:	00db      	lsls	r3, r3, #3
 80039d2:	1a9b      	subs	r3, r3, r2
 80039d4:	009b      	lsls	r3, r3, #2
 80039d6:	440b      	add	r3, r1
 80039d8:	3344      	adds	r3, #68	@ 0x44
 80039da:	2200      	movs	r2, #0
 80039dc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80039de:	7bfa      	ldrb	r2, [r7, #15]
 80039e0:	6879      	ldr	r1, [r7, #4]
 80039e2:	4613      	mov	r3, r2
 80039e4:	00db      	lsls	r3, r3, #3
 80039e6:	1a9b      	subs	r3, r3, r2
 80039e8:	009b      	lsls	r3, r3, #2
 80039ea:	440b      	add	r3, r1
 80039ec:	3348      	adds	r3, #72	@ 0x48
 80039ee:	2200      	movs	r2, #0
 80039f0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80039f2:	7bfa      	ldrb	r2, [r7, #15]
 80039f4:	6879      	ldr	r1, [r7, #4]
 80039f6:	4613      	mov	r3, r2
 80039f8:	00db      	lsls	r3, r3, #3
 80039fa:	1a9b      	subs	r3, r3, r2
 80039fc:	009b      	lsls	r3, r3, #2
 80039fe:	440b      	add	r3, r1
 8003a00:	3350      	adds	r3, #80	@ 0x50
 8003a02:	2200      	movs	r2, #0
 8003a04:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003a06:	7bfb      	ldrb	r3, [r7, #15]
 8003a08:	3301      	adds	r3, #1
 8003a0a:	73fb      	strb	r3, [r7, #15]
 8003a0c:	7bfa      	ldrb	r2, [r7, #15]
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	685b      	ldr	r3, [r3, #4]
 8003a12:	429a      	cmp	r2, r3
 8003a14:	d3af      	bcc.n	8003976 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003a16:	2300      	movs	r3, #0
 8003a18:	73fb      	strb	r3, [r7, #15]
 8003a1a:	e044      	b.n	8003aa6 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003a1c:	7bfa      	ldrb	r2, [r7, #15]
 8003a1e:	6879      	ldr	r1, [r7, #4]
 8003a20:	4613      	mov	r3, r2
 8003a22:	00db      	lsls	r3, r3, #3
 8003a24:	1a9b      	subs	r3, r3, r2
 8003a26:	009b      	lsls	r3, r3, #2
 8003a28:	440b      	add	r3, r1
 8003a2a:	f203 13fd 	addw	r3, r3, #509	@ 0x1fd
 8003a2e:	2200      	movs	r2, #0
 8003a30:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003a32:	7bfa      	ldrb	r2, [r7, #15]
 8003a34:	6879      	ldr	r1, [r7, #4]
 8003a36:	4613      	mov	r3, r2
 8003a38:	00db      	lsls	r3, r3, #3
 8003a3a:	1a9b      	subs	r3, r3, r2
 8003a3c:	009b      	lsls	r3, r3, #2
 8003a3e:	440b      	add	r3, r1
 8003a40:	f503 73fe 	add.w	r3, r3, #508	@ 0x1fc
 8003a44:	7bfa      	ldrb	r2, [r7, #15]
 8003a46:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003a48:	7bfa      	ldrb	r2, [r7, #15]
 8003a4a:	6879      	ldr	r1, [r7, #4]
 8003a4c:	4613      	mov	r3, r2
 8003a4e:	00db      	lsls	r3, r3, #3
 8003a50:	1a9b      	subs	r3, r3, r2
 8003a52:	009b      	lsls	r3, r3, #2
 8003a54:	440b      	add	r3, r1
 8003a56:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003a5e:	7bfa      	ldrb	r2, [r7, #15]
 8003a60:	6879      	ldr	r1, [r7, #4]
 8003a62:	4613      	mov	r3, r2
 8003a64:	00db      	lsls	r3, r3, #3
 8003a66:	1a9b      	subs	r3, r3, r2
 8003a68:	009b      	lsls	r3, r3, #2
 8003a6a:	440b      	add	r3, r1
 8003a6c:	f503 7301 	add.w	r3, r3, #516	@ 0x204
 8003a70:	2200      	movs	r2, #0
 8003a72:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003a74:	7bfa      	ldrb	r2, [r7, #15]
 8003a76:	6879      	ldr	r1, [r7, #4]
 8003a78:	4613      	mov	r3, r2
 8003a7a:	00db      	lsls	r3, r3, #3
 8003a7c:	1a9b      	subs	r3, r3, r2
 8003a7e:	009b      	lsls	r3, r3, #2
 8003a80:	440b      	add	r3, r1
 8003a82:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 8003a86:	2200      	movs	r2, #0
 8003a88:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003a8a:	7bfa      	ldrb	r2, [r7, #15]
 8003a8c:	6879      	ldr	r1, [r7, #4]
 8003a8e:	4613      	mov	r3, r2
 8003a90:	00db      	lsls	r3, r3, #3
 8003a92:	1a9b      	subs	r3, r3, r2
 8003a94:	009b      	lsls	r3, r3, #2
 8003a96:	440b      	add	r3, r1
 8003a98:	f503 7304 	add.w	r3, r3, #528	@ 0x210
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003aa0:	7bfb      	ldrb	r3, [r7, #15]
 8003aa2:	3301      	adds	r3, #1
 8003aa4:	73fb      	strb	r3, [r7, #15]
 8003aa6:	7bfa      	ldrb	r2, [r7, #15]
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	685b      	ldr	r3, [r3, #4]
 8003aac:	429a      	cmp	r2, r3
 8003aae:	d3b5      	bcc.n	8003a1c <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	603b      	str	r3, [r7, #0]
 8003ab6:	687e      	ldr	r6, [r7, #4]
 8003ab8:	466d      	mov	r5, sp
 8003aba:	f106 0410 	add.w	r4, r6, #16
 8003abe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003ac0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003ac2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003ac4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003ac6:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003aca:	e885 0003 	stmia.w	r5, {r0, r1}
 8003ace:	1d33      	adds	r3, r6, #4
 8003ad0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003ad2:	6838      	ldr	r0, [r7, #0]
 8003ad4:	f003 fcd8 	bl	8007488 <USB_DevInit>
 8003ad8:	4603      	mov	r3, r0
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d005      	beq.n	8003aea <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2202      	movs	r2, #2
 8003ae2:	f883 23bd 	strb.w	r2, [r3, #957]	@ 0x3bd
    return HAL_ERROR;
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	e014      	b.n	8003b14 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	2200      	movs	r2, #0
 8003aee:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2201      	movs	r2, #1
 8003af6:	f883 23bd 	strb.w	r2, [r3, #957]	@ 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003afe:	2b01      	cmp	r3, #1
 8003b00:	d102      	bne.n	8003b08 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003b02:	6878      	ldr	r0, [r7, #4]
 8003b04:	f000 ff4a 	bl	800499c <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	f004 fc5a 	bl	80083c6 <USB_DevDisconnect>

  return HAL_OK;
 8003b12:	2300      	movs	r3, #0
}
 8003b14:	4618      	mov	r0, r3
 8003b16:	3714      	adds	r7, #20
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003b1c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b084      	sub	sp, #16
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	f893 33bc 	ldrb.w	r3, [r3, #956]	@ 0x3bc
 8003b30:	2b01      	cmp	r3, #1
 8003b32:	d101      	bne.n	8003b38 <HAL_PCD_Start+0x1c>
 8003b34:	2302      	movs	r3, #2
 8003b36:	e01c      	b.n	8003b72 <HAL_PCD_Start+0x56>
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2201      	movs	r2, #1
 8003b3c:	f883 23bc 	strb.w	r2, [r3, #956]	@ 0x3bc
#if defined (USB_OTG_FS)
  if (hpcd->Init.battery_charging_enable == 1U)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b44:	2b01      	cmp	r3, #1
 8003b46:	d105      	bne.n	8003b54 <HAL_PCD_Start+0x38>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b4c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	639a      	str	r2, [r3, #56]	@ 0x38
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	4618      	mov	r0, r3
 8003b5a:	f003 fc49 	bl	80073f0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	4618      	mov	r0, r3
 8003b64:	f004 fc0e 	bl	8008384 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	f883 23bc 	strb.w	r2, [r3, #956]	@ 0x3bc

  return HAL_OK;
 8003b70:	2300      	movs	r3, #0
}
 8003b72:	4618      	mov	r0, r3
 8003b74:	3710      	adds	r7, #16
 8003b76:	46bd      	mov	sp, r7
 8003b78:	bd80      	pop	{r7, pc}

08003b7a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003b7a:	b590      	push	{r4, r7, lr}
 8003b7c:	b08d      	sub	sp, #52	@ 0x34
 8003b7e:	af00      	add	r7, sp, #0
 8003b80:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b88:	6a3b      	ldr	r3, [r7, #32]
 8003b8a:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4618      	mov	r0, r3
 8003b92:	f004 fccc 	bl	800852e <USB_GetMode>
 8003b96:	4603      	mov	r3, r0
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	f040 838f 	bne.w	80042bc <HAL_PCD_IRQHandler+0x742>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	f004 fc30 	bl	8008408 <USB_ReadInterrupts>
 8003ba8:	4603      	mov	r3, r0
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	f000 8385 	beq.w	80042ba <HAL_PCD_IRQHandler+0x740>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	f004 fc27 	bl	8008408 <USB_ReadInterrupts>
 8003bba:	4603      	mov	r3, r0
 8003bbc:	f003 0302 	and.w	r3, r3, #2
 8003bc0:	2b02      	cmp	r3, #2
 8003bc2:	d107      	bne.n	8003bd4 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	695a      	ldr	r2, [r3, #20]
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f002 0202 	and.w	r2, r2, #2
 8003bd2:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4618      	mov	r0, r3
 8003bda:	f004 fc15 	bl	8008408 <USB_ReadInterrupts>
 8003bde:	4603      	mov	r3, r0
 8003be0:	f003 0310 	and.w	r3, r3, #16
 8003be4:	2b10      	cmp	r3, #16
 8003be6:	d161      	bne.n	8003cac <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	699a      	ldr	r2, [r3, #24]
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f022 0210 	bic.w	r2, r2, #16
 8003bf6:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8003bf8:	6a3b      	ldr	r3, [r7, #32]
 8003bfa:	6a1b      	ldr	r3, [r3, #32]
 8003bfc:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8003bfe:	69bb      	ldr	r3, [r7, #24]
 8003c00:	f003 020f 	and.w	r2, r3, #15
 8003c04:	4613      	mov	r3, r2
 8003c06:	00db      	lsls	r3, r3, #3
 8003c08:	1a9b      	subs	r3, r3, r2
 8003c0a:	009b      	lsls	r3, r3, #2
 8003c0c:	f503 73fc 	add.w	r3, r3, #504	@ 0x1f8
 8003c10:	687a      	ldr	r2, [r7, #4]
 8003c12:	4413      	add	r3, r2
 8003c14:	3304      	adds	r3, #4
 8003c16:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003c18:	69bb      	ldr	r3, [r7, #24]
 8003c1a:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8003c1e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003c22:	d124      	bne.n	8003c6e <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003c24:	69ba      	ldr	r2, [r7, #24]
 8003c26:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8003c2a:	4013      	ands	r3, r2
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d035      	beq.n	8003c9c <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003c30:	697b      	ldr	r3, [r7, #20]
 8003c32:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003c34:	69bb      	ldr	r3, [r7, #24]
 8003c36:	091b      	lsrs	r3, r3, #4
 8003c38:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003c3a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003c3e:	b29b      	uxth	r3, r3
 8003c40:	461a      	mov	r2, r3
 8003c42:	6a38      	ldr	r0, [r7, #32]
 8003c44:	f004 fa7b 	bl	800813e <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003c48:	697b      	ldr	r3, [r7, #20]
 8003c4a:	68da      	ldr	r2, [r3, #12]
 8003c4c:	69bb      	ldr	r3, [r7, #24]
 8003c4e:	091b      	lsrs	r3, r3, #4
 8003c50:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003c54:	441a      	add	r2, r3
 8003c56:	697b      	ldr	r3, [r7, #20]
 8003c58:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003c5a:	697b      	ldr	r3, [r7, #20]
 8003c5c:	699a      	ldr	r2, [r3, #24]
 8003c5e:	69bb      	ldr	r3, [r7, #24]
 8003c60:	091b      	lsrs	r3, r3, #4
 8003c62:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003c66:	441a      	add	r2, r3
 8003c68:	697b      	ldr	r3, [r7, #20]
 8003c6a:	619a      	str	r2, [r3, #24]
 8003c6c:	e016      	b.n	8003c9c <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8003c6e:	69bb      	ldr	r3, [r7, #24]
 8003c70:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8003c74:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003c78:	d110      	bne.n	8003c9c <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	f503 7371 	add.w	r3, r3, #964	@ 0x3c4
 8003c80:	2208      	movs	r2, #8
 8003c82:	4619      	mov	r1, r3
 8003c84:	6a38      	ldr	r0, [r7, #32]
 8003c86:	f004 fa5a 	bl	800813e <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003c8a:	697b      	ldr	r3, [r7, #20]
 8003c8c:	699a      	ldr	r2, [r3, #24]
 8003c8e:	69bb      	ldr	r3, [r7, #24]
 8003c90:	091b      	lsrs	r3, r3, #4
 8003c92:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003c96:	441a      	add	r2, r3
 8003c98:	697b      	ldr	r3, [r7, #20]
 8003c9a:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	699a      	ldr	r2, [r3, #24]
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f042 0210 	orr.w	r2, r2, #16
 8003caa:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	f004 fba9 	bl	8008408 <USB_ReadInterrupts>
 8003cb6:	4603      	mov	r3, r0
 8003cb8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003cbc:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003cc0:	d16e      	bne.n	8003da0 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	4618      	mov	r0, r3
 8003ccc:	f004 fbaf 	bl	800842e <USB_ReadDevAllOutEpInterrupt>
 8003cd0:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8003cd2:	e062      	b.n	8003d9a <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003cd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cd6:	f003 0301 	and.w	r3, r3, #1
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d057      	beq.n	8003d8e <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ce4:	b2d2      	uxtb	r2, r2
 8003ce6:	4611      	mov	r1, r2
 8003ce8:	4618      	mov	r0, r3
 8003cea:	f004 fbd4 	bl	8008496 <USB_ReadDevOutEPInterrupt>
 8003cee:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003cf0:	693b      	ldr	r3, [r7, #16]
 8003cf2:	f003 0301 	and.w	r3, r3, #1
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d00c      	beq.n	8003d14 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003cfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cfc:	015a      	lsls	r2, r3, #5
 8003cfe:	69fb      	ldr	r3, [r7, #28]
 8003d00:	4413      	add	r3, r2
 8003d02:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003d06:	461a      	mov	r2, r3
 8003d08:	2301      	movs	r3, #1
 8003d0a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003d0c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003d0e:	6878      	ldr	r0, [r7, #4]
 8003d10:	f000 fd6a 	bl	80047e8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003d14:	693b      	ldr	r3, [r7, #16]
 8003d16:	f003 0308 	and.w	r3, r3, #8
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d00c      	beq.n	8003d38 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003d1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d20:	015a      	lsls	r2, r3, #5
 8003d22:	69fb      	ldr	r3, [r7, #28]
 8003d24:	4413      	add	r3, r2
 8003d26:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003d2a:	461a      	mov	r2, r3
 8003d2c:	2308      	movs	r3, #8
 8003d2e:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003d30:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003d32:	6878      	ldr	r0, [r7, #4]
 8003d34:	f000 fda6 	bl	8004884 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003d38:	693b      	ldr	r3, [r7, #16]
 8003d3a:	f003 0310 	and.w	r3, r3, #16
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d008      	beq.n	8003d54 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003d42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d44:	015a      	lsls	r2, r3, #5
 8003d46:	69fb      	ldr	r3, [r7, #28]
 8003d48:	4413      	add	r3, r2
 8003d4a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003d4e:	461a      	mov	r2, r3
 8003d50:	2310      	movs	r3, #16
 8003d52:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003d54:	693b      	ldr	r3, [r7, #16]
 8003d56:	f003 0320 	and.w	r3, r3, #32
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d008      	beq.n	8003d70 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003d5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d60:	015a      	lsls	r2, r3, #5
 8003d62:	69fb      	ldr	r3, [r7, #28]
 8003d64:	4413      	add	r3, r2
 8003d66:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003d6a:	461a      	mov	r2, r3
 8003d6c:	2320      	movs	r3, #32
 8003d6e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003d70:	693b      	ldr	r3, [r7, #16]
 8003d72:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d009      	beq.n	8003d8e <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003d7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d7c:	015a      	lsls	r2, r3, #5
 8003d7e:	69fb      	ldr	r3, [r7, #28]
 8003d80:	4413      	add	r3, r2
 8003d82:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003d86:	461a      	mov	r2, r3
 8003d88:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003d8c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003d8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d90:	3301      	adds	r3, #1
 8003d92:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8003d94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d96:	085b      	lsrs	r3, r3, #1
 8003d98:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8003d9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d199      	bne.n	8003cd4 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	4618      	mov	r0, r3
 8003da6:	f004 fb2f 	bl	8008408 <USB_ReadInterrupts>
 8003daa:	4603      	mov	r3, r0
 8003dac:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003db0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003db4:	f040 8087 	bne.w	8003ec6 <HAL_PCD_IRQHandler+0x34c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	f004 fb50 	bl	8008462 <USB_ReadDevAllInEpInterrupt>
 8003dc2:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8003dc8:	e07a      	b.n	8003ec0 <HAL_PCD_IRQHandler+0x346>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003dca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003dcc:	f003 0301 	and.w	r3, r3, #1
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d06f      	beq.n	8003eb4 <HAL_PCD_IRQHandler+0x33a>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003dda:	b2d2      	uxtb	r2, r2
 8003ddc:	4611      	mov	r1, r2
 8003dde:	4618      	mov	r0, r3
 8003de0:	f004 fb77 	bl	80084d2 <USB_ReadDevInEPInterrupt>
 8003de4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003de6:	693b      	ldr	r3, [r7, #16]
 8003de8:	f003 0301 	and.w	r3, r3, #1
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d020      	beq.n	8003e32 <HAL_PCD_IRQHandler+0x2b8>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003df0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003df2:	f003 030f 	and.w	r3, r3, #15
 8003df6:	2201      	movs	r2, #1
 8003df8:	fa02 f303 	lsl.w	r3, r2, r3
 8003dfc:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003dfe:	69fb      	ldr	r3, [r7, #28]
 8003e00:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003e04:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	43db      	mvns	r3, r3
 8003e0a:	69f9      	ldr	r1, [r7, #28]
 8003e0c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003e10:	4013      	ands	r3, r2
 8003e12:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003e14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e16:	015a      	lsls	r2, r3, #5
 8003e18:	69fb      	ldr	r3, [r7, #28]
 8003e1a:	4413      	add	r3, r2
 8003e1c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003e20:	461a      	mov	r2, r3
 8003e22:	2301      	movs	r3, #1
 8003e24:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003e26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e28:	b2db      	uxtb	r3, r3
 8003e2a:	4619      	mov	r1, r3
 8003e2c:	6878      	ldr	r0, [r7, #4]
 8003e2e:	f006 f8f0 	bl	800a012 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003e32:	693b      	ldr	r3, [r7, #16]
 8003e34:	f003 0308 	and.w	r3, r3, #8
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d008      	beq.n	8003e4e <HAL_PCD_IRQHandler+0x2d4>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003e3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e3e:	015a      	lsls	r2, r3, #5
 8003e40:	69fb      	ldr	r3, [r7, #28]
 8003e42:	4413      	add	r3, r2
 8003e44:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003e48:	461a      	mov	r2, r3
 8003e4a:	2308      	movs	r3, #8
 8003e4c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003e4e:	693b      	ldr	r3, [r7, #16]
 8003e50:	f003 0310 	and.w	r3, r3, #16
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d008      	beq.n	8003e6a <HAL_PCD_IRQHandler+0x2f0>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003e58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e5a:	015a      	lsls	r2, r3, #5
 8003e5c:	69fb      	ldr	r3, [r7, #28]
 8003e5e:	4413      	add	r3, r2
 8003e60:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003e64:	461a      	mov	r2, r3
 8003e66:	2310      	movs	r3, #16
 8003e68:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003e6a:	693b      	ldr	r3, [r7, #16]
 8003e6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d008      	beq.n	8003e86 <HAL_PCD_IRQHandler+0x30c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003e74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e76:	015a      	lsls	r2, r3, #5
 8003e78:	69fb      	ldr	r3, [r7, #28]
 8003e7a:	4413      	add	r3, r2
 8003e7c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003e80:	461a      	mov	r2, r3
 8003e82:	2340      	movs	r3, #64	@ 0x40
 8003e84:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003e86:	693b      	ldr	r3, [r7, #16]
 8003e88:	f003 0302 	and.w	r3, r3, #2
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d008      	beq.n	8003ea2 <HAL_PCD_IRQHandler+0x328>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003e90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e92:	015a      	lsls	r2, r3, #5
 8003e94:	69fb      	ldr	r3, [r7, #28]
 8003e96:	4413      	add	r3, r2
 8003e98:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003e9c:	461a      	mov	r2, r3
 8003e9e:	2302      	movs	r3, #2
 8003ea0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003ea2:	693b      	ldr	r3, [r7, #16]
 8003ea4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d003      	beq.n	8003eb4 <HAL_PCD_IRQHandler+0x33a>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003eac:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003eae:	6878      	ldr	r0, [r7, #4]
 8003eb0:	f000 fc11 	bl	80046d6 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003eb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003eb6:	3301      	adds	r3, #1
 8003eb8:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8003eba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ebc:	085b      	lsrs	r3, r3, #1
 8003ebe:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8003ec0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d181      	bne.n	8003dca <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	4618      	mov	r0, r3
 8003ecc:	f004 fa9c 	bl	8008408 <USB_ReadInterrupts>
 8003ed0:	4603      	mov	r3, r0
 8003ed2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003ed6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003eda:	d122      	bne.n	8003f22 <HAL_PCD_IRQHandler+0x3a8>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003edc:	69fb      	ldr	r3, [r7, #28]
 8003ede:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003ee2:	685b      	ldr	r3, [r3, #4]
 8003ee4:	69fa      	ldr	r2, [r7, #28]
 8003ee6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003eea:	f023 0301 	bic.w	r3, r3, #1
 8003eee:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	f893 33f4 	ldrb.w	r3, [r3, #1012]	@ 0x3f4
 8003ef6:	2b01      	cmp	r3, #1
 8003ef8:	d108      	bne.n	8003f0c <HAL_PCD_IRQHandler+0x392>
      {
        hpcd->LPM_State = LPM_L0;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	2200      	movs	r2, #0
 8003efe:	f883 23f4 	strb.w	r2, [r3, #1012]	@ 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003f02:	2100      	movs	r1, #0
 8003f04:	6878      	ldr	r0, [r7, #4]
 8003f06:	f006 fb89 	bl	800a61c <HAL_PCDEx_LPM_Callback>
 8003f0a:	e002      	b.n	8003f12 <HAL_PCD_IRQHandler+0x398>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003f0c:	6878      	ldr	r0, [r7, #4]
 8003f0e:	f006 f8ed 	bl	800a0ec <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	695a      	ldr	r2, [r3, #20]
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8003f20:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	4618      	mov	r0, r3
 8003f28:	f004 fa6e 	bl	8008408 <USB_ReadInterrupts>
 8003f2c:	4603      	mov	r3, r0
 8003f2e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003f32:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003f36:	d112      	bne.n	8003f5e <HAL_PCD_IRQHandler+0x3e4>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003f38:	69fb      	ldr	r3, [r7, #28]
 8003f3a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003f3e:	689b      	ldr	r3, [r3, #8]
 8003f40:	f003 0301 	and.w	r3, r3, #1
 8003f44:	2b01      	cmp	r3, #1
 8003f46:	d102      	bne.n	8003f4e <HAL_PCD_IRQHandler+0x3d4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003f48:	6878      	ldr	r0, [r7, #4]
 8003f4a:	f006 f8a9 	bl	800a0a0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	695a      	ldr	r2, [r3, #20]
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8003f5c:	615a      	str	r2, [r3, #20]
    }
    
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	4618      	mov	r0, r3
 8003f64:	f004 fa50 	bl	8008408 <USB_ReadInterrupts>
 8003f68:	4603      	mov	r3, r0
 8003f6a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003f6e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003f72:	d121      	bne.n	8003fb8 <HAL_PCD_IRQHandler+0x43e>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	695a      	ldr	r2, [r3, #20]
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 8003f82:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	f893 33f4 	ldrb.w	r3, [r3, #1012]	@ 0x3f4
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d111      	bne.n	8003fb2 <HAL_PCD_IRQHandler+0x438>
      {
        hpcd->LPM_State = LPM_L1;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	2201      	movs	r2, #1
 8003f92:	f883 23f4 	strb.w	r2, [r3, #1012]	@ 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f9c:	089b      	lsrs	r3, r3, #2
 8003f9e:	f003 020f 	and.w	r2, r3, #15
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	f8c3 23f8 	str.w	r2, [r3, #1016]	@ 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8003fa8:	2101      	movs	r1, #1
 8003faa:	6878      	ldr	r0, [r7, #4]
 8003fac:	f006 fb36 	bl	800a61c <HAL_PCDEx_LPM_Callback>
 8003fb0:	e002      	b.n	8003fb8 <HAL_PCD_IRQHandler+0x43e>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003fb2:	6878      	ldr	r0, [r7, #4]
 8003fb4:	f006 f874 	bl	800a0a0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	f004 fa23 	bl	8008408 <USB_ReadInterrupts>
 8003fc2:	4603      	mov	r3, r0
 8003fc4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003fc8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003fcc:	f040 80c5 	bne.w	800415a <HAL_PCD_IRQHandler+0x5e0>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003fd0:	69fb      	ldr	r3, [r7, #28]
 8003fd2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003fd6:	685b      	ldr	r3, [r3, #4]
 8003fd8:	69fa      	ldr	r2, [r7, #28]
 8003fda:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003fde:	f023 0301 	bic.w	r3, r3, #1
 8003fe2:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	2110      	movs	r1, #16
 8003fea:	4618      	mov	r0, r3
 8003fec:	f003 fb98 	bl	8007720 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003ff0:	2300      	movs	r3, #0
 8003ff2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003ff4:	e056      	b.n	80040a4 <HAL_PCD_IRQHandler+0x52a>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003ff6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ff8:	015a      	lsls	r2, r3, #5
 8003ffa:	69fb      	ldr	r3, [r7, #28]
 8003ffc:	4413      	add	r3, r2
 8003ffe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004002:	461a      	mov	r2, r3
 8004004:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004008:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800400a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800400c:	015a      	lsls	r2, r3, #5
 800400e:	69fb      	ldr	r3, [r7, #28]
 8004010:	4413      	add	r3, r2
 8004012:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800401a:	0151      	lsls	r1, r2, #5
 800401c:	69fa      	ldr	r2, [r7, #28]
 800401e:	440a      	add	r2, r1
 8004020:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004024:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004028:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800402a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800402c:	015a      	lsls	r2, r3, #5
 800402e:	69fb      	ldr	r3, [r7, #28]
 8004030:	4413      	add	r3, r2
 8004032:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800403a:	0151      	lsls	r1, r2, #5
 800403c:	69fa      	ldr	r2, [r7, #28]
 800403e:	440a      	add	r2, r1
 8004040:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004044:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004048:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800404a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800404c:	015a      	lsls	r2, r3, #5
 800404e:	69fb      	ldr	r3, [r7, #28]
 8004050:	4413      	add	r3, r2
 8004052:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004056:	461a      	mov	r2, r3
 8004058:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800405c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800405e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004060:	015a      	lsls	r2, r3, #5
 8004062:	69fb      	ldr	r3, [r7, #28]
 8004064:	4413      	add	r3, r2
 8004066:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800406e:	0151      	lsls	r1, r2, #5
 8004070:	69fa      	ldr	r2, [r7, #28]
 8004072:	440a      	add	r2, r1
 8004074:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004078:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800407c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800407e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004080:	015a      	lsls	r2, r3, #5
 8004082:	69fb      	ldr	r3, [r7, #28]
 8004084:	4413      	add	r3, r2
 8004086:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800408e:	0151      	lsls	r1, r2, #5
 8004090:	69fa      	ldr	r2, [r7, #28]
 8004092:	440a      	add	r2, r1
 8004094:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004098:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800409c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800409e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80040a0:	3301      	adds	r3, #1
 80040a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	685b      	ldr	r3, [r3, #4]
 80040a8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80040aa:	429a      	cmp	r2, r3
 80040ac:	d3a3      	bcc.n	8003ff6 <HAL_PCD_IRQHandler+0x47c>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80040ae:	69fb      	ldr	r3, [r7, #28]
 80040b0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80040b4:	69db      	ldr	r3, [r3, #28]
 80040b6:	69fa      	ldr	r2, [r7, #28]
 80040b8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80040bc:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 80040c0:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d016      	beq.n	80040f8 <HAL_PCD_IRQHandler+0x57e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80040ca:	69fb      	ldr	r3, [r7, #28]
 80040cc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80040d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80040d4:	69fa      	ldr	r2, [r7, #28]
 80040d6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80040da:	f043 030b 	orr.w	r3, r3, #11
 80040de:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80040e2:	69fb      	ldr	r3, [r7, #28]
 80040e4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80040e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040ea:	69fa      	ldr	r2, [r7, #28]
 80040ec:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80040f0:	f043 030b 	orr.w	r3, r3, #11
 80040f4:	6453      	str	r3, [r2, #68]	@ 0x44
 80040f6:	e015      	b.n	8004124 <HAL_PCD_IRQHandler+0x5aa>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80040f8:	69fb      	ldr	r3, [r7, #28]
 80040fa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80040fe:	695b      	ldr	r3, [r3, #20]
 8004100:	69fa      	ldr	r2, [r7, #28]
 8004102:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004106:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800410a:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 800410e:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8004110:	69fb      	ldr	r3, [r7, #28]
 8004112:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004116:	691b      	ldr	r3, [r3, #16]
 8004118:	69fa      	ldr	r2, [r7, #28]
 800411a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800411e:	f043 030b 	orr.w	r3, r3, #11
 8004122:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8004124:	69fb      	ldr	r3, [r7, #28]
 8004126:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	69fa      	ldr	r2, [r7, #28]
 800412e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004132:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8004136:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681a      	ldr	r2, [r3, #0]
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	f503 7371 	add.w	r3, r3, #964	@ 0x3c4
 8004142:	4619      	mov	r1, r3
 8004144:	4610      	mov	r0, r2
 8004146:	f004 fa23 	bl	8008590 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	695a      	ldr	r2, [r3, #20]
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8004158:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	4618      	mov	r0, r3
 8004160:	f004 f952 	bl	8008408 <USB_ReadInterrupts>
 8004164:	4603      	mov	r3, r0
 8004166:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800416a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800416e:	d124      	bne.n	80041ba <HAL_PCD_IRQHandler+0x640>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	4618      	mov	r0, r3
 8004176:	f004 f9e8 	bl	800854a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	4618      	mov	r0, r3
 8004180:	f003 fb2f 	bl	80077e2 <USB_GetDevSpeed>
 8004184:	4603      	mov	r3, r0
 8004186:	461a      	mov	r2, r3
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681c      	ldr	r4, [r3, #0]
 8004190:	f001 fa02 	bl	8005598 <HAL_RCC_GetHCLKFreq>
 8004194:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800419a:	b2db      	uxtb	r3, r3
 800419c:	461a      	mov	r2, r3
 800419e:	4620      	mov	r0, r4
 80041a0:	f003 f88a 	bl	80072b8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80041a4:	6878      	ldr	r0, [r7, #4]
 80041a6:	f005 ff5c 	bl	800a062 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	695a      	ldr	r2, [r3, #20]
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 80041b8:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	4618      	mov	r0, r3
 80041c0:	f004 f922 	bl	8008408 <USB_ReadInterrupts>
 80041c4:	4603      	mov	r3, r0
 80041c6:	f003 0308 	and.w	r3, r3, #8
 80041ca:	2b08      	cmp	r3, #8
 80041cc:	d10a      	bne.n	80041e4 <HAL_PCD_IRQHandler+0x66a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80041ce:	6878      	ldr	r0, [r7, #4]
 80041d0:	f005 ff39 	bl	800a046 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	695a      	ldr	r2, [r3, #20]
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f002 0208 	and.w	r2, r2, #8
 80041e2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	4618      	mov	r0, r3
 80041ea:	f004 f90d 	bl	8008408 <USB_ReadInterrupts>
 80041ee:	4603      	mov	r3, r0
 80041f0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80041f4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80041f8:	d10f      	bne.n	800421a <HAL_PCD_IRQHandler+0x6a0>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80041fa:	2300      	movs	r3, #0
 80041fc:	627b      	str	r3, [r7, #36]	@ 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80041fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004200:	b2db      	uxtb	r3, r3
 8004202:	4619      	mov	r1, r3
 8004204:	6878      	ldr	r0, [r7, #4]
 8004206:	f005 ffab 	bl	800a160 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	695a      	ldr	r2, [r3, #20]
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8004218:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	4618      	mov	r0, r3
 8004220:	f004 f8f2 	bl	8008408 <USB_ReadInterrupts>
 8004224:	4603      	mov	r3, r0
 8004226:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800422a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800422e:	d10f      	bne.n	8004250 <HAL_PCD_IRQHandler+0x6d6>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8004230:	2300      	movs	r3, #0
 8004232:	627b      	str	r3, [r7, #36]	@ 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8004234:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004236:	b2db      	uxtb	r3, r3
 8004238:	4619      	mov	r1, r3
 800423a:	6878      	ldr	r0, [r7, #4]
 800423c:	f005 ff7e 	bl	800a13c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	695a      	ldr	r2, [r3, #20]
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 800424e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	4618      	mov	r0, r3
 8004256:	f004 f8d7 	bl	8008408 <USB_ReadInterrupts>
 800425a:	4603      	mov	r3, r0
 800425c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8004260:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004264:	d10a      	bne.n	800427c <HAL_PCD_IRQHandler+0x702>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8004266:	6878      	ldr	r0, [r7, #4]
 8004268:	f005 ff8c 	bl	800a184 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	695a      	ldr	r2, [r3, #20]
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 800427a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	4618      	mov	r0, r3
 8004282:	f004 f8c1 	bl	8008408 <USB_ReadInterrupts>
 8004286:	4603      	mov	r3, r0
 8004288:	f003 0304 	and.w	r3, r3, #4
 800428c:	2b04      	cmp	r3, #4
 800428e:	d115      	bne.n	80042bc <HAL_PCD_IRQHandler+0x742>
    {
      temp = hpcd->Instance->GOTGINT;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	685b      	ldr	r3, [r3, #4]
 8004296:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8004298:	69bb      	ldr	r3, [r7, #24]
 800429a:	f003 0304 	and.w	r3, r3, #4
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d002      	beq.n	80042a8 <HAL_PCD_IRQHandler+0x72e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80042a2:	6878      	ldr	r0, [r7, #4]
 80042a4:	f005 ff7c 	bl	800a1a0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	6859      	ldr	r1, [r3, #4]
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	69ba      	ldr	r2, [r7, #24]
 80042b4:	430a      	orrs	r2, r1
 80042b6:	605a      	str	r2, [r3, #4]
 80042b8:	e000      	b.n	80042bc <HAL_PCD_IRQHandler+0x742>
      return;
 80042ba:	bf00      	nop
    }
  }
}
 80042bc:	3734      	adds	r7, #52	@ 0x34
 80042be:	46bd      	mov	sp, r7
 80042c0:	bd90      	pop	{r4, r7, pc}

080042c2 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80042c2:	b580      	push	{r7, lr}
 80042c4:	b082      	sub	sp, #8
 80042c6:	af00      	add	r7, sp, #0
 80042c8:	6078      	str	r0, [r7, #4]
 80042ca:	460b      	mov	r3, r1
 80042cc:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	f893 33bc 	ldrb.w	r3, [r3, #956]	@ 0x3bc
 80042d4:	2b01      	cmp	r3, #1
 80042d6:	d101      	bne.n	80042dc <HAL_PCD_SetAddress+0x1a>
 80042d8:	2302      	movs	r3, #2
 80042da:	e013      	b.n	8004304 <HAL_PCD_SetAddress+0x42>
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2201      	movs	r2, #1
 80042e0:	f883 23bc 	strb.w	r2, [r3, #956]	@ 0x3bc
  hpcd->USB_Address = address;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	78fa      	ldrb	r2, [r7, #3]
 80042e8:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	78fa      	ldrb	r2, [r7, #3]
 80042f2:	4611      	mov	r1, r2
 80042f4:	4618      	mov	r0, r3
 80042f6:	f004 f81f 	bl	8008338 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	2200      	movs	r2, #0
 80042fe:	f883 23bc 	strb.w	r2, [r3, #956]	@ 0x3bc

  return HAL_OK;
 8004302:	2300      	movs	r3, #0
}
 8004304:	4618      	mov	r0, r3
 8004306:	3708      	adds	r7, #8
 8004308:	46bd      	mov	sp, r7
 800430a:	bd80      	pop	{r7, pc}

0800430c <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 800430c:	b580      	push	{r7, lr}
 800430e:	b084      	sub	sp, #16
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
 8004314:	4608      	mov	r0, r1
 8004316:	4611      	mov	r1, r2
 8004318:	461a      	mov	r2, r3
 800431a:	4603      	mov	r3, r0
 800431c:	70fb      	strb	r3, [r7, #3]
 800431e:	460b      	mov	r3, r1
 8004320:	803b      	strh	r3, [r7, #0]
 8004322:	4613      	mov	r3, r2
 8004324:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004326:	2300      	movs	r3, #0
 8004328:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800432a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800432e:	2b00      	cmp	r3, #0
 8004330:	da0f      	bge.n	8004352 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004332:	78fb      	ldrb	r3, [r7, #3]
 8004334:	f003 020f 	and.w	r2, r3, #15
 8004338:	4613      	mov	r3, r2
 800433a:	00db      	lsls	r3, r3, #3
 800433c:	1a9b      	subs	r3, r3, r2
 800433e:	009b      	lsls	r3, r3, #2
 8004340:	3338      	adds	r3, #56	@ 0x38
 8004342:	687a      	ldr	r2, [r7, #4]
 8004344:	4413      	add	r3, r2
 8004346:	3304      	adds	r3, #4
 8004348:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	2201      	movs	r2, #1
 800434e:	705a      	strb	r2, [r3, #1]
 8004350:	e00f      	b.n	8004372 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004352:	78fb      	ldrb	r3, [r7, #3]
 8004354:	f003 020f 	and.w	r2, r3, #15
 8004358:	4613      	mov	r3, r2
 800435a:	00db      	lsls	r3, r3, #3
 800435c:	1a9b      	subs	r3, r3, r2
 800435e:	009b      	lsls	r3, r3, #2
 8004360:	f503 73fc 	add.w	r3, r3, #504	@ 0x1f8
 8004364:	687a      	ldr	r2, [r7, #4]
 8004366:	4413      	add	r3, r2
 8004368:	3304      	adds	r3, #4
 800436a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	2200      	movs	r2, #0
 8004370:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004372:	78fb      	ldrb	r3, [r7, #3]
 8004374:	f003 030f 	and.w	r3, r3, #15
 8004378:	b2da      	uxtb	r2, r3
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800437e:	883a      	ldrh	r2, [r7, #0]
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	78ba      	ldrb	r2, [r7, #2]
 8004388:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	785b      	ldrb	r3, [r3, #1]
 800438e:	2b00      	cmp	r3, #0
 8004390:	d004      	beq.n	800439c <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	781b      	ldrb	r3, [r3, #0]
 8004396:	461a      	mov	r2, r3
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800439c:	78bb      	ldrb	r3, [r7, #2]
 800439e:	2b02      	cmp	r3, #2
 80043a0:	d102      	bne.n	80043a8 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	2200      	movs	r2, #0
 80043a6:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	f893 33bc 	ldrb.w	r3, [r3, #956]	@ 0x3bc
 80043ae:	2b01      	cmp	r3, #1
 80043b0:	d101      	bne.n	80043b6 <HAL_PCD_EP_Open+0xaa>
 80043b2:	2302      	movs	r3, #2
 80043b4:	e00e      	b.n	80043d4 <HAL_PCD_EP_Open+0xc8>
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	2201      	movs	r2, #1
 80043ba:	f883 23bc 	strb.w	r2, [r3, #956]	@ 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	68f9      	ldr	r1, [r7, #12]
 80043c4:	4618      	mov	r0, r3
 80043c6:	f003 fa2b 	bl	8007820 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	2200      	movs	r2, #0
 80043ce:	f883 23bc 	strb.w	r2, [r3, #956]	@ 0x3bc

  return ret;
 80043d2:	7afb      	ldrb	r3, [r7, #11]
}
 80043d4:	4618      	mov	r0, r3
 80043d6:	3710      	adds	r7, #16
 80043d8:	46bd      	mov	sp, r7
 80043da:	bd80      	pop	{r7, pc}

080043dc <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	b084      	sub	sp, #16
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
 80043e4:	460b      	mov	r3, r1
 80043e6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80043e8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	da0f      	bge.n	8004410 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80043f0:	78fb      	ldrb	r3, [r7, #3]
 80043f2:	f003 020f 	and.w	r2, r3, #15
 80043f6:	4613      	mov	r3, r2
 80043f8:	00db      	lsls	r3, r3, #3
 80043fa:	1a9b      	subs	r3, r3, r2
 80043fc:	009b      	lsls	r3, r3, #2
 80043fe:	3338      	adds	r3, #56	@ 0x38
 8004400:	687a      	ldr	r2, [r7, #4]
 8004402:	4413      	add	r3, r2
 8004404:	3304      	adds	r3, #4
 8004406:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	2201      	movs	r2, #1
 800440c:	705a      	strb	r2, [r3, #1]
 800440e:	e00f      	b.n	8004430 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004410:	78fb      	ldrb	r3, [r7, #3]
 8004412:	f003 020f 	and.w	r2, r3, #15
 8004416:	4613      	mov	r3, r2
 8004418:	00db      	lsls	r3, r3, #3
 800441a:	1a9b      	subs	r3, r3, r2
 800441c:	009b      	lsls	r3, r3, #2
 800441e:	f503 73fc 	add.w	r3, r3, #504	@ 0x1f8
 8004422:	687a      	ldr	r2, [r7, #4]
 8004424:	4413      	add	r3, r2
 8004426:	3304      	adds	r3, #4
 8004428:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	2200      	movs	r2, #0
 800442e:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8004430:	78fb      	ldrb	r3, [r7, #3]
 8004432:	f003 030f 	and.w	r3, r3, #15
 8004436:	b2da      	uxtb	r2, r3
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	f893 33bc 	ldrb.w	r3, [r3, #956]	@ 0x3bc
 8004442:	2b01      	cmp	r3, #1
 8004444:	d101      	bne.n	800444a <HAL_PCD_EP_Close+0x6e>
 8004446:	2302      	movs	r3, #2
 8004448:	e00e      	b.n	8004468 <HAL_PCD_EP_Close+0x8c>
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	2201      	movs	r2, #1
 800444e:	f883 23bc 	strb.w	r2, [r3, #956]	@ 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	68f9      	ldr	r1, [r7, #12]
 8004458:	4618      	mov	r0, r3
 800445a:	f003 fa69 	bl	8007930 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	2200      	movs	r2, #0
 8004462:	f883 23bc 	strb.w	r2, [r3, #956]	@ 0x3bc
  return HAL_OK;
 8004466:	2300      	movs	r3, #0
}
 8004468:	4618      	mov	r0, r3
 800446a:	3710      	adds	r7, #16
 800446c:	46bd      	mov	sp, r7
 800446e:	bd80      	pop	{r7, pc}

08004470 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004470:	b580      	push	{r7, lr}
 8004472:	b086      	sub	sp, #24
 8004474:	af00      	add	r7, sp, #0
 8004476:	60f8      	str	r0, [r7, #12]
 8004478:	607a      	str	r2, [r7, #4]
 800447a:	603b      	str	r3, [r7, #0]
 800447c:	460b      	mov	r3, r1
 800447e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004480:	7afb      	ldrb	r3, [r7, #11]
 8004482:	f003 020f 	and.w	r2, r3, #15
 8004486:	4613      	mov	r3, r2
 8004488:	00db      	lsls	r3, r3, #3
 800448a:	1a9b      	subs	r3, r3, r2
 800448c:	009b      	lsls	r3, r3, #2
 800448e:	f503 73fc 	add.w	r3, r3, #504	@ 0x1f8
 8004492:	68fa      	ldr	r2, [r7, #12]
 8004494:	4413      	add	r3, r2
 8004496:	3304      	adds	r3, #4
 8004498:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800449a:	697b      	ldr	r3, [r7, #20]
 800449c:	687a      	ldr	r2, [r7, #4]
 800449e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80044a0:	697b      	ldr	r3, [r7, #20]
 80044a2:	683a      	ldr	r2, [r7, #0]
 80044a4:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80044a6:	697b      	ldr	r3, [r7, #20]
 80044a8:	2200      	movs	r2, #0
 80044aa:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 80044ac:	697b      	ldr	r3, [r7, #20]
 80044ae:	2200      	movs	r2, #0
 80044b0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80044b2:	7afb      	ldrb	r3, [r7, #11]
 80044b4:	f003 030f 	and.w	r3, r3, #15
 80044b8:	b2da      	uxtb	r2, r3
 80044ba:	697b      	ldr	r3, [r7, #20]
 80044bc:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80044be:	7afb      	ldrb	r3, [r7, #11]
 80044c0:	f003 030f 	and.w	r3, r3, #15
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d106      	bne.n	80044d6 <HAL_PCD_EP_Receive+0x66>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	6979      	ldr	r1, [r7, #20]
 80044ce:	4618      	mov	r0, r3
 80044d0:	f003 fce6 	bl	8007ea0 <USB_EP0StartXfer>
 80044d4:	e005      	b.n	80044e2 <HAL_PCD_EP_Receive+0x72>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	6979      	ldr	r1, [r7, #20]
 80044dc:	4618      	mov	r0, r3
 80044de:	f003 fb03 	bl	8007ae8 <USB_EPStartXfer>
  }

  return HAL_OK;
 80044e2:	2300      	movs	r3, #0
}
 80044e4:	4618      	mov	r0, r3
 80044e6:	3718      	adds	r7, #24
 80044e8:	46bd      	mov	sp, r7
 80044ea:	bd80      	pop	{r7, pc}

080044ec <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80044ec:	b580      	push	{r7, lr}
 80044ee:	b086      	sub	sp, #24
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	60f8      	str	r0, [r7, #12]
 80044f4:	607a      	str	r2, [r7, #4]
 80044f6:	603b      	str	r3, [r7, #0]
 80044f8:	460b      	mov	r3, r1
 80044fa:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80044fc:	7afb      	ldrb	r3, [r7, #11]
 80044fe:	f003 020f 	and.w	r2, r3, #15
 8004502:	4613      	mov	r3, r2
 8004504:	00db      	lsls	r3, r3, #3
 8004506:	1a9b      	subs	r3, r3, r2
 8004508:	009b      	lsls	r3, r3, #2
 800450a:	3338      	adds	r3, #56	@ 0x38
 800450c:	68fa      	ldr	r2, [r7, #12]
 800450e:	4413      	add	r3, r2
 8004510:	3304      	adds	r3, #4
 8004512:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004514:	697b      	ldr	r3, [r7, #20]
 8004516:	687a      	ldr	r2, [r7, #4]
 8004518:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800451a:	697b      	ldr	r3, [r7, #20]
 800451c:	683a      	ldr	r2, [r7, #0]
 800451e:	615a      	str	r2, [r3, #20]
#if defined (USB)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8004520:	697b      	ldr	r3, [r7, #20]
 8004522:	2200      	movs	r2, #0
 8004524:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8004526:	697b      	ldr	r3, [r7, #20]
 8004528:	2201      	movs	r2, #1
 800452a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800452c:	7afb      	ldrb	r3, [r7, #11]
 800452e:	f003 030f 	and.w	r3, r3, #15
 8004532:	b2da      	uxtb	r2, r3
 8004534:	697b      	ldr	r3, [r7, #20]
 8004536:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004538:	7afb      	ldrb	r3, [r7, #11]
 800453a:	f003 030f 	and.w	r3, r3, #15
 800453e:	2b00      	cmp	r3, #0
 8004540:	d106      	bne.n	8004550 <HAL_PCD_EP_Transmit+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	6979      	ldr	r1, [r7, #20]
 8004548:	4618      	mov	r0, r3
 800454a:	f003 fca9 	bl	8007ea0 <USB_EP0StartXfer>
 800454e:	e005      	b.n	800455c <HAL_PCD_EP_Transmit+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	6979      	ldr	r1, [r7, #20]
 8004556:	4618      	mov	r0, r3
 8004558:	f003 fac6 	bl	8007ae8 <USB_EPStartXfer>
  }

  return HAL_OK;
 800455c:	2300      	movs	r3, #0
}
 800455e:	4618      	mov	r0, r3
 8004560:	3718      	adds	r7, #24
 8004562:	46bd      	mov	sp, r7
 8004564:	bd80      	pop	{r7, pc}

08004566 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004566:	b580      	push	{r7, lr}
 8004568:	b084      	sub	sp, #16
 800456a:	af00      	add	r7, sp, #0
 800456c:	6078      	str	r0, [r7, #4]
 800456e:	460b      	mov	r3, r1
 8004570:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004572:	78fb      	ldrb	r3, [r7, #3]
 8004574:	f003 020f 	and.w	r2, r3, #15
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	685b      	ldr	r3, [r3, #4]
 800457c:	429a      	cmp	r2, r3
 800457e:	d901      	bls.n	8004584 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004580:	2301      	movs	r3, #1
 8004582:	e04e      	b.n	8004622 <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004584:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004588:	2b00      	cmp	r3, #0
 800458a:	da0f      	bge.n	80045ac <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800458c:	78fb      	ldrb	r3, [r7, #3]
 800458e:	f003 020f 	and.w	r2, r3, #15
 8004592:	4613      	mov	r3, r2
 8004594:	00db      	lsls	r3, r3, #3
 8004596:	1a9b      	subs	r3, r3, r2
 8004598:	009b      	lsls	r3, r3, #2
 800459a:	3338      	adds	r3, #56	@ 0x38
 800459c:	687a      	ldr	r2, [r7, #4]
 800459e:	4413      	add	r3, r2
 80045a0:	3304      	adds	r3, #4
 80045a2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	2201      	movs	r2, #1
 80045a8:	705a      	strb	r2, [r3, #1]
 80045aa:	e00d      	b.n	80045c8 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80045ac:	78fa      	ldrb	r2, [r7, #3]
 80045ae:	4613      	mov	r3, r2
 80045b0:	00db      	lsls	r3, r3, #3
 80045b2:	1a9b      	subs	r3, r3, r2
 80045b4:	009b      	lsls	r3, r3, #2
 80045b6:	f503 73fc 	add.w	r3, r3, #504	@ 0x1f8
 80045ba:	687a      	ldr	r2, [r7, #4]
 80045bc:	4413      	add	r3, r2
 80045be:	3304      	adds	r3, #4
 80045c0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	2200      	movs	r2, #0
 80045c6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	2201      	movs	r2, #1
 80045cc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80045ce:	78fb      	ldrb	r3, [r7, #3]
 80045d0:	f003 030f 	and.w	r3, r3, #15
 80045d4:	b2da      	uxtb	r2, r3
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	f893 33bc 	ldrb.w	r3, [r3, #956]	@ 0x3bc
 80045e0:	2b01      	cmp	r3, #1
 80045e2:	d101      	bne.n	80045e8 <HAL_PCD_EP_SetStall+0x82>
 80045e4:	2302      	movs	r3, #2
 80045e6:	e01c      	b.n	8004622 <HAL_PCD_EP_SetStall+0xbc>
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2201      	movs	r2, #1
 80045ec:	f883 23bc 	strb.w	r2, [r3, #956]	@ 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	68f9      	ldr	r1, [r7, #12]
 80045f6:	4618      	mov	r0, r3
 80045f8:	f003 fdca 	bl	8008190 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80045fc:	78fb      	ldrb	r3, [r7, #3]
 80045fe:	f003 030f 	and.w	r3, r3, #15
 8004602:	2b00      	cmp	r3, #0
 8004604:	d108      	bne.n	8004618 <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681a      	ldr	r2, [r3, #0]
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	f503 7371 	add.w	r3, r3, #964	@ 0x3c4
 8004610:	4619      	mov	r1, r3
 8004612:	4610      	mov	r0, r2
 8004614:	f003 ffbc 	bl	8008590 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2200      	movs	r2, #0
 800461c:	f883 23bc 	strb.w	r2, [r3, #956]	@ 0x3bc

  return HAL_OK;
 8004620:	2300      	movs	r3, #0
}
 8004622:	4618      	mov	r0, r3
 8004624:	3710      	adds	r7, #16
 8004626:	46bd      	mov	sp, r7
 8004628:	bd80      	pop	{r7, pc}

0800462a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800462a:	b580      	push	{r7, lr}
 800462c:	b084      	sub	sp, #16
 800462e:	af00      	add	r7, sp, #0
 8004630:	6078      	str	r0, [r7, #4]
 8004632:	460b      	mov	r3, r1
 8004634:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004636:	78fb      	ldrb	r3, [r7, #3]
 8004638:	f003 020f 	and.w	r2, r3, #15
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	685b      	ldr	r3, [r3, #4]
 8004640:	429a      	cmp	r2, r3
 8004642:	d901      	bls.n	8004648 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004644:	2301      	movs	r3, #1
 8004646:	e042      	b.n	80046ce <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004648:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800464c:	2b00      	cmp	r3, #0
 800464e:	da0f      	bge.n	8004670 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004650:	78fb      	ldrb	r3, [r7, #3]
 8004652:	f003 020f 	and.w	r2, r3, #15
 8004656:	4613      	mov	r3, r2
 8004658:	00db      	lsls	r3, r3, #3
 800465a:	1a9b      	subs	r3, r3, r2
 800465c:	009b      	lsls	r3, r3, #2
 800465e:	3338      	adds	r3, #56	@ 0x38
 8004660:	687a      	ldr	r2, [r7, #4]
 8004662:	4413      	add	r3, r2
 8004664:	3304      	adds	r3, #4
 8004666:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	2201      	movs	r2, #1
 800466c:	705a      	strb	r2, [r3, #1]
 800466e:	e00f      	b.n	8004690 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004670:	78fb      	ldrb	r3, [r7, #3]
 8004672:	f003 020f 	and.w	r2, r3, #15
 8004676:	4613      	mov	r3, r2
 8004678:	00db      	lsls	r3, r3, #3
 800467a:	1a9b      	subs	r3, r3, r2
 800467c:	009b      	lsls	r3, r3, #2
 800467e:	f503 73fc 	add.w	r3, r3, #504	@ 0x1f8
 8004682:	687a      	ldr	r2, [r7, #4]
 8004684:	4413      	add	r3, r2
 8004686:	3304      	adds	r3, #4
 8004688:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	2200      	movs	r2, #0
 800468e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	2200      	movs	r2, #0
 8004694:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004696:	78fb      	ldrb	r3, [r7, #3]
 8004698:	f003 030f 	and.w	r3, r3, #15
 800469c:	b2da      	uxtb	r2, r3
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	f893 33bc 	ldrb.w	r3, [r3, #956]	@ 0x3bc
 80046a8:	2b01      	cmp	r3, #1
 80046aa:	d101      	bne.n	80046b0 <HAL_PCD_EP_ClrStall+0x86>
 80046ac:	2302      	movs	r3, #2
 80046ae:	e00e      	b.n	80046ce <HAL_PCD_EP_ClrStall+0xa4>
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2201      	movs	r2, #1
 80046b4:	f883 23bc 	strb.w	r2, [r3, #956]	@ 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	68f9      	ldr	r1, [r7, #12]
 80046be:	4618      	mov	r0, r3
 80046c0:	f003 fdd4 	bl	800826c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2200      	movs	r2, #0
 80046c8:	f883 23bc 	strb.w	r2, [r3, #956]	@ 0x3bc

  return HAL_OK;
 80046cc:	2300      	movs	r3, #0
}
 80046ce:	4618      	mov	r0, r3
 80046d0:	3710      	adds	r7, #16
 80046d2:	46bd      	mov	sp, r7
 80046d4:	bd80      	pop	{r7, pc}

080046d6 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80046d6:	b580      	push	{r7, lr}
 80046d8:	b088      	sub	sp, #32
 80046da:	af00      	add	r7, sp, #0
 80046dc:	6078      	str	r0, [r7, #4]
 80046de:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046e6:	697b      	ldr	r3, [r7, #20]
 80046e8:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80046ea:	683a      	ldr	r2, [r7, #0]
 80046ec:	4613      	mov	r3, r2
 80046ee:	00db      	lsls	r3, r3, #3
 80046f0:	1a9b      	subs	r3, r3, r2
 80046f2:	009b      	lsls	r3, r3, #2
 80046f4:	3338      	adds	r3, #56	@ 0x38
 80046f6:	687a      	ldr	r2, [r7, #4]
 80046f8:	4413      	add	r3, r2
 80046fa:	3304      	adds	r3, #4
 80046fc:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	699a      	ldr	r2, [r3, #24]
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	695b      	ldr	r3, [r3, #20]
 8004706:	429a      	cmp	r2, r3
 8004708:	d901      	bls.n	800470e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800470a:	2301      	movs	r3, #1
 800470c:	e067      	b.n	80047de <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	695a      	ldr	r2, [r3, #20]
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	699b      	ldr	r3, [r3, #24]
 8004716:	1ad3      	subs	r3, r2, r3
 8004718:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	689b      	ldr	r3, [r3, #8]
 800471e:	69fa      	ldr	r2, [r7, #28]
 8004720:	429a      	cmp	r2, r3
 8004722:	d902      	bls.n	800472a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	689b      	ldr	r3, [r3, #8]
 8004728:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800472a:	69fb      	ldr	r3, [r7, #28]
 800472c:	3303      	adds	r3, #3
 800472e:	089b      	lsrs	r3, r3, #2
 8004730:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004732:	e026      	b.n	8004782 <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	695a      	ldr	r2, [r3, #20]
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	699b      	ldr	r3, [r3, #24]
 800473c:	1ad3      	subs	r3, r2, r3
 800473e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	689b      	ldr	r3, [r3, #8]
 8004744:	69fa      	ldr	r2, [r7, #28]
 8004746:	429a      	cmp	r2, r3
 8004748:	d902      	bls.n	8004750 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	689b      	ldr	r3, [r3, #8]
 800474e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004750:	69fb      	ldr	r3, [r7, #28]
 8004752:	3303      	adds	r3, #3
 8004754:	089b      	lsrs	r3, r3, #2
 8004756:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	68d9      	ldr	r1, [r3, #12]
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	b2da      	uxtb	r2, r3
 8004760:	69fb      	ldr	r3, [r7, #28]
 8004762:	b29b      	uxth	r3, r3
 8004764:	6978      	ldr	r0, [r7, #20]
 8004766:	f003 fcb9 	bl	80080dc <USB_WritePacket>

    ep->xfer_buff  += len;
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	68da      	ldr	r2, [r3, #12]
 800476e:	69fb      	ldr	r3, [r7, #28]
 8004770:	441a      	add	r2, r3
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	699a      	ldr	r2, [r3, #24]
 800477a:	69fb      	ldr	r3, [r7, #28]
 800477c:	441a      	add	r2, r3
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	015a      	lsls	r2, r3, #5
 8004786:	693b      	ldr	r3, [r7, #16]
 8004788:	4413      	add	r3, r2
 800478a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800478e:	699b      	ldr	r3, [r3, #24]
 8004790:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004792:	69ba      	ldr	r2, [r7, #24]
 8004794:	429a      	cmp	r2, r3
 8004796:	d809      	bhi.n	80047ac <PCD_WriteEmptyTxFifo+0xd6>
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	699a      	ldr	r2, [r3, #24]
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80047a0:	429a      	cmp	r2, r3
 80047a2:	d203      	bcs.n	80047ac <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	695b      	ldr	r3, [r3, #20]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d1c3      	bne.n	8004734 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	695a      	ldr	r2, [r3, #20]
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	699b      	ldr	r3, [r3, #24]
 80047b4:	429a      	cmp	r2, r3
 80047b6:	d811      	bhi.n	80047dc <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	f003 030f 	and.w	r3, r3, #15
 80047be:	2201      	movs	r2, #1
 80047c0:	fa02 f303 	lsl.w	r3, r2, r3
 80047c4:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80047c6:	693b      	ldr	r3, [r7, #16]
 80047c8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80047cc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80047ce:	68bb      	ldr	r3, [r7, #8]
 80047d0:	43db      	mvns	r3, r3
 80047d2:	6939      	ldr	r1, [r7, #16]
 80047d4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80047d8:	4013      	ands	r3, r2
 80047da:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 80047dc:	2300      	movs	r3, #0
}
 80047de:	4618      	mov	r0, r3
 80047e0:	3720      	adds	r7, #32
 80047e2:	46bd      	mov	sp, r7
 80047e4:	bd80      	pop	{r7, pc}
	...

080047e8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b086      	sub	sp, #24
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
 80047f0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047f8:	697b      	ldr	r3, [r7, #20]
 80047fa:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80047fc:	697b      	ldr	r3, [r7, #20]
 80047fe:	333c      	adds	r3, #60	@ 0x3c
 8004800:	3304      	adds	r3, #4
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004806:	683b      	ldr	r3, [r7, #0]
 8004808:	015a      	lsls	r2, r3, #5
 800480a:	693b      	ldr	r3, [r7, #16]
 800480c:	4413      	add	r3, r2
 800480e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004812:	689b      	ldr	r3, [r3, #8]
 8004814:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	4a19      	ldr	r2, [pc, #100]	@ (8004880 <PCD_EP_OutXfrComplete_int+0x98>)
 800481a:	4293      	cmp	r3, r2
 800481c:	d124      	bne.n	8004868 <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800481e:	68bb      	ldr	r3, [r7, #8]
 8004820:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004824:	2b00      	cmp	r3, #0
 8004826:	d00a      	beq.n	800483e <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	015a      	lsls	r2, r3, #5
 800482c:	693b      	ldr	r3, [r7, #16]
 800482e:	4413      	add	r3, r2
 8004830:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004834:	461a      	mov	r2, r3
 8004836:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800483a:	6093      	str	r3, [r2, #8]
 800483c:	e01a      	b.n	8004874 <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800483e:	68bb      	ldr	r3, [r7, #8]
 8004840:	f003 0320 	and.w	r3, r3, #32
 8004844:	2b00      	cmp	r3, #0
 8004846:	d008      	beq.n	800485a <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	015a      	lsls	r2, r3, #5
 800484c:	693b      	ldr	r3, [r7, #16]
 800484e:	4413      	add	r3, r2
 8004850:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004854:	461a      	mov	r2, r3
 8004856:	2320      	movs	r3, #32
 8004858:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	b2db      	uxtb	r3, r3
 800485e:	4619      	mov	r1, r3
 8004860:	6878      	ldr	r0, [r7, #4]
 8004862:	f005 fbbb 	bl	8009fdc <HAL_PCD_DataOutStageCallback>
 8004866:	e005      	b.n	8004874 <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	b2db      	uxtb	r3, r3
 800486c:	4619      	mov	r1, r3
 800486e:	6878      	ldr	r0, [r7, #4]
 8004870:	f005 fbb4 	bl	8009fdc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8004874:	2300      	movs	r3, #0
}
 8004876:	4618      	mov	r0, r3
 8004878:	3718      	adds	r7, #24
 800487a:	46bd      	mov	sp, r7
 800487c:	bd80      	pop	{r7, pc}
 800487e:	bf00      	nop
 8004880:	4f54310a 	.word	0x4f54310a

08004884 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004884:	b580      	push	{r7, lr}
 8004886:	b086      	sub	sp, #24
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
 800488c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004894:	697b      	ldr	r3, [r7, #20]
 8004896:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004898:	697b      	ldr	r3, [r7, #20]
 800489a:	333c      	adds	r3, #60	@ 0x3c
 800489c:	3304      	adds	r3, #4
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	015a      	lsls	r2, r3, #5
 80048a6:	693b      	ldr	r3, [r7, #16]
 80048a8:	4413      	add	r3, r2
 80048aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80048ae:	689b      	ldr	r3, [r3, #8]
 80048b0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	4a0c      	ldr	r2, [pc, #48]	@ (80048e8 <PCD_EP_OutSetupPacket_int+0x64>)
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d90e      	bls.n	80048d8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80048ba:	68bb      	ldr	r3, [r7, #8]
 80048bc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d009      	beq.n	80048d8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	015a      	lsls	r2, r3, #5
 80048c8:	693b      	ldr	r3, [r7, #16]
 80048ca:	4413      	add	r3, r2
 80048cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80048d0:	461a      	mov	r2, r3
 80048d2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80048d6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80048d8:	6878      	ldr	r0, [r7, #4]
 80048da:	f005 fb6d 	bl	8009fb8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 80048de:	2300      	movs	r3, #0
}
 80048e0:	4618      	mov	r0, r3
 80048e2:	3718      	adds	r7, #24
 80048e4:	46bd      	mov	sp, r7
 80048e6:	bd80      	pop	{r7, pc}
 80048e8:	4f54300a 	.word	0x4f54300a

080048ec <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80048ec:	b480      	push	{r7}
 80048ee:	b085      	sub	sp, #20
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
 80048f4:	460b      	mov	r3, r1
 80048f6:	70fb      	strb	r3, [r7, #3]
 80048f8:	4613      	mov	r3, r2
 80048fa:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004902:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004904:	78fb      	ldrb	r3, [r7, #3]
 8004906:	2b00      	cmp	r3, #0
 8004908:	d107      	bne.n	800491a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800490a:	883b      	ldrh	r3, [r7, #0]
 800490c:	0419      	lsls	r1, r3, #16
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	68ba      	ldr	r2, [r7, #8]
 8004914:	430a      	orrs	r2, r1
 8004916:	629a      	str	r2, [r3, #40]	@ 0x28
 8004918:	e028      	b.n	800496c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004920:	0c1b      	lsrs	r3, r3, #16
 8004922:	68ba      	ldr	r2, [r7, #8]
 8004924:	4413      	add	r3, r2
 8004926:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004928:	2300      	movs	r3, #0
 800492a:	73fb      	strb	r3, [r7, #15]
 800492c:	e00d      	b.n	800494a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681a      	ldr	r2, [r3, #0]
 8004932:	7bfb      	ldrb	r3, [r7, #15]
 8004934:	3340      	adds	r3, #64	@ 0x40
 8004936:	009b      	lsls	r3, r3, #2
 8004938:	4413      	add	r3, r2
 800493a:	685b      	ldr	r3, [r3, #4]
 800493c:	0c1b      	lsrs	r3, r3, #16
 800493e:	68ba      	ldr	r2, [r7, #8]
 8004940:	4413      	add	r3, r2
 8004942:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004944:	7bfb      	ldrb	r3, [r7, #15]
 8004946:	3301      	adds	r3, #1
 8004948:	73fb      	strb	r3, [r7, #15]
 800494a:	7bfa      	ldrb	r2, [r7, #15]
 800494c:	78fb      	ldrb	r3, [r7, #3]
 800494e:	3b01      	subs	r3, #1
 8004950:	429a      	cmp	r2, r3
 8004952:	d3ec      	bcc.n	800492e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004954:	883b      	ldrh	r3, [r7, #0]
 8004956:	0418      	lsls	r0, r3, #16
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	6819      	ldr	r1, [r3, #0]
 800495c:	78fb      	ldrb	r3, [r7, #3]
 800495e:	3b01      	subs	r3, #1
 8004960:	68ba      	ldr	r2, [r7, #8]
 8004962:	4302      	orrs	r2, r0
 8004964:	3340      	adds	r3, #64	@ 0x40
 8004966:	009b      	lsls	r3, r3, #2
 8004968:	440b      	add	r3, r1
 800496a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800496c:	2300      	movs	r3, #0
}
 800496e:	4618      	mov	r0, r3
 8004970:	3714      	adds	r7, #20
 8004972:	46bd      	mov	sp, r7
 8004974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004978:	4770      	bx	lr

0800497a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800497a:	b480      	push	{r7}
 800497c:	b083      	sub	sp, #12
 800497e:	af00      	add	r7, sp, #0
 8004980:	6078      	str	r0, [r7, #4]
 8004982:	460b      	mov	r3, r1
 8004984:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	887a      	ldrh	r2, [r7, #2]
 800498c:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800498e:	2300      	movs	r3, #0
}
 8004990:	4618      	mov	r0, r3
 8004992:	370c      	adds	r7, #12
 8004994:	46bd      	mov	sp, r7
 8004996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499a:	4770      	bx	lr

0800499c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800499c:	b480      	push	{r7}
 800499e:	b085      	sub	sp, #20
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	2201      	movs	r2, #1
 80049ae:	f8c3 23fc 	str.w	r2, [r3, #1020]	@ 0x3fc
  hpcd->LPM_State = LPM_L0;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	2200      	movs	r2, #0
 80049b6:	f883 23f4 	strb.w	r2, [r3, #1012]	@ 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	699b      	ldr	r3, [r3, #24]
 80049be:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049ca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80049ce:	f043 0303 	orr.w	r3, r3, #3
 80049d2:	68fa      	ldr	r2, [r7, #12]
 80049d4:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 80049d6:	2300      	movs	r3, #0
}
 80049d8:	4618      	mov	r0, r3
 80049da:	3714      	adds	r7, #20
 80049dc:	46bd      	mov	sp, r7
 80049de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e2:	4770      	bx	lr

080049e4 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80049e4:	b480      	push	{r7}
 80049e6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80049e8:	4b05      	ldr	r3, [pc, #20]	@ (8004a00 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	4a04      	ldr	r2, [pc, #16]	@ (8004a00 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80049ee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80049f2:	6013      	str	r3, [r2, #0]
}
 80049f4:	bf00      	nop
 80049f6:	46bd      	mov	sp, r7
 80049f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fc:	4770      	bx	lr
 80049fe:	bf00      	nop
 8004a00:	40007000 	.word	0x40007000

08004a04 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004a04:	b480      	push	{r7}
 8004a06:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004a08:	4b04      	ldr	r3, [pc, #16]	@ (8004a1c <HAL_PWREx_GetVoltageRange+0x18>)
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8004a10:	4618      	mov	r0, r3
 8004a12:	46bd      	mov	sp, r7
 8004a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a18:	4770      	bx	lr
 8004a1a:	bf00      	nop
 8004a1c:	40007000 	.word	0x40007000

08004a20 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004a20:	b480      	push	{r7}
 8004a22:	b085      	sub	sp, #20
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004a2e:	d130      	bne.n	8004a92 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004a30:	4b23      	ldr	r3, [pc, #140]	@ (8004ac0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004a38:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004a3c:	d038      	beq.n	8004ab0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004a3e:	4b20      	ldr	r3, [pc, #128]	@ (8004ac0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004a46:	4a1e      	ldr	r2, [pc, #120]	@ (8004ac0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004a48:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004a4c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004a4e:	4b1d      	ldr	r3, [pc, #116]	@ (8004ac4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	2232      	movs	r2, #50	@ 0x32
 8004a54:	fb02 f303 	mul.w	r3, r2, r3
 8004a58:	4a1b      	ldr	r2, [pc, #108]	@ (8004ac8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004a5a:	fba2 2303 	umull	r2, r3, r2, r3
 8004a5e:	0c9b      	lsrs	r3, r3, #18
 8004a60:	3301      	adds	r3, #1
 8004a62:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004a64:	e002      	b.n	8004a6c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	3b01      	subs	r3, #1
 8004a6a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004a6c:	4b14      	ldr	r3, [pc, #80]	@ (8004ac0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004a6e:	695b      	ldr	r3, [r3, #20]
 8004a70:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004a74:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004a78:	d102      	bne.n	8004a80 <HAL_PWREx_ControlVoltageScaling+0x60>
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d1f2      	bne.n	8004a66 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004a80:	4b0f      	ldr	r3, [pc, #60]	@ (8004ac0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004a82:	695b      	ldr	r3, [r3, #20]
 8004a84:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004a88:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004a8c:	d110      	bne.n	8004ab0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8004a8e:	2303      	movs	r3, #3
 8004a90:	e00f      	b.n	8004ab2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004a92:	4b0b      	ldr	r3, [pc, #44]	@ (8004ac0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004a9a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004a9e:	d007      	beq.n	8004ab0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004aa0:	4b07      	ldr	r3, [pc, #28]	@ (8004ac0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004aa8:	4a05      	ldr	r2, [pc, #20]	@ (8004ac0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004aaa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004aae:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004ab0:	2300      	movs	r3, #0
}
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	3714      	adds	r7, #20
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004abc:	4770      	bx	lr
 8004abe:	bf00      	nop
 8004ac0:	40007000 	.word	0x40007000
 8004ac4:	20000000 	.word	0x20000000
 8004ac8:	431bde83 	.word	0x431bde83

08004acc <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8004acc:	b480      	push	{r7}
 8004ace:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8004ad0:	4b05      	ldr	r3, [pc, #20]	@ (8004ae8 <HAL_PWREx_EnableVddUSB+0x1c>)
 8004ad2:	685b      	ldr	r3, [r3, #4]
 8004ad4:	4a04      	ldr	r2, [pc, #16]	@ (8004ae8 <HAL_PWREx_EnableVddUSB+0x1c>)
 8004ad6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004ada:	6053      	str	r3, [r2, #4]
}
 8004adc:	bf00      	nop
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae4:	4770      	bx	lr
 8004ae6:	bf00      	nop
 8004ae8:	40007000 	.word	0x40007000

08004aec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004aec:	b580      	push	{r7, lr}
 8004aee:	b088      	sub	sp, #32
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d101      	bne.n	8004afe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004afa:	2301      	movs	r3, #1
 8004afc:	e3d8      	b.n	80052b0 <HAL_RCC_OscConfig+0x7c4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004afe:	4b97      	ldr	r3, [pc, #604]	@ (8004d5c <HAL_RCC_OscConfig+0x270>)
 8004b00:	689b      	ldr	r3, [r3, #8]
 8004b02:	f003 030c 	and.w	r3, r3, #12
 8004b06:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004b08:	4b94      	ldr	r3, [pc, #592]	@ (8004d5c <HAL_RCC_OscConfig+0x270>)
 8004b0a:	68db      	ldr	r3, [r3, #12]
 8004b0c:	f003 0303 	and.w	r3, r3, #3
 8004b10:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f003 0310 	and.w	r3, r3, #16
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	f000 80e4 	beq.w	8004ce8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004b20:	69bb      	ldr	r3, [r7, #24]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d007      	beq.n	8004b36 <HAL_RCC_OscConfig+0x4a>
 8004b26:	69bb      	ldr	r3, [r7, #24]
 8004b28:	2b0c      	cmp	r3, #12
 8004b2a:	f040 808b 	bne.w	8004c44 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004b2e:	697b      	ldr	r3, [r7, #20]
 8004b30:	2b01      	cmp	r3, #1
 8004b32:	f040 8087 	bne.w	8004c44 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004b36:	4b89      	ldr	r3, [pc, #548]	@ (8004d5c <HAL_RCC_OscConfig+0x270>)
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f003 0302 	and.w	r3, r3, #2
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d005      	beq.n	8004b4e <HAL_RCC_OscConfig+0x62>
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	699b      	ldr	r3, [r3, #24]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d101      	bne.n	8004b4e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8004b4a:	2301      	movs	r3, #1
 8004b4c:	e3b0      	b.n	80052b0 <HAL_RCC_OscConfig+0x7c4>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6a1a      	ldr	r2, [r3, #32]
 8004b52:	4b82      	ldr	r3, [pc, #520]	@ (8004d5c <HAL_RCC_OscConfig+0x270>)
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f003 0308 	and.w	r3, r3, #8
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d004      	beq.n	8004b68 <HAL_RCC_OscConfig+0x7c>
 8004b5e:	4b7f      	ldr	r3, [pc, #508]	@ (8004d5c <HAL_RCC_OscConfig+0x270>)
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004b66:	e005      	b.n	8004b74 <HAL_RCC_OscConfig+0x88>
 8004b68:	4b7c      	ldr	r3, [pc, #496]	@ (8004d5c <HAL_RCC_OscConfig+0x270>)
 8004b6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004b6e:	091b      	lsrs	r3, r3, #4
 8004b70:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004b74:	4293      	cmp	r3, r2
 8004b76:	d223      	bcs.n	8004bc0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	6a1b      	ldr	r3, [r3, #32]
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	f000 fd43 	bl	8005608 <RCC_SetFlashLatencyFromMSIRange>
 8004b82:	4603      	mov	r3, r0
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d001      	beq.n	8004b8c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8004b88:	2301      	movs	r3, #1
 8004b8a:	e391      	b.n	80052b0 <HAL_RCC_OscConfig+0x7c4>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004b8c:	4b73      	ldr	r3, [pc, #460]	@ (8004d5c <HAL_RCC_OscConfig+0x270>)
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	4a72      	ldr	r2, [pc, #456]	@ (8004d5c <HAL_RCC_OscConfig+0x270>)
 8004b92:	f043 0308 	orr.w	r3, r3, #8
 8004b96:	6013      	str	r3, [r2, #0]
 8004b98:	4b70      	ldr	r3, [pc, #448]	@ (8004d5c <HAL_RCC_OscConfig+0x270>)
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	6a1b      	ldr	r3, [r3, #32]
 8004ba4:	496d      	ldr	r1, [pc, #436]	@ (8004d5c <HAL_RCC_OscConfig+0x270>)
 8004ba6:	4313      	orrs	r3, r2
 8004ba8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004baa:	4b6c      	ldr	r3, [pc, #432]	@ (8004d5c <HAL_RCC_OscConfig+0x270>)
 8004bac:	685b      	ldr	r3, [r3, #4]
 8004bae:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	69db      	ldr	r3, [r3, #28]
 8004bb6:	021b      	lsls	r3, r3, #8
 8004bb8:	4968      	ldr	r1, [pc, #416]	@ (8004d5c <HAL_RCC_OscConfig+0x270>)
 8004bba:	4313      	orrs	r3, r2
 8004bbc:	604b      	str	r3, [r1, #4]
 8004bbe:	e025      	b.n	8004c0c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004bc0:	4b66      	ldr	r3, [pc, #408]	@ (8004d5c <HAL_RCC_OscConfig+0x270>)
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	4a65      	ldr	r2, [pc, #404]	@ (8004d5c <HAL_RCC_OscConfig+0x270>)
 8004bc6:	f043 0308 	orr.w	r3, r3, #8
 8004bca:	6013      	str	r3, [r2, #0]
 8004bcc:	4b63      	ldr	r3, [pc, #396]	@ (8004d5c <HAL_RCC_OscConfig+0x270>)
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	6a1b      	ldr	r3, [r3, #32]
 8004bd8:	4960      	ldr	r1, [pc, #384]	@ (8004d5c <HAL_RCC_OscConfig+0x270>)
 8004bda:	4313      	orrs	r3, r2
 8004bdc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004bde:	4b5f      	ldr	r3, [pc, #380]	@ (8004d5c <HAL_RCC_OscConfig+0x270>)
 8004be0:	685b      	ldr	r3, [r3, #4]
 8004be2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	69db      	ldr	r3, [r3, #28]
 8004bea:	021b      	lsls	r3, r3, #8
 8004bec:	495b      	ldr	r1, [pc, #364]	@ (8004d5c <HAL_RCC_OscConfig+0x270>)
 8004bee:	4313      	orrs	r3, r2
 8004bf0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004bf2:	69bb      	ldr	r3, [r7, #24]
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d109      	bne.n	8004c0c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	6a1b      	ldr	r3, [r3, #32]
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	f000 fd03 	bl	8005608 <RCC_SetFlashLatencyFromMSIRange>
 8004c02:	4603      	mov	r3, r0
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d001      	beq.n	8004c0c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8004c08:	2301      	movs	r3, #1
 8004c0a:	e351      	b.n	80052b0 <HAL_RCC_OscConfig+0x7c4>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004c0c:	f000 fc38 	bl	8005480 <HAL_RCC_GetSysClockFreq>
 8004c10:	4602      	mov	r2, r0
 8004c12:	4b52      	ldr	r3, [pc, #328]	@ (8004d5c <HAL_RCC_OscConfig+0x270>)
 8004c14:	689b      	ldr	r3, [r3, #8]
 8004c16:	091b      	lsrs	r3, r3, #4
 8004c18:	f003 030f 	and.w	r3, r3, #15
 8004c1c:	4950      	ldr	r1, [pc, #320]	@ (8004d60 <HAL_RCC_OscConfig+0x274>)
 8004c1e:	5ccb      	ldrb	r3, [r1, r3]
 8004c20:	f003 031f 	and.w	r3, r3, #31
 8004c24:	fa22 f303 	lsr.w	r3, r2, r3
 8004c28:	4a4e      	ldr	r2, [pc, #312]	@ (8004d64 <HAL_RCC_OscConfig+0x278>)
 8004c2a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004c2c:	4b4e      	ldr	r3, [pc, #312]	@ (8004d68 <HAL_RCC_OscConfig+0x27c>)
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	4618      	mov	r0, r3
 8004c32:	f7fe f97b 	bl	8002f2c <HAL_InitTick>
 8004c36:	4603      	mov	r3, r0
 8004c38:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004c3a:	7bfb      	ldrb	r3, [r7, #15]
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d052      	beq.n	8004ce6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8004c40:	7bfb      	ldrb	r3, [r7, #15]
 8004c42:	e335      	b.n	80052b0 <HAL_RCC_OscConfig+0x7c4>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	699b      	ldr	r3, [r3, #24]
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d032      	beq.n	8004cb2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004c4c:	4b43      	ldr	r3, [pc, #268]	@ (8004d5c <HAL_RCC_OscConfig+0x270>)
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	4a42      	ldr	r2, [pc, #264]	@ (8004d5c <HAL_RCC_OscConfig+0x270>)
 8004c52:	f043 0301 	orr.w	r3, r3, #1
 8004c56:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004c58:	f7fe f9b8 	bl	8002fcc <HAL_GetTick>
 8004c5c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004c5e:	e008      	b.n	8004c72 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004c60:	f7fe f9b4 	bl	8002fcc <HAL_GetTick>
 8004c64:	4602      	mov	r2, r0
 8004c66:	693b      	ldr	r3, [r7, #16]
 8004c68:	1ad3      	subs	r3, r2, r3
 8004c6a:	2b02      	cmp	r3, #2
 8004c6c:	d901      	bls.n	8004c72 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8004c6e:	2303      	movs	r3, #3
 8004c70:	e31e      	b.n	80052b0 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004c72:	4b3a      	ldr	r3, [pc, #232]	@ (8004d5c <HAL_RCC_OscConfig+0x270>)
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f003 0302 	and.w	r3, r3, #2
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d0f0      	beq.n	8004c60 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004c7e:	4b37      	ldr	r3, [pc, #220]	@ (8004d5c <HAL_RCC_OscConfig+0x270>)
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	4a36      	ldr	r2, [pc, #216]	@ (8004d5c <HAL_RCC_OscConfig+0x270>)
 8004c84:	f043 0308 	orr.w	r3, r3, #8
 8004c88:	6013      	str	r3, [r2, #0]
 8004c8a:	4b34      	ldr	r3, [pc, #208]	@ (8004d5c <HAL_RCC_OscConfig+0x270>)
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6a1b      	ldr	r3, [r3, #32]
 8004c96:	4931      	ldr	r1, [pc, #196]	@ (8004d5c <HAL_RCC_OscConfig+0x270>)
 8004c98:	4313      	orrs	r3, r2
 8004c9a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004c9c:	4b2f      	ldr	r3, [pc, #188]	@ (8004d5c <HAL_RCC_OscConfig+0x270>)
 8004c9e:	685b      	ldr	r3, [r3, #4]
 8004ca0:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	69db      	ldr	r3, [r3, #28]
 8004ca8:	021b      	lsls	r3, r3, #8
 8004caa:	492c      	ldr	r1, [pc, #176]	@ (8004d5c <HAL_RCC_OscConfig+0x270>)
 8004cac:	4313      	orrs	r3, r2
 8004cae:	604b      	str	r3, [r1, #4]
 8004cb0:	e01a      	b.n	8004ce8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004cb2:	4b2a      	ldr	r3, [pc, #168]	@ (8004d5c <HAL_RCC_OscConfig+0x270>)
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	4a29      	ldr	r2, [pc, #164]	@ (8004d5c <HAL_RCC_OscConfig+0x270>)
 8004cb8:	f023 0301 	bic.w	r3, r3, #1
 8004cbc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004cbe:	f7fe f985 	bl	8002fcc <HAL_GetTick>
 8004cc2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004cc4:	e008      	b.n	8004cd8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004cc6:	f7fe f981 	bl	8002fcc <HAL_GetTick>
 8004cca:	4602      	mov	r2, r0
 8004ccc:	693b      	ldr	r3, [r7, #16]
 8004cce:	1ad3      	subs	r3, r2, r3
 8004cd0:	2b02      	cmp	r3, #2
 8004cd2:	d901      	bls.n	8004cd8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8004cd4:	2303      	movs	r3, #3
 8004cd6:	e2eb      	b.n	80052b0 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004cd8:	4b20      	ldr	r3, [pc, #128]	@ (8004d5c <HAL_RCC_OscConfig+0x270>)
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f003 0302 	and.w	r3, r3, #2
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d1f0      	bne.n	8004cc6 <HAL_RCC_OscConfig+0x1da>
 8004ce4:	e000      	b.n	8004ce8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004ce6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f003 0301 	and.w	r3, r3, #1
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d074      	beq.n	8004dde <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004cf4:	69bb      	ldr	r3, [r7, #24]
 8004cf6:	2b08      	cmp	r3, #8
 8004cf8:	d005      	beq.n	8004d06 <HAL_RCC_OscConfig+0x21a>
 8004cfa:	69bb      	ldr	r3, [r7, #24]
 8004cfc:	2b0c      	cmp	r3, #12
 8004cfe:	d10e      	bne.n	8004d1e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004d00:	697b      	ldr	r3, [r7, #20]
 8004d02:	2b03      	cmp	r3, #3
 8004d04:	d10b      	bne.n	8004d1e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d06:	4b15      	ldr	r3, [pc, #84]	@ (8004d5c <HAL_RCC_OscConfig+0x270>)
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d064      	beq.n	8004ddc <HAL_RCC_OscConfig+0x2f0>
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	685b      	ldr	r3, [r3, #4]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d160      	bne.n	8004ddc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004d1a:	2301      	movs	r3, #1
 8004d1c:	e2c8      	b.n	80052b0 <HAL_RCC_OscConfig+0x7c4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	685b      	ldr	r3, [r3, #4]
 8004d22:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004d26:	d106      	bne.n	8004d36 <HAL_RCC_OscConfig+0x24a>
 8004d28:	4b0c      	ldr	r3, [pc, #48]	@ (8004d5c <HAL_RCC_OscConfig+0x270>)
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	4a0b      	ldr	r2, [pc, #44]	@ (8004d5c <HAL_RCC_OscConfig+0x270>)
 8004d2e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004d32:	6013      	str	r3, [r2, #0]
 8004d34:	e026      	b.n	8004d84 <HAL_RCC_OscConfig+0x298>
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	685b      	ldr	r3, [r3, #4]
 8004d3a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004d3e:	d115      	bne.n	8004d6c <HAL_RCC_OscConfig+0x280>
 8004d40:	4b06      	ldr	r3, [pc, #24]	@ (8004d5c <HAL_RCC_OscConfig+0x270>)
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	4a05      	ldr	r2, [pc, #20]	@ (8004d5c <HAL_RCC_OscConfig+0x270>)
 8004d46:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004d4a:	6013      	str	r3, [r2, #0]
 8004d4c:	4b03      	ldr	r3, [pc, #12]	@ (8004d5c <HAL_RCC_OscConfig+0x270>)
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	4a02      	ldr	r2, [pc, #8]	@ (8004d5c <HAL_RCC_OscConfig+0x270>)
 8004d52:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004d56:	6013      	str	r3, [r2, #0]
 8004d58:	e014      	b.n	8004d84 <HAL_RCC_OscConfig+0x298>
 8004d5a:	bf00      	nop
 8004d5c:	40021000 	.word	0x40021000
 8004d60:	0800ef8c 	.word	0x0800ef8c
 8004d64:	20000000 	.word	0x20000000
 8004d68:	200000a0 	.word	0x200000a0
 8004d6c:	4ba0      	ldr	r3, [pc, #640]	@ (8004ff0 <HAL_RCC_OscConfig+0x504>)
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	4a9f      	ldr	r2, [pc, #636]	@ (8004ff0 <HAL_RCC_OscConfig+0x504>)
 8004d72:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004d76:	6013      	str	r3, [r2, #0]
 8004d78:	4b9d      	ldr	r3, [pc, #628]	@ (8004ff0 <HAL_RCC_OscConfig+0x504>)
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	4a9c      	ldr	r2, [pc, #624]	@ (8004ff0 <HAL_RCC_OscConfig+0x504>)
 8004d7e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004d82:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	685b      	ldr	r3, [r3, #4]
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d013      	beq.n	8004db4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d8c:	f7fe f91e 	bl	8002fcc <HAL_GetTick>
 8004d90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004d92:	e008      	b.n	8004da6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d94:	f7fe f91a 	bl	8002fcc <HAL_GetTick>
 8004d98:	4602      	mov	r2, r0
 8004d9a:	693b      	ldr	r3, [r7, #16]
 8004d9c:	1ad3      	subs	r3, r2, r3
 8004d9e:	2b64      	cmp	r3, #100	@ 0x64
 8004da0:	d901      	bls.n	8004da6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004da2:	2303      	movs	r3, #3
 8004da4:	e284      	b.n	80052b0 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004da6:	4b92      	ldr	r3, [pc, #584]	@ (8004ff0 <HAL_RCC_OscConfig+0x504>)
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d0f0      	beq.n	8004d94 <HAL_RCC_OscConfig+0x2a8>
 8004db2:	e014      	b.n	8004dde <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004db4:	f7fe f90a 	bl	8002fcc <HAL_GetTick>
 8004db8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004dba:	e008      	b.n	8004dce <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004dbc:	f7fe f906 	bl	8002fcc <HAL_GetTick>
 8004dc0:	4602      	mov	r2, r0
 8004dc2:	693b      	ldr	r3, [r7, #16]
 8004dc4:	1ad3      	subs	r3, r2, r3
 8004dc6:	2b64      	cmp	r3, #100	@ 0x64
 8004dc8:	d901      	bls.n	8004dce <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004dca:	2303      	movs	r3, #3
 8004dcc:	e270      	b.n	80052b0 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004dce:	4b88      	ldr	r3, [pc, #544]	@ (8004ff0 <HAL_RCC_OscConfig+0x504>)
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d1f0      	bne.n	8004dbc <HAL_RCC_OscConfig+0x2d0>
 8004dda:	e000      	b.n	8004dde <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ddc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f003 0302 	and.w	r3, r3, #2
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d060      	beq.n	8004eac <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004dea:	69bb      	ldr	r3, [r7, #24]
 8004dec:	2b04      	cmp	r3, #4
 8004dee:	d005      	beq.n	8004dfc <HAL_RCC_OscConfig+0x310>
 8004df0:	69bb      	ldr	r3, [r7, #24]
 8004df2:	2b0c      	cmp	r3, #12
 8004df4:	d119      	bne.n	8004e2a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004df6:	697b      	ldr	r3, [r7, #20]
 8004df8:	2b02      	cmp	r3, #2
 8004dfa:	d116      	bne.n	8004e2a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004dfc:	4b7c      	ldr	r3, [pc, #496]	@ (8004ff0 <HAL_RCC_OscConfig+0x504>)
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d005      	beq.n	8004e14 <HAL_RCC_OscConfig+0x328>
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	68db      	ldr	r3, [r3, #12]
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d101      	bne.n	8004e14 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004e10:	2301      	movs	r3, #1
 8004e12:	e24d      	b.n	80052b0 <HAL_RCC_OscConfig+0x7c4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e14:	4b76      	ldr	r3, [pc, #472]	@ (8004ff0 <HAL_RCC_OscConfig+0x504>)
 8004e16:	685b      	ldr	r3, [r3, #4]
 8004e18:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	691b      	ldr	r3, [r3, #16]
 8004e20:	061b      	lsls	r3, r3, #24
 8004e22:	4973      	ldr	r1, [pc, #460]	@ (8004ff0 <HAL_RCC_OscConfig+0x504>)
 8004e24:	4313      	orrs	r3, r2
 8004e26:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004e28:	e040      	b.n	8004eac <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	68db      	ldr	r3, [r3, #12]
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d023      	beq.n	8004e7a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004e32:	4b6f      	ldr	r3, [pc, #444]	@ (8004ff0 <HAL_RCC_OscConfig+0x504>)
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	4a6e      	ldr	r2, [pc, #440]	@ (8004ff0 <HAL_RCC_OscConfig+0x504>)
 8004e38:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004e3c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e3e:	f7fe f8c5 	bl	8002fcc <HAL_GetTick>
 8004e42:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004e44:	e008      	b.n	8004e58 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e46:	f7fe f8c1 	bl	8002fcc <HAL_GetTick>
 8004e4a:	4602      	mov	r2, r0
 8004e4c:	693b      	ldr	r3, [r7, #16]
 8004e4e:	1ad3      	subs	r3, r2, r3
 8004e50:	2b02      	cmp	r3, #2
 8004e52:	d901      	bls.n	8004e58 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004e54:	2303      	movs	r3, #3
 8004e56:	e22b      	b.n	80052b0 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004e58:	4b65      	ldr	r3, [pc, #404]	@ (8004ff0 <HAL_RCC_OscConfig+0x504>)
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d0f0      	beq.n	8004e46 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e64:	4b62      	ldr	r3, [pc, #392]	@ (8004ff0 <HAL_RCC_OscConfig+0x504>)
 8004e66:	685b      	ldr	r3, [r3, #4]
 8004e68:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	691b      	ldr	r3, [r3, #16]
 8004e70:	061b      	lsls	r3, r3, #24
 8004e72:	495f      	ldr	r1, [pc, #380]	@ (8004ff0 <HAL_RCC_OscConfig+0x504>)
 8004e74:	4313      	orrs	r3, r2
 8004e76:	604b      	str	r3, [r1, #4]
 8004e78:	e018      	b.n	8004eac <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004e7a:	4b5d      	ldr	r3, [pc, #372]	@ (8004ff0 <HAL_RCC_OscConfig+0x504>)
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	4a5c      	ldr	r2, [pc, #368]	@ (8004ff0 <HAL_RCC_OscConfig+0x504>)
 8004e80:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004e84:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e86:	f7fe f8a1 	bl	8002fcc <HAL_GetTick>
 8004e8a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004e8c:	e008      	b.n	8004ea0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e8e:	f7fe f89d 	bl	8002fcc <HAL_GetTick>
 8004e92:	4602      	mov	r2, r0
 8004e94:	693b      	ldr	r3, [r7, #16]
 8004e96:	1ad3      	subs	r3, r2, r3
 8004e98:	2b02      	cmp	r3, #2
 8004e9a:	d901      	bls.n	8004ea0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004e9c:	2303      	movs	r3, #3
 8004e9e:	e207      	b.n	80052b0 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004ea0:	4b53      	ldr	r3, [pc, #332]	@ (8004ff0 <HAL_RCC_OscConfig+0x504>)
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d1f0      	bne.n	8004e8e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f003 0308 	and.w	r3, r3, #8
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d03c      	beq.n	8004f32 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	695b      	ldr	r3, [r3, #20]
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d01c      	beq.n	8004efa <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004ec0:	4b4b      	ldr	r3, [pc, #300]	@ (8004ff0 <HAL_RCC_OscConfig+0x504>)
 8004ec2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004ec6:	4a4a      	ldr	r2, [pc, #296]	@ (8004ff0 <HAL_RCC_OscConfig+0x504>)
 8004ec8:	f043 0301 	orr.w	r3, r3, #1
 8004ecc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ed0:	f7fe f87c 	bl	8002fcc <HAL_GetTick>
 8004ed4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004ed6:	e008      	b.n	8004eea <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ed8:	f7fe f878 	bl	8002fcc <HAL_GetTick>
 8004edc:	4602      	mov	r2, r0
 8004ede:	693b      	ldr	r3, [r7, #16]
 8004ee0:	1ad3      	subs	r3, r2, r3
 8004ee2:	2b02      	cmp	r3, #2
 8004ee4:	d901      	bls.n	8004eea <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004ee6:	2303      	movs	r3, #3
 8004ee8:	e1e2      	b.n	80052b0 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004eea:	4b41      	ldr	r3, [pc, #260]	@ (8004ff0 <HAL_RCC_OscConfig+0x504>)
 8004eec:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004ef0:	f003 0302 	and.w	r3, r3, #2
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d0ef      	beq.n	8004ed8 <HAL_RCC_OscConfig+0x3ec>
 8004ef8:	e01b      	b.n	8004f32 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004efa:	4b3d      	ldr	r3, [pc, #244]	@ (8004ff0 <HAL_RCC_OscConfig+0x504>)
 8004efc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004f00:	4a3b      	ldr	r2, [pc, #236]	@ (8004ff0 <HAL_RCC_OscConfig+0x504>)
 8004f02:	f023 0301 	bic.w	r3, r3, #1
 8004f06:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f0a:	f7fe f85f 	bl	8002fcc <HAL_GetTick>
 8004f0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004f10:	e008      	b.n	8004f24 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004f12:	f7fe f85b 	bl	8002fcc <HAL_GetTick>
 8004f16:	4602      	mov	r2, r0
 8004f18:	693b      	ldr	r3, [r7, #16]
 8004f1a:	1ad3      	subs	r3, r2, r3
 8004f1c:	2b02      	cmp	r3, #2
 8004f1e:	d901      	bls.n	8004f24 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004f20:	2303      	movs	r3, #3
 8004f22:	e1c5      	b.n	80052b0 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004f24:	4b32      	ldr	r3, [pc, #200]	@ (8004ff0 <HAL_RCC_OscConfig+0x504>)
 8004f26:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004f2a:	f003 0302 	and.w	r3, r3, #2
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d1ef      	bne.n	8004f12 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f003 0304 	and.w	r3, r3, #4
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	f000 80a6 	beq.w	800508c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004f40:	2300      	movs	r3, #0
 8004f42:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004f44:	4b2a      	ldr	r3, [pc, #168]	@ (8004ff0 <HAL_RCC_OscConfig+0x504>)
 8004f46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f48:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d10d      	bne.n	8004f6c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004f50:	4b27      	ldr	r3, [pc, #156]	@ (8004ff0 <HAL_RCC_OscConfig+0x504>)
 8004f52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f54:	4a26      	ldr	r2, [pc, #152]	@ (8004ff0 <HAL_RCC_OscConfig+0x504>)
 8004f56:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004f5a:	6593      	str	r3, [r2, #88]	@ 0x58
 8004f5c:	4b24      	ldr	r3, [pc, #144]	@ (8004ff0 <HAL_RCC_OscConfig+0x504>)
 8004f5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f60:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004f64:	60bb      	str	r3, [r7, #8]
 8004f66:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004f68:	2301      	movs	r3, #1
 8004f6a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004f6c:	4b21      	ldr	r3, [pc, #132]	@ (8004ff4 <HAL_RCC_OscConfig+0x508>)
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d118      	bne.n	8004faa <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004f78:	4b1e      	ldr	r3, [pc, #120]	@ (8004ff4 <HAL_RCC_OscConfig+0x508>)
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	4a1d      	ldr	r2, [pc, #116]	@ (8004ff4 <HAL_RCC_OscConfig+0x508>)
 8004f7e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004f82:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004f84:	f7fe f822 	bl	8002fcc <HAL_GetTick>
 8004f88:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004f8a:	e008      	b.n	8004f9e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f8c:	f7fe f81e 	bl	8002fcc <HAL_GetTick>
 8004f90:	4602      	mov	r2, r0
 8004f92:	693b      	ldr	r3, [r7, #16]
 8004f94:	1ad3      	subs	r3, r2, r3
 8004f96:	2b02      	cmp	r3, #2
 8004f98:	d901      	bls.n	8004f9e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004f9a:	2303      	movs	r3, #3
 8004f9c:	e188      	b.n	80052b0 <HAL_RCC_OscConfig+0x7c4>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004f9e:	4b15      	ldr	r3, [pc, #84]	@ (8004ff4 <HAL_RCC_OscConfig+0x508>)
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d0f0      	beq.n	8004f8c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	689b      	ldr	r3, [r3, #8]
 8004fae:	2b01      	cmp	r3, #1
 8004fb0:	d108      	bne.n	8004fc4 <HAL_RCC_OscConfig+0x4d8>
 8004fb2:	4b0f      	ldr	r3, [pc, #60]	@ (8004ff0 <HAL_RCC_OscConfig+0x504>)
 8004fb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004fb8:	4a0d      	ldr	r2, [pc, #52]	@ (8004ff0 <HAL_RCC_OscConfig+0x504>)
 8004fba:	f043 0301 	orr.w	r3, r3, #1
 8004fbe:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004fc2:	e029      	b.n	8005018 <HAL_RCC_OscConfig+0x52c>
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	689b      	ldr	r3, [r3, #8]
 8004fc8:	2b05      	cmp	r3, #5
 8004fca:	d115      	bne.n	8004ff8 <HAL_RCC_OscConfig+0x50c>
 8004fcc:	4b08      	ldr	r3, [pc, #32]	@ (8004ff0 <HAL_RCC_OscConfig+0x504>)
 8004fce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004fd2:	4a07      	ldr	r2, [pc, #28]	@ (8004ff0 <HAL_RCC_OscConfig+0x504>)
 8004fd4:	f043 0304 	orr.w	r3, r3, #4
 8004fd8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004fdc:	4b04      	ldr	r3, [pc, #16]	@ (8004ff0 <HAL_RCC_OscConfig+0x504>)
 8004fde:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004fe2:	4a03      	ldr	r2, [pc, #12]	@ (8004ff0 <HAL_RCC_OscConfig+0x504>)
 8004fe4:	f043 0301 	orr.w	r3, r3, #1
 8004fe8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004fec:	e014      	b.n	8005018 <HAL_RCC_OscConfig+0x52c>
 8004fee:	bf00      	nop
 8004ff0:	40021000 	.word	0x40021000
 8004ff4:	40007000 	.word	0x40007000
 8004ff8:	4b91      	ldr	r3, [pc, #580]	@ (8005240 <HAL_RCC_OscConfig+0x754>)
 8004ffa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ffe:	4a90      	ldr	r2, [pc, #576]	@ (8005240 <HAL_RCC_OscConfig+0x754>)
 8005000:	f023 0301 	bic.w	r3, r3, #1
 8005004:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005008:	4b8d      	ldr	r3, [pc, #564]	@ (8005240 <HAL_RCC_OscConfig+0x754>)
 800500a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800500e:	4a8c      	ldr	r2, [pc, #560]	@ (8005240 <HAL_RCC_OscConfig+0x754>)
 8005010:	f023 0304 	bic.w	r3, r3, #4
 8005014:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	689b      	ldr	r3, [r3, #8]
 800501c:	2b00      	cmp	r3, #0
 800501e:	d016      	beq.n	800504e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005020:	f7fd ffd4 	bl	8002fcc <HAL_GetTick>
 8005024:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005026:	e00a      	b.n	800503e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005028:	f7fd ffd0 	bl	8002fcc <HAL_GetTick>
 800502c:	4602      	mov	r2, r0
 800502e:	693b      	ldr	r3, [r7, #16]
 8005030:	1ad3      	subs	r3, r2, r3
 8005032:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005036:	4293      	cmp	r3, r2
 8005038:	d901      	bls.n	800503e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800503a:	2303      	movs	r3, #3
 800503c:	e138      	b.n	80052b0 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800503e:	4b80      	ldr	r3, [pc, #512]	@ (8005240 <HAL_RCC_OscConfig+0x754>)
 8005040:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005044:	f003 0302 	and.w	r3, r3, #2
 8005048:	2b00      	cmp	r3, #0
 800504a:	d0ed      	beq.n	8005028 <HAL_RCC_OscConfig+0x53c>
 800504c:	e015      	b.n	800507a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800504e:	f7fd ffbd 	bl	8002fcc <HAL_GetTick>
 8005052:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005054:	e00a      	b.n	800506c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005056:	f7fd ffb9 	bl	8002fcc <HAL_GetTick>
 800505a:	4602      	mov	r2, r0
 800505c:	693b      	ldr	r3, [r7, #16]
 800505e:	1ad3      	subs	r3, r2, r3
 8005060:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005064:	4293      	cmp	r3, r2
 8005066:	d901      	bls.n	800506c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8005068:	2303      	movs	r3, #3
 800506a:	e121      	b.n	80052b0 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800506c:	4b74      	ldr	r3, [pc, #464]	@ (8005240 <HAL_RCC_OscConfig+0x754>)
 800506e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005072:	f003 0302 	and.w	r3, r3, #2
 8005076:	2b00      	cmp	r3, #0
 8005078:	d1ed      	bne.n	8005056 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800507a:	7ffb      	ldrb	r3, [r7, #31]
 800507c:	2b01      	cmp	r3, #1
 800507e:	d105      	bne.n	800508c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005080:	4b6f      	ldr	r3, [pc, #444]	@ (8005240 <HAL_RCC_OscConfig+0x754>)
 8005082:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005084:	4a6e      	ldr	r2, [pc, #440]	@ (8005240 <HAL_RCC_OscConfig+0x754>)
 8005086:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800508a:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005090:	2b00      	cmp	r3, #0
 8005092:	f000 810c 	beq.w	80052ae <HAL_RCC_OscConfig+0x7c2>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800509a:	2b02      	cmp	r3, #2
 800509c:	f040 80d4 	bne.w	8005248 <HAL_RCC_OscConfig+0x75c>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80050a0:	4b67      	ldr	r3, [pc, #412]	@ (8005240 <HAL_RCC_OscConfig+0x754>)
 80050a2:	68db      	ldr	r3, [r3, #12]
 80050a4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80050a6:	697b      	ldr	r3, [r7, #20]
 80050a8:	f003 0203 	and.w	r2, r3, #3
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050b0:	429a      	cmp	r2, r3
 80050b2:	d130      	bne.n	8005116 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80050b4:	697b      	ldr	r3, [r7, #20]
 80050b6:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050be:	3b01      	subs	r3, #1
 80050c0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80050c2:	429a      	cmp	r2, r3
 80050c4:	d127      	bne.n	8005116 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80050c6:	697b      	ldr	r3, [r7, #20]
 80050c8:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80050d0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80050d2:	429a      	cmp	r2, r3
 80050d4:	d11f      	bne.n	8005116 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80050d6:	697b      	ldr	r3, [r7, #20]
 80050d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80050dc:	687a      	ldr	r2, [r7, #4]
 80050de:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80050e0:	2a07      	cmp	r2, #7
 80050e2:	bf14      	ite	ne
 80050e4:	2201      	movne	r2, #1
 80050e6:	2200      	moveq	r2, #0
 80050e8:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80050ea:	4293      	cmp	r3, r2
 80050ec:	d113      	bne.n	8005116 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80050ee:	697b      	ldr	r3, [r7, #20]
 80050f0:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80050f8:	085b      	lsrs	r3, r3, #1
 80050fa:	3b01      	subs	r3, #1
 80050fc:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80050fe:	429a      	cmp	r2, r3
 8005100:	d109      	bne.n	8005116 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005102:	697b      	ldr	r3, [r7, #20]
 8005104:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800510c:	085b      	lsrs	r3, r3, #1
 800510e:	3b01      	subs	r3, #1
 8005110:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005112:	429a      	cmp	r2, r3
 8005114:	d06e      	beq.n	80051f4 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005116:	69bb      	ldr	r3, [r7, #24]
 8005118:	2b0c      	cmp	r3, #12
 800511a:	d069      	beq.n	80051f0 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800511c:	4b48      	ldr	r3, [pc, #288]	@ (8005240 <HAL_RCC_OscConfig+0x754>)
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005124:	2b00      	cmp	r3, #0
 8005126:	d105      	bne.n	8005134 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8005128:	4b45      	ldr	r3, [pc, #276]	@ (8005240 <HAL_RCC_OscConfig+0x754>)
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005130:	2b00      	cmp	r3, #0
 8005132:	d001      	beq.n	8005138 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8005134:	2301      	movs	r3, #1
 8005136:	e0bb      	b.n	80052b0 <HAL_RCC_OscConfig+0x7c4>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005138:	4b41      	ldr	r3, [pc, #260]	@ (8005240 <HAL_RCC_OscConfig+0x754>)
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	4a40      	ldr	r2, [pc, #256]	@ (8005240 <HAL_RCC_OscConfig+0x754>)
 800513e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005142:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005144:	f7fd ff42 	bl	8002fcc <HAL_GetTick>
 8005148:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800514a:	e008      	b.n	800515e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800514c:	f7fd ff3e 	bl	8002fcc <HAL_GetTick>
 8005150:	4602      	mov	r2, r0
 8005152:	693b      	ldr	r3, [r7, #16]
 8005154:	1ad3      	subs	r3, r2, r3
 8005156:	2b02      	cmp	r3, #2
 8005158:	d901      	bls.n	800515e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800515a:	2303      	movs	r3, #3
 800515c:	e0a8      	b.n	80052b0 <HAL_RCC_OscConfig+0x7c4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800515e:	4b38      	ldr	r3, [pc, #224]	@ (8005240 <HAL_RCC_OscConfig+0x754>)
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005166:	2b00      	cmp	r3, #0
 8005168:	d1f0      	bne.n	800514c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800516a:	4b35      	ldr	r3, [pc, #212]	@ (8005240 <HAL_RCC_OscConfig+0x754>)
 800516c:	68da      	ldr	r2, [r3, #12]
 800516e:	4b35      	ldr	r3, [pc, #212]	@ (8005244 <HAL_RCC_OscConfig+0x758>)
 8005170:	4013      	ands	r3, r2
 8005172:	687a      	ldr	r2, [r7, #4]
 8005174:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8005176:	687a      	ldr	r2, [r7, #4]
 8005178:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800517a:	3a01      	subs	r2, #1
 800517c:	0112      	lsls	r2, r2, #4
 800517e:	4311      	orrs	r1, r2
 8005180:	687a      	ldr	r2, [r7, #4]
 8005182:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005184:	0212      	lsls	r2, r2, #8
 8005186:	4311      	orrs	r1, r2
 8005188:	687a      	ldr	r2, [r7, #4]
 800518a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800518c:	0852      	lsrs	r2, r2, #1
 800518e:	3a01      	subs	r2, #1
 8005190:	0552      	lsls	r2, r2, #21
 8005192:	4311      	orrs	r1, r2
 8005194:	687a      	ldr	r2, [r7, #4]
 8005196:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8005198:	0852      	lsrs	r2, r2, #1
 800519a:	3a01      	subs	r2, #1
 800519c:	0652      	lsls	r2, r2, #25
 800519e:	4311      	orrs	r1, r2
 80051a0:	687a      	ldr	r2, [r7, #4]
 80051a2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80051a4:	0912      	lsrs	r2, r2, #4
 80051a6:	0452      	lsls	r2, r2, #17
 80051a8:	430a      	orrs	r2, r1
 80051aa:	4925      	ldr	r1, [pc, #148]	@ (8005240 <HAL_RCC_OscConfig+0x754>)
 80051ac:	4313      	orrs	r3, r2
 80051ae:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80051b0:	4b23      	ldr	r3, [pc, #140]	@ (8005240 <HAL_RCC_OscConfig+0x754>)
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	4a22      	ldr	r2, [pc, #136]	@ (8005240 <HAL_RCC_OscConfig+0x754>)
 80051b6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80051ba:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80051bc:	4b20      	ldr	r3, [pc, #128]	@ (8005240 <HAL_RCC_OscConfig+0x754>)
 80051be:	68db      	ldr	r3, [r3, #12]
 80051c0:	4a1f      	ldr	r2, [pc, #124]	@ (8005240 <HAL_RCC_OscConfig+0x754>)
 80051c2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80051c6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80051c8:	f7fd ff00 	bl	8002fcc <HAL_GetTick>
 80051cc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80051ce:	e008      	b.n	80051e2 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80051d0:	f7fd fefc 	bl	8002fcc <HAL_GetTick>
 80051d4:	4602      	mov	r2, r0
 80051d6:	693b      	ldr	r3, [r7, #16]
 80051d8:	1ad3      	subs	r3, r2, r3
 80051da:	2b02      	cmp	r3, #2
 80051dc:	d901      	bls.n	80051e2 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80051de:	2303      	movs	r3, #3
 80051e0:	e066      	b.n	80052b0 <HAL_RCC_OscConfig+0x7c4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80051e2:	4b17      	ldr	r3, [pc, #92]	@ (8005240 <HAL_RCC_OscConfig+0x754>)
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d0f0      	beq.n	80051d0 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80051ee:	e05e      	b.n	80052ae <HAL_RCC_OscConfig+0x7c2>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80051f0:	2301      	movs	r3, #1
 80051f2:	e05d      	b.n	80052b0 <HAL_RCC_OscConfig+0x7c4>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80051f4:	4b12      	ldr	r3, [pc, #72]	@ (8005240 <HAL_RCC_OscConfig+0x754>)
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d156      	bne.n	80052ae <HAL_RCC_OscConfig+0x7c2>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005200:	4b0f      	ldr	r3, [pc, #60]	@ (8005240 <HAL_RCC_OscConfig+0x754>)
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	4a0e      	ldr	r2, [pc, #56]	@ (8005240 <HAL_RCC_OscConfig+0x754>)
 8005206:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800520a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800520c:	4b0c      	ldr	r3, [pc, #48]	@ (8005240 <HAL_RCC_OscConfig+0x754>)
 800520e:	68db      	ldr	r3, [r3, #12]
 8005210:	4a0b      	ldr	r2, [pc, #44]	@ (8005240 <HAL_RCC_OscConfig+0x754>)
 8005212:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005216:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005218:	f7fd fed8 	bl	8002fcc <HAL_GetTick>
 800521c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800521e:	e008      	b.n	8005232 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005220:	f7fd fed4 	bl	8002fcc <HAL_GetTick>
 8005224:	4602      	mov	r2, r0
 8005226:	693b      	ldr	r3, [r7, #16]
 8005228:	1ad3      	subs	r3, r2, r3
 800522a:	2b02      	cmp	r3, #2
 800522c:	d901      	bls.n	8005232 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800522e:	2303      	movs	r3, #3
 8005230:	e03e      	b.n	80052b0 <HAL_RCC_OscConfig+0x7c4>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005232:	4b03      	ldr	r3, [pc, #12]	@ (8005240 <HAL_RCC_OscConfig+0x754>)
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800523a:	2b00      	cmp	r3, #0
 800523c:	d0f0      	beq.n	8005220 <HAL_RCC_OscConfig+0x734>
 800523e:	e036      	b.n	80052ae <HAL_RCC_OscConfig+0x7c2>
 8005240:	40021000 	.word	0x40021000
 8005244:	f99d808c 	.word	0xf99d808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005248:	69bb      	ldr	r3, [r7, #24]
 800524a:	2b0c      	cmp	r3, #12
 800524c:	d02d      	beq.n	80052aa <HAL_RCC_OscConfig+0x7be>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800524e:	4b1a      	ldr	r3, [pc, #104]	@ (80052b8 <HAL_RCC_OscConfig+0x7cc>)
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	4a19      	ldr	r2, [pc, #100]	@ (80052b8 <HAL_RCC_OscConfig+0x7cc>)
 8005254:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005258:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 800525a:	4b17      	ldr	r3, [pc, #92]	@ (80052b8 <HAL_RCC_OscConfig+0x7cc>)
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f003 5320 	and.w	r3, r3, #671088640	@ 0x28000000
 8005262:	2b00      	cmp	r3, #0
 8005264:	d105      	bne.n	8005272 <HAL_RCC_OscConfig+0x786>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8005266:	4b14      	ldr	r3, [pc, #80]	@ (80052b8 <HAL_RCC_OscConfig+0x7cc>)
 8005268:	68db      	ldr	r3, [r3, #12]
 800526a:	4a13      	ldr	r2, [pc, #76]	@ (80052b8 <HAL_RCC_OscConfig+0x7cc>)
 800526c:	f023 0303 	bic.w	r3, r3, #3
 8005270:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8005272:	4b11      	ldr	r3, [pc, #68]	@ (80052b8 <HAL_RCC_OscConfig+0x7cc>)
 8005274:	68db      	ldr	r3, [r3, #12]
 8005276:	4a10      	ldr	r2, [pc, #64]	@ (80052b8 <HAL_RCC_OscConfig+0x7cc>)
 8005278:	f023 7388 	bic.w	r3, r3, #17825792	@ 0x1100000
 800527c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005280:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005282:	f7fd fea3 	bl	8002fcc <HAL_GetTick>
 8005286:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005288:	e008      	b.n	800529c <HAL_RCC_OscConfig+0x7b0>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800528a:	f7fd fe9f 	bl	8002fcc <HAL_GetTick>
 800528e:	4602      	mov	r2, r0
 8005290:	693b      	ldr	r3, [r7, #16]
 8005292:	1ad3      	subs	r3, r2, r3
 8005294:	2b02      	cmp	r3, #2
 8005296:	d901      	bls.n	800529c <HAL_RCC_OscConfig+0x7b0>
          {
            return HAL_TIMEOUT;
 8005298:	2303      	movs	r3, #3
 800529a:	e009      	b.n	80052b0 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800529c:	4b06      	ldr	r3, [pc, #24]	@ (80052b8 <HAL_RCC_OscConfig+0x7cc>)
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d1f0      	bne.n	800528a <HAL_RCC_OscConfig+0x79e>
 80052a8:	e001      	b.n	80052ae <HAL_RCC_OscConfig+0x7c2>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80052aa:	2301      	movs	r3, #1
 80052ac:	e000      	b.n	80052b0 <HAL_RCC_OscConfig+0x7c4>
      }
    }
  }
  return HAL_OK;
 80052ae:	2300      	movs	r3, #0
}
 80052b0:	4618      	mov	r0, r3
 80052b2:	3720      	adds	r7, #32
 80052b4:	46bd      	mov	sp, r7
 80052b6:	bd80      	pop	{r7, pc}
 80052b8:	40021000 	.word	0x40021000

080052bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80052bc:	b580      	push	{r7, lr}
 80052be:	b084      	sub	sp, #16
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
 80052c4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d101      	bne.n	80052d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80052cc:	2301      	movs	r3, #1
 80052ce:	e0c8      	b.n	8005462 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80052d0:	4b66      	ldr	r3, [pc, #408]	@ (800546c <HAL_RCC_ClockConfig+0x1b0>)
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f003 0307 	and.w	r3, r3, #7
 80052d8:	683a      	ldr	r2, [r7, #0]
 80052da:	429a      	cmp	r2, r3
 80052dc:	d910      	bls.n	8005300 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80052de:	4b63      	ldr	r3, [pc, #396]	@ (800546c <HAL_RCC_ClockConfig+0x1b0>)
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f023 0207 	bic.w	r2, r3, #7
 80052e6:	4961      	ldr	r1, [pc, #388]	@ (800546c <HAL_RCC_ClockConfig+0x1b0>)
 80052e8:	683b      	ldr	r3, [r7, #0]
 80052ea:	4313      	orrs	r3, r2
 80052ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80052ee:	4b5f      	ldr	r3, [pc, #380]	@ (800546c <HAL_RCC_ClockConfig+0x1b0>)
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f003 0307 	and.w	r3, r3, #7
 80052f6:	683a      	ldr	r2, [r7, #0]
 80052f8:	429a      	cmp	r2, r3
 80052fa:	d001      	beq.n	8005300 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80052fc:	2301      	movs	r3, #1
 80052fe:	e0b0      	b.n	8005462 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f003 0301 	and.w	r3, r3, #1
 8005308:	2b00      	cmp	r3, #0
 800530a:	d04c      	beq.n	80053a6 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	685b      	ldr	r3, [r3, #4]
 8005310:	2b03      	cmp	r3, #3
 8005312:	d107      	bne.n	8005324 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005314:	4b56      	ldr	r3, [pc, #344]	@ (8005470 <HAL_RCC_ClockConfig+0x1b4>)
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800531c:	2b00      	cmp	r3, #0
 800531e:	d121      	bne.n	8005364 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8005320:	2301      	movs	r3, #1
 8005322:	e09e      	b.n	8005462 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	685b      	ldr	r3, [r3, #4]
 8005328:	2b02      	cmp	r3, #2
 800532a:	d107      	bne.n	800533c <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800532c:	4b50      	ldr	r3, [pc, #320]	@ (8005470 <HAL_RCC_ClockConfig+0x1b4>)
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005334:	2b00      	cmp	r3, #0
 8005336:	d115      	bne.n	8005364 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8005338:	2301      	movs	r3, #1
 800533a:	e092      	b.n	8005462 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	685b      	ldr	r3, [r3, #4]
 8005340:	2b00      	cmp	r3, #0
 8005342:	d107      	bne.n	8005354 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005344:	4b4a      	ldr	r3, [pc, #296]	@ (8005470 <HAL_RCC_ClockConfig+0x1b4>)
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f003 0302 	and.w	r3, r3, #2
 800534c:	2b00      	cmp	r3, #0
 800534e:	d109      	bne.n	8005364 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8005350:	2301      	movs	r3, #1
 8005352:	e086      	b.n	8005462 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005354:	4b46      	ldr	r3, [pc, #280]	@ (8005470 <HAL_RCC_ClockConfig+0x1b4>)
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800535c:	2b00      	cmp	r3, #0
 800535e:	d101      	bne.n	8005364 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8005360:	2301      	movs	r3, #1
 8005362:	e07e      	b.n	8005462 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005364:	4b42      	ldr	r3, [pc, #264]	@ (8005470 <HAL_RCC_ClockConfig+0x1b4>)
 8005366:	689b      	ldr	r3, [r3, #8]
 8005368:	f023 0203 	bic.w	r2, r3, #3
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	685b      	ldr	r3, [r3, #4]
 8005370:	493f      	ldr	r1, [pc, #252]	@ (8005470 <HAL_RCC_ClockConfig+0x1b4>)
 8005372:	4313      	orrs	r3, r2
 8005374:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005376:	f7fd fe29 	bl	8002fcc <HAL_GetTick>
 800537a:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800537c:	e00a      	b.n	8005394 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800537e:	f7fd fe25 	bl	8002fcc <HAL_GetTick>
 8005382:	4602      	mov	r2, r0
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	1ad3      	subs	r3, r2, r3
 8005388:	f241 3288 	movw	r2, #5000	@ 0x1388
 800538c:	4293      	cmp	r3, r2
 800538e:	d901      	bls.n	8005394 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8005390:	2303      	movs	r3, #3
 8005392:	e066      	b.n	8005462 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005394:	4b36      	ldr	r3, [pc, #216]	@ (8005470 <HAL_RCC_ClockConfig+0x1b4>)
 8005396:	689b      	ldr	r3, [r3, #8]
 8005398:	f003 020c 	and.w	r2, r3, #12
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	685b      	ldr	r3, [r3, #4]
 80053a0:	009b      	lsls	r3, r3, #2
 80053a2:	429a      	cmp	r2, r3
 80053a4:	d1eb      	bne.n	800537e <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f003 0302 	and.w	r3, r3, #2
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d008      	beq.n	80053c4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80053b2:	4b2f      	ldr	r3, [pc, #188]	@ (8005470 <HAL_RCC_ClockConfig+0x1b4>)
 80053b4:	689b      	ldr	r3, [r3, #8]
 80053b6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	689b      	ldr	r3, [r3, #8]
 80053be:	492c      	ldr	r1, [pc, #176]	@ (8005470 <HAL_RCC_ClockConfig+0x1b4>)
 80053c0:	4313      	orrs	r3, r2
 80053c2:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80053c4:	4b29      	ldr	r3, [pc, #164]	@ (800546c <HAL_RCC_ClockConfig+0x1b0>)
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f003 0307 	and.w	r3, r3, #7
 80053cc:	683a      	ldr	r2, [r7, #0]
 80053ce:	429a      	cmp	r2, r3
 80053d0:	d210      	bcs.n	80053f4 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80053d2:	4b26      	ldr	r3, [pc, #152]	@ (800546c <HAL_RCC_ClockConfig+0x1b0>)
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f023 0207 	bic.w	r2, r3, #7
 80053da:	4924      	ldr	r1, [pc, #144]	@ (800546c <HAL_RCC_ClockConfig+0x1b0>)
 80053dc:	683b      	ldr	r3, [r7, #0]
 80053de:	4313      	orrs	r3, r2
 80053e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80053e2:	4b22      	ldr	r3, [pc, #136]	@ (800546c <HAL_RCC_ClockConfig+0x1b0>)
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f003 0307 	and.w	r3, r3, #7
 80053ea:	683a      	ldr	r2, [r7, #0]
 80053ec:	429a      	cmp	r2, r3
 80053ee:	d001      	beq.n	80053f4 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80053f0:	2301      	movs	r3, #1
 80053f2:	e036      	b.n	8005462 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f003 0304 	and.w	r3, r3, #4
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d008      	beq.n	8005412 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005400:	4b1b      	ldr	r3, [pc, #108]	@ (8005470 <HAL_RCC_ClockConfig+0x1b4>)
 8005402:	689b      	ldr	r3, [r3, #8]
 8005404:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	68db      	ldr	r3, [r3, #12]
 800540c:	4918      	ldr	r1, [pc, #96]	@ (8005470 <HAL_RCC_ClockConfig+0x1b4>)
 800540e:	4313      	orrs	r3, r2
 8005410:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f003 0308 	and.w	r3, r3, #8
 800541a:	2b00      	cmp	r3, #0
 800541c:	d009      	beq.n	8005432 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800541e:	4b14      	ldr	r3, [pc, #80]	@ (8005470 <HAL_RCC_ClockConfig+0x1b4>)
 8005420:	689b      	ldr	r3, [r3, #8]
 8005422:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	691b      	ldr	r3, [r3, #16]
 800542a:	00db      	lsls	r3, r3, #3
 800542c:	4910      	ldr	r1, [pc, #64]	@ (8005470 <HAL_RCC_ClockConfig+0x1b4>)
 800542e:	4313      	orrs	r3, r2
 8005430:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005432:	f000 f825 	bl	8005480 <HAL_RCC_GetSysClockFreq>
 8005436:	4602      	mov	r2, r0
 8005438:	4b0d      	ldr	r3, [pc, #52]	@ (8005470 <HAL_RCC_ClockConfig+0x1b4>)
 800543a:	689b      	ldr	r3, [r3, #8]
 800543c:	091b      	lsrs	r3, r3, #4
 800543e:	f003 030f 	and.w	r3, r3, #15
 8005442:	490c      	ldr	r1, [pc, #48]	@ (8005474 <HAL_RCC_ClockConfig+0x1b8>)
 8005444:	5ccb      	ldrb	r3, [r1, r3]
 8005446:	f003 031f 	and.w	r3, r3, #31
 800544a:	fa22 f303 	lsr.w	r3, r2, r3
 800544e:	4a0a      	ldr	r2, [pc, #40]	@ (8005478 <HAL_RCC_ClockConfig+0x1bc>)
 8005450:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005452:	4b0a      	ldr	r3, [pc, #40]	@ (800547c <HAL_RCC_ClockConfig+0x1c0>)
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	4618      	mov	r0, r3
 8005458:	f7fd fd68 	bl	8002f2c <HAL_InitTick>
 800545c:	4603      	mov	r3, r0
 800545e:	72fb      	strb	r3, [r7, #11]

  return status;
 8005460:	7afb      	ldrb	r3, [r7, #11]
}
 8005462:	4618      	mov	r0, r3
 8005464:	3710      	adds	r7, #16
 8005466:	46bd      	mov	sp, r7
 8005468:	bd80      	pop	{r7, pc}
 800546a:	bf00      	nop
 800546c:	40022000 	.word	0x40022000
 8005470:	40021000 	.word	0x40021000
 8005474:	0800ef8c 	.word	0x0800ef8c
 8005478:	20000000 	.word	0x20000000
 800547c:	200000a0 	.word	0x200000a0

08005480 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005480:	b480      	push	{r7}
 8005482:	b089      	sub	sp, #36	@ 0x24
 8005484:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005486:	2300      	movs	r3, #0
 8005488:	61fb      	str	r3, [r7, #28]
 800548a:	2300      	movs	r3, #0
 800548c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800548e:	4b3e      	ldr	r3, [pc, #248]	@ (8005588 <HAL_RCC_GetSysClockFreq+0x108>)
 8005490:	689b      	ldr	r3, [r3, #8]
 8005492:	f003 030c 	and.w	r3, r3, #12
 8005496:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005498:	4b3b      	ldr	r3, [pc, #236]	@ (8005588 <HAL_RCC_GetSysClockFreq+0x108>)
 800549a:	68db      	ldr	r3, [r3, #12]
 800549c:	f003 0303 	and.w	r3, r3, #3
 80054a0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80054a2:	693b      	ldr	r3, [r7, #16]
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d005      	beq.n	80054b4 <HAL_RCC_GetSysClockFreq+0x34>
 80054a8:	693b      	ldr	r3, [r7, #16]
 80054aa:	2b0c      	cmp	r3, #12
 80054ac:	d121      	bne.n	80054f2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	2b01      	cmp	r3, #1
 80054b2:	d11e      	bne.n	80054f2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80054b4:	4b34      	ldr	r3, [pc, #208]	@ (8005588 <HAL_RCC_GetSysClockFreq+0x108>)
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f003 0308 	and.w	r3, r3, #8
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d107      	bne.n	80054d0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80054c0:	4b31      	ldr	r3, [pc, #196]	@ (8005588 <HAL_RCC_GetSysClockFreq+0x108>)
 80054c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80054c6:	0a1b      	lsrs	r3, r3, #8
 80054c8:	f003 030f 	and.w	r3, r3, #15
 80054cc:	61fb      	str	r3, [r7, #28]
 80054ce:	e005      	b.n	80054dc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80054d0:	4b2d      	ldr	r3, [pc, #180]	@ (8005588 <HAL_RCC_GetSysClockFreq+0x108>)
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	091b      	lsrs	r3, r3, #4
 80054d6:	f003 030f 	and.w	r3, r3, #15
 80054da:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80054dc:	4a2b      	ldr	r2, [pc, #172]	@ (800558c <HAL_RCC_GetSysClockFreq+0x10c>)
 80054de:	69fb      	ldr	r3, [r7, #28]
 80054e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80054e4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80054e6:	693b      	ldr	r3, [r7, #16]
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d10d      	bne.n	8005508 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80054ec:	69fb      	ldr	r3, [r7, #28]
 80054ee:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80054f0:	e00a      	b.n	8005508 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80054f2:	693b      	ldr	r3, [r7, #16]
 80054f4:	2b04      	cmp	r3, #4
 80054f6:	d102      	bne.n	80054fe <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80054f8:	4b25      	ldr	r3, [pc, #148]	@ (8005590 <HAL_RCC_GetSysClockFreq+0x110>)
 80054fa:	61bb      	str	r3, [r7, #24]
 80054fc:	e004      	b.n	8005508 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80054fe:	693b      	ldr	r3, [r7, #16]
 8005500:	2b08      	cmp	r3, #8
 8005502:	d101      	bne.n	8005508 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005504:	4b23      	ldr	r3, [pc, #140]	@ (8005594 <HAL_RCC_GetSysClockFreq+0x114>)
 8005506:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005508:	693b      	ldr	r3, [r7, #16]
 800550a:	2b0c      	cmp	r3, #12
 800550c:	d134      	bne.n	8005578 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800550e:	4b1e      	ldr	r3, [pc, #120]	@ (8005588 <HAL_RCC_GetSysClockFreq+0x108>)
 8005510:	68db      	ldr	r3, [r3, #12]
 8005512:	f003 0303 	and.w	r3, r3, #3
 8005516:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005518:	68bb      	ldr	r3, [r7, #8]
 800551a:	2b02      	cmp	r3, #2
 800551c:	d003      	beq.n	8005526 <HAL_RCC_GetSysClockFreq+0xa6>
 800551e:	68bb      	ldr	r3, [r7, #8]
 8005520:	2b03      	cmp	r3, #3
 8005522:	d003      	beq.n	800552c <HAL_RCC_GetSysClockFreq+0xac>
 8005524:	e005      	b.n	8005532 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8005526:	4b1a      	ldr	r3, [pc, #104]	@ (8005590 <HAL_RCC_GetSysClockFreq+0x110>)
 8005528:	617b      	str	r3, [r7, #20]
      break;
 800552a:	e005      	b.n	8005538 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800552c:	4b19      	ldr	r3, [pc, #100]	@ (8005594 <HAL_RCC_GetSysClockFreq+0x114>)
 800552e:	617b      	str	r3, [r7, #20]
      break;
 8005530:	e002      	b.n	8005538 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005532:	69fb      	ldr	r3, [r7, #28]
 8005534:	617b      	str	r3, [r7, #20]
      break;
 8005536:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005538:	4b13      	ldr	r3, [pc, #76]	@ (8005588 <HAL_RCC_GetSysClockFreq+0x108>)
 800553a:	68db      	ldr	r3, [r3, #12]
 800553c:	091b      	lsrs	r3, r3, #4
 800553e:	f003 0307 	and.w	r3, r3, #7
 8005542:	3301      	adds	r3, #1
 8005544:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005546:	4b10      	ldr	r3, [pc, #64]	@ (8005588 <HAL_RCC_GetSysClockFreq+0x108>)
 8005548:	68db      	ldr	r3, [r3, #12]
 800554a:	0a1b      	lsrs	r3, r3, #8
 800554c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005550:	697a      	ldr	r2, [r7, #20]
 8005552:	fb03 f202 	mul.w	r2, r3, r2
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	fbb2 f3f3 	udiv	r3, r2, r3
 800555c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800555e:	4b0a      	ldr	r3, [pc, #40]	@ (8005588 <HAL_RCC_GetSysClockFreq+0x108>)
 8005560:	68db      	ldr	r3, [r3, #12]
 8005562:	0e5b      	lsrs	r3, r3, #25
 8005564:	f003 0303 	and.w	r3, r3, #3
 8005568:	3301      	adds	r3, #1
 800556a:	005b      	lsls	r3, r3, #1
 800556c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800556e:	697a      	ldr	r2, [r7, #20]
 8005570:	683b      	ldr	r3, [r7, #0]
 8005572:	fbb2 f3f3 	udiv	r3, r2, r3
 8005576:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005578:	69bb      	ldr	r3, [r7, #24]
}
 800557a:	4618      	mov	r0, r3
 800557c:	3724      	adds	r7, #36	@ 0x24
 800557e:	46bd      	mov	sp, r7
 8005580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005584:	4770      	bx	lr
 8005586:	bf00      	nop
 8005588:	40021000 	.word	0x40021000
 800558c:	0800efa4 	.word	0x0800efa4
 8005590:	00f42400 	.word	0x00f42400
 8005594:	007a1200 	.word	0x007a1200

08005598 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005598:	b480      	push	{r7}
 800559a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800559c:	4b03      	ldr	r3, [pc, #12]	@ (80055ac <HAL_RCC_GetHCLKFreq+0x14>)
 800559e:	681b      	ldr	r3, [r3, #0]
}
 80055a0:	4618      	mov	r0, r3
 80055a2:	46bd      	mov	sp, r7
 80055a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a8:	4770      	bx	lr
 80055aa:	bf00      	nop
 80055ac:	20000000 	.word	0x20000000

080055b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80055b0:	b580      	push	{r7, lr}
 80055b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80055b4:	f7ff fff0 	bl	8005598 <HAL_RCC_GetHCLKFreq>
 80055b8:	4602      	mov	r2, r0
 80055ba:	4b06      	ldr	r3, [pc, #24]	@ (80055d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80055bc:	689b      	ldr	r3, [r3, #8]
 80055be:	0a1b      	lsrs	r3, r3, #8
 80055c0:	f003 0307 	and.w	r3, r3, #7
 80055c4:	4904      	ldr	r1, [pc, #16]	@ (80055d8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80055c6:	5ccb      	ldrb	r3, [r1, r3]
 80055c8:	f003 031f 	and.w	r3, r3, #31
 80055cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80055d0:	4618      	mov	r0, r3
 80055d2:	bd80      	pop	{r7, pc}
 80055d4:	40021000 	.word	0x40021000
 80055d8:	0800ef9c 	.word	0x0800ef9c

080055dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80055dc:	b580      	push	{r7, lr}
 80055de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80055e0:	f7ff ffda 	bl	8005598 <HAL_RCC_GetHCLKFreq>
 80055e4:	4602      	mov	r2, r0
 80055e6:	4b06      	ldr	r3, [pc, #24]	@ (8005600 <HAL_RCC_GetPCLK2Freq+0x24>)
 80055e8:	689b      	ldr	r3, [r3, #8]
 80055ea:	0adb      	lsrs	r3, r3, #11
 80055ec:	f003 0307 	and.w	r3, r3, #7
 80055f0:	4904      	ldr	r1, [pc, #16]	@ (8005604 <HAL_RCC_GetPCLK2Freq+0x28>)
 80055f2:	5ccb      	ldrb	r3, [r1, r3]
 80055f4:	f003 031f 	and.w	r3, r3, #31
 80055f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80055fc:	4618      	mov	r0, r3
 80055fe:	bd80      	pop	{r7, pc}
 8005600:	40021000 	.word	0x40021000
 8005604:	0800ef9c 	.word	0x0800ef9c

08005608 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005608:	b580      	push	{r7, lr}
 800560a:	b086      	sub	sp, #24
 800560c:	af00      	add	r7, sp, #0
 800560e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005610:	2300      	movs	r3, #0
 8005612:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005614:	4b2a      	ldr	r3, [pc, #168]	@ (80056c0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005616:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005618:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800561c:	2b00      	cmp	r3, #0
 800561e:	d003      	beq.n	8005628 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005620:	f7ff f9f0 	bl	8004a04 <HAL_PWREx_GetVoltageRange>
 8005624:	6178      	str	r0, [r7, #20]
 8005626:	e014      	b.n	8005652 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005628:	4b25      	ldr	r3, [pc, #148]	@ (80056c0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800562a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800562c:	4a24      	ldr	r2, [pc, #144]	@ (80056c0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800562e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005632:	6593      	str	r3, [r2, #88]	@ 0x58
 8005634:	4b22      	ldr	r3, [pc, #136]	@ (80056c0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005636:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005638:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800563c:	60fb      	str	r3, [r7, #12]
 800563e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005640:	f7ff f9e0 	bl	8004a04 <HAL_PWREx_GetVoltageRange>
 8005644:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005646:	4b1e      	ldr	r3, [pc, #120]	@ (80056c0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005648:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800564a:	4a1d      	ldr	r2, [pc, #116]	@ (80056c0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800564c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005650:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005652:	697b      	ldr	r3, [r7, #20]
 8005654:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005658:	d10b      	bne.n	8005672 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	2b80      	cmp	r3, #128	@ 0x80
 800565e:	d919      	bls.n	8005694 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2ba0      	cmp	r3, #160	@ 0xa0
 8005664:	d902      	bls.n	800566c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005666:	2302      	movs	r3, #2
 8005668:	613b      	str	r3, [r7, #16]
 800566a:	e013      	b.n	8005694 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800566c:	2301      	movs	r3, #1
 800566e:	613b      	str	r3, [r7, #16]
 8005670:	e010      	b.n	8005694 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	2b80      	cmp	r3, #128	@ 0x80
 8005676:	d902      	bls.n	800567e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8005678:	2303      	movs	r3, #3
 800567a:	613b      	str	r3, [r7, #16]
 800567c:	e00a      	b.n	8005694 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	2b80      	cmp	r3, #128	@ 0x80
 8005682:	d102      	bne.n	800568a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005684:	2302      	movs	r3, #2
 8005686:	613b      	str	r3, [r7, #16]
 8005688:	e004      	b.n	8005694 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	2b70      	cmp	r3, #112	@ 0x70
 800568e:	d101      	bne.n	8005694 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005690:	2301      	movs	r3, #1
 8005692:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005694:	4b0b      	ldr	r3, [pc, #44]	@ (80056c4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f023 0207 	bic.w	r2, r3, #7
 800569c:	4909      	ldr	r1, [pc, #36]	@ (80056c4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800569e:	693b      	ldr	r3, [r7, #16]
 80056a0:	4313      	orrs	r3, r2
 80056a2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80056a4:	4b07      	ldr	r3, [pc, #28]	@ (80056c4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f003 0307 	and.w	r3, r3, #7
 80056ac:	693a      	ldr	r2, [r7, #16]
 80056ae:	429a      	cmp	r2, r3
 80056b0:	d001      	beq.n	80056b6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80056b2:	2301      	movs	r3, #1
 80056b4:	e000      	b.n	80056b8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80056b6:	2300      	movs	r3, #0
}
 80056b8:	4618      	mov	r0, r3
 80056ba:	3718      	adds	r7, #24
 80056bc:	46bd      	mov	sp, r7
 80056be:	bd80      	pop	{r7, pc}
 80056c0:	40021000 	.word	0x40021000
 80056c4:	40022000 	.word	0x40022000

080056c8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80056c8:	b580      	push	{r7, lr}
 80056ca:	b086      	sub	sp, #24
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80056d0:	2300      	movs	r3, #0
 80056d2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80056d4:	2300      	movs	r3, #0
 80056d6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d041      	beq.n	8005768 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80056e8:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80056ec:	d02a      	beq.n	8005744 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80056ee:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80056f2:	d824      	bhi.n	800573e <HAL_RCCEx_PeriphCLKConfig+0x76>
 80056f4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80056f8:	d008      	beq.n	800570c <HAL_RCCEx_PeriphCLKConfig+0x44>
 80056fa:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80056fe:	d81e      	bhi.n	800573e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005700:	2b00      	cmp	r3, #0
 8005702:	d00a      	beq.n	800571a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8005704:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005708:	d010      	beq.n	800572c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800570a:	e018      	b.n	800573e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800570c:	4b86      	ldr	r3, [pc, #536]	@ (8005928 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800570e:	68db      	ldr	r3, [r3, #12]
 8005710:	4a85      	ldr	r2, [pc, #532]	@ (8005928 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005712:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005716:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005718:	e015      	b.n	8005746 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	3304      	adds	r3, #4
 800571e:	2100      	movs	r1, #0
 8005720:	4618      	mov	r0, r3
 8005722:	f000 facb 	bl	8005cbc <RCCEx_PLLSAI1_Config>
 8005726:	4603      	mov	r3, r0
 8005728:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800572a:	e00c      	b.n	8005746 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	3320      	adds	r3, #32
 8005730:	2100      	movs	r1, #0
 8005732:	4618      	mov	r0, r3
 8005734:	f000 fbb6 	bl	8005ea4 <RCCEx_PLLSAI2_Config>
 8005738:	4603      	mov	r3, r0
 800573a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800573c:	e003      	b.n	8005746 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800573e:	2301      	movs	r3, #1
 8005740:	74fb      	strb	r3, [r7, #19]
      break;
 8005742:	e000      	b.n	8005746 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8005744:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005746:	7cfb      	ldrb	r3, [r7, #19]
 8005748:	2b00      	cmp	r3, #0
 800574a:	d10b      	bne.n	8005764 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800574c:	4b76      	ldr	r3, [pc, #472]	@ (8005928 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800574e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005752:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800575a:	4973      	ldr	r1, [pc, #460]	@ (8005928 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800575c:	4313      	orrs	r3, r2
 800575e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8005762:	e001      	b.n	8005768 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005764:	7cfb      	ldrb	r3, [r7, #19]
 8005766:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005770:	2b00      	cmp	r3, #0
 8005772:	d041      	beq.n	80057f8 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005778:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800577c:	d02a      	beq.n	80057d4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800577e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005782:	d824      	bhi.n	80057ce <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005784:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005788:	d008      	beq.n	800579c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800578a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800578e:	d81e      	bhi.n	80057ce <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005790:	2b00      	cmp	r3, #0
 8005792:	d00a      	beq.n	80057aa <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8005794:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005798:	d010      	beq.n	80057bc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800579a:	e018      	b.n	80057ce <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800579c:	4b62      	ldr	r3, [pc, #392]	@ (8005928 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800579e:	68db      	ldr	r3, [r3, #12]
 80057a0:	4a61      	ldr	r2, [pc, #388]	@ (8005928 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80057a2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80057a6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80057a8:	e015      	b.n	80057d6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	3304      	adds	r3, #4
 80057ae:	2100      	movs	r1, #0
 80057b0:	4618      	mov	r0, r3
 80057b2:	f000 fa83 	bl	8005cbc <RCCEx_PLLSAI1_Config>
 80057b6:	4603      	mov	r3, r0
 80057b8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80057ba:	e00c      	b.n	80057d6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	3320      	adds	r3, #32
 80057c0:	2100      	movs	r1, #0
 80057c2:	4618      	mov	r0, r3
 80057c4:	f000 fb6e 	bl	8005ea4 <RCCEx_PLLSAI2_Config>
 80057c8:	4603      	mov	r3, r0
 80057ca:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80057cc:	e003      	b.n	80057d6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80057ce:	2301      	movs	r3, #1
 80057d0:	74fb      	strb	r3, [r7, #19]
      break;
 80057d2:	e000      	b.n	80057d6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80057d4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80057d6:	7cfb      	ldrb	r3, [r7, #19]
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d10b      	bne.n	80057f4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80057dc:	4b52      	ldr	r3, [pc, #328]	@ (8005928 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80057de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80057e2:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80057ea:	494f      	ldr	r1, [pc, #316]	@ (8005928 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80057ec:	4313      	orrs	r3, r2
 80057ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80057f2:	e001      	b.n	80057f8 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057f4:	7cfb      	ldrb	r3, [r7, #19]
 80057f6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005800:	2b00      	cmp	r3, #0
 8005802:	f000 80a0 	beq.w	8005946 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005806:	2300      	movs	r3, #0
 8005808:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800580a:	4b47      	ldr	r3, [pc, #284]	@ (8005928 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800580c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800580e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005812:	2b00      	cmp	r3, #0
 8005814:	d101      	bne.n	800581a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8005816:	2301      	movs	r3, #1
 8005818:	e000      	b.n	800581c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800581a:	2300      	movs	r3, #0
 800581c:	2b00      	cmp	r3, #0
 800581e:	d00d      	beq.n	800583c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005820:	4b41      	ldr	r3, [pc, #260]	@ (8005928 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005822:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005824:	4a40      	ldr	r2, [pc, #256]	@ (8005928 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005826:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800582a:	6593      	str	r3, [r2, #88]	@ 0x58
 800582c:	4b3e      	ldr	r3, [pc, #248]	@ (8005928 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800582e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005830:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005834:	60bb      	str	r3, [r7, #8]
 8005836:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005838:	2301      	movs	r3, #1
 800583a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800583c:	4b3b      	ldr	r3, [pc, #236]	@ (800592c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	4a3a      	ldr	r2, [pc, #232]	@ (800592c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005842:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005846:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005848:	f7fd fbc0 	bl	8002fcc <HAL_GetTick>
 800584c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800584e:	e009      	b.n	8005864 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005850:	f7fd fbbc 	bl	8002fcc <HAL_GetTick>
 8005854:	4602      	mov	r2, r0
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	1ad3      	subs	r3, r2, r3
 800585a:	2b02      	cmp	r3, #2
 800585c:	d902      	bls.n	8005864 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800585e:	2303      	movs	r3, #3
 8005860:	74fb      	strb	r3, [r7, #19]
        break;
 8005862:	e005      	b.n	8005870 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005864:	4b31      	ldr	r3, [pc, #196]	@ (800592c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800586c:	2b00      	cmp	r3, #0
 800586e:	d0ef      	beq.n	8005850 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8005870:	7cfb      	ldrb	r3, [r7, #19]
 8005872:	2b00      	cmp	r3, #0
 8005874:	d15c      	bne.n	8005930 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005876:	4b2c      	ldr	r3, [pc, #176]	@ (8005928 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005878:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800587c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005880:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005882:	697b      	ldr	r3, [r7, #20]
 8005884:	2b00      	cmp	r3, #0
 8005886:	d01f      	beq.n	80058c8 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800588e:	697a      	ldr	r2, [r7, #20]
 8005890:	429a      	cmp	r2, r3
 8005892:	d019      	beq.n	80058c8 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005894:	4b24      	ldr	r3, [pc, #144]	@ (8005928 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005896:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800589a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800589e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80058a0:	4b21      	ldr	r3, [pc, #132]	@ (8005928 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80058a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80058a6:	4a20      	ldr	r2, [pc, #128]	@ (8005928 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80058a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80058ac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80058b0:	4b1d      	ldr	r3, [pc, #116]	@ (8005928 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80058b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80058b6:	4a1c      	ldr	r2, [pc, #112]	@ (8005928 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80058b8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80058bc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80058c0:	4a19      	ldr	r2, [pc, #100]	@ (8005928 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80058c2:	697b      	ldr	r3, [r7, #20]
 80058c4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80058c8:	697b      	ldr	r3, [r7, #20]
 80058ca:	f003 0301 	and.w	r3, r3, #1
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d016      	beq.n	8005900 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058d2:	f7fd fb7b 	bl	8002fcc <HAL_GetTick>
 80058d6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80058d8:	e00b      	b.n	80058f2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80058da:	f7fd fb77 	bl	8002fcc <HAL_GetTick>
 80058de:	4602      	mov	r2, r0
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	1ad3      	subs	r3, r2, r3
 80058e4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80058e8:	4293      	cmp	r3, r2
 80058ea:	d902      	bls.n	80058f2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80058ec:	2303      	movs	r3, #3
 80058ee:	74fb      	strb	r3, [r7, #19]
            break;
 80058f0:	e006      	b.n	8005900 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80058f2:	4b0d      	ldr	r3, [pc, #52]	@ (8005928 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80058f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80058f8:	f003 0302 	and.w	r3, r3, #2
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d0ec      	beq.n	80058da <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8005900:	7cfb      	ldrb	r3, [r7, #19]
 8005902:	2b00      	cmp	r3, #0
 8005904:	d10c      	bne.n	8005920 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005906:	4b08      	ldr	r3, [pc, #32]	@ (8005928 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005908:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800590c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005916:	4904      	ldr	r1, [pc, #16]	@ (8005928 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005918:	4313      	orrs	r3, r2
 800591a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800591e:	e009      	b.n	8005934 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005920:	7cfb      	ldrb	r3, [r7, #19]
 8005922:	74bb      	strb	r3, [r7, #18]
 8005924:	e006      	b.n	8005934 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8005926:	bf00      	nop
 8005928:	40021000 	.word	0x40021000
 800592c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005930:	7cfb      	ldrb	r3, [r7, #19]
 8005932:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005934:	7c7b      	ldrb	r3, [r7, #17]
 8005936:	2b01      	cmp	r3, #1
 8005938:	d105      	bne.n	8005946 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800593a:	4b9e      	ldr	r3, [pc, #632]	@ (8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800593c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800593e:	4a9d      	ldr	r2, [pc, #628]	@ (8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005940:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005944:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f003 0301 	and.w	r3, r3, #1
 800594e:	2b00      	cmp	r3, #0
 8005950:	d00a      	beq.n	8005968 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005952:	4b98      	ldr	r3, [pc, #608]	@ (8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005954:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005958:	f023 0203 	bic.w	r2, r3, #3
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005960:	4994      	ldr	r1, [pc, #592]	@ (8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005962:	4313      	orrs	r3, r2
 8005964:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	f003 0302 	and.w	r3, r3, #2
 8005970:	2b00      	cmp	r3, #0
 8005972:	d00a      	beq.n	800598a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005974:	4b8f      	ldr	r3, [pc, #572]	@ (8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005976:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800597a:	f023 020c 	bic.w	r2, r3, #12
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005982:	498c      	ldr	r1, [pc, #560]	@ (8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005984:	4313      	orrs	r3, r2
 8005986:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	f003 0304 	and.w	r3, r3, #4
 8005992:	2b00      	cmp	r3, #0
 8005994:	d00a      	beq.n	80059ac <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005996:	4b87      	ldr	r3, [pc, #540]	@ (8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005998:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800599c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059a4:	4983      	ldr	r1, [pc, #524]	@ (8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80059a6:	4313      	orrs	r3, r2
 80059a8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f003 0308 	and.w	r3, r3, #8
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d00a      	beq.n	80059ce <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80059b8:	4b7e      	ldr	r3, [pc, #504]	@ (8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80059ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80059be:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80059c6:	497b      	ldr	r1, [pc, #492]	@ (8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80059c8:	4313      	orrs	r3, r2
 80059ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	f003 0310 	and.w	r3, r3, #16
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d00a      	beq.n	80059f0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80059da:	4b76      	ldr	r3, [pc, #472]	@ (8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80059dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80059e0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80059e8:	4972      	ldr	r1, [pc, #456]	@ (8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80059ea:	4313      	orrs	r3, r2
 80059ec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	f003 0320 	and.w	r3, r3, #32
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d00a      	beq.n	8005a12 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80059fc:	4b6d      	ldr	r3, [pc, #436]	@ (8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80059fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a02:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005a0a:	496a      	ldr	r1, [pc, #424]	@ (8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a0c:	4313      	orrs	r3, r2
 8005a0e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d00a      	beq.n	8005a34 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005a1e:	4b65      	ldr	r3, [pc, #404]	@ (8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a20:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a24:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a2c:	4961      	ldr	r1, [pc, #388]	@ (8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a2e:	4313      	orrs	r3, r2
 8005a30:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d00a      	beq.n	8005a56 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005a40:	4b5c      	ldr	r3, [pc, #368]	@ (8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a46:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005a4e:	4959      	ldr	r1, [pc, #356]	@ (8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a50:	4313      	orrs	r3, r2
 8005a52:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d00a      	beq.n	8005a78 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005a62:	4b54      	ldr	r3, [pc, #336]	@ (8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a64:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a68:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005a70:	4950      	ldr	r1, [pc, #320]	@ (8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a72:	4313      	orrs	r3, r2
 8005a74:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d00a      	beq.n	8005a9a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005a84:	4b4b      	ldr	r3, [pc, #300]	@ (8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a8a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a92:	4948      	ldr	r1, [pc, #288]	@ (8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a94:	4313      	orrs	r3, r2
 8005a96:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d00a      	beq.n	8005abc <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005aa6:	4b43      	ldr	r3, [pc, #268]	@ (8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005aa8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005aac:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ab4:	493f      	ldr	r1, [pc, #252]	@ (8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005ab6:	4313      	orrs	r3, r2
 8005ab8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d028      	beq.n	8005b1a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005ac8:	4b3a      	ldr	r3, [pc, #232]	@ (8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005aca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ace:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005ad6:	4937      	ldr	r1, [pc, #220]	@ (8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005ad8:	4313      	orrs	r3, r2
 8005ada:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005ae2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005ae6:	d106      	bne.n	8005af6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005ae8:	4b32      	ldr	r3, [pc, #200]	@ (8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005aea:	68db      	ldr	r3, [r3, #12]
 8005aec:	4a31      	ldr	r2, [pc, #196]	@ (8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005aee:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005af2:	60d3      	str	r3, [r2, #12]
 8005af4:	e011      	b.n	8005b1a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005afa:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005afe:	d10c      	bne.n	8005b1a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	3304      	adds	r3, #4
 8005b04:	2101      	movs	r1, #1
 8005b06:	4618      	mov	r0, r3
 8005b08:	f000 f8d8 	bl	8005cbc <RCCEx_PLLSAI1_Config>
 8005b0c:	4603      	mov	r3, r0
 8005b0e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005b10:	7cfb      	ldrb	r3, [r7, #19]
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d001      	beq.n	8005b1a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8005b16:	7cfb      	ldrb	r3, [r7, #19]
 8005b18:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d028      	beq.n	8005b78 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005b26:	4b23      	ldr	r3, [pc, #140]	@ (8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b28:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b2c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b34:	491f      	ldr	r1, [pc, #124]	@ (8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b36:	4313      	orrs	r3, r2
 8005b38:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b40:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005b44:	d106      	bne.n	8005b54 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005b46:	4b1b      	ldr	r3, [pc, #108]	@ (8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b48:	68db      	ldr	r3, [r3, #12]
 8005b4a:	4a1a      	ldr	r2, [pc, #104]	@ (8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b4c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005b50:	60d3      	str	r3, [r2, #12]
 8005b52:	e011      	b.n	8005b78 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b58:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005b5c:	d10c      	bne.n	8005b78 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	3304      	adds	r3, #4
 8005b62:	2101      	movs	r1, #1
 8005b64:	4618      	mov	r0, r3
 8005b66:	f000 f8a9 	bl	8005cbc <RCCEx_PLLSAI1_Config>
 8005b6a:	4603      	mov	r3, r0
 8005b6c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005b6e:	7cfb      	ldrb	r3, [r7, #19]
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d001      	beq.n	8005b78 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8005b74:	7cfb      	ldrb	r3, [r7, #19]
 8005b76:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d02b      	beq.n	8005bdc <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005b84:	4b0b      	ldr	r3, [pc, #44]	@ (8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b8a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005b92:	4908      	ldr	r1, [pc, #32]	@ (8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b94:	4313      	orrs	r3, r2
 8005b96:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005b9e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005ba2:	d109      	bne.n	8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005ba4:	4b03      	ldr	r3, [pc, #12]	@ (8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005ba6:	68db      	ldr	r3, [r3, #12]
 8005ba8:	4a02      	ldr	r2, [pc, #8]	@ (8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005baa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005bae:	60d3      	str	r3, [r2, #12]
 8005bb0:	e014      	b.n	8005bdc <HAL_RCCEx_PeriphCLKConfig+0x514>
 8005bb2:	bf00      	nop
 8005bb4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005bbc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005bc0:	d10c      	bne.n	8005bdc <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	3304      	adds	r3, #4
 8005bc6:	2101      	movs	r1, #1
 8005bc8:	4618      	mov	r0, r3
 8005bca:	f000 f877 	bl	8005cbc <RCCEx_PLLSAI1_Config>
 8005bce:	4603      	mov	r3, r0
 8005bd0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005bd2:	7cfb      	ldrb	r3, [r7, #19]
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d001      	beq.n	8005bdc <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8005bd8:	7cfb      	ldrb	r3, [r7, #19]
 8005bda:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d02f      	beq.n	8005c48 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005be8:	4b2b      	ldr	r3, [pc, #172]	@ (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005bea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005bee:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005bf6:	4928      	ldr	r1, [pc, #160]	@ (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005bf8:	4313      	orrs	r3, r2
 8005bfa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005c02:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005c06:	d10d      	bne.n	8005c24 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	3304      	adds	r3, #4
 8005c0c:	2102      	movs	r1, #2
 8005c0e:	4618      	mov	r0, r3
 8005c10:	f000 f854 	bl	8005cbc <RCCEx_PLLSAI1_Config>
 8005c14:	4603      	mov	r3, r0
 8005c16:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005c18:	7cfb      	ldrb	r3, [r7, #19]
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d014      	beq.n	8005c48 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005c1e:	7cfb      	ldrb	r3, [r7, #19]
 8005c20:	74bb      	strb	r3, [r7, #18]
 8005c22:	e011      	b.n	8005c48 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005c28:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005c2c:	d10c      	bne.n	8005c48 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	3320      	adds	r3, #32
 8005c32:	2102      	movs	r1, #2
 8005c34:	4618      	mov	r0, r3
 8005c36:	f000 f935 	bl	8005ea4 <RCCEx_PLLSAI2_Config>
 8005c3a:	4603      	mov	r3, r0
 8005c3c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005c3e:	7cfb      	ldrb	r3, [r7, #19]
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d001      	beq.n	8005c48 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005c44:	7cfb      	ldrb	r3, [r7, #19]
 8005c46:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d00a      	beq.n	8005c6a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005c54:	4b10      	ldr	r3, [pc, #64]	@ (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005c56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c5a:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005c62:	490d      	ldr	r1, [pc, #52]	@ (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005c64:	4313      	orrs	r3, r2
 8005c66:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d00b      	beq.n	8005c8e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005c76:	4b08      	ldr	r3, [pc, #32]	@ (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005c78:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c7c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005c86:	4904      	ldr	r1, [pc, #16]	@ (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005c88:	4313      	orrs	r3, r2
 8005c8a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005c8e:	7cbb      	ldrb	r3, [r7, #18]
}
 8005c90:	4618      	mov	r0, r3
 8005c92:	3718      	adds	r7, #24
 8005c94:	46bd      	mov	sp, r7
 8005c96:	bd80      	pop	{r7, pc}
 8005c98:	40021000 	.word	0x40021000

08005c9c <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8005c9c:	b480      	push	{r7}
 8005c9e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8005ca0:	4b05      	ldr	r3, [pc, #20]	@ (8005cb8 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	4a04      	ldr	r2, [pc, #16]	@ (8005cb8 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8005ca6:	f043 0304 	orr.w	r3, r3, #4
 8005caa:	6013      	str	r3, [r2, #0]
}
 8005cac:	bf00      	nop
 8005cae:	46bd      	mov	sp, r7
 8005cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb4:	4770      	bx	lr
 8005cb6:	bf00      	nop
 8005cb8:	40021000 	.word	0x40021000

08005cbc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005cbc:	b580      	push	{r7, lr}
 8005cbe:	b084      	sub	sp, #16
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	6078      	str	r0, [r7, #4]
 8005cc4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005cc6:	2300      	movs	r3, #0
 8005cc8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005cca:	4b75      	ldr	r3, [pc, #468]	@ (8005ea0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005ccc:	68db      	ldr	r3, [r3, #12]
 8005cce:	f003 0303 	and.w	r3, r3, #3
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d018      	beq.n	8005d08 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005cd6:	4b72      	ldr	r3, [pc, #456]	@ (8005ea0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005cd8:	68db      	ldr	r3, [r3, #12]
 8005cda:	f003 0203 	and.w	r2, r3, #3
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	429a      	cmp	r2, r3
 8005ce4:	d10d      	bne.n	8005d02 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
       ||
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d009      	beq.n	8005d02 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005cee:	4b6c      	ldr	r3, [pc, #432]	@ (8005ea0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005cf0:	68db      	ldr	r3, [r3, #12]
 8005cf2:	091b      	lsrs	r3, r3, #4
 8005cf4:	f003 0307 	and.w	r3, r3, #7
 8005cf8:	1c5a      	adds	r2, r3, #1
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	685b      	ldr	r3, [r3, #4]
       ||
 8005cfe:	429a      	cmp	r2, r3
 8005d00:	d047      	beq.n	8005d92 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005d02:	2301      	movs	r3, #1
 8005d04:	73fb      	strb	r3, [r7, #15]
 8005d06:	e044      	b.n	8005d92 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	2b03      	cmp	r3, #3
 8005d0e:	d018      	beq.n	8005d42 <RCCEx_PLLSAI1_Config+0x86>
 8005d10:	2b03      	cmp	r3, #3
 8005d12:	d825      	bhi.n	8005d60 <RCCEx_PLLSAI1_Config+0xa4>
 8005d14:	2b01      	cmp	r3, #1
 8005d16:	d002      	beq.n	8005d1e <RCCEx_PLLSAI1_Config+0x62>
 8005d18:	2b02      	cmp	r3, #2
 8005d1a:	d009      	beq.n	8005d30 <RCCEx_PLLSAI1_Config+0x74>
 8005d1c:	e020      	b.n	8005d60 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005d1e:	4b60      	ldr	r3, [pc, #384]	@ (8005ea0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	f003 0302 	and.w	r3, r3, #2
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d11d      	bne.n	8005d66 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8005d2a:	2301      	movs	r3, #1
 8005d2c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005d2e:	e01a      	b.n	8005d66 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005d30:	4b5b      	ldr	r3, [pc, #364]	@ (8005ea0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d116      	bne.n	8005d6a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005d3c:	2301      	movs	r3, #1
 8005d3e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005d40:	e013      	b.n	8005d6a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005d42:	4b57      	ldr	r3, [pc, #348]	@ (8005ea0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d10f      	bne.n	8005d6e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005d4e:	4b54      	ldr	r3, [pc, #336]	@ (8005ea0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d109      	bne.n	8005d6e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8005d5a:	2301      	movs	r3, #1
 8005d5c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005d5e:	e006      	b.n	8005d6e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005d60:	2301      	movs	r3, #1
 8005d62:	73fb      	strb	r3, [r7, #15]
      break;
 8005d64:	e004      	b.n	8005d70 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005d66:	bf00      	nop
 8005d68:	e002      	b.n	8005d70 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005d6a:	bf00      	nop
 8005d6c:	e000      	b.n	8005d70 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005d6e:	bf00      	nop
    }

    if(status == HAL_OK)
 8005d70:	7bfb      	ldrb	r3, [r7, #15]
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d10d      	bne.n	8005d92 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005d76:	4b4a      	ldr	r3, [pc, #296]	@ (8005ea0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005d78:	68db      	ldr	r3, [r3, #12]
 8005d7a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	6819      	ldr	r1, [r3, #0]
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	685b      	ldr	r3, [r3, #4]
 8005d86:	3b01      	subs	r3, #1
 8005d88:	011b      	lsls	r3, r3, #4
 8005d8a:	430b      	orrs	r3, r1
 8005d8c:	4944      	ldr	r1, [pc, #272]	@ (8005ea0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005d8e:	4313      	orrs	r3, r2
 8005d90:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005d92:	7bfb      	ldrb	r3, [r7, #15]
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d17d      	bne.n	8005e94 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005d98:	4b41      	ldr	r3, [pc, #260]	@ (8005ea0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	4a40      	ldr	r2, [pc, #256]	@ (8005ea0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005d9e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005da2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005da4:	f7fd f912 	bl	8002fcc <HAL_GetTick>
 8005da8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005daa:	e009      	b.n	8005dc0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005dac:	f7fd f90e 	bl	8002fcc <HAL_GetTick>
 8005db0:	4602      	mov	r2, r0
 8005db2:	68bb      	ldr	r3, [r7, #8]
 8005db4:	1ad3      	subs	r3, r2, r3
 8005db6:	2b02      	cmp	r3, #2
 8005db8:	d902      	bls.n	8005dc0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005dba:	2303      	movs	r3, #3
 8005dbc:	73fb      	strb	r3, [r7, #15]
        break;
 8005dbe:	e005      	b.n	8005dcc <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005dc0:	4b37      	ldr	r3, [pc, #220]	@ (8005ea0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d1ef      	bne.n	8005dac <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005dcc:	7bfb      	ldrb	r3, [r7, #15]
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d160      	bne.n	8005e94 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005dd2:	683b      	ldr	r3, [r7, #0]
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d111      	bne.n	8005dfc <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005dd8:	4b31      	ldr	r3, [pc, #196]	@ (8005ea0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005dda:	691b      	ldr	r3, [r3, #16]
 8005ddc:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8005de0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005de4:	687a      	ldr	r2, [r7, #4]
 8005de6:	6892      	ldr	r2, [r2, #8]
 8005de8:	0211      	lsls	r1, r2, #8
 8005dea:	687a      	ldr	r2, [r7, #4]
 8005dec:	68d2      	ldr	r2, [r2, #12]
 8005dee:	0912      	lsrs	r2, r2, #4
 8005df0:	0452      	lsls	r2, r2, #17
 8005df2:	430a      	orrs	r2, r1
 8005df4:	492a      	ldr	r1, [pc, #168]	@ (8005ea0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005df6:	4313      	orrs	r3, r2
 8005df8:	610b      	str	r3, [r1, #16]
 8005dfa:	e027      	b.n	8005e4c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005dfc:	683b      	ldr	r3, [r7, #0]
 8005dfe:	2b01      	cmp	r3, #1
 8005e00:	d112      	bne.n	8005e28 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005e02:	4b27      	ldr	r3, [pc, #156]	@ (8005ea0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005e04:	691b      	ldr	r3, [r3, #16]
 8005e06:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8005e0a:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005e0e:	687a      	ldr	r2, [r7, #4]
 8005e10:	6892      	ldr	r2, [r2, #8]
 8005e12:	0211      	lsls	r1, r2, #8
 8005e14:	687a      	ldr	r2, [r7, #4]
 8005e16:	6912      	ldr	r2, [r2, #16]
 8005e18:	0852      	lsrs	r2, r2, #1
 8005e1a:	3a01      	subs	r2, #1
 8005e1c:	0552      	lsls	r2, r2, #21
 8005e1e:	430a      	orrs	r2, r1
 8005e20:	491f      	ldr	r1, [pc, #124]	@ (8005ea0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005e22:	4313      	orrs	r3, r2
 8005e24:	610b      	str	r3, [r1, #16]
 8005e26:	e011      	b.n	8005e4c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005e28:	4b1d      	ldr	r3, [pc, #116]	@ (8005ea0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005e2a:	691b      	ldr	r3, [r3, #16]
 8005e2c:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8005e30:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005e34:	687a      	ldr	r2, [r7, #4]
 8005e36:	6892      	ldr	r2, [r2, #8]
 8005e38:	0211      	lsls	r1, r2, #8
 8005e3a:	687a      	ldr	r2, [r7, #4]
 8005e3c:	6952      	ldr	r2, [r2, #20]
 8005e3e:	0852      	lsrs	r2, r2, #1
 8005e40:	3a01      	subs	r2, #1
 8005e42:	0652      	lsls	r2, r2, #25
 8005e44:	430a      	orrs	r2, r1
 8005e46:	4916      	ldr	r1, [pc, #88]	@ (8005ea0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005e48:	4313      	orrs	r3, r2
 8005e4a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005e4c:	4b14      	ldr	r3, [pc, #80]	@ (8005ea0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	4a13      	ldr	r2, [pc, #76]	@ (8005ea0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005e52:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005e56:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e58:	f7fd f8b8 	bl	8002fcc <HAL_GetTick>
 8005e5c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005e5e:	e009      	b.n	8005e74 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005e60:	f7fd f8b4 	bl	8002fcc <HAL_GetTick>
 8005e64:	4602      	mov	r2, r0
 8005e66:	68bb      	ldr	r3, [r7, #8]
 8005e68:	1ad3      	subs	r3, r2, r3
 8005e6a:	2b02      	cmp	r3, #2
 8005e6c:	d902      	bls.n	8005e74 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8005e6e:	2303      	movs	r3, #3
 8005e70:	73fb      	strb	r3, [r7, #15]
          break;
 8005e72:	e005      	b.n	8005e80 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005e74:	4b0a      	ldr	r3, [pc, #40]	@ (8005ea0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d0ef      	beq.n	8005e60 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8005e80:	7bfb      	ldrb	r3, [r7, #15]
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d106      	bne.n	8005e94 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005e86:	4b06      	ldr	r3, [pc, #24]	@ (8005ea0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005e88:	691a      	ldr	r2, [r3, #16]
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	699b      	ldr	r3, [r3, #24]
 8005e8e:	4904      	ldr	r1, [pc, #16]	@ (8005ea0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005e90:	4313      	orrs	r3, r2
 8005e92:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005e94:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e96:	4618      	mov	r0, r3
 8005e98:	3710      	adds	r7, #16
 8005e9a:	46bd      	mov	sp, r7
 8005e9c:	bd80      	pop	{r7, pc}
 8005e9e:	bf00      	nop
 8005ea0:	40021000 	.word	0x40021000

08005ea4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005ea4:	b580      	push	{r7, lr}
 8005ea6:	b084      	sub	sp, #16
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	6078      	str	r0, [r7, #4]
 8005eac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005eae:	2300      	movs	r3, #0
 8005eb0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005eb2:	4b6a      	ldr	r3, [pc, #424]	@ (800605c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005eb4:	68db      	ldr	r3, [r3, #12]
 8005eb6:	f003 0303 	and.w	r3, r3, #3
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d018      	beq.n	8005ef0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005ebe:	4b67      	ldr	r3, [pc, #412]	@ (800605c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005ec0:	68db      	ldr	r3, [r3, #12]
 8005ec2:	f003 0203 	and.w	r2, r3, #3
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	429a      	cmp	r2, r3
 8005ecc:	d10d      	bne.n	8005eea <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
       ||
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d009      	beq.n	8005eea <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8005ed6:	4b61      	ldr	r3, [pc, #388]	@ (800605c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005ed8:	68db      	ldr	r3, [r3, #12]
 8005eda:	091b      	lsrs	r3, r3, #4
 8005edc:	f003 0307 	and.w	r3, r3, #7
 8005ee0:	1c5a      	adds	r2, r3, #1
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	685b      	ldr	r3, [r3, #4]
       ||
 8005ee6:	429a      	cmp	r2, r3
 8005ee8:	d047      	beq.n	8005f7a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005eea:	2301      	movs	r3, #1
 8005eec:	73fb      	strb	r3, [r7, #15]
 8005eee:	e044      	b.n	8005f7a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	2b03      	cmp	r3, #3
 8005ef6:	d018      	beq.n	8005f2a <RCCEx_PLLSAI2_Config+0x86>
 8005ef8:	2b03      	cmp	r3, #3
 8005efa:	d825      	bhi.n	8005f48 <RCCEx_PLLSAI2_Config+0xa4>
 8005efc:	2b01      	cmp	r3, #1
 8005efe:	d002      	beq.n	8005f06 <RCCEx_PLLSAI2_Config+0x62>
 8005f00:	2b02      	cmp	r3, #2
 8005f02:	d009      	beq.n	8005f18 <RCCEx_PLLSAI2_Config+0x74>
 8005f04:	e020      	b.n	8005f48 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005f06:	4b55      	ldr	r3, [pc, #340]	@ (800605c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	f003 0302 	and.w	r3, r3, #2
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d11d      	bne.n	8005f4e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8005f12:	2301      	movs	r3, #1
 8005f14:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005f16:	e01a      	b.n	8005f4e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005f18:	4b50      	ldr	r3, [pc, #320]	@ (800605c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d116      	bne.n	8005f52 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8005f24:	2301      	movs	r3, #1
 8005f26:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005f28:	e013      	b.n	8005f52 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005f2a:	4b4c      	ldr	r3, [pc, #304]	@ (800605c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d10f      	bne.n	8005f56 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005f36:	4b49      	ldr	r3, [pc, #292]	@ (800605c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d109      	bne.n	8005f56 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8005f42:	2301      	movs	r3, #1
 8005f44:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005f46:	e006      	b.n	8005f56 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005f48:	2301      	movs	r3, #1
 8005f4a:	73fb      	strb	r3, [r7, #15]
      break;
 8005f4c:	e004      	b.n	8005f58 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005f4e:	bf00      	nop
 8005f50:	e002      	b.n	8005f58 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005f52:	bf00      	nop
 8005f54:	e000      	b.n	8005f58 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005f56:	bf00      	nop
    }

    if(status == HAL_OK)
 8005f58:	7bfb      	ldrb	r3, [r7, #15]
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d10d      	bne.n	8005f7a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005f5e:	4b3f      	ldr	r3, [pc, #252]	@ (800605c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005f60:	68db      	ldr	r3, [r3, #12]
 8005f62:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	6819      	ldr	r1, [r3, #0]
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	685b      	ldr	r3, [r3, #4]
 8005f6e:	3b01      	subs	r3, #1
 8005f70:	011b      	lsls	r3, r3, #4
 8005f72:	430b      	orrs	r3, r1
 8005f74:	4939      	ldr	r1, [pc, #228]	@ (800605c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005f76:	4313      	orrs	r3, r2
 8005f78:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005f7a:	7bfb      	ldrb	r3, [r7, #15]
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d167      	bne.n	8006050 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005f80:	4b36      	ldr	r3, [pc, #216]	@ (800605c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	4a35      	ldr	r2, [pc, #212]	@ (800605c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005f86:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005f8a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005f8c:	f7fd f81e 	bl	8002fcc <HAL_GetTick>
 8005f90:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005f92:	e009      	b.n	8005fa8 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005f94:	f7fd f81a 	bl	8002fcc <HAL_GetTick>
 8005f98:	4602      	mov	r2, r0
 8005f9a:	68bb      	ldr	r3, [r7, #8]
 8005f9c:	1ad3      	subs	r3, r2, r3
 8005f9e:	2b02      	cmp	r3, #2
 8005fa0:	d902      	bls.n	8005fa8 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005fa2:	2303      	movs	r3, #3
 8005fa4:	73fb      	strb	r3, [r7, #15]
        break;
 8005fa6:	e005      	b.n	8005fb4 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005fa8:	4b2c      	ldr	r3, [pc, #176]	@ (800605c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d1ef      	bne.n	8005f94 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005fb4:	7bfb      	ldrb	r3, [r7, #15]
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d14a      	bne.n	8006050 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005fba:	683b      	ldr	r3, [r7, #0]
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d111      	bne.n	8005fe4 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005fc0:	4b26      	ldr	r3, [pc, #152]	@ (800605c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005fc2:	695b      	ldr	r3, [r3, #20]
 8005fc4:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8005fc8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005fcc:	687a      	ldr	r2, [r7, #4]
 8005fce:	6892      	ldr	r2, [r2, #8]
 8005fd0:	0211      	lsls	r1, r2, #8
 8005fd2:	687a      	ldr	r2, [r7, #4]
 8005fd4:	68d2      	ldr	r2, [r2, #12]
 8005fd6:	0912      	lsrs	r2, r2, #4
 8005fd8:	0452      	lsls	r2, r2, #17
 8005fda:	430a      	orrs	r2, r1
 8005fdc:	491f      	ldr	r1, [pc, #124]	@ (800605c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005fde:	4313      	orrs	r3, r2
 8005fe0:	614b      	str	r3, [r1, #20]
 8005fe2:	e011      	b.n	8006008 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005fe4:	4b1d      	ldr	r3, [pc, #116]	@ (800605c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005fe6:	695b      	ldr	r3, [r3, #20]
 8005fe8:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8005fec:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005ff0:	687a      	ldr	r2, [r7, #4]
 8005ff2:	6892      	ldr	r2, [r2, #8]
 8005ff4:	0211      	lsls	r1, r2, #8
 8005ff6:	687a      	ldr	r2, [r7, #4]
 8005ff8:	6912      	ldr	r2, [r2, #16]
 8005ffa:	0852      	lsrs	r2, r2, #1
 8005ffc:	3a01      	subs	r2, #1
 8005ffe:	0652      	lsls	r2, r2, #25
 8006000:	430a      	orrs	r2, r1
 8006002:	4916      	ldr	r1, [pc, #88]	@ (800605c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006004:	4313      	orrs	r3, r2
 8006006:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8006008:	4b14      	ldr	r3, [pc, #80]	@ (800605c <RCCEx_PLLSAI2_Config+0x1b8>)
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	4a13      	ldr	r2, [pc, #76]	@ (800605c <RCCEx_PLLSAI2_Config+0x1b8>)
 800600e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006012:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006014:	f7fc ffda 	bl	8002fcc <HAL_GetTick>
 8006018:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800601a:	e009      	b.n	8006030 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800601c:	f7fc ffd6 	bl	8002fcc <HAL_GetTick>
 8006020:	4602      	mov	r2, r0
 8006022:	68bb      	ldr	r3, [r7, #8]
 8006024:	1ad3      	subs	r3, r2, r3
 8006026:	2b02      	cmp	r3, #2
 8006028:	d902      	bls.n	8006030 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800602a:	2303      	movs	r3, #3
 800602c:	73fb      	strb	r3, [r7, #15]
          break;
 800602e:	e005      	b.n	800603c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006030:	4b0a      	ldr	r3, [pc, #40]	@ (800605c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006038:	2b00      	cmp	r3, #0
 800603a:	d0ef      	beq.n	800601c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 800603c:	7bfb      	ldrb	r3, [r7, #15]
 800603e:	2b00      	cmp	r3, #0
 8006040:	d106      	bne.n	8006050 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8006042:	4b06      	ldr	r3, [pc, #24]	@ (800605c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006044:	695a      	ldr	r2, [r3, #20]
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	695b      	ldr	r3, [r3, #20]
 800604a:	4904      	ldr	r1, [pc, #16]	@ (800605c <RCCEx_PLLSAI2_Config+0x1b8>)
 800604c:	4313      	orrs	r3, r2
 800604e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8006050:	7bfb      	ldrb	r3, [r7, #15]
}
 8006052:	4618      	mov	r0, r3
 8006054:	3710      	adds	r7, #16
 8006056:	46bd      	mov	sp, r7
 8006058:	bd80      	pop	{r7, pc}
 800605a:	bf00      	nop
 800605c:	40021000 	.word	0x40021000

08006060 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006060:	b580      	push	{r7, lr}
 8006062:	b084      	sub	sp, #16
 8006064:	af00      	add	r7, sp, #0
 8006066:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	2b00      	cmp	r3, #0
 800606c:	d101      	bne.n	8006072 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800606e:	2301      	movs	r3, #1
 8006070:	e095      	b.n	800619e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006076:	2b00      	cmp	r3, #0
 8006078:	d108      	bne.n	800608c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	685b      	ldr	r3, [r3, #4]
 800607e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006082:	d009      	beq.n	8006098 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	2200      	movs	r2, #0
 8006088:	61da      	str	r2, [r3, #28]
 800608a:	e005      	b.n	8006098 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	2200      	movs	r2, #0
 8006090:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	2200      	movs	r2, #0
 8006096:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	2200      	movs	r2, #0
 800609c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80060a4:	b2db      	uxtb	r3, r3
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d106      	bne.n	80060b8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	2200      	movs	r2, #0
 80060ae:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80060b2:	6878      	ldr	r0, [r7, #4]
 80060b4:	f7fb fb9c 	bl	80017f0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	2202      	movs	r2, #2
 80060bc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	681a      	ldr	r2, [r3, #0]
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80060ce:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	68db      	ldr	r3, [r3, #12]
 80060d4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80060d8:	d902      	bls.n	80060e0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80060da:	2300      	movs	r3, #0
 80060dc:	60fb      	str	r3, [r7, #12]
 80060de:	e002      	b.n	80060e6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80060e0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80060e4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	68db      	ldr	r3, [r3, #12]
 80060ea:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80060ee:	d007      	beq.n	8006100 <HAL_SPI_Init+0xa0>
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	68db      	ldr	r3, [r3, #12]
 80060f4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80060f8:	d002      	beq.n	8006100 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	2200      	movs	r2, #0
 80060fe:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	685b      	ldr	r3, [r3, #4]
 8006104:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	689b      	ldr	r3, [r3, #8]
 800610c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006110:	431a      	orrs	r2, r3
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	691b      	ldr	r3, [r3, #16]
 8006116:	f003 0302 	and.w	r3, r3, #2
 800611a:	431a      	orrs	r2, r3
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	695b      	ldr	r3, [r3, #20]
 8006120:	f003 0301 	and.w	r3, r3, #1
 8006124:	431a      	orrs	r2, r3
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	699b      	ldr	r3, [r3, #24]
 800612a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800612e:	431a      	orrs	r2, r3
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	69db      	ldr	r3, [r3, #28]
 8006134:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006138:	431a      	orrs	r2, r3
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	6a1b      	ldr	r3, [r3, #32]
 800613e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006142:	ea42 0103 	orr.w	r1, r2, r3
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800614a:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	430a      	orrs	r2, r1
 8006154:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	699b      	ldr	r3, [r3, #24]
 800615a:	0c1b      	lsrs	r3, r3, #16
 800615c:	f003 0204 	and.w	r2, r3, #4
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006164:	f003 0310 	and.w	r3, r3, #16
 8006168:	431a      	orrs	r2, r3
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800616e:	f003 0308 	and.w	r3, r3, #8
 8006172:	431a      	orrs	r2, r3
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	68db      	ldr	r3, [r3, #12]
 8006178:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800617c:	ea42 0103 	orr.w	r1, r2, r3
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	430a      	orrs	r2, r1
 800618c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	2200      	movs	r2, #0
 8006192:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	2201      	movs	r2, #1
 8006198:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 800619c:	2300      	movs	r3, #0
}
 800619e:	4618      	mov	r0, r3
 80061a0:	3710      	adds	r7, #16
 80061a2:	46bd      	mov	sp, r7
 80061a4:	bd80      	pop	{r7, pc}

080061a6 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 80061a6:	b480      	push	{r7}
 80061a8:	b083      	sub	sp, #12
 80061aa:	af00      	add	r7, sp, #0
 80061ac:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80061b4:	b2db      	uxtb	r3, r3
}
 80061b6:	4618      	mov	r0, r3
 80061b8:	370c      	adds	r7, #12
 80061ba:	46bd      	mov	sp, r7
 80061bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c0:	4770      	bx	lr

080061c2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80061c2:	b580      	push	{r7, lr}
 80061c4:	b082      	sub	sp, #8
 80061c6:	af00      	add	r7, sp, #0
 80061c8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d101      	bne.n	80061d4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80061d0:	2301      	movs	r3, #1
 80061d2:	e049      	b.n	8006268 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80061da:	b2db      	uxtb	r3, r3
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d106      	bne.n	80061ee <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	2200      	movs	r2, #0
 80061e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80061e8:	6878      	ldr	r0, [r7, #4]
 80061ea:	f7fb fcc5 	bl	8001b78 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	2202      	movs	r2, #2
 80061f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681a      	ldr	r2, [r3, #0]
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	3304      	adds	r3, #4
 80061fe:	4619      	mov	r1, r3
 8006200:	4610      	mov	r0, r2
 8006202:	f000 f835 	bl	8006270 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	2201      	movs	r2, #1
 800620a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	2201      	movs	r2, #1
 8006212:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	2201      	movs	r2, #1
 800621a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	2201      	movs	r2, #1
 8006222:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	2201      	movs	r2, #1
 800622a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	2201      	movs	r2, #1
 8006232:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	2201      	movs	r2, #1
 800623a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	2201      	movs	r2, #1
 8006242:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	2201      	movs	r2, #1
 800624a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	2201      	movs	r2, #1
 8006252:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	2201      	movs	r2, #1
 800625a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	2201      	movs	r2, #1
 8006262:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006266:	2300      	movs	r3, #0
}
 8006268:	4618      	mov	r0, r3
 800626a:	3708      	adds	r7, #8
 800626c:	46bd      	mov	sp, r7
 800626e:	bd80      	pop	{r7, pc}

08006270 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006270:	b480      	push	{r7}
 8006272:	b085      	sub	sp, #20
 8006274:	af00      	add	r7, sp, #0
 8006276:	6078      	str	r0, [r7, #4]
 8006278:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	4a40      	ldr	r2, [pc, #256]	@ (8006384 <TIM_Base_SetConfig+0x114>)
 8006284:	4293      	cmp	r3, r2
 8006286:	d013      	beq.n	80062b0 <TIM_Base_SetConfig+0x40>
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800628e:	d00f      	beq.n	80062b0 <TIM_Base_SetConfig+0x40>
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	4a3d      	ldr	r2, [pc, #244]	@ (8006388 <TIM_Base_SetConfig+0x118>)
 8006294:	4293      	cmp	r3, r2
 8006296:	d00b      	beq.n	80062b0 <TIM_Base_SetConfig+0x40>
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	4a3c      	ldr	r2, [pc, #240]	@ (800638c <TIM_Base_SetConfig+0x11c>)
 800629c:	4293      	cmp	r3, r2
 800629e:	d007      	beq.n	80062b0 <TIM_Base_SetConfig+0x40>
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	4a3b      	ldr	r2, [pc, #236]	@ (8006390 <TIM_Base_SetConfig+0x120>)
 80062a4:	4293      	cmp	r3, r2
 80062a6:	d003      	beq.n	80062b0 <TIM_Base_SetConfig+0x40>
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	4a3a      	ldr	r2, [pc, #232]	@ (8006394 <TIM_Base_SetConfig+0x124>)
 80062ac:	4293      	cmp	r3, r2
 80062ae:	d108      	bne.n	80062c2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80062b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80062b8:	683b      	ldr	r3, [r7, #0]
 80062ba:	685b      	ldr	r3, [r3, #4]
 80062bc:	68fa      	ldr	r2, [r7, #12]
 80062be:	4313      	orrs	r3, r2
 80062c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	4a2f      	ldr	r2, [pc, #188]	@ (8006384 <TIM_Base_SetConfig+0x114>)
 80062c6:	4293      	cmp	r3, r2
 80062c8:	d01f      	beq.n	800630a <TIM_Base_SetConfig+0x9a>
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80062d0:	d01b      	beq.n	800630a <TIM_Base_SetConfig+0x9a>
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	4a2c      	ldr	r2, [pc, #176]	@ (8006388 <TIM_Base_SetConfig+0x118>)
 80062d6:	4293      	cmp	r3, r2
 80062d8:	d017      	beq.n	800630a <TIM_Base_SetConfig+0x9a>
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	4a2b      	ldr	r2, [pc, #172]	@ (800638c <TIM_Base_SetConfig+0x11c>)
 80062de:	4293      	cmp	r3, r2
 80062e0:	d013      	beq.n	800630a <TIM_Base_SetConfig+0x9a>
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	4a2a      	ldr	r2, [pc, #168]	@ (8006390 <TIM_Base_SetConfig+0x120>)
 80062e6:	4293      	cmp	r3, r2
 80062e8:	d00f      	beq.n	800630a <TIM_Base_SetConfig+0x9a>
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	4a29      	ldr	r2, [pc, #164]	@ (8006394 <TIM_Base_SetConfig+0x124>)
 80062ee:	4293      	cmp	r3, r2
 80062f0:	d00b      	beq.n	800630a <TIM_Base_SetConfig+0x9a>
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	4a28      	ldr	r2, [pc, #160]	@ (8006398 <TIM_Base_SetConfig+0x128>)
 80062f6:	4293      	cmp	r3, r2
 80062f8:	d007      	beq.n	800630a <TIM_Base_SetConfig+0x9a>
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	4a27      	ldr	r2, [pc, #156]	@ (800639c <TIM_Base_SetConfig+0x12c>)
 80062fe:	4293      	cmp	r3, r2
 8006300:	d003      	beq.n	800630a <TIM_Base_SetConfig+0x9a>
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	4a26      	ldr	r2, [pc, #152]	@ (80063a0 <TIM_Base_SetConfig+0x130>)
 8006306:	4293      	cmp	r3, r2
 8006308:	d108      	bne.n	800631c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006310:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006312:	683b      	ldr	r3, [r7, #0]
 8006314:	68db      	ldr	r3, [r3, #12]
 8006316:	68fa      	ldr	r2, [r7, #12]
 8006318:	4313      	orrs	r3, r2
 800631a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006322:	683b      	ldr	r3, [r7, #0]
 8006324:	695b      	ldr	r3, [r3, #20]
 8006326:	4313      	orrs	r3, r2
 8006328:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	68fa      	ldr	r2, [r7, #12]
 800632e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006330:	683b      	ldr	r3, [r7, #0]
 8006332:	689a      	ldr	r2, [r3, #8]
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006338:	683b      	ldr	r3, [r7, #0]
 800633a:	681a      	ldr	r2, [r3, #0]
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	4a10      	ldr	r2, [pc, #64]	@ (8006384 <TIM_Base_SetConfig+0x114>)
 8006344:	4293      	cmp	r3, r2
 8006346:	d00f      	beq.n	8006368 <TIM_Base_SetConfig+0xf8>
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	4a12      	ldr	r2, [pc, #72]	@ (8006394 <TIM_Base_SetConfig+0x124>)
 800634c:	4293      	cmp	r3, r2
 800634e:	d00b      	beq.n	8006368 <TIM_Base_SetConfig+0xf8>
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	4a11      	ldr	r2, [pc, #68]	@ (8006398 <TIM_Base_SetConfig+0x128>)
 8006354:	4293      	cmp	r3, r2
 8006356:	d007      	beq.n	8006368 <TIM_Base_SetConfig+0xf8>
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	4a10      	ldr	r2, [pc, #64]	@ (800639c <TIM_Base_SetConfig+0x12c>)
 800635c:	4293      	cmp	r3, r2
 800635e:	d003      	beq.n	8006368 <TIM_Base_SetConfig+0xf8>
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	4a0f      	ldr	r2, [pc, #60]	@ (80063a0 <TIM_Base_SetConfig+0x130>)
 8006364:	4293      	cmp	r3, r2
 8006366:	d103      	bne.n	8006370 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006368:	683b      	ldr	r3, [r7, #0]
 800636a:	691a      	ldr	r2, [r3, #16]
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2201      	movs	r2, #1
 8006374:	615a      	str	r2, [r3, #20]
}
 8006376:	bf00      	nop
 8006378:	3714      	adds	r7, #20
 800637a:	46bd      	mov	sp, r7
 800637c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006380:	4770      	bx	lr
 8006382:	bf00      	nop
 8006384:	40012c00 	.word	0x40012c00
 8006388:	40000400 	.word	0x40000400
 800638c:	40000800 	.word	0x40000800
 8006390:	40000c00 	.word	0x40000c00
 8006394:	40013400 	.word	0x40013400
 8006398:	40014000 	.word	0x40014000
 800639c:	40014400 	.word	0x40014400
 80063a0:	40014800 	.word	0x40014800

080063a4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80063a4:	b480      	push	{r7}
 80063a6:	b085      	sub	sp, #20
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	6078      	str	r0, [r7, #4]
 80063ac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80063b4:	2b01      	cmp	r3, #1
 80063b6:	d101      	bne.n	80063bc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80063b8:	2302      	movs	r3, #2
 80063ba:	e068      	b.n	800648e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	2201      	movs	r2, #1
 80063c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2202      	movs	r2, #2
 80063c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	685b      	ldr	r3, [r3, #4]
 80063d2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	689b      	ldr	r3, [r3, #8]
 80063da:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	4a2e      	ldr	r2, [pc, #184]	@ (800649c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80063e2:	4293      	cmp	r3, r2
 80063e4:	d004      	beq.n	80063f0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	4a2d      	ldr	r2, [pc, #180]	@ (80064a0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80063ec:	4293      	cmp	r3, r2
 80063ee:	d108      	bne.n	8006402 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80063f6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80063f8:	683b      	ldr	r3, [r7, #0]
 80063fa:	685b      	ldr	r3, [r3, #4]
 80063fc:	68fa      	ldr	r2, [r7, #12]
 80063fe:	4313      	orrs	r3, r2
 8006400:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006408:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800640a:	683b      	ldr	r3, [r7, #0]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	68fa      	ldr	r2, [r7, #12]
 8006410:	4313      	orrs	r3, r2
 8006412:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	68fa      	ldr	r2, [r7, #12]
 800641a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	4a1e      	ldr	r2, [pc, #120]	@ (800649c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006422:	4293      	cmp	r3, r2
 8006424:	d01d      	beq.n	8006462 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800642e:	d018      	beq.n	8006462 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	4a1b      	ldr	r2, [pc, #108]	@ (80064a4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006436:	4293      	cmp	r3, r2
 8006438:	d013      	beq.n	8006462 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	4a1a      	ldr	r2, [pc, #104]	@ (80064a8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006440:	4293      	cmp	r3, r2
 8006442:	d00e      	beq.n	8006462 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	4a18      	ldr	r2, [pc, #96]	@ (80064ac <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800644a:	4293      	cmp	r3, r2
 800644c:	d009      	beq.n	8006462 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	4a13      	ldr	r2, [pc, #76]	@ (80064a0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006454:	4293      	cmp	r3, r2
 8006456:	d004      	beq.n	8006462 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	4a14      	ldr	r2, [pc, #80]	@ (80064b0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800645e:	4293      	cmp	r3, r2
 8006460:	d10c      	bne.n	800647c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006462:	68bb      	ldr	r3, [r7, #8]
 8006464:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006468:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800646a:	683b      	ldr	r3, [r7, #0]
 800646c:	689b      	ldr	r3, [r3, #8]
 800646e:	68ba      	ldr	r2, [r7, #8]
 8006470:	4313      	orrs	r3, r2
 8006472:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	68ba      	ldr	r2, [r7, #8]
 800647a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	2201      	movs	r2, #1
 8006480:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	2200      	movs	r2, #0
 8006488:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800648c:	2300      	movs	r3, #0
}
 800648e:	4618      	mov	r0, r3
 8006490:	3714      	adds	r7, #20
 8006492:	46bd      	mov	sp, r7
 8006494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006498:	4770      	bx	lr
 800649a:	bf00      	nop
 800649c:	40012c00 	.word	0x40012c00
 80064a0:	40013400 	.word	0x40013400
 80064a4:	40000400 	.word	0x40000400
 80064a8:	40000800 	.word	0x40000800
 80064ac:	40000c00 	.word	0x40000c00
 80064b0:	40014000 	.word	0x40014000

080064b4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80064b4:	b580      	push	{r7, lr}
 80064b6:	b082      	sub	sp, #8
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d101      	bne.n	80064c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80064c2:	2301      	movs	r3, #1
 80064c4:	e040      	b.n	8006548 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d106      	bne.n	80064dc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	2200      	movs	r2, #0
 80064d2:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80064d6:	6878      	ldr	r0, [r7, #4]
 80064d8:	f7fb fb9e 	bl	8001c18 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	2224      	movs	r2, #36	@ 0x24
 80064e0:	675a      	str	r2, [r3, #116]	@ 0x74

  __HAL_UART_DISABLE(huart);
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	681a      	ldr	r2, [r3, #0]
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	f022 0201 	bic.w	r2, r2, #1
 80064f0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80064f2:	6878      	ldr	r0, [r7, #4]
 80064f4:	f000 fa18 	bl	8006928 <UART_SetConfig>
 80064f8:	4603      	mov	r3, r0
 80064fa:	2b01      	cmp	r3, #1
 80064fc:	d101      	bne.n	8006502 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80064fe:	2301      	movs	r3, #1
 8006500:	e022      	b.n	8006548 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006506:	2b00      	cmp	r3, #0
 8006508:	d002      	beq.n	8006510 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800650a:	6878      	ldr	r0, [r7, #4]
 800650c:	f000 fcc6 	bl	8006e9c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	685a      	ldr	r2, [r3, #4]
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800651e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	689a      	ldr	r2, [r3, #8]
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800652e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	681a      	ldr	r2, [r3, #0]
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	f042 0201 	orr.w	r2, r2, #1
 800653e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006540:	6878      	ldr	r0, [r7, #4]
 8006542:	f000 fd4d 	bl	8006fe0 <UART_CheckIdleState>
 8006546:	4603      	mov	r3, r0
}
 8006548:	4618      	mov	r0, r3
 800654a:	3708      	adds	r7, #8
 800654c:	46bd      	mov	sp, r7
 800654e:	bd80      	pop	{r7, pc}

08006550 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006550:	b580      	push	{r7, lr}
 8006552:	b08a      	sub	sp, #40	@ 0x28
 8006554:	af02      	add	r7, sp, #8
 8006556:	60f8      	str	r0, [r7, #12]
 8006558:	60b9      	str	r1, [r7, #8]
 800655a:	603b      	str	r3, [r7, #0]
 800655c:	4613      	mov	r3, r2
 800655e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006564:	2b20      	cmp	r3, #32
 8006566:	d17f      	bne.n	8006668 <HAL_UART_Transmit+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 8006568:	68bb      	ldr	r3, [r7, #8]
 800656a:	2b00      	cmp	r3, #0
 800656c:	d002      	beq.n	8006574 <HAL_UART_Transmit+0x24>
 800656e:	88fb      	ldrh	r3, [r7, #6]
 8006570:	2b00      	cmp	r3, #0
 8006572:	d101      	bne.n	8006578 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8006574:	2301      	movs	r3, #1
 8006576:	e078      	b.n	800666a <HAL_UART_Transmit+0x11a>
    }

    __HAL_LOCK(huart);
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 800657e:	2b01      	cmp	r3, #1
 8006580:	d101      	bne.n	8006586 <HAL_UART_Transmit+0x36>
 8006582:	2302      	movs	r3, #2
 8006584:	e071      	b.n	800666a <HAL_UART_Transmit+0x11a>
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	2201      	movs	r2, #1
 800658a:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	2200      	movs	r2, #0
 8006592:	67da      	str	r2, [r3, #124]	@ 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	2221      	movs	r2, #33	@ 0x21
 8006598:	675a      	str	r2, [r3, #116]	@ 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800659a:	f7fc fd17 	bl	8002fcc <HAL_GetTick>
 800659e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	88fa      	ldrh	r2, [r7, #6]
 80065a4:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	88fa      	ldrh	r2, [r7, #6]
 80065ac:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	689b      	ldr	r3, [r3, #8]
 80065b4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80065b8:	d108      	bne.n	80065cc <HAL_UART_Transmit+0x7c>
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	691b      	ldr	r3, [r3, #16]
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d104      	bne.n	80065cc <HAL_UART_Transmit+0x7c>
    {
      pdata8bits  = NULL;
 80065c2:	2300      	movs	r3, #0
 80065c4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80065c6:	68bb      	ldr	r3, [r7, #8]
 80065c8:	61bb      	str	r3, [r7, #24]
 80065ca:	e003      	b.n	80065d4 <HAL_UART_Transmit+0x84>
    }
    else
    {
      pdata8bits  = pData;
 80065cc:	68bb      	ldr	r3, [r7, #8]
 80065ce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80065d0:	2300      	movs	r3, #0
 80065d2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	2200      	movs	r2, #0
 80065d8:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70

    while (huart->TxXferCount > 0U)
 80065dc:	e02c      	b.n	8006638 <HAL_UART_Transmit+0xe8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80065de:	683b      	ldr	r3, [r7, #0]
 80065e0:	9300      	str	r3, [sp, #0]
 80065e2:	697b      	ldr	r3, [r7, #20]
 80065e4:	2200      	movs	r2, #0
 80065e6:	2180      	movs	r1, #128	@ 0x80
 80065e8:	68f8      	ldr	r0, [r7, #12]
 80065ea:	f000 fd3e 	bl	800706a <UART_WaitOnFlagUntilTimeout>
 80065ee:	4603      	mov	r3, r0
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d001      	beq.n	80065f8 <HAL_UART_Transmit+0xa8>
      {
        return HAL_TIMEOUT;
 80065f4:	2303      	movs	r3, #3
 80065f6:	e038      	b.n	800666a <HAL_UART_Transmit+0x11a>
      }
      if (pdata8bits == NULL)
 80065f8:	69fb      	ldr	r3, [r7, #28]
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d10b      	bne.n	8006616 <HAL_UART_Transmit+0xc6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80065fe:	69bb      	ldr	r3, [r7, #24]
 8006600:	881a      	ldrh	r2, [r3, #0]
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800660a:	b292      	uxth	r2, r2
 800660c:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800660e:	69bb      	ldr	r3, [r7, #24]
 8006610:	3302      	adds	r3, #2
 8006612:	61bb      	str	r3, [r7, #24]
 8006614:	e007      	b.n	8006626 <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006616:	69fb      	ldr	r3, [r7, #28]
 8006618:	781a      	ldrb	r2, [r3, #0]
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8006620:	69fb      	ldr	r3, [r7, #28]
 8006622:	3301      	adds	r3, #1
 8006624:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800662c:	b29b      	uxth	r3, r3
 800662e:	3b01      	subs	r3, #1
 8006630:	b29a      	uxth	r2, r3
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800663e:	b29b      	uxth	r3, r3
 8006640:	2b00      	cmp	r3, #0
 8006642:	d1cc      	bne.n	80065de <HAL_UART_Transmit+0x8e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006644:	683b      	ldr	r3, [r7, #0]
 8006646:	9300      	str	r3, [sp, #0]
 8006648:	697b      	ldr	r3, [r7, #20]
 800664a:	2200      	movs	r2, #0
 800664c:	2140      	movs	r1, #64	@ 0x40
 800664e:	68f8      	ldr	r0, [r7, #12]
 8006650:	f000 fd0b 	bl	800706a <UART_WaitOnFlagUntilTimeout>
 8006654:	4603      	mov	r3, r0
 8006656:	2b00      	cmp	r3, #0
 8006658:	d001      	beq.n	800665e <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800665a:	2303      	movs	r3, #3
 800665c:	e005      	b.n	800666a <HAL_UART_Transmit+0x11a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	2220      	movs	r2, #32
 8006662:	675a      	str	r2, [r3, #116]	@ 0x74

    return HAL_OK;
 8006664:	2300      	movs	r3, #0
 8006666:	e000      	b.n	800666a <HAL_UART_Transmit+0x11a>
  }
  else
  {
    return HAL_BUSY;
 8006668:	2302      	movs	r3, #2
  }
}
 800666a:	4618      	mov	r0, r3
 800666c:	3720      	adds	r7, #32
 800666e:	46bd      	mov	sp, r7
 8006670:	bd80      	pop	{r7, pc}
	...

08006674 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006674:	b580      	push	{r7, lr}
 8006676:	b088      	sub	sp, #32
 8006678:	af00      	add	r7, sp, #0
 800667a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	69db      	ldr	r3, [r3, #28]
 8006682:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	689b      	ldr	r3, [r3, #8]
 8006692:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006694:	69fa      	ldr	r2, [r7, #28]
 8006696:	f640 030f 	movw	r3, #2063	@ 0x80f
 800669a:	4013      	ands	r3, r2
 800669c:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800669e:	693b      	ldr	r3, [r7, #16]
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d113      	bne.n	80066cc <HAL_UART_IRQHandler+0x58>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80066a4:	69fb      	ldr	r3, [r7, #28]
 80066a6:	f003 0320 	and.w	r3, r3, #32
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d00e      	beq.n	80066cc <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80066ae:	69bb      	ldr	r3, [r7, #24]
 80066b0:	f003 0320 	and.w	r3, r3, #32
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d009      	beq.n	80066cc <HAL_UART_IRQHandler+0x58>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80066bc:	2b00      	cmp	r3, #0
 80066be:	f000 8113 	beq.w	80068e8 <HAL_UART_IRQHandler+0x274>
      {
        huart->RxISR(huart);
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80066c6:	6878      	ldr	r0, [r7, #4]
 80066c8:	4798      	blx	r3
      }
      return;
 80066ca:	e10d      	b.n	80068e8 <HAL_UART_IRQHandler+0x274>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 80066cc:	693b      	ldr	r3, [r7, #16]
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	f000 80d6 	beq.w	8006880 <HAL_UART_IRQHandler+0x20c>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80066d4:	697b      	ldr	r3, [r7, #20]
 80066d6:	f003 0301 	and.w	r3, r3, #1
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d105      	bne.n	80066ea <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80066de:	69ba      	ldr	r2, [r7, #24]
 80066e0:	4b85      	ldr	r3, [pc, #532]	@ (80068f8 <HAL_UART_IRQHandler+0x284>)
 80066e2:	4013      	ands	r3, r2
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	f000 80cb 	beq.w	8006880 <HAL_UART_IRQHandler+0x20c>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80066ea:	69fb      	ldr	r3, [r7, #28]
 80066ec:	f003 0301 	and.w	r3, r3, #1
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d00e      	beq.n	8006712 <HAL_UART_IRQHandler+0x9e>
 80066f4:	69bb      	ldr	r3, [r7, #24]
 80066f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d009      	beq.n	8006712 <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	2201      	movs	r2, #1
 8006704:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800670a:	f043 0201 	orr.w	r2, r3, #1
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	67da      	str	r2, [r3, #124]	@ 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006712:	69fb      	ldr	r3, [r7, #28]
 8006714:	f003 0302 	and.w	r3, r3, #2
 8006718:	2b00      	cmp	r3, #0
 800671a:	d00e      	beq.n	800673a <HAL_UART_IRQHandler+0xc6>
 800671c:	697b      	ldr	r3, [r7, #20]
 800671e:	f003 0301 	and.w	r3, r3, #1
 8006722:	2b00      	cmp	r3, #0
 8006724:	d009      	beq.n	800673a <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	2202      	movs	r2, #2
 800672c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006732:	f043 0204 	orr.w	r2, r3, #4
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	67da      	str	r2, [r3, #124]	@ 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800673a:	69fb      	ldr	r3, [r7, #28]
 800673c:	f003 0304 	and.w	r3, r3, #4
 8006740:	2b00      	cmp	r3, #0
 8006742:	d00e      	beq.n	8006762 <HAL_UART_IRQHandler+0xee>
 8006744:	697b      	ldr	r3, [r7, #20]
 8006746:	f003 0301 	and.w	r3, r3, #1
 800674a:	2b00      	cmp	r3, #0
 800674c:	d009      	beq.n	8006762 <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	2204      	movs	r2, #4
 8006754:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800675a:	f043 0202 	orr.w	r2, r3, #2
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	67da      	str	r2, [r3, #124]	@ 0x7c
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006762:	69fb      	ldr	r3, [r7, #28]
 8006764:	f003 0308 	and.w	r3, r3, #8
 8006768:	2b00      	cmp	r3, #0
 800676a:	d013      	beq.n	8006794 <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800676c:	69bb      	ldr	r3, [r7, #24]
 800676e:	f003 0320 	and.w	r3, r3, #32
 8006772:	2b00      	cmp	r3, #0
 8006774:	d104      	bne.n	8006780 <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006776:	697b      	ldr	r3, [r7, #20]
 8006778:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800677c:	2b00      	cmp	r3, #0
 800677e:	d009      	beq.n	8006794 <HAL_UART_IRQHandler+0x120>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	2208      	movs	r2, #8
 8006786:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800678c:	f043 0208 	orr.w	r2, r3, #8
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	67da      	str	r2, [r3, #124]	@ 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006794:	69fb      	ldr	r3, [r7, #28]
 8006796:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800679a:	2b00      	cmp	r3, #0
 800679c:	d00f      	beq.n	80067be <HAL_UART_IRQHandler+0x14a>
 800679e:	69bb      	ldr	r3, [r7, #24]
 80067a0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d00a      	beq.n	80067be <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80067b0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80067b6:	f043 0220 	orr.w	r2, r3, #32
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	67da      	str	r2, [r3, #124]	@ 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	f000 8092 	beq.w	80068ec <HAL_UART_IRQHandler+0x278>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80067c8:	69fb      	ldr	r3, [r7, #28]
 80067ca:	f003 0320 	and.w	r3, r3, #32
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d00c      	beq.n	80067ec <HAL_UART_IRQHandler+0x178>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80067d2:	69bb      	ldr	r3, [r7, #24]
 80067d4:	f003 0320 	and.w	r3, r3, #32
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d007      	beq.n	80067ec <HAL_UART_IRQHandler+0x178>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d003      	beq.n	80067ec <HAL_UART_IRQHandler+0x178>
        {
          huart->RxISR(huart);
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80067e8:	6878      	ldr	r0, [r7, #4]
 80067ea:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80067f0:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	689b      	ldr	r3, [r3, #8]
 80067f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80067fc:	2b40      	cmp	r3, #64	@ 0x40
 80067fe:	d004      	beq.n	800680a <HAL_UART_IRQHandler+0x196>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006806:	2b00      	cmp	r3, #0
 8006808:	d031      	beq.n	800686e <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800680a:	6878      	ldr	r0, [r7, #4]
 800680c:	f000 fca8 	bl	8007160 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	689b      	ldr	r3, [r3, #8]
 8006816:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800681a:	2b40      	cmp	r3, #64	@ 0x40
 800681c:	d123      	bne.n	8006866 <HAL_UART_IRQHandler+0x1f2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	689a      	ldr	r2, [r3, #8]
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800682c:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006832:	2b00      	cmp	r3, #0
 8006834:	d013      	beq.n	800685e <HAL_UART_IRQHandler+0x1ea>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800683a:	4a30      	ldr	r2, [pc, #192]	@ (80068fc <HAL_UART_IRQHandler+0x288>)
 800683c:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006842:	4618      	mov	r0, r3
 8006844:	f7fc fd03 	bl	800324e <HAL_DMA_Abort_IT>
 8006848:	4603      	mov	r3, r0
 800684a:	2b00      	cmp	r3, #0
 800684c:	d016      	beq.n	800687c <HAL_UART_IRQHandler+0x208>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006852:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006854:	687a      	ldr	r2, [r7, #4]
 8006856:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 8006858:	4610      	mov	r0, r2
 800685a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800685c:	e00e      	b.n	800687c <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800685e:	6878      	ldr	r0, [r7, #4]
 8006860:	f000 f858 	bl	8006914 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006864:	e00a      	b.n	800687c <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006866:	6878      	ldr	r0, [r7, #4]
 8006868:	f000 f854 	bl	8006914 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800686c:	e006      	b.n	800687c <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800686e:	6878      	ldr	r0, [r7, #4]
 8006870:	f000 f850 	bl	8006914 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	2200      	movs	r2, #0
 8006878:	67da      	str	r2, [r3, #124]	@ 0x7c
      }
    }
    return;
 800687a:	e037      	b.n	80068ec <HAL_UART_IRQHandler+0x278>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800687c:	bf00      	nop
    return;
 800687e:	e035      	b.n	80068ec <HAL_UART_IRQHandler+0x278>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006880:	69fb      	ldr	r3, [r7, #28]
 8006882:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006886:	2b00      	cmp	r3, #0
 8006888:	d00d      	beq.n	80068a6 <HAL_UART_IRQHandler+0x232>
 800688a:	697b      	ldr	r3, [r7, #20]
 800688c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006890:	2b00      	cmp	r3, #0
 8006892:	d008      	beq.n	80068a6 <HAL_UART_IRQHandler+0x232>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800689c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800689e:	6878      	ldr	r0, [r7, #4]
 80068a0:	f000 fcad 	bl	80071fe <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80068a4:	e025      	b.n	80068f2 <HAL_UART_IRQHandler+0x27e>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 80068a6:	69fb      	ldr	r3, [r7, #28]
 80068a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d00d      	beq.n	80068cc <HAL_UART_IRQHandler+0x258>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80068b0:	69bb      	ldr	r3, [r7, #24]
 80068b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d008      	beq.n	80068cc <HAL_UART_IRQHandler+0x258>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d016      	beq.n	80068f0 <HAL_UART_IRQHandler+0x27c>
    {
      huart->TxISR(huart);
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80068c6:	6878      	ldr	r0, [r7, #4]
 80068c8:	4798      	blx	r3
    }
    return;
 80068ca:	e011      	b.n	80068f0 <HAL_UART_IRQHandler+0x27c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80068cc:	69fb      	ldr	r3, [r7, #28]
 80068ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d00d      	beq.n	80068f2 <HAL_UART_IRQHandler+0x27e>
 80068d6:	69bb      	ldr	r3, [r7, #24]
 80068d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d008      	beq.n	80068f2 <HAL_UART_IRQHandler+0x27e>
  {
    UART_EndTransmit_IT(huart);
 80068e0:	6878      	ldr	r0, [r7, #4]
 80068e2:	f000 fc73 	bl	80071cc <UART_EndTransmit_IT>
    return;
 80068e6:	e004      	b.n	80068f2 <HAL_UART_IRQHandler+0x27e>
      return;
 80068e8:	bf00      	nop
 80068ea:	e002      	b.n	80068f2 <HAL_UART_IRQHandler+0x27e>
    return;
 80068ec:	bf00      	nop
 80068ee:	e000      	b.n	80068f2 <HAL_UART_IRQHandler+0x27e>
    return;
 80068f0:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80068f2:	3720      	adds	r7, #32
 80068f4:	46bd      	mov	sp, r7
 80068f6:	bd80      	pop	{r7, pc}
 80068f8:	04000120 	.word	0x04000120
 80068fc:	080071a1 	.word	0x080071a1

08006900 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006900:	b480      	push	{r7}
 8006902:	b083      	sub	sp, #12
 8006904:	af00      	add	r7, sp, #0
 8006906:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006908:	bf00      	nop
 800690a:	370c      	adds	r7, #12
 800690c:	46bd      	mov	sp, r7
 800690e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006912:	4770      	bx	lr

08006914 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006914:	b480      	push	{r7}
 8006916:	b083      	sub	sp, #12
 8006918:	af00      	add	r7, sp, #0
 800691a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800691c:	bf00      	nop
 800691e:	370c      	adds	r7, #12
 8006920:	46bd      	mov	sp, r7
 8006922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006926:	4770      	bx	lr

08006928 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006928:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800692c:	b08a      	sub	sp, #40	@ 0x28
 800692e:	af00      	add	r7, sp, #0
 8006930:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006932:	2300      	movs	r3, #0
 8006934:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	689a      	ldr	r2, [r3, #8]
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	691b      	ldr	r3, [r3, #16]
 8006940:	431a      	orrs	r2, r3
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	695b      	ldr	r3, [r3, #20]
 8006946:	431a      	orrs	r2, r3
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	69db      	ldr	r3, [r3, #28]
 800694c:	4313      	orrs	r3, r2
 800694e:	627b      	str	r3, [r7, #36]	@ 0x24
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	681a      	ldr	r2, [r3, #0]
 8006956:	4ba4      	ldr	r3, [pc, #656]	@ (8006be8 <UART_SetConfig+0x2c0>)
 8006958:	4013      	ands	r3, r2
 800695a:	68fa      	ldr	r2, [r7, #12]
 800695c:	6812      	ldr	r2, [r2, #0]
 800695e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006960:	430b      	orrs	r3, r1
 8006962:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	685b      	ldr	r3, [r3, #4]
 800696a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	68da      	ldr	r2, [r3, #12]
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	430a      	orrs	r2, r1
 8006978:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	699b      	ldr	r3, [r3, #24]
 800697e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	4a99      	ldr	r2, [pc, #612]	@ (8006bec <UART_SetConfig+0x2c4>)
 8006986:	4293      	cmp	r3, r2
 8006988:	d004      	beq.n	8006994 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	6a1b      	ldr	r3, [r3, #32]
 800698e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006990:	4313      	orrs	r3, r2
 8006992:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	689b      	ldr	r3, [r3, #8]
 800699a:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80069a4:	430a      	orrs	r2, r1
 80069a6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	4a90      	ldr	r2, [pc, #576]	@ (8006bf0 <UART_SetConfig+0x2c8>)
 80069ae:	4293      	cmp	r3, r2
 80069b0:	d126      	bne.n	8006a00 <UART_SetConfig+0xd8>
 80069b2:	4b90      	ldr	r3, [pc, #576]	@ (8006bf4 <UART_SetConfig+0x2cc>)
 80069b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80069b8:	f003 0303 	and.w	r3, r3, #3
 80069bc:	2b03      	cmp	r3, #3
 80069be:	d81b      	bhi.n	80069f8 <UART_SetConfig+0xd0>
 80069c0:	a201      	add	r2, pc, #4	@ (adr r2, 80069c8 <UART_SetConfig+0xa0>)
 80069c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069c6:	bf00      	nop
 80069c8:	080069d9 	.word	0x080069d9
 80069cc:	080069e9 	.word	0x080069e9
 80069d0:	080069e1 	.word	0x080069e1
 80069d4:	080069f1 	.word	0x080069f1
 80069d8:	2301      	movs	r3, #1
 80069da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80069de:	e116      	b.n	8006c0e <UART_SetConfig+0x2e6>
 80069e0:	2302      	movs	r3, #2
 80069e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80069e6:	e112      	b.n	8006c0e <UART_SetConfig+0x2e6>
 80069e8:	2304      	movs	r3, #4
 80069ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80069ee:	e10e      	b.n	8006c0e <UART_SetConfig+0x2e6>
 80069f0:	2308      	movs	r3, #8
 80069f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80069f6:	e10a      	b.n	8006c0e <UART_SetConfig+0x2e6>
 80069f8:	2310      	movs	r3, #16
 80069fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80069fe:	e106      	b.n	8006c0e <UART_SetConfig+0x2e6>
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	4a7c      	ldr	r2, [pc, #496]	@ (8006bf8 <UART_SetConfig+0x2d0>)
 8006a06:	4293      	cmp	r3, r2
 8006a08:	d138      	bne.n	8006a7c <UART_SetConfig+0x154>
 8006a0a:	4b7a      	ldr	r3, [pc, #488]	@ (8006bf4 <UART_SetConfig+0x2cc>)
 8006a0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a10:	f003 030c 	and.w	r3, r3, #12
 8006a14:	2b0c      	cmp	r3, #12
 8006a16:	d82d      	bhi.n	8006a74 <UART_SetConfig+0x14c>
 8006a18:	a201      	add	r2, pc, #4	@ (adr r2, 8006a20 <UART_SetConfig+0xf8>)
 8006a1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a1e:	bf00      	nop
 8006a20:	08006a55 	.word	0x08006a55
 8006a24:	08006a75 	.word	0x08006a75
 8006a28:	08006a75 	.word	0x08006a75
 8006a2c:	08006a75 	.word	0x08006a75
 8006a30:	08006a65 	.word	0x08006a65
 8006a34:	08006a75 	.word	0x08006a75
 8006a38:	08006a75 	.word	0x08006a75
 8006a3c:	08006a75 	.word	0x08006a75
 8006a40:	08006a5d 	.word	0x08006a5d
 8006a44:	08006a75 	.word	0x08006a75
 8006a48:	08006a75 	.word	0x08006a75
 8006a4c:	08006a75 	.word	0x08006a75
 8006a50:	08006a6d 	.word	0x08006a6d
 8006a54:	2300      	movs	r3, #0
 8006a56:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006a5a:	e0d8      	b.n	8006c0e <UART_SetConfig+0x2e6>
 8006a5c:	2302      	movs	r3, #2
 8006a5e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006a62:	e0d4      	b.n	8006c0e <UART_SetConfig+0x2e6>
 8006a64:	2304      	movs	r3, #4
 8006a66:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006a6a:	e0d0      	b.n	8006c0e <UART_SetConfig+0x2e6>
 8006a6c:	2308      	movs	r3, #8
 8006a6e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006a72:	e0cc      	b.n	8006c0e <UART_SetConfig+0x2e6>
 8006a74:	2310      	movs	r3, #16
 8006a76:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006a7a:	e0c8      	b.n	8006c0e <UART_SetConfig+0x2e6>
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	4a5e      	ldr	r2, [pc, #376]	@ (8006bfc <UART_SetConfig+0x2d4>)
 8006a82:	4293      	cmp	r3, r2
 8006a84:	d125      	bne.n	8006ad2 <UART_SetConfig+0x1aa>
 8006a86:	4b5b      	ldr	r3, [pc, #364]	@ (8006bf4 <UART_SetConfig+0x2cc>)
 8006a88:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a8c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006a90:	2b30      	cmp	r3, #48	@ 0x30
 8006a92:	d016      	beq.n	8006ac2 <UART_SetConfig+0x19a>
 8006a94:	2b30      	cmp	r3, #48	@ 0x30
 8006a96:	d818      	bhi.n	8006aca <UART_SetConfig+0x1a2>
 8006a98:	2b20      	cmp	r3, #32
 8006a9a:	d00a      	beq.n	8006ab2 <UART_SetConfig+0x18a>
 8006a9c:	2b20      	cmp	r3, #32
 8006a9e:	d814      	bhi.n	8006aca <UART_SetConfig+0x1a2>
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d002      	beq.n	8006aaa <UART_SetConfig+0x182>
 8006aa4:	2b10      	cmp	r3, #16
 8006aa6:	d008      	beq.n	8006aba <UART_SetConfig+0x192>
 8006aa8:	e00f      	b.n	8006aca <UART_SetConfig+0x1a2>
 8006aaa:	2300      	movs	r3, #0
 8006aac:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006ab0:	e0ad      	b.n	8006c0e <UART_SetConfig+0x2e6>
 8006ab2:	2302      	movs	r3, #2
 8006ab4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006ab8:	e0a9      	b.n	8006c0e <UART_SetConfig+0x2e6>
 8006aba:	2304      	movs	r3, #4
 8006abc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006ac0:	e0a5      	b.n	8006c0e <UART_SetConfig+0x2e6>
 8006ac2:	2308      	movs	r3, #8
 8006ac4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006ac8:	e0a1      	b.n	8006c0e <UART_SetConfig+0x2e6>
 8006aca:	2310      	movs	r3, #16
 8006acc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006ad0:	e09d      	b.n	8006c0e <UART_SetConfig+0x2e6>
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	4a4a      	ldr	r2, [pc, #296]	@ (8006c00 <UART_SetConfig+0x2d8>)
 8006ad8:	4293      	cmp	r3, r2
 8006ada:	d125      	bne.n	8006b28 <UART_SetConfig+0x200>
 8006adc:	4b45      	ldr	r3, [pc, #276]	@ (8006bf4 <UART_SetConfig+0x2cc>)
 8006ade:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006ae2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006ae6:	2bc0      	cmp	r3, #192	@ 0xc0
 8006ae8:	d016      	beq.n	8006b18 <UART_SetConfig+0x1f0>
 8006aea:	2bc0      	cmp	r3, #192	@ 0xc0
 8006aec:	d818      	bhi.n	8006b20 <UART_SetConfig+0x1f8>
 8006aee:	2b80      	cmp	r3, #128	@ 0x80
 8006af0:	d00a      	beq.n	8006b08 <UART_SetConfig+0x1e0>
 8006af2:	2b80      	cmp	r3, #128	@ 0x80
 8006af4:	d814      	bhi.n	8006b20 <UART_SetConfig+0x1f8>
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d002      	beq.n	8006b00 <UART_SetConfig+0x1d8>
 8006afa:	2b40      	cmp	r3, #64	@ 0x40
 8006afc:	d008      	beq.n	8006b10 <UART_SetConfig+0x1e8>
 8006afe:	e00f      	b.n	8006b20 <UART_SetConfig+0x1f8>
 8006b00:	2300      	movs	r3, #0
 8006b02:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006b06:	e082      	b.n	8006c0e <UART_SetConfig+0x2e6>
 8006b08:	2302      	movs	r3, #2
 8006b0a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006b0e:	e07e      	b.n	8006c0e <UART_SetConfig+0x2e6>
 8006b10:	2304      	movs	r3, #4
 8006b12:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006b16:	e07a      	b.n	8006c0e <UART_SetConfig+0x2e6>
 8006b18:	2308      	movs	r3, #8
 8006b1a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006b1e:	e076      	b.n	8006c0e <UART_SetConfig+0x2e6>
 8006b20:	2310      	movs	r3, #16
 8006b22:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006b26:	e072      	b.n	8006c0e <UART_SetConfig+0x2e6>
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	4a35      	ldr	r2, [pc, #212]	@ (8006c04 <UART_SetConfig+0x2dc>)
 8006b2e:	4293      	cmp	r3, r2
 8006b30:	d12a      	bne.n	8006b88 <UART_SetConfig+0x260>
 8006b32:	4b30      	ldr	r3, [pc, #192]	@ (8006bf4 <UART_SetConfig+0x2cc>)
 8006b34:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b38:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006b3c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006b40:	d01a      	beq.n	8006b78 <UART_SetConfig+0x250>
 8006b42:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006b46:	d81b      	bhi.n	8006b80 <UART_SetConfig+0x258>
 8006b48:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006b4c:	d00c      	beq.n	8006b68 <UART_SetConfig+0x240>
 8006b4e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006b52:	d815      	bhi.n	8006b80 <UART_SetConfig+0x258>
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d003      	beq.n	8006b60 <UART_SetConfig+0x238>
 8006b58:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006b5c:	d008      	beq.n	8006b70 <UART_SetConfig+0x248>
 8006b5e:	e00f      	b.n	8006b80 <UART_SetConfig+0x258>
 8006b60:	2300      	movs	r3, #0
 8006b62:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006b66:	e052      	b.n	8006c0e <UART_SetConfig+0x2e6>
 8006b68:	2302      	movs	r3, #2
 8006b6a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006b6e:	e04e      	b.n	8006c0e <UART_SetConfig+0x2e6>
 8006b70:	2304      	movs	r3, #4
 8006b72:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006b76:	e04a      	b.n	8006c0e <UART_SetConfig+0x2e6>
 8006b78:	2308      	movs	r3, #8
 8006b7a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006b7e:	e046      	b.n	8006c0e <UART_SetConfig+0x2e6>
 8006b80:	2310      	movs	r3, #16
 8006b82:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006b86:	e042      	b.n	8006c0e <UART_SetConfig+0x2e6>
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	4a17      	ldr	r2, [pc, #92]	@ (8006bec <UART_SetConfig+0x2c4>)
 8006b8e:	4293      	cmp	r3, r2
 8006b90:	d13a      	bne.n	8006c08 <UART_SetConfig+0x2e0>
 8006b92:	4b18      	ldr	r3, [pc, #96]	@ (8006bf4 <UART_SetConfig+0x2cc>)
 8006b94:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b98:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006b9c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006ba0:	d01a      	beq.n	8006bd8 <UART_SetConfig+0x2b0>
 8006ba2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006ba6:	d81b      	bhi.n	8006be0 <UART_SetConfig+0x2b8>
 8006ba8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006bac:	d00c      	beq.n	8006bc8 <UART_SetConfig+0x2a0>
 8006bae:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006bb2:	d815      	bhi.n	8006be0 <UART_SetConfig+0x2b8>
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d003      	beq.n	8006bc0 <UART_SetConfig+0x298>
 8006bb8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006bbc:	d008      	beq.n	8006bd0 <UART_SetConfig+0x2a8>
 8006bbe:	e00f      	b.n	8006be0 <UART_SetConfig+0x2b8>
 8006bc0:	2300      	movs	r3, #0
 8006bc2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006bc6:	e022      	b.n	8006c0e <UART_SetConfig+0x2e6>
 8006bc8:	2302      	movs	r3, #2
 8006bca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006bce:	e01e      	b.n	8006c0e <UART_SetConfig+0x2e6>
 8006bd0:	2304      	movs	r3, #4
 8006bd2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006bd6:	e01a      	b.n	8006c0e <UART_SetConfig+0x2e6>
 8006bd8:	2308      	movs	r3, #8
 8006bda:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006bde:	e016      	b.n	8006c0e <UART_SetConfig+0x2e6>
 8006be0:	2310      	movs	r3, #16
 8006be2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006be6:	e012      	b.n	8006c0e <UART_SetConfig+0x2e6>
 8006be8:	efff69f3 	.word	0xefff69f3
 8006bec:	40008000 	.word	0x40008000
 8006bf0:	40013800 	.word	0x40013800
 8006bf4:	40021000 	.word	0x40021000
 8006bf8:	40004400 	.word	0x40004400
 8006bfc:	40004800 	.word	0x40004800
 8006c00:	40004c00 	.word	0x40004c00
 8006c04:	40005000 	.word	0x40005000
 8006c08:	2310      	movs	r3, #16
 8006c0a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	4aa0      	ldr	r2, [pc, #640]	@ (8006e94 <UART_SetConfig+0x56c>)
 8006c14:	4293      	cmp	r3, r2
 8006c16:	d17a      	bne.n	8006d0e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006c18:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006c1c:	2b08      	cmp	r3, #8
 8006c1e:	d824      	bhi.n	8006c6a <UART_SetConfig+0x342>
 8006c20:	a201      	add	r2, pc, #4	@ (adr r2, 8006c28 <UART_SetConfig+0x300>)
 8006c22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c26:	bf00      	nop
 8006c28:	08006c4d 	.word	0x08006c4d
 8006c2c:	08006c6b 	.word	0x08006c6b
 8006c30:	08006c55 	.word	0x08006c55
 8006c34:	08006c6b 	.word	0x08006c6b
 8006c38:	08006c5b 	.word	0x08006c5b
 8006c3c:	08006c6b 	.word	0x08006c6b
 8006c40:	08006c6b 	.word	0x08006c6b
 8006c44:	08006c6b 	.word	0x08006c6b
 8006c48:	08006c63 	.word	0x08006c63
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006c4c:	f7fe fcb0 	bl	80055b0 <HAL_RCC_GetPCLK1Freq>
 8006c50:	61f8      	str	r0, [r7, #28]
        break;
 8006c52:	e010      	b.n	8006c76 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006c54:	4b90      	ldr	r3, [pc, #576]	@ (8006e98 <UART_SetConfig+0x570>)
 8006c56:	61fb      	str	r3, [r7, #28]
        break;
 8006c58:	e00d      	b.n	8006c76 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006c5a:	f7fe fc11 	bl	8005480 <HAL_RCC_GetSysClockFreq>
 8006c5e:	61f8      	str	r0, [r7, #28]
        break;
 8006c60:	e009      	b.n	8006c76 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006c62:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006c66:	61fb      	str	r3, [r7, #28]
        break;
 8006c68:	e005      	b.n	8006c76 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8006c6a:	2300      	movs	r3, #0
 8006c6c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006c6e:	2301      	movs	r3, #1
 8006c70:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006c74:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006c76:	69fb      	ldr	r3, [r7, #28]
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	f000 80fd 	beq.w	8006e78 <UART_SetConfig+0x550>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	685a      	ldr	r2, [r3, #4]
 8006c82:	4613      	mov	r3, r2
 8006c84:	005b      	lsls	r3, r3, #1
 8006c86:	4413      	add	r3, r2
 8006c88:	69fa      	ldr	r2, [r7, #28]
 8006c8a:	429a      	cmp	r2, r3
 8006c8c:	d305      	bcc.n	8006c9a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	685b      	ldr	r3, [r3, #4]
 8006c92:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006c94:	69fa      	ldr	r2, [r7, #28]
 8006c96:	429a      	cmp	r2, r3
 8006c98:	d903      	bls.n	8006ca2 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8006c9a:	2301      	movs	r3, #1
 8006c9c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006ca0:	e0ea      	b.n	8006e78 <UART_SetConfig+0x550>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate));
 8006ca2:	69fb      	ldr	r3, [r7, #28]
 8006ca4:	2200      	movs	r2, #0
 8006ca6:	461c      	mov	r4, r3
 8006ca8:	4615      	mov	r5, r2
 8006caa:	f04f 0200 	mov.w	r2, #0
 8006cae:	f04f 0300 	mov.w	r3, #0
 8006cb2:	022b      	lsls	r3, r5, #8
 8006cb4:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8006cb8:	0222      	lsls	r2, r4, #8
 8006cba:	68f9      	ldr	r1, [r7, #12]
 8006cbc:	6849      	ldr	r1, [r1, #4]
 8006cbe:	0849      	lsrs	r1, r1, #1
 8006cc0:	2000      	movs	r0, #0
 8006cc2:	4688      	mov	r8, r1
 8006cc4:	4681      	mov	r9, r0
 8006cc6:	eb12 0a08 	adds.w	sl, r2, r8
 8006cca:	eb43 0b09 	adc.w	fp, r3, r9
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	685b      	ldr	r3, [r3, #4]
 8006cd2:	2200      	movs	r2, #0
 8006cd4:	603b      	str	r3, [r7, #0]
 8006cd6:	607a      	str	r2, [r7, #4]
 8006cd8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006cdc:	4650      	mov	r0, sl
 8006cde:	4659      	mov	r1, fp
 8006ce0:	f7f9 ffd2 	bl	8000c88 <__aeabi_uldivmod>
 8006ce4:	4602      	mov	r2, r0
 8006ce6:	460b      	mov	r3, r1
 8006ce8:	4613      	mov	r3, r2
 8006cea:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006cec:	69bb      	ldr	r3, [r7, #24]
 8006cee:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006cf2:	d308      	bcc.n	8006d06 <UART_SetConfig+0x3de>
 8006cf4:	69bb      	ldr	r3, [r7, #24]
 8006cf6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006cfa:	d204      	bcs.n	8006d06 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	69ba      	ldr	r2, [r7, #24]
 8006d02:	60da      	str	r2, [r3, #12]
 8006d04:	e0b8      	b.n	8006e78 <UART_SetConfig+0x550>
        }
        else
        {
          ret = HAL_ERROR;
 8006d06:	2301      	movs	r3, #1
 8006d08:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006d0c:	e0b4      	b.n	8006e78 <UART_SetConfig+0x550>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	69db      	ldr	r3, [r3, #28]
 8006d12:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006d16:	d15f      	bne.n	8006dd8 <UART_SetConfig+0x4b0>
  {
    switch (clocksource)
 8006d18:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006d1c:	2b08      	cmp	r3, #8
 8006d1e:	d828      	bhi.n	8006d72 <UART_SetConfig+0x44a>
 8006d20:	a201      	add	r2, pc, #4	@ (adr r2, 8006d28 <UART_SetConfig+0x400>)
 8006d22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d26:	bf00      	nop
 8006d28:	08006d4d 	.word	0x08006d4d
 8006d2c:	08006d55 	.word	0x08006d55
 8006d30:	08006d5d 	.word	0x08006d5d
 8006d34:	08006d73 	.word	0x08006d73
 8006d38:	08006d63 	.word	0x08006d63
 8006d3c:	08006d73 	.word	0x08006d73
 8006d40:	08006d73 	.word	0x08006d73
 8006d44:	08006d73 	.word	0x08006d73
 8006d48:	08006d6b 	.word	0x08006d6b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006d4c:	f7fe fc30 	bl	80055b0 <HAL_RCC_GetPCLK1Freq>
 8006d50:	61f8      	str	r0, [r7, #28]
        break;
 8006d52:	e014      	b.n	8006d7e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006d54:	f7fe fc42 	bl	80055dc <HAL_RCC_GetPCLK2Freq>
 8006d58:	61f8      	str	r0, [r7, #28]
        break;
 8006d5a:	e010      	b.n	8006d7e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006d5c:	4b4e      	ldr	r3, [pc, #312]	@ (8006e98 <UART_SetConfig+0x570>)
 8006d5e:	61fb      	str	r3, [r7, #28]
        break;
 8006d60:	e00d      	b.n	8006d7e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006d62:	f7fe fb8d 	bl	8005480 <HAL_RCC_GetSysClockFreq>
 8006d66:	61f8      	str	r0, [r7, #28]
        break;
 8006d68:	e009      	b.n	8006d7e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006d6a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006d6e:	61fb      	str	r3, [r7, #28]
        break;
 8006d70:	e005      	b.n	8006d7e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8006d72:	2300      	movs	r3, #0
 8006d74:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006d76:	2301      	movs	r3, #1
 8006d78:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006d7c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006d7e:	69fb      	ldr	r3, [r7, #28]
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d079      	beq.n	8006e78 <UART_SetConfig+0x550>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006d84:	69fb      	ldr	r3, [r7, #28]
 8006d86:	005a      	lsls	r2, r3, #1
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	685b      	ldr	r3, [r3, #4]
 8006d8c:	085b      	lsrs	r3, r3, #1
 8006d8e:	441a      	add	r2, r3
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	685b      	ldr	r3, [r3, #4]
 8006d94:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d98:	b29b      	uxth	r3, r3
 8006d9a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006d9c:	69bb      	ldr	r3, [r7, #24]
 8006d9e:	2b0f      	cmp	r3, #15
 8006da0:	d916      	bls.n	8006dd0 <UART_SetConfig+0x4a8>
 8006da2:	69bb      	ldr	r3, [r7, #24]
 8006da4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006da8:	d212      	bcs.n	8006dd0 <UART_SetConfig+0x4a8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006daa:	69bb      	ldr	r3, [r7, #24]
 8006dac:	b29b      	uxth	r3, r3
 8006dae:	f023 030f 	bic.w	r3, r3, #15
 8006db2:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006db4:	69bb      	ldr	r3, [r7, #24]
 8006db6:	085b      	lsrs	r3, r3, #1
 8006db8:	b29b      	uxth	r3, r3
 8006dba:	f003 0307 	and.w	r3, r3, #7
 8006dbe:	b29a      	uxth	r2, r3
 8006dc0:	8afb      	ldrh	r3, [r7, #22]
 8006dc2:	4313      	orrs	r3, r2
 8006dc4:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	8afa      	ldrh	r2, [r7, #22]
 8006dcc:	60da      	str	r2, [r3, #12]
 8006dce:	e053      	b.n	8006e78 <UART_SetConfig+0x550>
      }
      else
      {
        ret = HAL_ERROR;
 8006dd0:	2301      	movs	r3, #1
 8006dd2:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006dd6:	e04f      	b.n	8006e78 <UART_SetConfig+0x550>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006dd8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006ddc:	2b08      	cmp	r3, #8
 8006dde:	d828      	bhi.n	8006e32 <UART_SetConfig+0x50a>
 8006de0:	a201      	add	r2, pc, #4	@ (adr r2, 8006de8 <UART_SetConfig+0x4c0>)
 8006de2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006de6:	bf00      	nop
 8006de8:	08006e0d 	.word	0x08006e0d
 8006dec:	08006e15 	.word	0x08006e15
 8006df0:	08006e1d 	.word	0x08006e1d
 8006df4:	08006e33 	.word	0x08006e33
 8006df8:	08006e23 	.word	0x08006e23
 8006dfc:	08006e33 	.word	0x08006e33
 8006e00:	08006e33 	.word	0x08006e33
 8006e04:	08006e33 	.word	0x08006e33
 8006e08:	08006e2b 	.word	0x08006e2b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006e0c:	f7fe fbd0 	bl	80055b0 <HAL_RCC_GetPCLK1Freq>
 8006e10:	61f8      	str	r0, [r7, #28]
        break;
 8006e12:	e014      	b.n	8006e3e <UART_SetConfig+0x516>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006e14:	f7fe fbe2 	bl	80055dc <HAL_RCC_GetPCLK2Freq>
 8006e18:	61f8      	str	r0, [r7, #28]
        break;
 8006e1a:	e010      	b.n	8006e3e <UART_SetConfig+0x516>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006e1c:	4b1e      	ldr	r3, [pc, #120]	@ (8006e98 <UART_SetConfig+0x570>)
 8006e1e:	61fb      	str	r3, [r7, #28]
        break;
 8006e20:	e00d      	b.n	8006e3e <UART_SetConfig+0x516>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006e22:	f7fe fb2d 	bl	8005480 <HAL_RCC_GetSysClockFreq>
 8006e26:	61f8      	str	r0, [r7, #28]
        break;
 8006e28:	e009      	b.n	8006e3e <UART_SetConfig+0x516>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006e2a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006e2e:	61fb      	str	r3, [r7, #28]
        break;
 8006e30:	e005      	b.n	8006e3e <UART_SetConfig+0x516>
      default:
        pclk = 0U;
 8006e32:	2300      	movs	r3, #0
 8006e34:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006e36:	2301      	movs	r3, #1
 8006e38:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006e3c:	bf00      	nop
    }

    if (pclk != 0U)
 8006e3e:	69fb      	ldr	r3, [r7, #28]
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d019      	beq.n	8006e78 <UART_SetConfig+0x550>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	685b      	ldr	r3, [r3, #4]
 8006e48:	085a      	lsrs	r2, r3, #1
 8006e4a:	69fb      	ldr	r3, [r7, #28]
 8006e4c:	441a      	add	r2, r3
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	685b      	ldr	r3, [r3, #4]
 8006e52:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e56:	b29b      	uxth	r3, r3
 8006e58:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006e5a:	69bb      	ldr	r3, [r7, #24]
 8006e5c:	2b0f      	cmp	r3, #15
 8006e5e:	d908      	bls.n	8006e72 <UART_SetConfig+0x54a>
 8006e60:	69bb      	ldr	r3, [r7, #24]
 8006e62:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006e66:	d204      	bcs.n	8006e72 <UART_SetConfig+0x54a>
      {
        huart->Instance->BRR = usartdiv;
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	69ba      	ldr	r2, [r7, #24]
 8006e6e:	60da      	str	r2, [r3, #12]
 8006e70:	e002      	b.n	8006e78 <UART_SetConfig+0x550>
      }
      else
      {
        ret = HAL_ERROR;
 8006e72:	2301      	movs	r3, #1
 8006e74:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	2200      	movs	r2, #0
 8006e7c:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->TxISR = NULL;
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	2200      	movs	r2, #0
 8006e82:	665a      	str	r2, [r3, #100]	@ 0x64

  return ret;
 8006e84:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8006e88:	4618      	mov	r0, r3
 8006e8a:	3728      	adds	r7, #40	@ 0x28
 8006e8c:	46bd      	mov	sp, r7
 8006e8e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006e92:	bf00      	nop
 8006e94:	40008000 	.word	0x40008000
 8006e98:	00f42400 	.word	0x00f42400

08006e9c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006e9c:	b480      	push	{r7}
 8006e9e:	b083      	sub	sp, #12
 8006ea0:	af00      	add	r7, sp, #0
 8006ea2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ea8:	f003 0301 	and.w	r3, r3, #1
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d00a      	beq.n	8006ec6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	685b      	ldr	r3, [r3, #4]
 8006eb6:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	430a      	orrs	r2, r1
 8006ec4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006eca:	f003 0302 	and.w	r3, r3, #2
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d00a      	beq.n	8006ee8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	685b      	ldr	r3, [r3, #4]
 8006ed8:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	430a      	orrs	r2, r1
 8006ee6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006eec:	f003 0304 	and.w	r3, r3, #4
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d00a      	beq.n	8006f0a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	685b      	ldr	r3, [r3, #4]
 8006efa:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	430a      	orrs	r2, r1
 8006f08:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f0e:	f003 0308 	and.w	r3, r3, #8
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d00a      	beq.n	8006f2c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	685b      	ldr	r3, [r3, #4]
 8006f1c:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	430a      	orrs	r2, r1
 8006f2a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f30:	f003 0310 	and.w	r3, r3, #16
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d00a      	beq.n	8006f4e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	689b      	ldr	r3, [r3, #8]
 8006f3e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	430a      	orrs	r2, r1
 8006f4c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f52:	f003 0320 	and.w	r3, r3, #32
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d00a      	beq.n	8006f70 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	689b      	ldr	r3, [r3, #8]
 8006f60:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	430a      	orrs	r2, r1
 8006f6e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d01a      	beq.n	8006fb2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	685b      	ldr	r3, [r3, #4]
 8006f82:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	430a      	orrs	r2, r1
 8006f90:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f96:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006f9a:	d10a      	bne.n	8006fb2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	685b      	ldr	r3, [r3, #4]
 8006fa2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	430a      	orrs	r2, r1
 8006fb0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fb6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d00a      	beq.n	8006fd4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	685b      	ldr	r3, [r3, #4]
 8006fc4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	430a      	orrs	r2, r1
 8006fd2:	605a      	str	r2, [r3, #4]
  }
}
 8006fd4:	bf00      	nop
 8006fd6:	370c      	adds	r7, #12
 8006fd8:	46bd      	mov	sp, r7
 8006fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fde:	4770      	bx	lr

08006fe0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006fe0:	b580      	push	{r7, lr}
 8006fe2:	b086      	sub	sp, #24
 8006fe4:	af02      	add	r7, sp, #8
 8006fe6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	2200      	movs	r2, #0
 8006fec:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8006fee:	f7fb ffed 	bl	8002fcc <HAL_GetTick>
 8006ff2:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	f003 0308 	and.w	r3, r3, #8
 8006ffe:	2b08      	cmp	r3, #8
 8007000:	d10e      	bne.n	8007020 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007002:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007006:	9300      	str	r3, [sp, #0]
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	2200      	movs	r2, #0
 800700c:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007010:	6878      	ldr	r0, [r7, #4]
 8007012:	f000 f82a 	bl	800706a <UART_WaitOnFlagUntilTimeout>
 8007016:	4603      	mov	r3, r0
 8007018:	2b00      	cmp	r3, #0
 800701a:	d001      	beq.n	8007020 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800701c:	2303      	movs	r3, #3
 800701e:	e020      	b.n	8007062 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	f003 0304 	and.w	r3, r3, #4
 800702a:	2b04      	cmp	r3, #4
 800702c:	d10e      	bne.n	800704c <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800702e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007032:	9300      	str	r3, [sp, #0]
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	2200      	movs	r2, #0
 8007038:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800703c:	6878      	ldr	r0, [r7, #4]
 800703e:	f000 f814 	bl	800706a <UART_WaitOnFlagUntilTimeout>
 8007042:	4603      	mov	r3, r0
 8007044:	2b00      	cmp	r3, #0
 8007046:	d001      	beq.n	800704c <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007048:	2303      	movs	r3, #3
 800704a:	e00a      	b.n	8007062 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	2220      	movs	r2, #32
 8007050:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	2220      	movs	r2, #32
 8007056:	679a      	str	r2, [r3, #120]	@ 0x78

  __HAL_UNLOCK(huart);
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	2200      	movs	r2, #0
 800705c:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70

  return HAL_OK;
 8007060:	2300      	movs	r3, #0
}
 8007062:	4618      	mov	r0, r3
 8007064:	3710      	adds	r7, #16
 8007066:	46bd      	mov	sp, r7
 8007068:	bd80      	pop	{r7, pc}

0800706a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800706a:	b580      	push	{r7, lr}
 800706c:	b084      	sub	sp, #16
 800706e:	af00      	add	r7, sp, #0
 8007070:	60f8      	str	r0, [r7, #12]
 8007072:	60b9      	str	r1, [r7, #8]
 8007074:	603b      	str	r3, [r7, #0]
 8007076:	4613      	mov	r3, r2
 8007078:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800707a:	e05d      	b.n	8007138 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800707c:	69bb      	ldr	r3, [r7, #24]
 800707e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007082:	d059      	beq.n	8007138 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007084:	f7fb ffa2 	bl	8002fcc <HAL_GetTick>
 8007088:	4602      	mov	r2, r0
 800708a:	683b      	ldr	r3, [r7, #0]
 800708c:	1ad3      	subs	r3, r2, r3
 800708e:	69ba      	ldr	r2, [r7, #24]
 8007090:	429a      	cmp	r2, r3
 8007092:	d302      	bcc.n	800709a <UART_WaitOnFlagUntilTimeout+0x30>
 8007094:	69bb      	ldr	r3, [r7, #24]
 8007096:	2b00      	cmp	r3, #0
 8007098:	d11b      	bne.n	80070d2 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	681a      	ldr	r2, [r3, #0]
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	f422 72d0 	bic.w	r2, r2, #416	@ 0x1a0
 80070a8:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	689a      	ldr	r2, [r3, #8]
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	f022 0201 	bic.w	r2, r2, #1
 80070b8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	2220      	movs	r2, #32
 80070be:	675a      	str	r2, [r3, #116]	@ 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	2220      	movs	r2, #32
 80070c4:	679a      	str	r2, [r3, #120]	@ 0x78

        __HAL_UNLOCK(huart);
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	2200      	movs	r2, #0
 80070ca:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70

        return HAL_TIMEOUT;
 80070ce:	2303      	movs	r3, #3
 80070d0:	e042      	b.n	8007158 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	f003 0304 	and.w	r3, r3, #4
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d02b      	beq.n	8007138 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	69db      	ldr	r3, [r3, #28]
 80070e6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80070ea:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80070ee:	d123      	bne.n	8007138 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80070f8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	681a      	ldr	r2, [r3, #0]
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	f422 72d0 	bic.w	r2, r2, #416	@ 0x1a0
 8007108:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	689a      	ldr	r2, [r3, #8]
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	f022 0201 	bic.w	r2, r2, #1
 8007118:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	2220      	movs	r2, #32
 800711e:	675a      	str	r2, [r3, #116]	@ 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	2220      	movs	r2, #32
 8007124:	679a      	str	r2, [r3, #120]	@ 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	2220      	movs	r2, #32
 800712a:	67da      	str	r2, [r3, #124]	@ 0x7c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	2200      	movs	r2, #0
 8007130:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70

          return HAL_TIMEOUT;
 8007134:	2303      	movs	r3, #3
 8007136:	e00f      	b.n	8007158 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	69da      	ldr	r2, [r3, #28]
 800713e:	68bb      	ldr	r3, [r7, #8]
 8007140:	4013      	ands	r3, r2
 8007142:	68ba      	ldr	r2, [r7, #8]
 8007144:	429a      	cmp	r2, r3
 8007146:	bf0c      	ite	eq
 8007148:	2301      	moveq	r3, #1
 800714a:	2300      	movne	r3, #0
 800714c:	b2db      	uxtb	r3, r3
 800714e:	461a      	mov	r2, r3
 8007150:	79fb      	ldrb	r3, [r7, #7]
 8007152:	429a      	cmp	r2, r3
 8007154:	d092      	beq.n	800707c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007156:	2300      	movs	r3, #0
}
 8007158:	4618      	mov	r0, r3
 800715a:	3710      	adds	r7, #16
 800715c:	46bd      	mov	sp, r7
 800715e:	bd80      	pop	{r7, pc}

08007160 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007160:	b480      	push	{r7}
 8007162:	b083      	sub	sp, #12
 8007164:	af00      	add	r7, sp, #0
 8007166:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	681a      	ldr	r2, [r3, #0]
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
 8007176:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	689a      	ldr	r2, [r3, #8]
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	f022 0201 	bic.w	r2, r2, #1
 8007186:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	2220      	movs	r2, #32
 800718c:	679a      	str	r2, [r3, #120]	@ 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	2200      	movs	r2, #0
 8007192:	661a      	str	r2, [r3, #96]	@ 0x60
}
 8007194:	bf00      	nop
 8007196:	370c      	adds	r7, #12
 8007198:	46bd      	mov	sp, r7
 800719a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800719e:	4770      	bx	lr

080071a0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80071a0:	b580      	push	{r7, lr}
 80071a2:	b084      	sub	sp, #16
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071ac:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	2200      	movs	r2, #0
 80071b2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	2200      	movs	r2, #0
 80071ba:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80071be:	68f8      	ldr	r0, [r7, #12]
 80071c0:	f7ff fba8 	bl	8006914 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80071c4:	bf00      	nop
 80071c6:	3710      	adds	r7, #16
 80071c8:	46bd      	mov	sp, r7
 80071ca:	bd80      	pop	{r7, pc}

080071cc <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80071cc:	b580      	push	{r7, lr}
 80071ce:	b082      	sub	sp, #8
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	681a      	ldr	r2, [r3, #0]
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80071e2:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	2220      	movs	r2, #32
 80071e8:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	2200      	movs	r2, #0
 80071ee:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80071f0:	6878      	ldr	r0, [r7, #4]
 80071f2:	f7ff fb85 	bl	8006900 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80071f6:	bf00      	nop
 80071f8:	3708      	adds	r7, #8
 80071fa:	46bd      	mov	sp, r7
 80071fc:	bd80      	pop	{r7, pc}

080071fe <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80071fe:	b480      	push	{r7}
 8007200:	b083      	sub	sp, #12
 8007202:	af00      	add	r7, sp, #0
 8007204:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007206:	bf00      	nop
 8007208:	370c      	adds	r7, #12
 800720a:	46bd      	mov	sp, r7
 800720c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007210:	4770      	bx	lr

08007212 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007212:	b084      	sub	sp, #16
 8007214:	b580      	push	{r7, lr}
 8007216:	b084      	sub	sp, #16
 8007218:	af00      	add	r7, sp, #0
 800721a:	6078      	str	r0, [r7, #4]
 800721c:	f107 001c 	add.w	r0, r7, #28
 8007220:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007224:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007226:	2b01      	cmp	r3, #1
 8007228:	d122      	bne.n	8007270 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800722e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	68db      	ldr	r3, [r3, #12]
 800723a:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800723e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007242:	687a      	ldr	r2, [r7, #4]
 8007244:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	68db      	ldr	r3, [r3, #12]
 800724a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007252:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007254:	2b01      	cmp	r3, #1
 8007256:	d105      	bne.n	8007264 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	68db      	ldr	r3, [r3, #12]
 800725c:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8007264:	6878      	ldr	r0, [r7, #4]
 8007266:	f001 f9db 	bl	8008620 <USB_CoreReset>
 800726a:	4603      	mov	r3, r0
 800726c:	73fb      	strb	r3, [r7, #15]
 800726e:	e01a      	b.n	80072a6 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	68db      	ldr	r3, [r3, #12]
 8007274:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800727c:	6878      	ldr	r0, [r7, #4]
 800727e:	f001 f9cf 	bl	8008620 <USB_CoreReset>
 8007282:	4603      	mov	r3, r0
 8007284:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007286:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007288:	2b00      	cmp	r3, #0
 800728a:	d106      	bne.n	800729a <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007290:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	639a      	str	r2, [r3, #56]	@ 0x38
 8007298:	e005      	b.n	80072a6 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800729e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  return ret;
 80072a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80072a8:	4618      	mov	r0, r3
 80072aa:	3710      	adds	r7, #16
 80072ac:	46bd      	mov	sp, r7
 80072ae:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80072b2:	b004      	add	sp, #16
 80072b4:	4770      	bx	lr
	...

080072b8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80072b8:	b480      	push	{r7}
 80072ba:	b087      	sub	sp, #28
 80072bc:	af00      	add	r7, sp, #0
 80072be:	60f8      	str	r0, [r7, #12]
 80072c0:	60b9      	str	r1, [r7, #8]
 80072c2:	4613      	mov	r3, r2
 80072c4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80072c6:	79fb      	ldrb	r3, [r7, #7]
 80072c8:	2b02      	cmp	r3, #2
 80072ca:	d165      	bne.n	8007398 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80072cc:	68bb      	ldr	r3, [r7, #8]
 80072ce:	4a3e      	ldr	r2, [pc, #248]	@ (80073c8 <USB_SetTurnaroundTime+0x110>)
 80072d0:	4293      	cmp	r3, r2
 80072d2:	d906      	bls.n	80072e2 <USB_SetTurnaroundTime+0x2a>
 80072d4:	68bb      	ldr	r3, [r7, #8]
 80072d6:	4a3d      	ldr	r2, [pc, #244]	@ (80073cc <USB_SetTurnaroundTime+0x114>)
 80072d8:	4293      	cmp	r3, r2
 80072da:	d202      	bcs.n	80072e2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80072dc:	230f      	movs	r3, #15
 80072de:	617b      	str	r3, [r7, #20]
 80072e0:	e05c      	b.n	800739c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80072e2:	68bb      	ldr	r3, [r7, #8]
 80072e4:	4a39      	ldr	r2, [pc, #228]	@ (80073cc <USB_SetTurnaroundTime+0x114>)
 80072e6:	4293      	cmp	r3, r2
 80072e8:	d306      	bcc.n	80072f8 <USB_SetTurnaroundTime+0x40>
 80072ea:	68bb      	ldr	r3, [r7, #8]
 80072ec:	4a38      	ldr	r2, [pc, #224]	@ (80073d0 <USB_SetTurnaroundTime+0x118>)
 80072ee:	4293      	cmp	r3, r2
 80072f0:	d202      	bcs.n	80072f8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80072f2:	230e      	movs	r3, #14
 80072f4:	617b      	str	r3, [r7, #20]
 80072f6:	e051      	b.n	800739c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80072f8:	68bb      	ldr	r3, [r7, #8]
 80072fa:	4a35      	ldr	r2, [pc, #212]	@ (80073d0 <USB_SetTurnaroundTime+0x118>)
 80072fc:	4293      	cmp	r3, r2
 80072fe:	d306      	bcc.n	800730e <USB_SetTurnaroundTime+0x56>
 8007300:	68bb      	ldr	r3, [r7, #8]
 8007302:	4a34      	ldr	r2, [pc, #208]	@ (80073d4 <USB_SetTurnaroundTime+0x11c>)
 8007304:	4293      	cmp	r3, r2
 8007306:	d202      	bcs.n	800730e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8007308:	230d      	movs	r3, #13
 800730a:	617b      	str	r3, [r7, #20]
 800730c:	e046      	b.n	800739c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800730e:	68bb      	ldr	r3, [r7, #8]
 8007310:	4a30      	ldr	r2, [pc, #192]	@ (80073d4 <USB_SetTurnaroundTime+0x11c>)
 8007312:	4293      	cmp	r3, r2
 8007314:	d306      	bcc.n	8007324 <USB_SetTurnaroundTime+0x6c>
 8007316:	68bb      	ldr	r3, [r7, #8]
 8007318:	4a2f      	ldr	r2, [pc, #188]	@ (80073d8 <USB_SetTurnaroundTime+0x120>)
 800731a:	4293      	cmp	r3, r2
 800731c:	d802      	bhi.n	8007324 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800731e:	230c      	movs	r3, #12
 8007320:	617b      	str	r3, [r7, #20]
 8007322:	e03b      	b.n	800739c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8007324:	68bb      	ldr	r3, [r7, #8]
 8007326:	4a2c      	ldr	r2, [pc, #176]	@ (80073d8 <USB_SetTurnaroundTime+0x120>)
 8007328:	4293      	cmp	r3, r2
 800732a:	d906      	bls.n	800733a <USB_SetTurnaroundTime+0x82>
 800732c:	68bb      	ldr	r3, [r7, #8]
 800732e:	4a2b      	ldr	r2, [pc, #172]	@ (80073dc <USB_SetTurnaroundTime+0x124>)
 8007330:	4293      	cmp	r3, r2
 8007332:	d802      	bhi.n	800733a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8007334:	230b      	movs	r3, #11
 8007336:	617b      	str	r3, [r7, #20]
 8007338:	e030      	b.n	800739c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800733a:	68bb      	ldr	r3, [r7, #8]
 800733c:	4a27      	ldr	r2, [pc, #156]	@ (80073dc <USB_SetTurnaroundTime+0x124>)
 800733e:	4293      	cmp	r3, r2
 8007340:	d906      	bls.n	8007350 <USB_SetTurnaroundTime+0x98>
 8007342:	68bb      	ldr	r3, [r7, #8]
 8007344:	4a26      	ldr	r2, [pc, #152]	@ (80073e0 <USB_SetTurnaroundTime+0x128>)
 8007346:	4293      	cmp	r3, r2
 8007348:	d802      	bhi.n	8007350 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800734a:	230a      	movs	r3, #10
 800734c:	617b      	str	r3, [r7, #20]
 800734e:	e025      	b.n	800739c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8007350:	68bb      	ldr	r3, [r7, #8]
 8007352:	4a23      	ldr	r2, [pc, #140]	@ (80073e0 <USB_SetTurnaroundTime+0x128>)
 8007354:	4293      	cmp	r3, r2
 8007356:	d906      	bls.n	8007366 <USB_SetTurnaroundTime+0xae>
 8007358:	68bb      	ldr	r3, [r7, #8]
 800735a:	4a22      	ldr	r2, [pc, #136]	@ (80073e4 <USB_SetTurnaroundTime+0x12c>)
 800735c:	4293      	cmp	r3, r2
 800735e:	d202      	bcs.n	8007366 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8007360:	2309      	movs	r3, #9
 8007362:	617b      	str	r3, [r7, #20]
 8007364:	e01a      	b.n	800739c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8007366:	68bb      	ldr	r3, [r7, #8]
 8007368:	4a1e      	ldr	r2, [pc, #120]	@ (80073e4 <USB_SetTurnaroundTime+0x12c>)
 800736a:	4293      	cmp	r3, r2
 800736c:	d306      	bcc.n	800737c <USB_SetTurnaroundTime+0xc4>
 800736e:	68bb      	ldr	r3, [r7, #8]
 8007370:	4a1d      	ldr	r2, [pc, #116]	@ (80073e8 <USB_SetTurnaroundTime+0x130>)
 8007372:	4293      	cmp	r3, r2
 8007374:	d802      	bhi.n	800737c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8007376:	2308      	movs	r3, #8
 8007378:	617b      	str	r3, [r7, #20]
 800737a:	e00f      	b.n	800739c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800737c:	68bb      	ldr	r3, [r7, #8]
 800737e:	4a1a      	ldr	r2, [pc, #104]	@ (80073e8 <USB_SetTurnaroundTime+0x130>)
 8007380:	4293      	cmp	r3, r2
 8007382:	d906      	bls.n	8007392 <USB_SetTurnaroundTime+0xda>
 8007384:	68bb      	ldr	r3, [r7, #8]
 8007386:	4a19      	ldr	r2, [pc, #100]	@ (80073ec <USB_SetTurnaroundTime+0x134>)
 8007388:	4293      	cmp	r3, r2
 800738a:	d202      	bcs.n	8007392 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800738c:	2307      	movs	r3, #7
 800738e:	617b      	str	r3, [r7, #20]
 8007390:	e004      	b.n	800739c <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8007392:	2306      	movs	r3, #6
 8007394:	617b      	str	r3, [r7, #20]
 8007396:	e001      	b.n	800739c <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8007398:	2309      	movs	r3, #9
 800739a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	68db      	ldr	r3, [r3, #12]
 80073a0:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	68da      	ldr	r2, [r3, #12]
 80073ac:	697b      	ldr	r3, [r7, #20]
 80073ae:	029b      	lsls	r3, r3, #10
 80073b0:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 80073b4:	431a      	orrs	r2, r3
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80073ba:	2300      	movs	r3, #0
}
 80073bc:	4618      	mov	r0, r3
 80073be:	371c      	adds	r7, #28
 80073c0:	46bd      	mov	sp, r7
 80073c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c6:	4770      	bx	lr
 80073c8:	00d8acbf 	.word	0x00d8acbf
 80073cc:	00e4e1c0 	.word	0x00e4e1c0
 80073d0:	00f42400 	.word	0x00f42400
 80073d4:	01067380 	.word	0x01067380
 80073d8:	011a499f 	.word	0x011a499f
 80073dc:	01312cff 	.word	0x01312cff
 80073e0:	014ca43f 	.word	0x014ca43f
 80073e4:	016e3600 	.word	0x016e3600
 80073e8:	01a6ab1f 	.word	0x01a6ab1f
 80073ec:	01e84800 	.word	0x01e84800

080073f0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80073f0:	b480      	push	{r7}
 80073f2:	b083      	sub	sp, #12
 80073f4:	af00      	add	r7, sp, #0
 80073f6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	689b      	ldr	r3, [r3, #8]
 80073fc:	f043 0201 	orr.w	r2, r3, #1
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007404:	2300      	movs	r3, #0
}
 8007406:	4618      	mov	r0, r3
 8007408:	370c      	adds	r7, #12
 800740a:	46bd      	mov	sp, r7
 800740c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007410:	4770      	bx	lr

08007412 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007412:	b480      	push	{r7}
 8007414:	b083      	sub	sp, #12
 8007416:	af00      	add	r7, sp, #0
 8007418:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	689b      	ldr	r3, [r3, #8]
 800741e:	f023 0201 	bic.w	r2, r3, #1
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007426:	2300      	movs	r3, #0
}
 8007428:	4618      	mov	r0, r3
 800742a:	370c      	adds	r7, #12
 800742c:	46bd      	mov	sp, r7
 800742e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007432:	4770      	bx	lr

08007434 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8007434:	b580      	push	{r7, lr}
 8007436:	b082      	sub	sp, #8
 8007438:	af00      	add	r7, sp, #0
 800743a:	6078      	str	r0, [r7, #4]
 800743c:	460b      	mov	r3, r1
 800743e:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	68db      	ldr	r3, [r3, #12]
 8007444:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800744c:	78fb      	ldrb	r3, [r7, #3]
 800744e:	2b01      	cmp	r3, #1
 8007450:	d106      	bne.n	8007460 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	68db      	ldr	r3, [r3, #12]
 8007456:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	60da      	str	r2, [r3, #12]
 800745e:	e00b      	b.n	8007478 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8007460:	78fb      	ldrb	r3, [r7, #3]
 8007462:	2b00      	cmp	r3, #0
 8007464:	d106      	bne.n	8007474 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	68db      	ldr	r3, [r3, #12]
 800746a:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	60da      	str	r2, [r3, #12]
 8007472:	e001      	b.n	8007478 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8007474:	2301      	movs	r3, #1
 8007476:	e003      	b.n	8007480 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8007478:	2032      	movs	r0, #50	@ 0x32
 800747a:	f7fb fdb3 	bl	8002fe4 <HAL_Delay>

  return HAL_OK;
 800747e:	2300      	movs	r3, #0
}
 8007480:	4618      	mov	r0, r3
 8007482:	3708      	adds	r7, #8
 8007484:	46bd      	mov	sp, r7
 8007486:	bd80      	pop	{r7, pc}

08007488 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007488:	b084      	sub	sp, #16
 800748a:	b580      	push	{r7, lr}
 800748c:	b086      	sub	sp, #24
 800748e:	af00      	add	r7, sp, #0
 8007490:	6078      	str	r0, [r7, #4]
 8007492:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8007496:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800749a:	2300      	movs	r3, #0
 800749c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80074a2:	2300      	movs	r3, #0
 80074a4:	613b      	str	r3, [r7, #16]
 80074a6:	e009      	b.n	80074bc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80074a8:	687a      	ldr	r2, [r7, #4]
 80074aa:	693b      	ldr	r3, [r7, #16]
 80074ac:	3340      	adds	r3, #64	@ 0x40
 80074ae:	009b      	lsls	r3, r3, #2
 80074b0:	4413      	add	r3, r2
 80074b2:	2200      	movs	r2, #0
 80074b4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80074b6:	693b      	ldr	r3, [r7, #16]
 80074b8:	3301      	adds	r3, #1
 80074ba:	613b      	str	r3, [r7, #16]
 80074bc:	693b      	ldr	r3, [r7, #16]
 80074be:	2b0e      	cmp	r3, #14
 80074c0:	d9f2      	bls.n	80074a8 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80074c2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d11c      	bne.n	8007502 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80074ce:	685b      	ldr	r3, [r3, #4]
 80074d0:	68fa      	ldr	r2, [r7, #12]
 80074d2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80074d6:	f043 0302 	orr.w	r3, r3, #2
 80074da:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074e0:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	601a      	str	r2, [r3, #0]
 8007500:	e005      	b.n	800750e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007506:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007514:	461a      	mov	r2, r3
 8007516:	2300      	movs	r3, #0
 8007518:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007520:	4619      	mov	r1, r3
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007528:	461a      	mov	r2, r3
 800752a:	680b      	ldr	r3, [r1, #0]
 800752c:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800752e:	2103      	movs	r1, #3
 8007530:	6878      	ldr	r0, [r7, #4]
 8007532:	f000 f93d 	bl	80077b0 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007536:	2110      	movs	r1, #16
 8007538:	6878      	ldr	r0, [r7, #4]
 800753a:	f000 f8f1 	bl	8007720 <USB_FlushTxFifo>
 800753e:	4603      	mov	r3, r0
 8007540:	2b00      	cmp	r3, #0
 8007542:	d001      	beq.n	8007548 <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 8007544:	2301      	movs	r3, #1
 8007546:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007548:	6878      	ldr	r0, [r7, #4]
 800754a:	f000 f90f 	bl	800776c <USB_FlushRxFifo>
 800754e:	4603      	mov	r3, r0
 8007550:	2b00      	cmp	r3, #0
 8007552:	d001      	beq.n	8007558 <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 8007554:	2301      	movs	r3, #1
 8007556:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800755e:	461a      	mov	r2, r3
 8007560:	2300      	movs	r3, #0
 8007562:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800756a:	461a      	mov	r2, r3
 800756c:	2300      	movs	r3, #0
 800756e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007576:	461a      	mov	r2, r3
 8007578:	2300      	movs	r3, #0
 800757a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800757c:	2300      	movs	r3, #0
 800757e:	613b      	str	r3, [r7, #16]
 8007580:	e043      	b.n	800760a <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007582:	693b      	ldr	r3, [r7, #16]
 8007584:	015a      	lsls	r2, r3, #5
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	4413      	add	r3, r2
 800758a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007594:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007598:	d118      	bne.n	80075cc <USB_DevInit+0x144>
    {
      if (i == 0U)
 800759a:	693b      	ldr	r3, [r7, #16]
 800759c:	2b00      	cmp	r3, #0
 800759e:	d10a      	bne.n	80075b6 <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80075a0:	693b      	ldr	r3, [r7, #16]
 80075a2:	015a      	lsls	r2, r3, #5
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	4413      	add	r3, r2
 80075a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80075ac:	461a      	mov	r2, r3
 80075ae:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80075b2:	6013      	str	r3, [r2, #0]
 80075b4:	e013      	b.n	80075de <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80075b6:	693b      	ldr	r3, [r7, #16]
 80075b8:	015a      	lsls	r2, r3, #5
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	4413      	add	r3, r2
 80075be:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80075c2:	461a      	mov	r2, r3
 80075c4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80075c8:	6013      	str	r3, [r2, #0]
 80075ca:	e008      	b.n	80075de <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80075cc:	693b      	ldr	r3, [r7, #16]
 80075ce:	015a      	lsls	r2, r3, #5
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	4413      	add	r3, r2
 80075d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80075d8:	461a      	mov	r2, r3
 80075da:	2300      	movs	r3, #0
 80075dc:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80075de:	693b      	ldr	r3, [r7, #16]
 80075e0:	015a      	lsls	r2, r3, #5
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	4413      	add	r3, r2
 80075e6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80075ea:	461a      	mov	r2, r3
 80075ec:	2300      	movs	r3, #0
 80075ee:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80075f0:	693b      	ldr	r3, [r7, #16]
 80075f2:	015a      	lsls	r2, r3, #5
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	4413      	add	r3, r2
 80075f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80075fc:	461a      	mov	r2, r3
 80075fe:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007602:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007604:	693b      	ldr	r3, [r7, #16]
 8007606:	3301      	adds	r3, #1
 8007608:	613b      	str	r3, [r7, #16]
 800760a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800760c:	693a      	ldr	r2, [r7, #16]
 800760e:	429a      	cmp	r2, r3
 8007610:	d3b7      	bcc.n	8007582 <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007612:	2300      	movs	r3, #0
 8007614:	613b      	str	r3, [r7, #16]
 8007616:	e043      	b.n	80076a0 <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007618:	693b      	ldr	r3, [r7, #16]
 800761a:	015a      	lsls	r2, r3, #5
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	4413      	add	r3, r2
 8007620:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800762a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800762e:	d118      	bne.n	8007662 <USB_DevInit+0x1da>
    {
      if (i == 0U)
 8007630:	693b      	ldr	r3, [r7, #16]
 8007632:	2b00      	cmp	r3, #0
 8007634:	d10a      	bne.n	800764c <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007636:	693b      	ldr	r3, [r7, #16]
 8007638:	015a      	lsls	r2, r3, #5
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	4413      	add	r3, r2
 800763e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007642:	461a      	mov	r2, r3
 8007644:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8007648:	6013      	str	r3, [r2, #0]
 800764a:	e013      	b.n	8007674 <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800764c:	693b      	ldr	r3, [r7, #16]
 800764e:	015a      	lsls	r2, r3, #5
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	4413      	add	r3, r2
 8007654:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007658:	461a      	mov	r2, r3
 800765a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800765e:	6013      	str	r3, [r2, #0]
 8007660:	e008      	b.n	8007674 <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007662:	693b      	ldr	r3, [r7, #16]
 8007664:	015a      	lsls	r2, r3, #5
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	4413      	add	r3, r2
 800766a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800766e:	461a      	mov	r2, r3
 8007670:	2300      	movs	r3, #0
 8007672:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007674:	693b      	ldr	r3, [r7, #16]
 8007676:	015a      	lsls	r2, r3, #5
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	4413      	add	r3, r2
 800767c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007680:	461a      	mov	r2, r3
 8007682:	2300      	movs	r3, #0
 8007684:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007686:	693b      	ldr	r3, [r7, #16]
 8007688:	015a      	lsls	r2, r3, #5
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	4413      	add	r3, r2
 800768e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007692:	461a      	mov	r2, r3
 8007694:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007698:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800769a:	693b      	ldr	r3, [r7, #16]
 800769c:	3301      	adds	r3, #1
 800769e:	613b      	str	r3, [r7, #16]
 80076a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076a2:	693a      	ldr	r2, [r7, #16]
 80076a4:	429a      	cmp	r2, r3
 80076a6:	d3b7      	bcc.n	8007618 <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80076ae:	691b      	ldr	r3, [r3, #16]
 80076b0:	68fa      	ldr	r2, [r7, #12]
 80076b2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80076b6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80076ba:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	2200      	movs	r2, #0
 80076c0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80076c8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	699b      	ldr	r3, [r3, #24]
 80076ce:	f043 0210 	orr.w	r2, r3, #16
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	699a      	ldr	r2, [r3, #24]
 80076da:	4b10      	ldr	r3, [pc, #64]	@ (800771c <USB_DevInit+0x294>)
 80076dc:	4313      	orrs	r3, r2
 80076de:	687a      	ldr	r2, [r7, #4]
 80076e0:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80076e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d005      	beq.n	80076f4 <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	699b      	ldr	r3, [r3, #24]
 80076ec:	f043 0208 	orr.w	r2, r3, #8
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80076f4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80076f6:	2b01      	cmp	r3, #1
 80076f8:	d107      	bne.n	800770a <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	699b      	ldr	r3, [r3, #24]
 80076fe:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007702:	f043 0304 	orr.w	r3, r3, #4
 8007706:	687a      	ldr	r2, [r7, #4]
 8007708:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800770a:	7dfb      	ldrb	r3, [r7, #23]
}
 800770c:	4618      	mov	r0, r3
 800770e:	3718      	adds	r7, #24
 8007710:	46bd      	mov	sp, r7
 8007712:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007716:	b004      	add	sp, #16
 8007718:	4770      	bx	lr
 800771a:	bf00      	nop
 800771c:	803c3800 	.word	0x803c3800

08007720 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007720:	b480      	push	{r7}
 8007722:	b085      	sub	sp, #20
 8007724:	af00      	add	r7, sp, #0
 8007726:	6078      	str	r0, [r7, #4]
 8007728:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800772a:	2300      	movs	r3, #0
 800772c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800772e:	683b      	ldr	r3, [r7, #0]
 8007730:	019b      	lsls	r3, r3, #6
 8007732:	f043 0220 	orr.w	r2, r3, #32
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	3301      	adds	r3, #1
 800773e:	60fb      	str	r3, [r7, #12]
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	4a09      	ldr	r2, [pc, #36]	@ (8007768 <USB_FlushTxFifo+0x48>)
 8007744:	4293      	cmp	r3, r2
 8007746:	d901      	bls.n	800774c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8007748:	2303      	movs	r3, #3
 800774a:	e006      	b.n	800775a <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	691b      	ldr	r3, [r3, #16]
 8007750:	f003 0320 	and.w	r3, r3, #32
 8007754:	2b20      	cmp	r3, #32
 8007756:	d0f0      	beq.n	800773a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8007758:	2300      	movs	r3, #0
}
 800775a:	4618      	mov	r0, r3
 800775c:	3714      	adds	r7, #20
 800775e:	46bd      	mov	sp, r7
 8007760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007764:	4770      	bx	lr
 8007766:	bf00      	nop
 8007768:	00030d40 	.word	0x00030d40

0800776c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800776c:	b480      	push	{r7}
 800776e:	b085      	sub	sp, #20
 8007770:	af00      	add	r7, sp, #0
 8007772:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8007774:	2300      	movs	r3, #0
 8007776:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	2210      	movs	r2, #16
 800777c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	3301      	adds	r3, #1
 8007782:	60fb      	str	r3, [r7, #12]
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	4a09      	ldr	r2, [pc, #36]	@ (80077ac <USB_FlushRxFifo+0x40>)
 8007788:	4293      	cmp	r3, r2
 800778a:	d901      	bls.n	8007790 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800778c:	2303      	movs	r3, #3
 800778e:	e006      	b.n	800779e <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	691b      	ldr	r3, [r3, #16]
 8007794:	f003 0310 	and.w	r3, r3, #16
 8007798:	2b10      	cmp	r3, #16
 800779a:	d0f0      	beq.n	800777e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800779c:	2300      	movs	r3, #0
}
 800779e:	4618      	mov	r0, r3
 80077a0:	3714      	adds	r7, #20
 80077a2:	46bd      	mov	sp, r7
 80077a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a8:	4770      	bx	lr
 80077aa:	bf00      	nop
 80077ac:	00030d40 	.word	0x00030d40

080077b0 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80077b0:	b480      	push	{r7}
 80077b2:	b085      	sub	sp, #20
 80077b4:	af00      	add	r7, sp, #0
 80077b6:	6078      	str	r0, [r7, #4]
 80077b8:	460b      	mov	r3, r1
 80077ba:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80077c6:	681a      	ldr	r2, [r3, #0]
 80077c8:	78fb      	ldrb	r3, [r7, #3]
 80077ca:	68f9      	ldr	r1, [r7, #12]
 80077cc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80077d0:	4313      	orrs	r3, r2
 80077d2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80077d4:	2300      	movs	r3, #0
}
 80077d6:	4618      	mov	r0, r3
 80077d8:	3714      	adds	r7, #20
 80077da:	46bd      	mov	sp, r7
 80077dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e0:	4770      	bx	lr

080077e2 <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80077e2:	b480      	push	{r7}
 80077e4:	b087      	sub	sp, #28
 80077e6:	af00      	add	r7, sp, #0
 80077e8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80077ee:	693b      	ldr	r3, [r7, #16]
 80077f0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80077f4:	689b      	ldr	r3, [r3, #8]
 80077f6:	f003 0306 	and.w	r3, r3, #6
 80077fa:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	2b02      	cmp	r3, #2
 8007800:	d002      	beq.n	8007808 <USB_GetDevSpeed+0x26>
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	2b06      	cmp	r3, #6
 8007806:	d102      	bne.n	800780e <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8007808:	2302      	movs	r3, #2
 800780a:	75fb      	strb	r3, [r7, #23]
 800780c:	e001      	b.n	8007812 <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 800780e:	230f      	movs	r3, #15
 8007810:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8007812:	7dfb      	ldrb	r3, [r7, #23]
}
 8007814:	4618      	mov	r0, r3
 8007816:	371c      	adds	r7, #28
 8007818:	46bd      	mov	sp, r7
 800781a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800781e:	4770      	bx	lr

08007820 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007820:	b480      	push	{r7}
 8007822:	b085      	sub	sp, #20
 8007824:	af00      	add	r7, sp, #0
 8007826:	6078      	str	r0, [r7, #4]
 8007828:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800782e:	683b      	ldr	r3, [r7, #0]
 8007830:	781b      	ldrb	r3, [r3, #0]
 8007832:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007834:	683b      	ldr	r3, [r7, #0]
 8007836:	785b      	ldrb	r3, [r3, #1]
 8007838:	2b01      	cmp	r3, #1
 800783a:	d13a      	bne.n	80078b2 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007842:	69da      	ldr	r2, [r3, #28]
 8007844:	683b      	ldr	r3, [r7, #0]
 8007846:	781b      	ldrb	r3, [r3, #0]
 8007848:	f003 030f 	and.w	r3, r3, #15
 800784c:	2101      	movs	r1, #1
 800784e:	fa01 f303 	lsl.w	r3, r1, r3
 8007852:	b29b      	uxth	r3, r3
 8007854:	68f9      	ldr	r1, [r7, #12]
 8007856:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800785a:	4313      	orrs	r3, r2
 800785c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800785e:	68bb      	ldr	r3, [r7, #8]
 8007860:	015a      	lsls	r2, r3, #5
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	4413      	add	r3, r2
 8007866:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007870:	2b00      	cmp	r3, #0
 8007872:	d155      	bne.n	8007920 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007874:	68bb      	ldr	r3, [r7, #8]
 8007876:	015a      	lsls	r2, r3, #5
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	4413      	add	r3, r2
 800787c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007880:	681a      	ldr	r2, [r3, #0]
 8007882:	683b      	ldr	r3, [r7, #0]
 8007884:	689b      	ldr	r3, [r3, #8]
 8007886:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800788a:	683b      	ldr	r3, [r7, #0]
 800788c:	78db      	ldrb	r3, [r3, #3]
 800788e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007890:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007892:	68bb      	ldr	r3, [r7, #8]
 8007894:	059b      	lsls	r3, r3, #22
 8007896:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007898:	4313      	orrs	r3, r2
 800789a:	68ba      	ldr	r2, [r7, #8]
 800789c:	0151      	lsls	r1, r2, #5
 800789e:	68fa      	ldr	r2, [r7, #12]
 80078a0:	440a      	add	r2, r1
 80078a2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80078a6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80078aa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80078ae:	6013      	str	r3, [r2, #0]
 80078b0:	e036      	b.n	8007920 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80078b8:	69da      	ldr	r2, [r3, #28]
 80078ba:	683b      	ldr	r3, [r7, #0]
 80078bc:	781b      	ldrb	r3, [r3, #0]
 80078be:	f003 030f 	and.w	r3, r3, #15
 80078c2:	2101      	movs	r1, #1
 80078c4:	fa01 f303 	lsl.w	r3, r1, r3
 80078c8:	041b      	lsls	r3, r3, #16
 80078ca:	68f9      	ldr	r1, [r7, #12]
 80078cc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80078d0:	4313      	orrs	r3, r2
 80078d2:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80078d4:	68bb      	ldr	r3, [r7, #8]
 80078d6:	015a      	lsls	r2, r3, #5
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	4413      	add	r3, r2
 80078dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d11a      	bne.n	8007920 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80078ea:	68bb      	ldr	r3, [r7, #8]
 80078ec:	015a      	lsls	r2, r3, #5
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	4413      	add	r3, r2
 80078f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80078f6:	681a      	ldr	r2, [r3, #0]
 80078f8:	683b      	ldr	r3, [r7, #0]
 80078fa:	689b      	ldr	r3, [r3, #8]
 80078fc:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8007900:	683b      	ldr	r3, [r7, #0]
 8007902:	78db      	ldrb	r3, [r3, #3]
 8007904:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007906:	430b      	orrs	r3, r1
 8007908:	4313      	orrs	r3, r2
 800790a:	68ba      	ldr	r2, [r7, #8]
 800790c:	0151      	lsls	r1, r2, #5
 800790e:	68fa      	ldr	r2, [r7, #12]
 8007910:	440a      	add	r2, r1
 8007912:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007916:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800791a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800791e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8007920:	2300      	movs	r3, #0
}
 8007922:	4618      	mov	r0, r3
 8007924:	3714      	adds	r7, #20
 8007926:	46bd      	mov	sp, r7
 8007928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800792c:	4770      	bx	lr
	...

08007930 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007930:	b480      	push	{r7}
 8007932:	b085      	sub	sp, #20
 8007934:	af00      	add	r7, sp, #0
 8007936:	6078      	str	r0, [r7, #4]
 8007938:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800793e:	683b      	ldr	r3, [r7, #0]
 8007940:	781b      	ldrb	r3, [r3, #0]
 8007942:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8007944:	683b      	ldr	r3, [r7, #0]
 8007946:	785b      	ldrb	r3, [r3, #1]
 8007948:	2b01      	cmp	r3, #1
 800794a:	d161      	bne.n	8007a10 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800794c:	68bb      	ldr	r3, [r7, #8]
 800794e:	015a      	lsls	r2, r3, #5
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	4413      	add	r3, r2
 8007954:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800795e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007962:	d11f      	bne.n	80079a4 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8007964:	68bb      	ldr	r3, [r7, #8]
 8007966:	015a      	lsls	r2, r3, #5
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	4413      	add	r3, r2
 800796c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	68ba      	ldr	r2, [r7, #8]
 8007974:	0151      	lsls	r1, r2, #5
 8007976:	68fa      	ldr	r2, [r7, #12]
 8007978:	440a      	add	r2, r1
 800797a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800797e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007982:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8007984:	68bb      	ldr	r3, [r7, #8]
 8007986:	015a      	lsls	r2, r3, #5
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	4413      	add	r3, r2
 800798c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	68ba      	ldr	r2, [r7, #8]
 8007994:	0151      	lsls	r1, r2, #5
 8007996:	68fa      	ldr	r2, [r7, #12]
 8007998:	440a      	add	r2, r1
 800799a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800799e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80079a2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80079aa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80079ac:	683b      	ldr	r3, [r7, #0]
 80079ae:	781b      	ldrb	r3, [r3, #0]
 80079b0:	f003 030f 	and.w	r3, r3, #15
 80079b4:	2101      	movs	r1, #1
 80079b6:	fa01 f303 	lsl.w	r3, r1, r3
 80079ba:	b29b      	uxth	r3, r3
 80079bc:	43db      	mvns	r3, r3
 80079be:	68f9      	ldr	r1, [r7, #12]
 80079c0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80079c4:	4013      	ands	r3, r2
 80079c6:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80079ce:	69da      	ldr	r2, [r3, #28]
 80079d0:	683b      	ldr	r3, [r7, #0]
 80079d2:	781b      	ldrb	r3, [r3, #0]
 80079d4:	f003 030f 	and.w	r3, r3, #15
 80079d8:	2101      	movs	r1, #1
 80079da:	fa01 f303 	lsl.w	r3, r1, r3
 80079de:	b29b      	uxth	r3, r3
 80079e0:	43db      	mvns	r3, r3
 80079e2:	68f9      	ldr	r1, [r7, #12]
 80079e4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80079e8:	4013      	ands	r3, r2
 80079ea:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80079ec:	68bb      	ldr	r3, [r7, #8]
 80079ee:	015a      	lsls	r2, r3, #5
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	4413      	add	r3, r2
 80079f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80079f8:	681a      	ldr	r2, [r3, #0]
 80079fa:	68bb      	ldr	r3, [r7, #8]
 80079fc:	0159      	lsls	r1, r3, #5
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	440b      	add	r3, r1
 8007a02:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007a06:	4619      	mov	r1, r3
 8007a08:	4b35      	ldr	r3, [pc, #212]	@ (8007ae0 <USB_DeactivateEndpoint+0x1b0>)
 8007a0a:	4013      	ands	r3, r2
 8007a0c:	600b      	str	r3, [r1, #0]
 8007a0e:	e060      	b.n	8007ad2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007a10:	68bb      	ldr	r3, [r7, #8]
 8007a12:	015a      	lsls	r2, r3, #5
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	4413      	add	r3, r2
 8007a18:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007a22:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007a26:	d11f      	bne.n	8007a68 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007a28:	68bb      	ldr	r3, [r7, #8]
 8007a2a:	015a      	lsls	r2, r3, #5
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	4413      	add	r3, r2
 8007a30:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	68ba      	ldr	r2, [r7, #8]
 8007a38:	0151      	lsls	r1, r2, #5
 8007a3a:	68fa      	ldr	r2, [r7, #12]
 8007a3c:	440a      	add	r2, r1
 8007a3e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007a42:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007a46:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8007a48:	68bb      	ldr	r3, [r7, #8]
 8007a4a:	015a      	lsls	r2, r3, #5
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	4413      	add	r3, r2
 8007a50:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	68ba      	ldr	r2, [r7, #8]
 8007a58:	0151      	lsls	r1, r2, #5
 8007a5a:	68fa      	ldr	r2, [r7, #12]
 8007a5c:	440a      	add	r2, r1
 8007a5e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007a62:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007a66:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007a6e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007a70:	683b      	ldr	r3, [r7, #0]
 8007a72:	781b      	ldrb	r3, [r3, #0]
 8007a74:	f003 030f 	and.w	r3, r3, #15
 8007a78:	2101      	movs	r1, #1
 8007a7a:	fa01 f303 	lsl.w	r3, r1, r3
 8007a7e:	041b      	lsls	r3, r3, #16
 8007a80:	43db      	mvns	r3, r3
 8007a82:	68f9      	ldr	r1, [r7, #12]
 8007a84:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007a88:	4013      	ands	r3, r2
 8007a8a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007a92:	69da      	ldr	r2, [r3, #28]
 8007a94:	683b      	ldr	r3, [r7, #0]
 8007a96:	781b      	ldrb	r3, [r3, #0]
 8007a98:	f003 030f 	and.w	r3, r3, #15
 8007a9c:	2101      	movs	r1, #1
 8007a9e:	fa01 f303 	lsl.w	r3, r1, r3
 8007aa2:	041b      	lsls	r3, r3, #16
 8007aa4:	43db      	mvns	r3, r3
 8007aa6:	68f9      	ldr	r1, [r7, #12]
 8007aa8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007aac:	4013      	ands	r3, r2
 8007aae:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8007ab0:	68bb      	ldr	r3, [r7, #8]
 8007ab2:	015a      	lsls	r2, r3, #5
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	4413      	add	r3, r2
 8007ab8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007abc:	681a      	ldr	r2, [r3, #0]
 8007abe:	68bb      	ldr	r3, [r7, #8]
 8007ac0:	0159      	lsls	r1, r3, #5
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	440b      	add	r3, r1
 8007ac6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007aca:	4619      	mov	r1, r3
 8007acc:	4b05      	ldr	r3, [pc, #20]	@ (8007ae4 <USB_DeactivateEndpoint+0x1b4>)
 8007ace:	4013      	ands	r3, r2
 8007ad0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8007ad2:	2300      	movs	r3, #0
}
 8007ad4:	4618      	mov	r0, r3
 8007ad6:	3714      	adds	r7, #20
 8007ad8:	46bd      	mov	sp, r7
 8007ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ade:	4770      	bx	lr
 8007ae0:	ec337800 	.word	0xec337800
 8007ae4:	eff37800 	.word	0xeff37800

08007ae8 <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007ae8:	b580      	push	{r7, lr}
 8007aea:	b086      	sub	sp, #24
 8007aec:	af00      	add	r7, sp, #0
 8007aee:	6078      	str	r0, [r7, #4]
 8007af0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8007af6:	683b      	ldr	r3, [r7, #0]
 8007af8:	781b      	ldrb	r3, [r3, #0]
 8007afa:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007afc:	683b      	ldr	r3, [r7, #0]
 8007afe:	785b      	ldrb	r3, [r3, #1]
 8007b00:	2b01      	cmp	r3, #1
 8007b02:	f040 810a 	bne.w	8007d1a <USB_EPStartXfer+0x232>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8007b06:	683b      	ldr	r3, [r7, #0]
 8007b08:	695b      	ldr	r3, [r3, #20]
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d132      	bne.n	8007b74 <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007b0e:	693b      	ldr	r3, [r7, #16]
 8007b10:	015a      	lsls	r2, r3, #5
 8007b12:	697b      	ldr	r3, [r7, #20]
 8007b14:	4413      	add	r3, r2
 8007b16:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007b1a:	691b      	ldr	r3, [r3, #16]
 8007b1c:	693a      	ldr	r2, [r7, #16]
 8007b1e:	0151      	lsls	r1, r2, #5
 8007b20:	697a      	ldr	r2, [r7, #20]
 8007b22:	440a      	add	r2, r1
 8007b24:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007b28:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8007b2c:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8007b30:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007b32:	693b      	ldr	r3, [r7, #16]
 8007b34:	015a      	lsls	r2, r3, #5
 8007b36:	697b      	ldr	r3, [r7, #20]
 8007b38:	4413      	add	r3, r2
 8007b3a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007b3e:	691b      	ldr	r3, [r3, #16]
 8007b40:	693a      	ldr	r2, [r7, #16]
 8007b42:	0151      	lsls	r1, r2, #5
 8007b44:	697a      	ldr	r2, [r7, #20]
 8007b46:	440a      	add	r2, r1
 8007b48:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007b4c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007b50:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007b52:	693b      	ldr	r3, [r7, #16]
 8007b54:	015a      	lsls	r2, r3, #5
 8007b56:	697b      	ldr	r3, [r7, #20]
 8007b58:	4413      	add	r3, r2
 8007b5a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007b5e:	691b      	ldr	r3, [r3, #16]
 8007b60:	693a      	ldr	r2, [r7, #16]
 8007b62:	0151      	lsls	r1, r2, #5
 8007b64:	697a      	ldr	r2, [r7, #20]
 8007b66:	440a      	add	r2, r1
 8007b68:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007b6c:	0cdb      	lsrs	r3, r3, #19
 8007b6e:	04db      	lsls	r3, r3, #19
 8007b70:	6113      	str	r3, [r2, #16]
 8007b72:	e074      	b.n	8007c5e <USB_EPStartXfer+0x176>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007b74:	693b      	ldr	r3, [r7, #16]
 8007b76:	015a      	lsls	r2, r3, #5
 8007b78:	697b      	ldr	r3, [r7, #20]
 8007b7a:	4413      	add	r3, r2
 8007b7c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007b80:	691b      	ldr	r3, [r3, #16]
 8007b82:	693a      	ldr	r2, [r7, #16]
 8007b84:	0151      	lsls	r1, r2, #5
 8007b86:	697a      	ldr	r2, [r7, #20]
 8007b88:	440a      	add	r2, r1
 8007b8a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007b8e:	0cdb      	lsrs	r3, r3, #19
 8007b90:	04db      	lsls	r3, r3, #19
 8007b92:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007b94:	693b      	ldr	r3, [r7, #16]
 8007b96:	015a      	lsls	r2, r3, #5
 8007b98:	697b      	ldr	r3, [r7, #20]
 8007b9a:	4413      	add	r3, r2
 8007b9c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007ba0:	691b      	ldr	r3, [r3, #16]
 8007ba2:	693a      	ldr	r2, [r7, #16]
 8007ba4:	0151      	lsls	r1, r2, #5
 8007ba6:	697a      	ldr	r2, [r7, #20]
 8007ba8:	440a      	add	r2, r1
 8007baa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007bae:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8007bb2:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8007bb6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8007bb8:	693b      	ldr	r3, [r7, #16]
 8007bba:	015a      	lsls	r2, r3, #5
 8007bbc:	697b      	ldr	r3, [r7, #20]
 8007bbe:	4413      	add	r3, r2
 8007bc0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007bc4:	691a      	ldr	r2, [r3, #16]
 8007bc6:	683b      	ldr	r3, [r7, #0]
 8007bc8:	6959      	ldr	r1, [r3, #20]
 8007bca:	683b      	ldr	r3, [r7, #0]
 8007bcc:	689b      	ldr	r3, [r3, #8]
 8007bce:	440b      	add	r3, r1
 8007bd0:	1e59      	subs	r1, r3, #1
 8007bd2:	683b      	ldr	r3, [r7, #0]
 8007bd4:	689b      	ldr	r3, [r3, #8]
 8007bd6:	fbb1 f3f3 	udiv	r3, r1, r3
 8007bda:	04d9      	lsls	r1, r3, #19
 8007bdc:	4baf      	ldr	r3, [pc, #700]	@ (8007e9c <USB_EPStartXfer+0x3b4>)
 8007bde:	400b      	ands	r3, r1
 8007be0:	6939      	ldr	r1, [r7, #16]
 8007be2:	0148      	lsls	r0, r1, #5
 8007be4:	6979      	ldr	r1, [r7, #20]
 8007be6:	4401      	add	r1, r0
 8007be8:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8007bec:	4313      	orrs	r3, r2
 8007bee:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007bf0:	693b      	ldr	r3, [r7, #16]
 8007bf2:	015a      	lsls	r2, r3, #5
 8007bf4:	697b      	ldr	r3, [r7, #20]
 8007bf6:	4413      	add	r3, r2
 8007bf8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007bfc:	691a      	ldr	r2, [r3, #16]
 8007bfe:	683b      	ldr	r3, [r7, #0]
 8007c00:	695b      	ldr	r3, [r3, #20]
 8007c02:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007c06:	6939      	ldr	r1, [r7, #16]
 8007c08:	0148      	lsls	r0, r1, #5
 8007c0a:	6979      	ldr	r1, [r7, #20]
 8007c0c:	4401      	add	r1, r0
 8007c0e:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8007c12:	4313      	orrs	r3, r2
 8007c14:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8007c16:	683b      	ldr	r3, [r7, #0]
 8007c18:	78db      	ldrb	r3, [r3, #3]
 8007c1a:	2b01      	cmp	r3, #1
 8007c1c:	d11f      	bne.n	8007c5e <USB_EPStartXfer+0x176>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8007c1e:	693b      	ldr	r3, [r7, #16]
 8007c20:	015a      	lsls	r2, r3, #5
 8007c22:	697b      	ldr	r3, [r7, #20]
 8007c24:	4413      	add	r3, r2
 8007c26:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007c2a:	691b      	ldr	r3, [r3, #16]
 8007c2c:	693a      	ldr	r2, [r7, #16]
 8007c2e:	0151      	lsls	r1, r2, #5
 8007c30:	697a      	ldr	r2, [r7, #20]
 8007c32:	440a      	add	r2, r1
 8007c34:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007c38:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8007c3c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8007c3e:	693b      	ldr	r3, [r7, #16]
 8007c40:	015a      	lsls	r2, r3, #5
 8007c42:	697b      	ldr	r3, [r7, #20]
 8007c44:	4413      	add	r3, r2
 8007c46:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007c4a:	691b      	ldr	r3, [r3, #16]
 8007c4c:	693a      	ldr	r2, [r7, #16]
 8007c4e:	0151      	lsls	r1, r2, #5
 8007c50:	697a      	ldr	r2, [r7, #20]
 8007c52:	440a      	add	r2, r1
 8007c54:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007c58:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007c5c:	6113      	str	r3, [r2, #16]
      }
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007c5e:	693b      	ldr	r3, [r7, #16]
 8007c60:	015a      	lsls	r2, r3, #5
 8007c62:	697b      	ldr	r3, [r7, #20]
 8007c64:	4413      	add	r3, r2
 8007c66:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	693a      	ldr	r2, [r7, #16]
 8007c6e:	0151      	lsls	r1, r2, #5
 8007c70:	697a      	ldr	r2, [r7, #20]
 8007c72:	440a      	add	r2, r1
 8007c74:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007c78:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8007c7c:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 8007c7e:	683b      	ldr	r3, [r7, #0]
 8007c80:	78db      	ldrb	r3, [r3, #3]
 8007c82:	2b01      	cmp	r3, #1
 8007c84:	d015      	beq.n	8007cb2 <USB_EPStartXfer+0x1ca>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8007c86:	683b      	ldr	r3, [r7, #0]
 8007c88:	695b      	ldr	r3, [r3, #20]
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	f000 8100 	beq.w	8007e90 <USB_EPStartXfer+0x3a8>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007c90:	697b      	ldr	r3, [r7, #20]
 8007c92:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007c96:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007c98:	683b      	ldr	r3, [r7, #0]
 8007c9a:	781b      	ldrb	r3, [r3, #0]
 8007c9c:	f003 030f 	and.w	r3, r3, #15
 8007ca0:	2101      	movs	r1, #1
 8007ca2:	fa01 f303 	lsl.w	r3, r1, r3
 8007ca6:	6979      	ldr	r1, [r7, #20]
 8007ca8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007cac:	4313      	orrs	r3, r2
 8007cae:	634b      	str	r3, [r1, #52]	@ 0x34
 8007cb0:	e0ee      	b.n	8007e90 <USB_EPStartXfer+0x3a8>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007cb2:	697b      	ldr	r3, [r7, #20]
 8007cb4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007cb8:	689b      	ldr	r3, [r3, #8]
 8007cba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d110      	bne.n	8007ce4 <USB_EPStartXfer+0x1fc>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007cc2:	693b      	ldr	r3, [r7, #16]
 8007cc4:	015a      	lsls	r2, r3, #5
 8007cc6:	697b      	ldr	r3, [r7, #20]
 8007cc8:	4413      	add	r3, r2
 8007cca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	693a      	ldr	r2, [r7, #16]
 8007cd2:	0151      	lsls	r1, r2, #5
 8007cd4:	697a      	ldr	r2, [r7, #20]
 8007cd6:	440a      	add	r2, r1
 8007cd8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007cdc:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007ce0:	6013      	str	r3, [r2, #0]
 8007ce2:	e00f      	b.n	8007d04 <USB_EPStartXfer+0x21c>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007ce4:	693b      	ldr	r3, [r7, #16]
 8007ce6:	015a      	lsls	r2, r3, #5
 8007ce8:	697b      	ldr	r3, [r7, #20]
 8007cea:	4413      	add	r3, r2
 8007cec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	693a      	ldr	r2, [r7, #16]
 8007cf4:	0151      	lsls	r1, r2, #5
 8007cf6:	697a      	ldr	r2, [r7, #20]
 8007cf8:	440a      	add	r2, r1
 8007cfa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007cfe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007d02:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 8007d04:	683b      	ldr	r3, [r7, #0]
 8007d06:	68d9      	ldr	r1, [r3, #12]
 8007d08:	683b      	ldr	r3, [r7, #0]
 8007d0a:	781a      	ldrb	r2, [r3, #0]
 8007d0c:	683b      	ldr	r3, [r7, #0]
 8007d0e:	695b      	ldr	r3, [r3, #20]
 8007d10:	b29b      	uxth	r3, r3
 8007d12:	6878      	ldr	r0, [r7, #4]
 8007d14:	f000 f9e2 	bl	80080dc <USB_WritePacket>
 8007d18:	e0ba      	b.n	8007e90 <USB_EPStartXfer+0x3a8>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007d1a:	693b      	ldr	r3, [r7, #16]
 8007d1c:	015a      	lsls	r2, r3, #5
 8007d1e:	697b      	ldr	r3, [r7, #20]
 8007d20:	4413      	add	r3, r2
 8007d22:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007d26:	691b      	ldr	r3, [r3, #16]
 8007d28:	693a      	ldr	r2, [r7, #16]
 8007d2a:	0151      	lsls	r1, r2, #5
 8007d2c:	697a      	ldr	r2, [r7, #20]
 8007d2e:	440a      	add	r2, r1
 8007d30:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007d34:	0cdb      	lsrs	r3, r3, #19
 8007d36:	04db      	lsls	r3, r3, #19
 8007d38:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007d3a:	693b      	ldr	r3, [r7, #16]
 8007d3c:	015a      	lsls	r2, r3, #5
 8007d3e:	697b      	ldr	r3, [r7, #20]
 8007d40:	4413      	add	r3, r2
 8007d42:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007d46:	691b      	ldr	r3, [r3, #16]
 8007d48:	693a      	ldr	r2, [r7, #16]
 8007d4a:	0151      	lsls	r1, r2, #5
 8007d4c:	697a      	ldr	r2, [r7, #20]
 8007d4e:	440a      	add	r2, r1
 8007d50:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007d54:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8007d58:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8007d5c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8007d5e:	683b      	ldr	r3, [r7, #0]
 8007d60:	695b      	ldr	r3, [r3, #20]
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d123      	bne.n	8007dae <USB_EPStartXfer+0x2c6>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8007d66:	693b      	ldr	r3, [r7, #16]
 8007d68:	015a      	lsls	r2, r3, #5
 8007d6a:	697b      	ldr	r3, [r7, #20]
 8007d6c:	4413      	add	r3, r2
 8007d6e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007d72:	691a      	ldr	r2, [r3, #16]
 8007d74:	683b      	ldr	r3, [r7, #0]
 8007d76:	689b      	ldr	r3, [r3, #8]
 8007d78:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007d7c:	6939      	ldr	r1, [r7, #16]
 8007d7e:	0148      	lsls	r0, r1, #5
 8007d80:	6979      	ldr	r1, [r7, #20]
 8007d82:	4401      	add	r1, r0
 8007d84:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8007d88:	4313      	orrs	r3, r2
 8007d8a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007d8c:	693b      	ldr	r3, [r7, #16]
 8007d8e:	015a      	lsls	r2, r3, #5
 8007d90:	697b      	ldr	r3, [r7, #20]
 8007d92:	4413      	add	r3, r2
 8007d94:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007d98:	691b      	ldr	r3, [r3, #16]
 8007d9a:	693a      	ldr	r2, [r7, #16]
 8007d9c:	0151      	lsls	r1, r2, #5
 8007d9e:	697a      	ldr	r2, [r7, #20]
 8007da0:	440a      	add	r2, r1
 8007da2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007da6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007daa:	6113      	str	r3, [r2, #16]
 8007dac:	e033      	b.n	8007e16 <USB_EPStartXfer+0x32e>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007dae:	683b      	ldr	r3, [r7, #0]
 8007db0:	695a      	ldr	r2, [r3, #20]
 8007db2:	683b      	ldr	r3, [r7, #0]
 8007db4:	689b      	ldr	r3, [r3, #8]
 8007db6:	4413      	add	r3, r2
 8007db8:	1e5a      	subs	r2, r3, #1
 8007dba:	683b      	ldr	r3, [r7, #0]
 8007dbc:	689b      	ldr	r3, [r3, #8]
 8007dbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8007dc2:	81fb      	strh	r3, [r7, #14]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8007dc4:	693b      	ldr	r3, [r7, #16]
 8007dc6:	015a      	lsls	r2, r3, #5
 8007dc8:	697b      	ldr	r3, [r7, #20]
 8007dca:	4413      	add	r3, r2
 8007dcc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007dd0:	691a      	ldr	r2, [r3, #16]
 8007dd2:	89fb      	ldrh	r3, [r7, #14]
 8007dd4:	04d9      	lsls	r1, r3, #19
 8007dd6:	4b31      	ldr	r3, [pc, #196]	@ (8007e9c <USB_EPStartXfer+0x3b4>)
 8007dd8:	400b      	ands	r3, r1
 8007dda:	6939      	ldr	r1, [r7, #16]
 8007ddc:	0148      	lsls	r0, r1, #5
 8007dde:	6979      	ldr	r1, [r7, #20]
 8007de0:	4401      	add	r1, r0
 8007de2:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8007de6:	4313      	orrs	r3, r2
 8007de8:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8007dea:	693b      	ldr	r3, [r7, #16]
 8007dec:	015a      	lsls	r2, r3, #5
 8007dee:	697b      	ldr	r3, [r7, #20]
 8007df0:	4413      	add	r3, r2
 8007df2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007df6:	691a      	ldr	r2, [r3, #16]
 8007df8:	683b      	ldr	r3, [r7, #0]
 8007dfa:	689b      	ldr	r3, [r3, #8]
 8007dfc:	89f9      	ldrh	r1, [r7, #14]
 8007dfe:	fb01 f303 	mul.w	r3, r1, r3
 8007e02:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007e06:	6939      	ldr	r1, [r7, #16]
 8007e08:	0148      	lsls	r0, r1, #5
 8007e0a:	6979      	ldr	r1, [r7, #20]
 8007e0c:	4401      	add	r1, r0
 8007e0e:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8007e12:	4313      	orrs	r3, r2
 8007e14:	610b      	str	r3, [r1, #16]
    }

    if (ep->type == EP_TYPE_ISOC)
 8007e16:	683b      	ldr	r3, [r7, #0]
 8007e18:	78db      	ldrb	r3, [r3, #3]
 8007e1a:	2b01      	cmp	r3, #1
 8007e1c:	d128      	bne.n	8007e70 <USB_EPStartXfer+0x388>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007e1e:	697b      	ldr	r3, [r7, #20]
 8007e20:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007e24:	689b      	ldr	r3, [r3, #8]
 8007e26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d110      	bne.n	8007e50 <USB_EPStartXfer+0x368>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8007e2e:	693b      	ldr	r3, [r7, #16]
 8007e30:	015a      	lsls	r2, r3, #5
 8007e32:	697b      	ldr	r3, [r7, #20]
 8007e34:	4413      	add	r3, r2
 8007e36:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	693a      	ldr	r2, [r7, #16]
 8007e3e:	0151      	lsls	r1, r2, #5
 8007e40:	697a      	ldr	r2, [r7, #20]
 8007e42:	440a      	add	r2, r1
 8007e44:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007e48:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007e4c:	6013      	str	r3, [r2, #0]
 8007e4e:	e00f      	b.n	8007e70 <USB_EPStartXfer+0x388>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8007e50:	693b      	ldr	r3, [r7, #16]
 8007e52:	015a      	lsls	r2, r3, #5
 8007e54:	697b      	ldr	r3, [r7, #20]
 8007e56:	4413      	add	r3, r2
 8007e58:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	693a      	ldr	r2, [r7, #16]
 8007e60:	0151      	lsls	r1, r2, #5
 8007e62:	697a      	ldr	r2, [r7, #20]
 8007e64:	440a      	add	r2, r1
 8007e66:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007e6a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007e6e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007e70:	693b      	ldr	r3, [r7, #16]
 8007e72:	015a      	lsls	r2, r3, #5
 8007e74:	697b      	ldr	r3, [r7, #20]
 8007e76:	4413      	add	r3, r2
 8007e78:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	693a      	ldr	r2, [r7, #16]
 8007e80:	0151      	lsls	r1, r2, #5
 8007e82:	697a      	ldr	r2, [r7, #20]
 8007e84:	440a      	add	r2, r1
 8007e86:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007e8a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8007e8e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007e90:	2300      	movs	r3, #0
}
 8007e92:	4618      	mov	r0, r3
 8007e94:	3718      	adds	r7, #24
 8007e96:	46bd      	mov	sp, r7
 8007e98:	bd80      	pop	{r7, pc}
 8007e9a:	bf00      	nop
 8007e9c:	1ff80000 	.word	0x1ff80000

08007ea0 <USB_EP0StartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007ea0:	b480      	push	{r7}
 8007ea2:	b085      	sub	sp, #20
 8007ea4:	af00      	add	r7, sp, #0
 8007ea6:	6078      	str	r0, [r7, #4]
 8007ea8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007eae:	683b      	ldr	r3, [r7, #0]
 8007eb0:	781b      	ldrb	r3, [r3, #0]
 8007eb2:	60bb      	str	r3, [r7, #8]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007eb4:	683b      	ldr	r3, [r7, #0]
 8007eb6:	785b      	ldrb	r3, [r3, #1]
 8007eb8:	2b01      	cmp	r3, #1
 8007eba:	f040 80ab 	bne.w	8008014 <USB_EP0StartXfer+0x174>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8007ebe:	683b      	ldr	r3, [r7, #0]
 8007ec0:	695b      	ldr	r3, [r3, #20]
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d132      	bne.n	8007f2c <USB_EP0StartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007ec6:	68bb      	ldr	r3, [r7, #8]
 8007ec8:	015a      	lsls	r2, r3, #5
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	4413      	add	r3, r2
 8007ece:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007ed2:	691b      	ldr	r3, [r3, #16]
 8007ed4:	68ba      	ldr	r2, [r7, #8]
 8007ed6:	0151      	lsls	r1, r2, #5
 8007ed8:	68fa      	ldr	r2, [r7, #12]
 8007eda:	440a      	add	r2, r1
 8007edc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007ee0:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8007ee4:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8007ee8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007eea:	68bb      	ldr	r3, [r7, #8]
 8007eec:	015a      	lsls	r2, r3, #5
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	4413      	add	r3, r2
 8007ef2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007ef6:	691b      	ldr	r3, [r3, #16]
 8007ef8:	68ba      	ldr	r2, [r7, #8]
 8007efa:	0151      	lsls	r1, r2, #5
 8007efc:	68fa      	ldr	r2, [r7, #12]
 8007efe:	440a      	add	r2, r1
 8007f00:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007f04:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007f08:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007f0a:	68bb      	ldr	r3, [r7, #8]
 8007f0c:	015a      	lsls	r2, r3, #5
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	4413      	add	r3, r2
 8007f12:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007f16:	691b      	ldr	r3, [r3, #16]
 8007f18:	68ba      	ldr	r2, [r7, #8]
 8007f1a:	0151      	lsls	r1, r2, #5
 8007f1c:	68fa      	ldr	r2, [r7, #12]
 8007f1e:	440a      	add	r2, r1
 8007f20:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007f24:	0cdb      	lsrs	r3, r3, #19
 8007f26:	04db      	lsls	r3, r3, #19
 8007f28:	6113      	str	r3, [r2, #16]
 8007f2a:	e04e      	b.n	8007fca <USB_EP0StartXfer+0x12a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007f2c:	68bb      	ldr	r3, [r7, #8]
 8007f2e:	015a      	lsls	r2, r3, #5
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	4413      	add	r3, r2
 8007f34:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007f38:	691b      	ldr	r3, [r3, #16]
 8007f3a:	68ba      	ldr	r2, [r7, #8]
 8007f3c:	0151      	lsls	r1, r2, #5
 8007f3e:	68fa      	ldr	r2, [r7, #12]
 8007f40:	440a      	add	r2, r1
 8007f42:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007f46:	0cdb      	lsrs	r3, r3, #19
 8007f48:	04db      	lsls	r3, r3, #19
 8007f4a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007f4c:	68bb      	ldr	r3, [r7, #8]
 8007f4e:	015a      	lsls	r2, r3, #5
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	4413      	add	r3, r2
 8007f54:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007f58:	691b      	ldr	r3, [r3, #16]
 8007f5a:	68ba      	ldr	r2, [r7, #8]
 8007f5c:	0151      	lsls	r1, r2, #5
 8007f5e:	68fa      	ldr	r2, [r7, #12]
 8007f60:	440a      	add	r2, r1
 8007f62:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007f66:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8007f6a:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8007f6e:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8007f70:	683b      	ldr	r3, [r7, #0]
 8007f72:	695a      	ldr	r2, [r3, #20]
 8007f74:	683b      	ldr	r3, [r7, #0]
 8007f76:	689b      	ldr	r3, [r3, #8]
 8007f78:	429a      	cmp	r2, r3
 8007f7a:	d903      	bls.n	8007f84 <USB_EP0StartXfer+0xe4>
      {
        ep->xfer_len = ep->maxpacket;
 8007f7c:	683b      	ldr	r3, [r7, #0]
 8007f7e:	689a      	ldr	r2, [r3, #8]
 8007f80:	683b      	ldr	r3, [r7, #0]
 8007f82:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007f84:	68bb      	ldr	r3, [r7, #8]
 8007f86:	015a      	lsls	r2, r3, #5
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	4413      	add	r3, r2
 8007f8c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007f90:	691b      	ldr	r3, [r3, #16]
 8007f92:	68ba      	ldr	r2, [r7, #8]
 8007f94:	0151      	lsls	r1, r2, #5
 8007f96:	68fa      	ldr	r2, [r7, #12]
 8007f98:	440a      	add	r2, r1
 8007f9a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007f9e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007fa2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007fa4:	68bb      	ldr	r3, [r7, #8]
 8007fa6:	015a      	lsls	r2, r3, #5
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	4413      	add	r3, r2
 8007fac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007fb0:	691a      	ldr	r2, [r3, #16]
 8007fb2:	683b      	ldr	r3, [r7, #0]
 8007fb4:	695b      	ldr	r3, [r3, #20]
 8007fb6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007fba:	68b9      	ldr	r1, [r7, #8]
 8007fbc:	0148      	lsls	r0, r1, #5
 8007fbe:	68f9      	ldr	r1, [r7, #12]
 8007fc0:	4401      	add	r1, r0
 8007fc2:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8007fc6:	4313      	orrs	r3, r2
 8007fc8:	610b      	str	r3, [r1, #16]
    }

    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007fca:	68bb      	ldr	r3, [r7, #8]
 8007fcc:	015a      	lsls	r2, r3, #5
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	4413      	add	r3, r2
 8007fd2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	68ba      	ldr	r2, [r7, #8]
 8007fda:	0151      	lsls	r1, r2, #5
 8007fdc:	68fa      	ldr	r2, [r7, #12]
 8007fde:	440a      	add	r2, r1
 8007fe0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007fe4:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8007fe8:	6013      	str	r3, [r2, #0]

    /* Enable the Tx FIFO Empty Interrupt for this EP */
    if (ep->xfer_len > 0U)
 8007fea:	683b      	ldr	r3, [r7, #0]
 8007fec:	695b      	ldr	r3, [r3, #20]
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d06d      	beq.n	80080ce <USB_EP0StartXfer+0x22e>
    {
      USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007ff8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007ffa:	683b      	ldr	r3, [r7, #0]
 8007ffc:	781b      	ldrb	r3, [r3, #0]
 8007ffe:	f003 030f 	and.w	r3, r3, #15
 8008002:	2101      	movs	r1, #1
 8008004:	fa01 f303 	lsl.w	r3, r1, r3
 8008008:	68f9      	ldr	r1, [r7, #12]
 800800a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800800e:	4313      	orrs	r3, r2
 8008010:	634b      	str	r3, [r1, #52]	@ 0x34
 8008012:	e05c      	b.n	80080ce <USB_EP0StartXfer+0x22e>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8008014:	68bb      	ldr	r3, [r7, #8]
 8008016:	015a      	lsls	r2, r3, #5
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	4413      	add	r3, r2
 800801c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008020:	691b      	ldr	r3, [r3, #16]
 8008022:	68ba      	ldr	r2, [r7, #8]
 8008024:	0151      	lsls	r1, r2, #5
 8008026:	68fa      	ldr	r2, [r7, #12]
 8008028:	440a      	add	r2, r1
 800802a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800802e:	0cdb      	lsrs	r3, r3, #19
 8008030:	04db      	lsls	r3, r3, #19
 8008032:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8008034:	68bb      	ldr	r3, [r7, #8]
 8008036:	015a      	lsls	r2, r3, #5
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	4413      	add	r3, r2
 800803c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008040:	691b      	ldr	r3, [r3, #16]
 8008042:	68ba      	ldr	r2, [r7, #8]
 8008044:	0151      	lsls	r1, r2, #5
 8008046:	68fa      	ldr	r2, [r7, #12]
 8008048:	440a      	add	r2, r1
 800804a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800804e:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8008052:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8008056:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8008058:	683b      	ldr	r3, [r7, #0]
 800805a:	695b      	ldr	r3, [r3, #20]
 800805c:	2b00      	cmp	r3, #0
 800805e:	d003      	beq.n	8008068 <USB_EP0StartXfer+0x1c8>
    {
      ep->xfer_len = ep->maxpacket;
 8008060:	683b      	ldr	r3, [r7, #0]
 8008062:	689a      	ldr	r2, [r3, #8]
 8008064:	683b      	ldr	r3, [r7, #0]
 8008066:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008068:	68bb      	ldr	r3, [r7, #8]
 800806a:	015a      	lsls	r2, r3, #5
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	4413      	add	r3, r2
 8008070:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008074:	691b      	ldr	r3, [r3, #16]
 8008076:	68ba      	ldr	r2, [r7, #8]
 8008078:	0151      	lsls	r1, r2, #5
 800807a:	68fa      	ldr	r2, [r7, #12]
 800807c:	440a      	add	r2, r1
 800807e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008082:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008086:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8008088:	68bb      	ldr	r3, [r7, #8]
 800808a:	015a      	lsls	r2, r3, #5
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	4413      	add	r3, r2
 8008090:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008094:	691a      	ldr	r2, [r3, #16]
 8008096:	683b      	ldr	r3, [r7, #0]
 8008098:	689b      	ldr	r3, [r3, #8]
 800809a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800809e:	68b9      	ldr	r1, [r7, #8]
 80080a0:	0148      	lsls	r0, r1, #5
 80080a2:	68f9      	ldr	r1, [r7, #12]
 80080a4:	4401      	add	r1, r0
 80080a6:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80080aa:	4313      	orrs	r3, r2
 80080ac:	610b      	str	r3, [r1, #16]

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80080ae:	68bb      	ldr	r3, [r7, #8]
 80080b0:	015a      	lsls	r2, r3, #5
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	4413      	add	r3, r2
 80080b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	68ba      	ldr	r2, [r7, #8]
 80080be:	0151      	lsls	r1, r2, #5
 80080c0:	68fa      	ldr	r2, [r7, #12]
 80080c2:	440a      	add	r2, r1
 80080c4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80080c8:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80080cc:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80080ce:	2300      	movs	r3, #0
}
 80080d0:	4618      	mov	r0, r3
 80080d2:	3714      	adds	r7, #20
 80080d4:	46bd      	mov	sp, r7
 80080d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080da:	4770      	bx	lr

080080dc <USB_WritePacket>:
  * @param  ch_ep_num  endpoint or host channel number
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len)
{
 80080dc:	b480      	push	{r7}
 80080de:	b089      	sub	sp, #36	@ 0x24
 80080e0:	af00      	add	r7, sp, #0
 80080e2:	60f8      	str	r0, [r7, #12]
 80080e4:	60b9      	str	r1, [r7, #8]
 80080e6:	4611      	mov	r1, r2
 80080e8:	461a      	mov	r2, r3
 80080ea:	460b      	mov	r3, r1
 80080ec:	71fb      	strb	r3, [r7, #7]
 80080ee:	4613      	mov	r3, r2
 80080f0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 80080f6:	68bb      	ldr	r3, [r7, #8]
 80080f8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  count32b = ((uint32_t)len + 3U) / 4U;
 80080fa:	88bb      	ldrh	r3, [r7, #4]
 80080fc:	3303      	adds	r3, #3
 80080fe:	089b      	lsrs	r3, r3, #2
 8008100:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 8008102:	2300      	movs	r3, #0
 8008104:	61bb      	str	r3, [r7, #24]
 8008106:	e00f      	b.n	8008128 <USB_WritePacket+0x4c>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8008108:	79fb      	ldrb	r3, [r7, #7]
 800810a:	031a      	lsls	r2, r3, #12
 800810c:	697b      	ldr	r3, [r7, #20]
 800810e:	4413      	add	r3, r2
 8008110:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008114:	461a      	mov	r2, r3
 8008116:	69fb      	ldr	r3, [r7, #28]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	6013      	str	r3, [r2, #0]
    pSrc++;
 800811c:	69fb      	ldr	r3, [r7, #28]
 800811e:	3304      	adds	r3, #4
 8008120:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8008122:	69bb      	ldr	r3, [r7, #24]
 8008124:	3301      	adds	r3, #1
 8008126:	61bb      	str	r3, [r7, #24]
 8008128:	69ba      	ldr	r2, [r7, #24]
 800812a:	693b      	ldr	r3, [r7, #16]
 800812c:	429a      	cmp	r2, r3
 800812e:	d3eb      	bcc.n	8008108 <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 8008130:	2300      	movs	r3, #0
}
 8008132:	4618      	mov	r0, r3
 8008134:	3724      	adds	r7, #36	@ 0x24
 8008136:	46bd      	mov	sp, r7
 8008138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800813c:	4770      	bx	lr

0800813e <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800813e:	b480      	push	{r7}
 8008140:	b089      	sub	sp, #36	@ 0x24
 8008142:	af00      	add	r7, sp, #0
 8008144:	60f8      	str	r0, [r7, #12]
 8008146:	60b9      	str	r1, [r7, #8]
 8008148:	4613      	mov	r3, r2
 800814a:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8008150:	68bb      	ldr	r3, [r7, #8]
 8008152:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8008154:	88fb      	ldrh	r3, [r7, #6]
 8008156:	3303      	adds	r3, #3
 8008158:	089b      	lsrs	r3, r3, #2
 800815a:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800815c:	2300      	movs	r3, #0
 800815e:	61bb      	str	r3, [r7, #24]
 8008160:	e00b      	b.n	800817a <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008162:	697b      	ldr	r3, [r7, #20]
 8008164:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008168:	681a      	ldr	r2, [r3, #0]
 800816a:	69fb      	ldr	r3, [r7, #28]
 800816c:	601a      	str	r2, [r3, #0]
    pDest++;
 800816e:	69fb      	ldr	r3, [r7, #28]
 8008170:	3304      	adds	r3, #4
 8008172:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8008174:	69bb      	ldr	r3, [r7, #24]
 8008176:	3301      	adds	r3, #1
 8008178:	61bb      	str	r3, [r7, #24]
 800817a:	69ba      	ldr	r2, [r7, #24]
 800817c:	693b      	ldr	r3, [r7, #16]
 800817e:	429a      	cmp	r2, r3
 8008180:	d3ef      	bcc.n	8008162 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8008182:	69fb      	ldr	r3, [r7, #28]
}
 8008184:	4618      	mov	r0, r3
 8008186:	3724      	adds	r7, #36	@ 0x24
 8008188:	46bd      	mov	sp, r7
 800818a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800818e:	4770      	bx	lr

08008190 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008190:	b480      	push	{r7}
 8008192:	b085      	sub	sp, #20
 8008194:	af00      	add	r7, sp, #0
 8008196:	6078      	str	r0, [r7, #4]
 8008198:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800819e:	683b      	ldr	r3, [r7, #0]
 80081a0:	781b      	ldrb	r3, [r3, #0]
 80081a2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80081a4:	683b      	ldr	r3, [r7, #0]
 80081a6:	785b      	ldrb	r3, [r3, #1]
 80081a8:	2b01      	cmp	r3, #1
 80081aa:	d12c      	bne.n	8008206 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80081ac:	68bb      	ldr	r3, [r7, #8]
 80081ae:	015a      	lsls	r2, r3, #5
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	4413      	add	r3, r2
 80081b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	db12      	blt.n	80081e4 <USB_EPSetStall+0x54>
 80081be:	68bb      	ldr	r3, [r7, #8]
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d00f      	beq.n	80081e4 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80081c4:	68bb      	ldr	r3, [r7, #8]
 80081c6:	015a      	lsls	r2, r3, #5
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	4413      	add	r3, r2
 80081cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	68ba      	ldr	r2, [r7, #8]
 80081d4:	0151      	lsls	r1, r2, #5
 80081d6:	68fa      	ldr	r2, [r7, #12]
 80081d8:	440a      	add	r2, r1
 80081da:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80081de:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80081e2:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80081e4:	68bb      	ldr	r3, [r7, #8]
 80081e6:	015a      	lsls	r2, r3, #5
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	4413      	add	r3, r2
 80081ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	68ba      	ldr	r2, [r7, #8]
 80081f4:	0151      	lsls	r1, r2, #5
 80081f6:	68fa      	ldr	r2, [r7, #12]
 80081f8:	440a      	add	r2, r1
 80081fa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80081fe:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8008202:	6013      	str	r3, [r2, #0]
 8008204:	e02b      	b.n	800825e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008206:	68bb      	ldr	r3, [r7, #8]
 8008208:	015a      	lsls	r2, r3, #5
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	4413      	add	r3, r2
 800820e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	2b00      	cmp	r3, #0
 8008216:	db12      	blt.n	800823e <USB_EPSetStall+0xae>
 8008218:	68bb      	ldr	r3, [r7, #8]
 800821a:	2b00      	cmp	r3, #0
 800821c:	d00f      	beq.n	800823e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800821e:	68bb      	ldr	r3, [r7, #8]
 8008220:	015a      	lsls	r2, r3, #5
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	4413      	add	r3, r2
 8008226:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	68ba      	ldr	r2, [r7, #8]
 800822e:	0151      	lsls	r1, r2, #5
 8008230:	68fa      	ldr	r2, [r7, #12]
 8008232:	440a      	add	r2, r1
 8008234:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008238:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800823c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800823e:	68bb      	ldr	r3, [r7, #8]
 8008240:	015a      	lsls	r2, r3, #5
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	4413      	add	r3, r2
 8008246:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	68ba      	ldr	r2, [r7, #8]
 800824e:	0151      	lsls	r1, r2, #5
 8008250:	68fa      	ldr	r2, [r7, #12]
 8008252:	440a      	add	r2, r1
 8008254:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008258:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800825c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800825e:	2300      	movs	r3, #0
}
 8008260:	4618      	mov	r0, r3
 8008262:	3714      	adds	r7, #20
 8008264:	46bd      	mov	sp, r7
 8008266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800826a:	4770      	bx	lr

0800826c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800826c:	b480      	push	{r7}
 800826e:	b085      	sub	sp, #20
 8008270:	af00      	add	r7, sp, #0
 8008272:	6078      	str	r0, [r7, #4]
 8008274:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800827a:	683b      	ldr	r3, [r7, #0]
 800827c:	781b      	ldrb	r3, [r3, #0]
 800827e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008280:	683b      	ldr	r3, [r7, #0]
 8008282:	785b      	ldrb	r3, [r3, #1]
 8008284:	2b01      	cmp	r3, #1
 8008286:	d128      	bne.n	80082da <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008288:	68bb      	ldr	r3, [r7, #8]
 800828a:	015a      	lsls	r2, r3, #5
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	4413      	add	r3, r2
 8008290:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	68ba      	ldr	r2, [r7, #8]
 8008298:	0151      	lsls	r1, r2, #5
 800829a:	68fa      	ldr	r2, [r7, #12]
 800829c:	440a      	add	r2, r1
 800829e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80082a2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80082a6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80082a8:	683b      	ldr	r3, [r7, #0]
 80082aa:	78db      	ldrb	r3, [r3, #3]
 80082ac:	2b03      	cmp	r3, #3
 80082ae:	d003      	beq.n	80082b8 <USB_EPClearStall+0x4c>
 80082b0:	683b      	ldr	r3, [r7, #0]
 80082b2:	78db      	ldrb	r3, [r3, #3]
 80082b4:	2b02      	cmp	r3, #2
 80082b6:	d138      	bne.n	800832a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80082b8:	68bb      	ldr	r3, [r7, #8]
 80082ba:	015a      	lsls	r2, r3, #5
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	4413      	add	r3, r2
 80082c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	68ba      	ldr	r2, [r7, #8]
 80082c8:	0151      	lsls	r1, r2, #5
 80082ca:	68fa      	ldr	r2, [r7, #12]
 80082cc:	440a      	add	r2, r1
 80082ce:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80082d2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80082d6:	6013      	str	r3, [r2, #0]
 80082d8:	e027      	b.n	800832a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80082da:	68bb      	ldr	r3, [r7, #8]
 80082dc:	015a      	lsls	r2, r3, #5
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	4413      	add	r3, r2
 80082e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	68ba      	ldr	r2, [r7, #8]
 80082ea:	0151      	lsls	r1, r2, #5
 80082ec:	68fa      	ldr	r2, [r7, #12]
 80082ee:	440a      	add	r2, r1
 80082f0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80082f4:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80082f8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80082fa:	683b      	ldr	r3, [r7, #0]
 80082fc:	78db      	ldrb	r3, [r3, #3]
 80082fe:	2b03      	cmp	r3, #3
 8008300:	d003      	beq.n	800830a <USB_EPClearStall+0x9e>
 8008302:	683b      	ldr	r3, [r7, #0]
 8008304:	78db      	ldrb	r3, [r3, #3]
 8008306:	2b02      	cmp	r3, #2
 8008308:	d10f      	bne.n	800832a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800830a:	68bb      	ldr	r3, [r7, #8]
 800830c:	015a      	lsls	r2, r3, #5
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	4413      	add	r3, r2
 8008312:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	68ba      	ldr	r2, [r7, #8]
 800831a:	0151      	lsls	r1, r2, #5
 800831c:	68fa      	ldr	r2, [r7, #12]
 800831e:	440a      	add	r2, r1
 8008320:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008324:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008328:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800832a:	2300      	movs	r3, #0
}
 800832c:	4618      	mov	r0, r3
 800832e:	3714      	adds	r7, #20
 8008330:	46bd      	mov	sp, r7
 8008332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008336:	4770      	bx	lr

08008338 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8008338:	b480      	push	{r7}
 800833a:	b085      	sub	sp, #20
 800833c:	af00      	add	r7, sp, #0
 800833e:	6078      	str	r0, [r7, #4]
 8008340:	460b      	mov	r3, r1
 8008342:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	68fa      	ldr	r2, [r7, #12]
 8008352:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008356:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800835a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008362:	681a      	ldr	r2, [r3, #0]
 8008364:	78fb      	ldrb	r3, [r7, #3]
 8008366:	011b      	lsls	r3, r3, #4
 8008368:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800836c:	68f9      	ldr	r1, [r7, #12]
 800836e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008372:	4313      	orrs	r3, r2
 8008374:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8008376:	2300      	movs	r3, #0
}
 8008378:	4618      	mov	r0, r3
 800837a:	3714      	adds	r7, #20
 800837c:	46bd      	mov	sp, r7
 800837e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008382:	4770      	bx	lr

08008384 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008384:	b480      	push	{r7}
 8008386:	b085      	sub	sp, #20
 8008388:	af00      	add	r7, sp, #0
 800838a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	68fa      	ldr	r2, [r7, #12]
 800839a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800839e:	f023 0303 	bic.w	r3, r3, #3
 80083a2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80083aa:	685b      	ldr	r3, [r3, #4]
 80083ac:	68fa      	ldr	r2, [r7, #12]
 80083ae:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80083b2:	f023 0302 	bic.w	r3, r3, #2
 80083b6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80083b8:	2300      	movs	r3, #0
}
 80083ba:	4618      	mov	r0, r3
 80083bc:	3714      	adds	r7, #20
 80083be:	46bd      	mov	sp, r7
 80083c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c4:	4770      	bx	lr

080083c6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80083c6:	b480      	push	{r7}
 80083c8:	b085      	sub	sp, #20
 80083ca:	af00      	add	r7, sp, #0
 80083cc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	68fa      	ldr	r2, [r7, #12]
 80083dc:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80083e0:	f023 0303 	bic.w	r3, r3, #3
 80083e4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80083ec:	685b      	ldr	r3, [r3, #4]
 80083ee:	68fa      	ldr	r2, [r7, #12]
 80083f0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80083f4:	f043 0302 	orr.w	r3, r3, #2
 80083f8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80083fa:	2300      	movs	r3, #0
}
 80083fc:	4618      	mov	r0, r3
 80083fe:	3714      	adds	r7, #20
 8008400:	46bd      	mov	sp, r7
 8008402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008406:	4770      	bx	lr

08008408 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8008408:	b480      	push	{r7}
 800840a:	b085      	sub	sp, #20
 800840c:	af00      	add	r7, sp, #0
 800840e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	695b      	ldr	r3, [r3, #20]
 8008414:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	699b      	ldr	r3, [r3, #24]
 800841a:	68fa      	ldr	r2, [r7, #12]
 800841c:	4013      	ands	r3, r2
 800841e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008420:	68fb      	ldr	r3, [r7, #12]
}
 8008422:	4618      	mov	r0, r3
 8008424:	3714      	adds	r7, #20
 8008426:	46bd      	mov	sp, r7
 8008428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800842c:	4770      	bx	lr

0800842e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800842e:	b480      	push	{r7}
 8008430:	b085      	sub	sp, #20
 8008432:	af00      	add	r7, sp, #0
 8008434:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008440:	699b      	ldr	r3, [r3, #24]
 8008442:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800844a:	69db      	ldr	r3, [r3, #28]
 800844c:	68ba      	ldr	r2, [r7, #8]
 800844e:	4013      	ands	r3, r2
 8008450:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8008452:	68bb      	ldr	r3, [r7, #8]
 8008454:	0c1b      	lsrs	r3, r3, #16
}
 8008456:	4618      	mov	r0, r3
 8008458:	3714      	adds	r7, #20
 800845a:	46bd      	mov	sp, r7
 800845c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008460:	4770      	bx	lr

08008462 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8008462:	b480      	push	{r7}
 8008464:	b085      	sub	sp, #20
 8008466:	af00      	add	r7, sp, #0
 8008468:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008474:	699b      	ldr	r3, [r3, #24]
 8008476:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800847e:	69db      	ldr	r3, [r3, #28]
 8008480:	68ba      	ldr	r2, [r7, #8]
 8008482:	4013      	ands	r3, r2
 8008484:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8008486:	68bb      	ldr	r3, [r7, #8]
 8008488:	b29b      	uxth	r3, r3
}
 800848a:	4618      	mov	r0, r3
 800848c:	3714      	adds	r7, #20
 800848e:	46bd      	mov	sp, r7
 8008490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008494:	4770      	bx	lr

08008496 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008496:	b480      	push	{r7}
 8008498:	b085      	sub	sp, #20
 800849a:	af00      	add	r7, sp, #0
 800849c:	6078      	str	r0, [r7, #4]
 800849e:	460b      	mov	r3, r1
 80084a0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80084a6:	78fb      	ldrb	r3, [r7, #3]
 80084a8:	015a      	lsls	r2, r3, #5
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	4413      	add	r3, r2
 80084ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80084b2:	689b      	ldr	r3, [r3, #8]
 80084b4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80084bc:	695b      	ldr	r3, [r3, #20]
 80084be:	68ba      	ldr	r2, [r7, #8]
 80084c0:	4013      	ands	r3, r2
 80084c2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80084c4:	68bb      	ldr	r3, [r7, #8]
}
 80084c6:	4618      	mov	r0, r3
 80084c8:	3714      	adds	r7, #20
 80084ca:	46bd      	mov	sp, r7
 80084cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d0:	4770      	bx	lr

080084d2 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80084d2:	b480      	push	{r7}
 80084d4:	b087      	sub	sp, #28
 80084d6:	af00      	add	r7, sp, #0
 80084d8:	6078      	str	r0, [r7, #4]
 80084da:	460b      	mov	r3, r1
 80084dc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 80084e2:	697b      	ldr	r3, [r7, #20]
 80084e4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80084e8:	691b      	ldr	r3, [r3, #16]
 80084ea:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80084ec:	697b      	ldr	r3, [r7, #20]
 80084ee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80084f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80084f4:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80084f6:	78fb      	ldrb	r3, [r7, #3]
 80084f8:	f003 030f 	and.w	r3, r3, #15
 80084fc:	68fa      	ldr	r2, [r7, #12]
 80084fe:	fa22 f303 	lsr.w	r3, r2, r3
 8008502:	01db      	lsls	r3, r3, #7
 8008504:	b2db      	uxtb	r3, r3
 8008506:	693a      	ldr	r2, [r7, #16]
 8008508:	4313      	orrs	r3, r2
 800850a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800850c:	78fb      	ldrb	r3, [r7, #3]
 800850e:	015a      	lsls	r2, r3, #5
 8008510:	697b      	ldr	r3, [r7, #20]
 8008512:	4413      	add	r3, r2
 8008514:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008518:	689b      	ldr	r3, [r3, #8]
 800851a:	693a      	ldr	r2, [r7, #16]
 800851c:	4013      	ands	r3, r2
 800851e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008520:	68bb      	ldr	r3, [r7, #8]
}
 8008522:	4618      	mov	r0, r3
 8008524:	371c      	adds	r7, #28
 8008526:	46bd      	mov	sp, r7
 8008528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800852c:	4770      	bx	lr

0800852e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800852e:	b480      	push	{r7}
 8008530:	b083      	sub	sp, #12
 8008532:	af00      	add	r7, sp, #0
 8008534:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	695b      	ldr	r3, [r3, #20]
 800853a:	f003 0301 	and.w	r3, r3, #1
}
 800853e:	4618      	mov	r0, r3
 8008540:	370c      	adds	r7, #12
 8008542:	46bd      	mov	sp, r7
 8008544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008548:	4770      	bx	lr

0800854a <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800854a:	b480      	push	{r7}
 800854c:	b085      	sub	sp, #20
 800854e:	af00      	add	r7, sp, #0
 8008550:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	68fa      	ldr	r2, [r7, #12]
 8008560:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008564:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8008568:	f023 0307 	bic.w	r3, r3, #7
 800856c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008574:	685b      	ldr	r3, [r3, #4]
 8008576:	68fa      	ldr	r2, [r7, #12]
 8008578:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800857c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008580:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008582:	2300      	movs	r3, #0
}
 8008584:	4618      	mov	r0, r3
 8008586:	3714      	adds	r7, #20
 8008588:	46bd      	mov	sp, r7
 800858a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800858e:	4770      	bx	lr

08008590 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t *psetup)
{
 8008590:	b480      	push	{r7}
 8008592:	b085      	sub	sp, #20
 8008594:	af00      	add	r7, sp, #0
 8008596:	6078      	str	r0, [r7, #4]
 8008598:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  uint32_t USBx_BASE = (uint32_t)USBx;
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	333c      	adds	r3, #60	@ 0x3c
 80085a2:	3304      	adds	r3, #4
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80085a8:	68bb      	ldr	r3, [r7, #8]
 80085aa:	4a1c      	ldr	r2, [pc, #112]	@ (800861c <USB_EP0_OutStart+0x8c>)
 80085ac:	4293      	cmp	r3, r2
 80085ae:	d90a      	bls.n	80085c6 <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80085bc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80085c0:	d101      	bne.n	80085c6 <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 80085c2:	2300      	movs	r3, #0
 80085c4:	e024      	b.n	8008610 <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80085cc:	461a      	mov	r2, r3
 80085ce:	2300      	movs	r3, #0
 80085d0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80085d8:	691b      	ldr	r3, [r3, #16]
 80085da:	68fa      	ldr	r2, [r7, #12]
 80085dc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80085e0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80085e4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80085ec:	691b      	ldr	r3, [r3, #16]
 80085ee:	68fa      	ldr	r2, [r7, #12]
 80085f0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80085f4:	f043 0318 	orr.w	r3, r3, #24
 80085f8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008600:	691b      	ldr	r3, [r3, #16]
 8008602:	68fa      	ldr	r2, [r7, #12]
 8008604:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008608:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800860c:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 800860e:	2300      	movs	r3, #0
}
 8008610:	4618      	mov	r0, r3
 8008612:	3714      	adds	r7, #20
 8008614:	46bd      	mov	sp, r7
 8008616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800861a:	4770      	bx	lr
 800861c:	4f54300a 	.word	0x4f54300a

08008620 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008620:	b480      	push	{r7}
 8008622:	b085      	sub	sp, #20
 8008624:	af00      	add	r7, sp, #0
 8008626:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8008628:	2300      	movs	r3, #0
 800862a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	3301      	adds	r3, #1
 8008630:	60fb      	str	r3, [r7, #12]
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	4a13      	ldr	r2, [pc, #76]	@ (8008684 <USB_CoreReset+0x64>)
 8008636:	4293      	cmp	r3, r2
 8008638:	d901      	bls.n	800863e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800863a:	2303      	movs	r3, #3
 800863c:	e01b      	b.n	8008676 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	691b      	ldr	r3, [r3, #16]
 8008642:	2b00      	cmp	r3, #0
 8008644:	daf2      	bge.n	800862c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008646:	2300      	movs	r3, #0
 8008648:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	691b      	ldr	r3, [r3, #16]
 800864e:	f043 0201 	orr.w	r2, r3, #1
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	3301      	adds	r3, #1
 800865a:	60fb      	str	r3, [r7, #12]
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	4a09      	ldr	r2, [pc, #36]	@ (8008684 <USB_CoreReset+0x64>)
 8008660:	4293      	cmp	r3, r2
 8008662:	d901      	bls.n	8008668 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008664:	2303      	movs	r3, #3
 8008666:	e006      	b.n	8008676 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	691b      	ldr	r3, [r3, #16]
 800866c:	f003 0301 	and.w	r3, r3, #1
 8008670:	2b01      	cmp	r3, #1
 8008672:	d0f0      	beq.n	8008656 <USB_CoreReset+0x36>

  return HAL_OK;
 8008674:	2300      	movs	r3, #0
}
 8008676:	4618      	mov	r0, r3
 8008678:	3714      	adds	r7, #20
 800867a:	46bd      	mov	sp, r7
 800867c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008680:	4770      	bx	lr
 8008682:	bf00      	nop
 8008684:	00030d40 	.word	0x00030d40

08008688 <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008688:	b580      	push	{r7, lr}
 800868a:	b084      	sub	sp, #16
 800868c:	af00      	add	r7, sp, #0
 800868e:	6078      	str	r0, [r7, #4]
 8008690:	460b      	mov	r3, r1
 8008692:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_HID_HandleTypeDef *hhid;

  hhid = USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 8008694:	2010      	movs	r0, #16
 8008696:	f002 f815 	bl	800a6c4 <malloc>
 800869a:	4603      	mov	r3, r0
 800869c:	60fb      	str	r3, [r7, #12]

  if (hhid == NULL)
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d105      	bne.n	80086b0 <USBD_HID_Init+0x28>
  {
    pdev->pClassData = NULL;
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	2200      	movs	r2, #0
 80086a8:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    return (uint8_t)USBD_EMEM;
 80086ac:	2302      	movs	r3, #2
 80086ae:	e01b      	b.n	80086e8 <USBD_HID_Init+0x60>
  }

  pdev->pClassData = (void *)hhid;
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	68fa      	ldr	r2, [r7, #12]
 80086b4:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	7c1b      	ldrb	r3, [r3, #16]
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d103      	bne.n	80086c8 <USBD_HID_Init+0x40>
  {
    pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = HID_HS_BINTERVAL;
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	2207      	movs	r2, #7
 80086c4:	875a      	strh	r2, [r3, #58]	@ 0x3a
 80086c6:	e002      	b.n	80086ce <USBD_HID_Init+0x46>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = HID_FS_BINTERVAL;
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	220a      	movs	r2, #10
 80086cc:	875a      	strh	r2, [r3, #58]	@ 0x3a
  }

    /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 80086ce:	2304      	movs	r3, #4
 80086d0:	2203      	movs	r2, #3
 80086d2:	2181      	movs	r1, #129	@ 0x81
 80086d4:	6878      	ldr	r0, [r7, #4]
 80086d6:	f001 fdef 	bl	800a2b8 <USBD_LL_OpenEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	2201      	movs	r2, #1
 80086de:	871a      	strh	r2, [r3, #56]	@ 0x38

  hhid->state = HID_IDLE;
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	2200      	movs	r2, #0
 80086e4:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 80086e6:	2300      	movs	r3, #0
}
 80086e8:	4618      	mov	r0, r3
 80086ea:	3710      	adds	r7, #16
 80086ec:	46bd      	mov	sp, r7
 80086ee:	bd80      	pop	{r7, pc}

080086f0 <USBD_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80086f0:	b580      	push	{r7, lr}
 80086f2:	b082      	sub	sp, #8
 80086f4:	af00      	add	r7, sp, #0
 80086f6:	6078      	str	r0, [r7, #4]
 80086f8:	460b      	mov	r3, r1
 80086fa:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close HID EPs */
  (void)USBD_LL_CloseEP(pdev, HID_EPIN_ADDR);
 80086fc:	2181      	movs	r1, #129	@ 0x81
 80086fe:	6878      	ldr	r0, [r7, #4]
 8008700:	f001 fe18 	bl	800a334 <USBD_LL_CloseEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 0U;
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	2200      	movs	r2, #0
 8008708:	871a      	strh	r2, [r3, #56]	@ 0x38
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = 0U;
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	2200      	movs	r2, #0
 800870e:	875a      	strh	r2, [r3, #58]	@ 0x3a

  /* FRee allocated memory */
  if (pdev->pClassData != NULL)
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008716:	2b00      	cmp	r3, #0
 8008718:	d009      	beq.n	800872e <USBD_HID_DeInit+0x3e>
  {
    (void)USBD_free(pdev->pClassData);
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008720:	4618      	mov	r0, r3
 8008722:	f001 ffd7 	bl	800a6d4 <free>
    pdev->pClassData = NULL;
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	2200      	movs	r2, #0
 800872a:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800872e:	2300      	movs	r3, #0
}
 8008730:	4618      	mov	r0, r3
 8008732:	3708      	adds	r7, #8
 8008734:	46bd      	mov	sp, r7
 8008736:	bd80      	pop	{r7, pc}

08008738 <USBD_HID_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008738:	b580      	push	{r7, lr}
 800873a:	b086      	sub	sp, #24
 800873c:	af00      	add	r7, sp, #0
 800873e:	6078      	str	r0, [r7, #4]
 8008740:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008748:	60fb      	str	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 800874a:	2300      	movs	r3, #0
 800874c:	75fb      	strb	r3, [r7, #23]
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 800874e:	2300      	movs	r3, #0
 8008750:	817b      	strh	r3, [r7, #10]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008752:	683b      	ldr	r3, [r7, #0]
 8008754:	781b      	ldrb	r3, [r3, #0]
 8008756:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800875a:	2b00      	cmp	r3, #0
 800875c:	d045      	beq.n	80087ea <USBD_HID_Setup+0xb2>
 800875e:	2b20      	cmp	r3, #32
 8008760:	f040 80d4 	bne.w	800890c <USBD_HID_Setup+0x1d4>
  {
  case USB_REQ_TYPE_CLASS :
    switch (req->bRequest)
 8008764:	683b      	ldr	r3, [r7, #0]
 8008766:	785b      	ldrb	r3, [r3, #1]
 8008768:	3b02      	subs	r3, #2
 800876a:	2b09      	cmp	r3, #9
 800876c:	d835      	bhi.n	80087da <USBD_HID_Setup+0xa2>
 800876e:	a201      	add	r2, pc, #4	@ (adr r2, 8008774 <USBD_HID_Setup+0x3c>)
 8008770:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008774:	080087cb 	.word	0x080087cb
 8008778:	080087ab 	.word	0x080087ab
 800877c:	080087db 	.word	0x080087db
 8008780:	080087db 	.word	0x080087db
 8008784:	080087db 	.word	0x080087db
 8008788:	080087db 	.word	0x080087db
 800878c:	080087db 	.word	0x080087db
 8008790:	080087db 	.word	0x080087db
 8008794:	080087b9 	.word	0x080087b9
 8008798:	0800879d 	.word	0x0800879d
    {
    case HID_REQ_SET_PROTOCOL:
      hhid->Protocol = (uint8_t)(req->wValue);
 800879c:	683b      	ldr	r3, [r7, #0]
 800879e:	885b      	ldrh	r3, [r3, #2]
 80087a0:	b2db      	uxtb	r3, r3
 80087a2:	461a      	mov	r2, r3
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	601a      	str	r2, [r3, #0]
      break;
 80087a8:	e01e      	b.n	80087e8 <USBD_HID_Setup+0xb0>

    case HID_REQ_GET_PROTOCOL:
      (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	2201      	movs	r2, #1
 80087ae:	4619      	mov	r1, r3
 80087b0:	6878      	ldr	r0, [r7, #4]
 80087b2:	f001 f9ef 	bl	8009b94 <USBD_CtlSendData>
      break;
 80087b6:	e017      	b.n	80087e8 <USBD_HID_Setup+0xb0>

    case HID_REQ_SET_IDLE:
      hhid->IdleState = (uint8_t)(req->wValue >> 8);
 80087b8:	683b      	ldr	r3, [r7, #0]
 80087ba:	885b      	ldrh	r3, [r3, #2]
 80087bc:	0a1b      	lsrs	r3, r3, #8
 80087be:	b29b      	uxth	r3, r3
 80087c0:	b2db      	uxtb	r3, r3
 80087c2:	461a      	mov	r2, r3
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	605a      	str	r2, [r3, #4]
      break;
 80087c8:	e00e      	b.n	80087e8 <USBD_HID_Setup+0xb0>

    case HID_REQ_GET_IDLE:
      (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	3304      	adds	r3, #4
 80087ce:	2201      	movs	r2, #1
 80087d0:	4619      	mov	r1, r3
 80087d2:	6878      	ldr	r0, [r7, #4]
 80087d4:	f001 f9de 	bl	8009b94 <USBD_CtlSendData>
      break;
 80087d8:	e006      	b.n	80087e8 <USBD_HID_Setup+0xb0>

    default:
      USBD_CtlError(pdev, req);
 80087da:	6839      	ldr	r1, [r7, #0]
 80087dc:	6878      	ldr	r0, [r7, #4]
 80087de:	f001 f968 	bl	8009ab2 <USBD_CtlError>
      ret = USBD_FAIL;
 80087e2:	2303      	movs	r3, #3
 80087e4:	75fb      	strb	r3, [r7, #23]
      break;
 80087e6:	bf00      	nop
    }
    break;
 80087e8:	e097      	b.n	800891a <USBD_HID_Setup+0x1e2>
  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80087ea:	683b      	ldr	r3, [r7, #0]
 80087ec:	785b      	ldrb	r3, [r3, #1]
 80087ee:	2b0b      	cmp	r3, #11
 80087f0:	f200 8083 	bhi.w	80088fa <USBD_HID_Setup+0x1c2>
 80087f4:	a201      	add	r2, pc, #4	@ (adr r2, 80087fc <USBD_HID_Setup+0xc4>)
 80087f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087fa:	bf00      	nop
 80087fc:	0800882d 	.word	0x0800882d
 8008800:	08008909 	.word	0x08008909
 8008804:	080088fb 	.word	0x080088fb
 8008808:	080088fb 	.word	0x080088fb
 800880c:	080088fb 	.word	0x080088fb
 8008810:	080088fb 	.word	0x080088fb
 8008814:	08008855 	.word	0x08008855
 8008818:	080088fb 	.word	0x080088fb
 800881c:	080088fb 	.word	0x080088fb
 8008820:	080088fb 	.word	0x080088fb
 8008824:	080088ad 	.word	0x080088ad
 8008828:	080088d5 	.word	0x080088d5
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008832:	2b03      	cmp	r3, #3
 8008834:	d107      	bne.n	8008846 <USBD_HID_Setup+0x10e>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8008836:	f107 030a 	add.w	r3, r7, #10
 800883a:	2202      	movs	r2, #2
 800883c:	4619      	mov	r1, r3
 800883e:	6878      	ldr	r0, [r7, #4]
 8008840:	f001 f9a8 	bl	8009b94 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8008844:	e061      	b.n	800890a <USBD_HID_Setup+0x1d2>
        USBD_CtlError(pdev, req);
 8008846:	6839      	ldr	r1, [r7, #0]
 8008848:	6878      	ldr	r0, [r7, #4]
 800884a:	f001 f932 	bl	8009ab2 <USBD_CtlError>
        ret = USBD_FAIL;
 800884e:	2303      	movs	r3, #3
 8008850:	75fb      	strb	r3, [r7, #23]
      break;
 8008852:	e05a      	b.n	800890a <USBD_HID_Setup+0x1d2>

    case USB_REQ_GET_DESCRIPTOR:
      if ((req->wValue >> 8) == HID_REPORT_DESC)
 8008854:	683b      	ldr	r3, [r7, #0]
 8008856:	885b      	ldrh	r3, [r3, #2]
 8008858:	0a1b      	lsrs	r3, r3, #8
 800885a:	b29b      	uxth	r3, r3
 800885c:	2b22      	cmp	r3, #34	@ 0x22
 800885e:	d108      	bne.n	8008872 <USBD_HID_Setup+0x13a>
      {
        len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 8008860:	683b      	ldr	r3, [r7, #0]
 8008862:	88db      	ldrh	r3, [r3, #6]
 8008864:	2b4a      	cmp	r3, #74	@ 0x4a
 8008866:	bf28      	it	cs
 8008868:	234a      	movcs	r3, #74	@ 0x4a
 800886a:	82bb      	strh	r3, [r7, #20]
        pbuf = HID_MOUSE_ReportDesc;
 800886c:	4b2d      	ldr	r3, [pc, #180]	@ (8008924 <USBD_HID_Setup+0x1ec>)
 800886e:	613b      	str	r3, [r7, #16]
 8008870:	e015      	b.n	800889e <USBD_HID_Setup+0x166>
      }
      else if ((req->wValue >> 8) == HID_DESCRIPTOR_TYPE)
 8008872:	683b      	ldr	r3, [r7, #0]
 8008874:	885b      	ldrh	r3, [r3, #2]
 8008876:	0a1b      	lsrs	r3, r3, #8
 8008878:	b29b      	uxth	r3, r3
 800887a:	2b21      	cmp	r3, #33	@ 0x21
 800887c:	d108      	bne.n	8008890 <USBD_HID_Setup+0x158>
      {
        pbuf = USBD_HID_Desc;
 800887e:	4b2a      	ldr	r3, [pc, #168]	@ (8008928 <USBD_HID_Setup+0x1f0>)
 8008880:	613b      	str	r3, [r7, #16]
        len = MIN(USB_HID_DESC_SIZ, req->wLength);
 8008882:	683b      	ldr	r3, [r7, #0]
 8008884:	88db      	ldrh	r3, [r3, #6]
 8008886:	2b09      	cmp	r3, #9
 8008888:	bf28      	it	cs
 800888a:	2309      	movcs	r3, #9
 800888c:	82bb      	strh	r3, [r7, #20]
 800888e:	e006      	b.n	800889e <USBD_HID_Setup+0x166>
      }
      else
      {
        USBD_CtlError(pdev, req);
 8008890:	6839      	ldr	r1, [r7, #0]
 8008892:	6878      	ldr	r0, [r7, #4]
 8008894:	f001 f90d 	bl	8009ab2 <USBD_CtlError>
        ret = USBD_FAIL;
 8008898:	2303      	movs	r3, #3
 800889a:	75fb      	strb	r3, [r7, #23]
        break;
 800889c:	e035      	b.n	800890a <USBD_HID_Setup+0x1d2>
      }
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800889e:	8abb      	ldrh	r3, [r7, #20]
 80088a0:	461a      	mov	r2, r3
 80088a2:	6939      	ldr	r1, [r7, #16]
 80088a4:	6878      	ldr	r0, [r7, #4]
 80088a6:	f001 f975 	bl	8009b94 <USBD_CtlSendData>
      break;
 80088aa:	e02e      	b.n	800890a <USBD_HID_Setup+0x1d2>

    case USB_REQ_GET_INTERFACE :
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80088b2:	2b03      	cmp	r3, #3
 80088b4:	d107      	bne.n	80088c6 <USBD_HID_Setup+0x18e>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	3308      	adds	r3, #8
 80088ba:	2201      	movs	r2, #1
 80088bc:	4619      	mov	r1, r3
 80088be:	6878      	ldr	r0, [r7, #4]
 80088c0:	f001 f968 	bl	8009b94 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 80088c4:	e021      	b.n	800890a <USBD_HID_Setup+0x1d2>
        USBD_CtlError(pdev, req);
 80088c6:	6839      	ldr	r1, [r7, #0]
 80088c8:	6878      	ldr	r0, [r7, #4]
 80088ca:	f001 f8f2 	bl	8009ab2 <USBD_CtlError>
        ret = USBD_FAIL;
 80088ce:	2303      	movs	r3, #3
 80088d0:	75fb      	strb	r3, [r7, #23]
      break;
 80088d2:	e01a      	b.n	800890a <USBD_HID_Setup+0x1d2>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80088da:	2b03      	cmp	r3, #3
 80088dc:	d106      	bne.n	80088ec <USBD_HID_Setup+0x1b4>
      {
        hhid->AltSetting = (uint8_t)(req->wValue);
 80088de:	683b      	ldr	r3, [r7, #0]
 80088e0:	885b      	ldrh	r3, [r3, #2]
 80088e2:	b2db      	uxtb	r3, r3
 80088e4:	461a      	mov	r2, r3
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	609a      	str	r2, [r3, #8]
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 80088ea:	e00e      	b.n	800890a <USBD_HID_Setup+0x1d2>
        USBD_CtlError(pdev, req);
 80088ec:	6839      	ldr	r1, [r7, #0]
 80088ee:	6878      	ldr	r0, [r7, #4]
 80088f0:	f001 f8df 	bl	8009ab2 <USBD_CtlError>
        ret = USBD_FAIL;
 80088f4:	2303      	movs	r3, #3
 80088f6:	75fb      	strb	r3, [r7, #23]
      break;
 80088f8:	e007      	b.n	800890a <USBD_HID_Setup+0x1d2>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 80088fa:	6839      	ldr	r1, [r7, #0]
 80088fc:	6878      	ldr	r0, [r7, #4]
 80088fe:	f001 f8d8 	bl	8009ab2 <USBD_CtlError>
      ret = USBD_FAIL;
 8008902:	2303      	movs	r3, #3
 8008904:	75fb      	strb	r3, [r7, #23]
      break;
 8008906:	e000      	b.n	800890a <USBD_HID_Setup+0x1d2>
      break;
 8008908:	bf00      	nop
    }
    break;
 800890a:	e006      	b.n	800891a <USBD_HID_Setup+0x1e2>

  default:
    USBD_CtlError(pdev, req);
 800890c:	6839      	ldr	r1, [r7, #0]
 800890e:	6878      	ldr	r0, [r7, #4]
 8008910:	f001 f8cf 	bl	8009ab2 <USBD_CtlError>
    ret = USBD_FAIL;
 8008914:	2303      	movs	r3, #3
 8008916:	75fb      	strb	r3, [r7, #23]
    break;
 8008918:	bf00      	nop
  }

  return (uint8_t)ret;
 800891a:	7dfb      	ldrb	r3, [r7, #23]
}
 800891c:	4618      	mov	r0, r3
 800891e:	3718      	adds	r7, #24
 8008920:	46bd      	mov	sp, r7
 8008922:	bd80      	pop	{r7, pc}
 8008924:	20000164 	.word	0x20000164
 8008928:	2000014c 	.word	0x2000014c

0800892c <USBD_HID_SendReport>:
  * @param  pdev: device instance
  * @param  buff: pointer to report
  * @retval status
  */
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len)
{
 800892c:	b580      	push	{r7, lr}
 800892e:	b086      	sub	sp, #24
 8008930:	af00      	add	r7, sp, #0
 8008932:	60f8      	str	r0, [r7, #12]
 8008934:	60b9      	str	r1, [r7, #8]
 8008936:	4613      	mov	r3, r2
 8008938:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008940:	617b      	str	r3, [r7, #20]

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008948:	2b03      	cmp	r3, #3
 800894a:	d10c      	bne.n	8008966 <USBD_HID_SendReport+0x3a>
  {
    if (hhid->state == HID_IDLE)
 800894c:	697b      	ldr	r3, [r7, #20]
 800894e:	7b1b      	ldrb	r3, [r3, #12]
 8008950:	2b00      	cmp	r3, #0
 8008952:	d108      	bne.n	8008966 <USBD_HID_SendReport+0x3a>
    {
      hhid->state = HID_BUSY;
 8008954:	697b      	ldr	r3, [r7, #20]
 8008956:	2201      	movs	r2, #1
 8008958:	731a      	strb	r2, [r3, #12]
      (void)USBD_LL_Transmit(pdev, HID_EPIN_ADDR, report, len);
 800895a:	88fb      	ldrh	r3, [r7, #6]
 800895c:	68ba      	ldr	r2, [r7, #8]
 800895e:	2181      	movs	r1, #129	@ 0x81
 8008960:	68f8      	ldr	r0, [r7, #12]
 8008962:	f001 fdeb 	bl	800a53c <USBD_LL_Transmit>
    }
  }

  return (uint8_t)USBD_OK;
 8008966:	2300      	movs	r3, #0
}
 8008968:	4618      	mov	r0, r3
 800896a:	3718      	adds	r7, #24
 800896c:	46bd      	mov	sp, r7
 800896e:	bd80      	pop	{r7, pc}

08008970 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 8008970:	b480      	push	{r7}
 8008972:	b083      	sub	sp, #12
 8008974:	af00      	add	r7, sp, #0
 8008976:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_CfgFSDesc);
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	2222      	movs	r2, #34	@ 0x22
 800897c:	801a      	strh	r2, [r3, #0]

  return USBD_HID_CfgFSDesc;
 800897e:	4b03      	ldr	r3, [pc, #12]	@ (800898c <USBD_HID_GetFSCfgDesc+0x1c>)
}
 8008980:	4618      	mov	r0, r3
 8008982:	370c      	adds	r7, #12
 8008984:	46bd      	mov	sp, r7
 8008986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800898a:	4770      	bx	lr
 800898c:	200000e0 	.word	0x200000e0

08008990 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 8008990:	b480      	push	{r7}
 8008992:	b083      	sub	sp, #12
 8008994:	af00      	add	r7, sp, #0
 8008996:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_CfgHSDesc);
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	2222      	movs	r2, #34	@ 0x22
 800899c:	801a      	strh	r2, [r3, #0]

  return USBD_HID_CfgHSDesc;
 800899e:	4b03      	ldr	r3, [pc, #12]	@ (80089ac <USBD_HID_GetHSCfgDesc+0x1c>)
}
 80089a0:	4618      	mov	r0, r3
 80089a2:	370c      	adds	r7, #12
 80089a4:	46bd      	mov	sp, r7
 80089a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089aa:	4770      	bx	lr
 80089ac:	20000104 	.word	0x20000104

080089b0 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80089b0:	b480      	push	{r7}
 80089b2:	b083      	sub	sp, #12
 80089b4:	af00      	add	r7, sp, #0
 80089b6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_OtherSpeedCfgDesc);
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	2222      	movs	r2, #34	@ 0x22
 80089bc:	801a      	strh	r2, [r3, #0]

  return USBD_HID_OtherSpeedCfgDesc;
 80089be:	4b03      	ldr	r3, [pc, #12]	@ (80089cc <USBD_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 80089c0:	4618      	mov	r0, r3
 80089c2:	370c      	adds	r7, #12
 80089c4:	46bd      	mov	sp, r7
 80089c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ca:	4770      	bx	lr
 80089cc:	20000128 	.word	0x20000128

080089d0 <USBD_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80089d0:	b480      	push	{r7}
 80089d2:	b083      	sub	sp, #12
 80089d4:	af00      	add	r7, sp, #0
 80089d6:	6078      	str	r0, [r7, #4]
 80089d8:	460b      	mov	r3, r1
 80089da:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80089e2:	2200      	movs	r2, #0
 80089e4:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 80089e6:	2300      	movs	r3, #0
}
 80089e8:	4618      	mov	r0, r3
 80089ea:	370c      	adds	r7, #12
 80089ec:	46bd      	mov	sp, r7
 80089ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089f2:	4770      	bx	lr

080089f4 <USBD_HID_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 80089f4:	b480      	push	{r7}
 80089f6:	b083      	sub	sp, #12
 80089f8:	af00      	add	r7, sp, #0
 80089fa:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	220a      	movs	r2, #10
 8008a00:	801a      	strh	r2, [r3, #0]

  return USBD_HID_DeviceQualifierDesc;
 8008a02:	4b03      	ldr	r3, [pc, #12]	@ (8008a10 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 8008a04:	4618      	mov	r0, r3
 8008a06:	370c      	adds	r7, #12
 8008a08:	46bd      	mov	sp, r7
 8008a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a0e:	4770      	bx	lr
 8008a10:	20000158 	.word	0x20000158

08008a14 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008a14:	b580      	push	{r7, lr}
 8008a16:	b086      	sub	sp, #24
 8008a18:	af00      	add	r7, sp, #0
 8008a1a:	60f8      	str	r0, [r7, #12]
 8008a1c:	60b9      	str	r1, [r7, #8]
 8008a1e:	4613      	mov	r3, r2
 8008a20:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d101      	bne.n	8008a2c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8008a28:	2303      	movs	r3, #3
 8008a2a:	e01f      	b.n	8008a6c <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	2200      	movs	r2, #0
 8008a30:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData = NULL;
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	2200      	movs	r2, #0
 8008a38:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0
  pdev->pConfDesc = NULL;
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	2200      	movs	r2, #0
 8008a40:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008a44:	68bb      	ldr	r3, [r7, #8]
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d003      	beq.n	8008a52 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	68ba      	ldr	r2, [r7, #8]
 8008a4e:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	2201      	movs	r2, #1
 8008a56:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	79fa      	ldrb	r2, [r7, #7]
 8008a5e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8008a60:	68f8      	ldr	r0, [r7, #12]
 8008a62:	f001 fbab 	bl	800a1bc <USBD_LL_Init>
 8008a66:	4603      	mov	r3, r0
 8008a68:	75fb      	strb	r3, [r7, #23]

  return ret;
 8008a6a:	7dfb      	ldrb	r3, [r7, #23]
}
 8008a6c:	4618      	mov	r0, r3
 8008a6e:	3718      	adds	r7, #24
 8008a70:	46bd      	mov	sp, r7
 8008a72:	bd80      	pop	{r7, pc}

08008a74 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008a74:	b580      	push	{r7, lr}
 8008a76:	b084      	sub	sp, #16
 8008a78:	af00      	add	r7, sp, #0
 8008a7a:	6078      	str	r0, [r7, #4]
 8008a7c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008a7e:	2300      	movs	r3, #0
 8008a80:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8008a82:	683b      	ldr	r3, [r7, #0]
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d101      	bne.n	8008a8c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8008a88:	2303      	movs	r3, #3
 8008a8a:	e016      	b.n	8008aba <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	683a      	ldr	r2, [r7, #0]
 8008a90:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008a9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d00b      	beq.n	8008ab8 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008aa6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008aa8:	f107 020e 	add.w	r2, r7, #14
 8008aac:	4610      	mov	r0, r2
 8008aae:	4798      	blx	r3
 8008ab0:	4602      	mov	r2, r0
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8008ab8:	2300      	movs	r3, #0
}
 8008aba:	4618      	mov	r0, r3
 8008abc:	3710      	adds	r7, #16
 8008abe:	46bd      	mov	sp, r7
 8008ac0:	bd80      	pop	{r7, pc}

08008ac2 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008ac2:	b580      	push	{r7, lr}
 8008ac4:	b082      	sub	sp, #8
 8008ac6:	af00      	add	r7, sp, #0
 8008ac8:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8008aca:	6878      	ldr	r0, [r7, #4]
 8008acc:	f001 fbc2 	bl	800a254 <USBD_LL_Start>
 8008ad0:	4603      	mov	r3, r0
}
 8008ad2:	4618      	mov	r0, r3
 8008ad4:	3708      	adds	r7, #8
 8008ad6:	46bd      	mov	sp, r7
 8008ad8:	bd80      	pop	{r7, pc}

08008ada <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8008ada:	b480      	push	{r7}
 8008adc:	b083      	sub	sp, #12
 8008ade:	af00      	add	r7, sp, #0
 8008ae0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008ae2:	2300      	movs	r3, #0
}
 8008ae4:	4618      	mov	r0, r3
 8008ae6:	370c      	adds	r7, #12
 8008ae8:	46bd      	mov	sp, r7
 8008aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aee:	4770      	bx	lr

08008af0 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008af0:	b580      	push	{r7, lr}
 8008af2:	b084      	sub	sp, #16
 8008af4:	af00      	add	r7, sp, #0
 8008af6:	6078      	str	r0, [r7, #4]
 8008af8:	460b      	mov	r3, r1
 8008afa:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8008afc:	2303      	movs	r3, #3
 8008afe:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d009      	beq.n	8008b1e <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	78fa      	ldrb	r2, [r7, #3]
 8008b14:	4611      	mov	r1, r2
 8008b16:	6878      	ldr	r0, [r7, #4]
 8008b18:	4798      	blx	r3
 8008b1a:	4603      	mov	r3, r0
 8008b1c:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8008b1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b20:	4618      	mov	r0, r3
 8008b22:	3710      	adds	r7, #16
 8008b24:	46bd      	mov	sp, r7
 8008b26:	bd80      	pop	{r7, pc}

08008b28 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008b28:	b580      	push	{r7, lr}
 8008b2a:	b082      	sub	sp, #8
 8008b2c:	af00      	add	r7, sp, #0
 8008b2e:	6078      	str	r0, [r7, #4]
 8008b30:	460b      	mov	r3, r1
 8008b32:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d007      	beq.n	8008b4e <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008b44:	685b      	ldr	r3, [r3, #4]
 8008b46:	78fa      	ldrb	r2, [r7, #3]
 8008b48:	4611      	mov	r1, r2
 8008b4a:	6878      	ldr	r0, [r7, #4]
 8008b4c:	4798      	blx	r3
  }

  return USBD_OK;
 8008b4e:	2300      	movs	r3, #0
}
 8008b50:	4618      	mov	r0, r3
 8008b52:	3708      	adds	r7, #8
 8008b54:	46bd      	mov	sp, r7
 8008b56:	bd80      	pop	{r7, pc}

08008b58 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008b58:	b580      	push	{r7, lr}
 8008b5a:	b084      	sub	sp, #16
 8008b5c:	af00      	add	r7, sp, #0
 8008b5e:	6078      	str	r0, [r7, #4]
 8008b60:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008b68:	6839      	ldr	r1, [r7, #0]
 8008b6a:	4618      	mov	r0, r3
 8008b6c:	f000 ff67 	bl	8009a3e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	2201      	movs	r2, #1
 8008b74:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8008b7e:	461a      	mov	r2, r3
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8008b8c:	f003 031f 	and.w	r3, r3, #31
 8008b90:	2b02      	cmp	r3, #2
 8008b92:	d01a      	beq.n	8008bca <USBD_LL_SetupStage+0x72>
 8008b94:	2b02      	cmp	r3, #2
 8008b96:	d822      	bhi.n	8008bde <USBD_LL_SetupStage+0x86>
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d002      	beq.n	8008ba2 <USBD_LL_SetupStage+0x4a>
 8008b9c:	2b01      	cmp	r3, #1
 8008b9e:	d00a      	beq.n	8008bb6 <USBD_LL_SetupStage+0x5e>
 8008ba0:	e01d      	b.n	8008bde <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008ba8:	4619      	mov	r1, r3
 8008baa:	6878      	ldr	r0, [r7, #4]
 8008bac:	f000 fa18 	bl	8008fe0 <USBD_StdDevReq>
 8008bb0:	4603      	mov	r3, r0
 8008bb2:	73fb      	strb	r3, [r7, #15]
      break;
 8008bb4:	e020      	b.n	8008bf8 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008bbc:	4619      	mov	r1, r3
 8008bbe:	6878      	ldr	r0, [r7, #4]
 8008bc0:	f000 fa7c 	bl	80090bc <USBD_StdItfReq>
 8008bc4:	4603      	mov	r3, r0
 8008bc6:	73fb      	strb	r3, [r7, #15]
      break;
 8008bc8:	e016      	b.n	8008bf8 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008bd0:	4619      	mov	r1, r3
 8008bd2:	6878      	ldr	r0, [r7, #4]
 8008bd4:	f000 faba 	bl	800914c <USBD_StdEPReq>
 8008bd8:	4603      	mov	r3, r0
 8008bda:	73fb      	strb	r3, [r7, #15]
      break;
 8008bdc:	e00c      	b.n	8008bf8 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8008be4:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8008be8:	b2db      	uxtb	r3, r3
 8008bea:	4619      	mov	r1, r3
 8008bec:	6878      	ldr	r0, [r7, #4]
 8008bee:	f001 fbd7 	bl	800a3a0 <USBD_LL_StallEP>
 8008bf2:	4603      	mov	r3, r0
 8008bf4:	73fb      	strb	r3, [r7, #15]
      break;
 8008bf6:	bf00      	nop
  }

  return ret;
 8008bf8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bfa:	4618      	mov	r0, r3
 8008bfc:	3710      	adds	r7, #16
 8008bfe:	46bd      	mov	sp, r7
 8008c00:	bd80      	pop	{r7, pc}

08008c02 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008c02:	b580      	push	{r7, lr}
 8008c04:	b086      	sub	sp, #24
 8008c06:	af00      	add	r7, sp, #0
 8008c08:	60f8      	str	r0, [r7, #12]
 8008c0a:	460b      	mov	r3, r1
 8008c0c:	607a      	str	r2, [r7, #4]
 8008c0e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8008c10:	7afb      	ldrb	r3, [r7, #11]
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d137      	bne.n	8008c86 <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8008c1c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008c24:	2b03      	cmp	r3, #3
 8008c26:	d14a      	bne.n	8008cbe <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8008c28:	693b      	ldr	r3, [r7, #16]
 8008c2a:	689a      	ldr	r2, [r3, #8]
 8008c2c:	693b      	ldr	r3, [r7, #16]
 8008c2e:	68db      	ldr	r3, [r3, #12]
 8008c30:	429a      	cmp	r2, r3
 8008c32:	d913      	bls.n	8008c5c <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008c34:	693b      	ldr	r3, [r7, #16]
 8008c36:	689a      	ldr	r2, [r3, #8]
 8008c38:	693b      	ldr	r3, [r7, #16]
 8008c3a:	68db      	ldr	r3, [r3, #12]
 8008c3c:	1ad2      	subs	r2, r2, r3
 8008c3e:	693b      	ldr	r3, [r7, #16]
 8008c40:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8008c42:	693b      	ldr	r3, [r7, #16]
 8008c44:	68da      	ldr	r2, [r3, #12]
 8008c46:	693b      	ldr	r3, [r7, #16]
 8008c48:	689b      	ldr	r3, [r3, #8]
 8008c4a:	4293      	cmp	r3, r2
 8008c4c:	bf28      	it	cs
 8008c4e:	4613      	movcs	r3, r2
 8008c50:	461a      	mov	r2, r3
 8008c52:	6879      	ldr	r1, [r7, #4]
 8008c54:	68f8      	ldr	r0, [r7, #12]
 8008c56:	f000 ffc9 	bl	8009bec <USBD_CtlContinueRx>
 8008c5a:	e030      	b.n	8008cbe <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008c62:	691b      	ldr	r3, [r3, #16]
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d00a      	beq.n	8008c7e <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008c6e:	2b03      	cmp	r3, #3
 8008c70:	d105      	bne.n	8008c7e <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008c78:	691b      	ldr	r3, [r3, #16]
 8008c7a:	68f8      	ldr	r0, [r7, #12]
 8008c7c:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 8008c7e:	68f8      	ldr	r0, [r7, #12]
 8008c80:	f000 ffc5 	bl	8009c0e <USBD_CtlSendStatus>
 8008c84:	e01b      	b.n	8008cbe <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008c8c:	699b      	ldr	r3, [r3, #24]
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d013      	beq.n	8008cba <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8008c98:	2b03      	cmp	r3, #3
 8008c9a:	d10e      	bne.n	8008cba <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008ca2:	699b      	ldr	r3, [r3, #24]
 8008ca4:	7afa      	ldrb	r2, [r7, #11]
 8008ca6:	4611      	mov	r1, r2
 8008ca8:	68f8      	ldr	r0, [r7, #12]
 8008caa:	4798      	blx	r3
 8008cac:	4603      	mov	r3, r0
 8008cae:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8008cb0:	7dfb      	ldrb	r3, [r7, #23]
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d003      	beq.n	8008cbe <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 8008cb6:	7dfb      	ldrb	r3, [r7, #23]
 8008cb8:	e002      	b.n	8008cc0 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008cba:	2303      	movs	r3, #3
 8008cbc:	e000      	b.n	8008cc0 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 8008cbe:	2300      	movs	r3, #0
}
 8008cc0:	4618      	mov	r0, r3
 8008cc2:	3718      	adds	r7, #24
 8008cc4:	46bd      	mov	sp, r7
 8008cc6:	bd80      	pop	{r7, pc}

08008cc8 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008cc8:	b580      	push	{r7, lr}
 8008cca:	b086      	sub	sp, #24
 8008ccc:	af00      	add	r7, sp, #0
 8008cce:	60f8      	str	r0, [r7, #12]
 8008cd0:	460b      	mov	r3, r1
 8008cd2:	607a      	str	r2, [r7, #4]
 8008cd4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8008cd6:	7afb      	ldrb	r3, [r7, #11]
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d16a      	bne.n	8008db2 <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	3314      	adds	r3, #20
 8008ce0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008ce8:	2b02      	cmp	r3, #2
 8008cea:	d155      	bne.n	8008d98 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 8008cec:	693b      	ldr	r3, [r7, #16]
 8008cee:	689a      	ldr	r2, [r3, #8]
 8008cf0:	693b      	ldr	r3, [r7, #16]
 8008cf2:	68db      	ldr	r3, [r3, #12]
 8008cf4:	429a      	cmp	r2, r3
 8008cf6:	d914      	bls.n	8008d22 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008cf8:	693b      	ldr	r3, [r7, #16]
 8008cfa:	689a      	ldr	r2, [r3, #8]
 8008cfc:	693b      	ldr	r3, [r7, #16]
 8008cfe:	68db      	ldr	r3, [r3, #12]
 8008d00:	1ad2      	subs	r2, r2, r3
 8008d02:	693b      	ldr	r3, [r7, #16]
 8008d04:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8008d06:	693b      	ldr	r3, [r7, #16]
 8008d08:	689b      	ldr	r3, [r3, #8]
 8008d0a:	461a      	mov	r2, r3
 8008d0c:	6879      	ldr	r1, [r7, #4]
 8008d0e:	68f8      	ldr	r0, [r7, #12]
 8008d10:	f000 ff5b 	bl	8009bca <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008d14:	2300      	movs	r3, #0
 8008d16:	2200      	movs	r2, #0
 8008d18:	2100      	movs	r1, #0
 8008d1a:	68f8      	ldr	r0, [r7, #12]
 8008d1c:	f001 fc46 	bl	800a5ac <USBD_LL_PrepareReceive>
 8008d20:	e03a      	b.n	8008d98 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8008d22:	693b      	ldr	r3, [r7, #16]
 8008d24:	68da      	ldr	r2, [r3, #12]
 8008d26:	693b      	ldr	r3, [r7, #16]
 8008d28:	689b      	ldr	r3, [r3, #8]
 8008d2a:	429a      	cmp	r2, r3
 8008d2c:	d11c      	bne.n	8008d68 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8008d2e:	693b      	ldr	r3, [r7, #16]
 8008d30:	685a      	ldr	r2, [r3, #4]
 8008d32:	693b      	ldr	r3, [r7, #16]
 8008d34:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8008d36:	429a      	cmp	r2, r3
 8008d38:	d316      	bcc.n	8008d68 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8008d3a:	693b      	ldr	r3, [r7, #16]
 8008d3c:	685a      	ldr	r2, [r3, #4]
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008d44:	429a      	cmp	r2, r3
 8008d46:	d20f      	bcs.n	8008d68 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008d48:	2200      	movs	r2, #0
 8008d4a:	2100      	movs	r1, #0
 8008d4c:	68f8      	ldr	r0, [r7, #12]
 8008d4e:	f000 ff3c 	bl	8009bca <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	2200      	movs	r2, #0
 8008d56:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008d5a:	2300      	movs	r3, #0
 8008d5c:	2200      	movs	r2, #0
 8008d5e:	2100      	movs	r1, #0
 8008d60:	68f8      	ldr	r0, [r7, #12]
 8008d62:	f001 fc23 	bl	800a5ac <USBD_LL_PrepareReceive>
 8008d66:	e017      	b.n	8008d98 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008d6e:	68db      	ldr	r3, [r3, #12]
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d00a      	beq.n	8008d8a <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008d7a:	2b03      	cmp	r3, #3
 8008d7c:	d105      	bne.n	8008d8a <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008d84:	68db      	ldr	r3, [r3, #12]
 8008d86:	68f8      	ldr	r0, [r7, #12]
 8008d88:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008d8a:	2180      	movs	r1, #128	@ 0x80
 8008d8c:	68f8      	ldr	r0, [r7, #12]
 8008d8e:	f001 fb07 	bl	800a3a0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8008d92:	68f8      	ldr	r0, [r7, #12]
 8008d94:	f000 ff4e 	bl	8009c34 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8008d9e:	2b01      	cmp	r3, #1
 8008da0:	d123      	bne.n	8008dea <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8008da2:	68f8      	ldr	r0, [r7, #12]
 8008da4:	f7ff fe99 	bl	8008ada <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	2200      	movs	r2, #0
 8008dac:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8008db0:	e01b      	b.n	8008dea <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008db8:	695b      	ldr	r3, [r3, #20]
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d013      	beq.n	8008de6 <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8008dc4:	2b03      	cmp	r3, #3
 8008dc6:	d10e      	bne.n	8008de6 <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008dce:	695b      	ldr	r3, [r3, #20]
 8008dd0:	7afa      	ldrb	r2, [r7, #11]
 8008dd2:	4611      	mov	r1, r2
 8008dd4:	68f8      	ldr	r0, [r7, #12]
 8008dd6:	4798      	blx	r3
 8008dd8:	4603      	mov	r3, r0
 8008dda:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8008ddc:	7dfb      	ldrb	r3, [r7, #23]
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d003      	beq.n	8008dea <USBD_LL_DataInStage+0x122>
    {
      return ret;
 8008de2:	7dfb      	ldrb	r3, [r7, #23]
 8008de4:	e002      	b.n	8008dec <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008de6:	2303      	movs	r3, #3
 8008de8:	e000      	b.n	8008dec <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 8008dea:	2300      	movs	r3, #0
}
 8008dec:	4618      	mov	r0, r3
 8008dee:	3718      	adds	r7, #24
 8008df0:	46bd      	mov	sp, r7
 8008df2:	bd80      	pop	{r7, pc}

08008df4 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008df4:	b580      	push	{r7, lr}
 8008df6:	b082      	sub	sp, #8
 8008df8:	af00      	add	r7, sp, #0
 8008dfa:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	2201      	movs	r2, #1
 8008e00:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	2200      	movs	r2, #0
 8008e08:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	2200      	movs	r2, #0
 8008e10:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	2200      	movs	r2, #0
 8008e16:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClassData != NULL)
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d009      	beq.n	8008e38 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008e2a:	685b      	ldr	r3, [r3, #4]
 8008e2c:	687a      	ldr	r2, [r7, #4]
 8008e2e:	6852      	ldr	r2, [r2, #4]
 8008e30:	b2d2      	uxtb	r2, r2
 8008e32:	4611      	mov	r1, r2
 8008e34:	6878      	ldr	r0, [r7, #4]
 8008e36:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008e38:	2340      	movs	r3, #64	@ 0x40
 8008e3a:	2200      	movs	r2, #0
 8008e3c:	2100      	movs	r1, #0
 8008e3e:	6878      	ldr	r0, [r7, #4]
 8008e40:	f001 fa3a 	bl	800a2b8 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	2201      	movs	r2, #1
 8008e48:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	2240      	movs	r2, #64	@ 0x40
 8008e50:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008e54:	2340      	movs	r3, #64	@ 0x40
 8008e56:	2200      	movs	r2, #0
 8008e58:	2180      	movs	r1, #128	@ 0x80
 8008e5a:	6878      	ldr	r0, [r7, #4]
 8008e5c:	f001 fa2c 	bl	800a2b8 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	2201      	movs	r2, #1
 8008e64:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	2240      	movs	r2, #64	@ 0x40
 8008e6a:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8008e6c:	2300      	movs	r3, #0
}
 8008e6e:	4618      	mov	r0, r3
 8008e70:	3708      	adds	r7, #8
 8008e72:	46bd      	mov	sp, r7
 8008e74:	bd80      	pop	{r7, pc}

08008e76 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008e76:	b480      	push	{r7}
 8008e78:	b083      	sub	sp, #12
 8008e7a:	af00      	add	r7, sp, #0
 8008e7c:	6078      	str	r0, [r7, #4]
 8008e7e:	460b      	mov	r3, r1
 8008e80:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	78fa      	ldrb	r2, [r7, #3]
 8008e86:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008e88:	2300      	movs	r3, #0
}
 8008e8a:	4618      	mov	r0, r3
 8008e8c:	370c      	adds	r7, #12
 8008e8e:	46bd      	mov	sp, r7
 8008e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e94:	4770      	bx	lr

08008e96 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008e96:	b480      	push	{r7}
 8008e98:	b083      	sub	sp, #12
 8008e9a:	af00      	add	r7, sp, #0
 8008e9c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	f893 229c 	ldrb.w	r2, [r3, #668]	@ 0x29c
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	2204      	movs	r2, #4
 8008eae:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8008eb2:	2300      	movs	r3, #0
}
 8008eb4:	4618      	mov	r0, r3
 8008eb6:	370c      	adds	r7, #12
 8008eb8:	46bd      	mov	sp, r7
 8008eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ebe:	4770      	bx	lr

08008ec0 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008ec0:	b480      	push	{r7}
 8008ec2:	b083      	sub	sp, #12
 8008ec4:	af00      	add	r7, sp, #0
 8008ec6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008ece:	2b04      	cmp	r3, #4
 8008ed0:	d105      	bne.n	8008ede <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	f893 229d 	ldrb.w	r2, [r3, #669]	@ 0x29d
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8008ede:	2300      	movs	r3, #0
}
 8008ee0:	4618      	mov	r0, r3
 8008ee2:	370c      	adds	r7, #12
 8008ee4:	46bd      	mov	sp, r7
 8008ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eea:	4770      	bx	lr

08008eec <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008eec:	b580      	push	{r7, lr}
 8008eee:	b082      	sub	sp, #8
 8008ef0:	af00      	add	r7, sp, #0
 8008ef2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008efa:	2b03      	cmp	r3, #3
 8008efc:	d10b      	bne.n	8008f16 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008f04:	69db      	ldr	r3, [r3, #28]
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d005      	beq.n	8008f16 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008f10:	69db      	ldr	r3, [r3, #28]
 8008f12:	6878      	ldr	r0, [r7, #4]
 8008f14:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008f16:	2300      	movs	r3, #0
}
 8008f18:	4618      	mov	r0, r3
 8008f1a:	3708      	adds	r7, #8
 8008f1c:	46bd      	mov	sp, r7
 8008f1e:	bd80      	pop	{r7, pc}

08008f20 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8008f20:	b480      	push	{r7}
 8008f22:	b083      	sub	sp, #12
 8008f24:	af00      	add	r7, sp, #0
 8008f26:	6078      	str	r0, [r7, #4]
 8008f28:	460b      	mov	r3, r1
 8008f2a:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8008f2c:	2300      	movs	r3, #0
}
 8008f2e:	4618      	mov	r0, r3
 8008f30:	370c      	adds	r7, #12
 8008f32:	46bd      	mov	sp, r7
 8008f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f38:	4770      	bx	lr

08008f3a <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8008f3a:	b480      	push	{r7}
 8008f3c:	b083      	sub	sp, #12
 8008f3e:	af00      	add	r7, sp, #0
 8008f40:	6078      	str	r0, [r7, #4]
 8008f42:	460b      	mov	r3, r1
 8008f44:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8008f46:	2300      	movs	r3, #0
}
 8008f48:	4618      	mov	r0, r3
 8008f4a:	370c      	adds	r7, #12
 8008f4c:	46bd      	mov	sp, r7
 8008f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f52:	4770      	bx	lr

08008f54 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8008f54:	b480      	push	{r7}
 8008f56:	b083      	sub	sp, #12
 8008f58:	af00      	add	r7, sp, #0
 8008f5a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008f5c:	2300      	movs	r3, #0
}
 8008f5e:	4618      	mov	r0, r3
 8008f60:	370c      	adds	r7, #12
 8008f62:	46bd      	mov	sp, r7
 8008f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f68:	4770      	bx	lr

08008f6a <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8008f6a:	b580      	push	{r7, lr}
 8008f6c:	b082      	sub	sp, #8
 8008f6e:	af00      	add	r7, sp, #0
 8008f70:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	2201      	movs	r2, #1
 8008f76:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  if (pdev->pClass != NULL)
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d009      	beq.n	8008f98 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008f8a:	685b      	ldr	r3, [r3, #4]
 8008f8c:	687a      	ldr	r2, [r7, #4]
 8008f8e:	6852      	ldr	r2, [r2, #4]
 8008f90:	b2d2      	uxtb	r2, r2
 8008f92:	4611      	mov	r1, r2
 8008f94:	6878      	ldr	r0, [r7, #4]
 8008f96:	4798      	blx	r3
  }

  return USBD_OK;
 8008f98:	2300      	movs	r3, #0
}
 8008f9a:	4618      	mov	r0, r3
 8008f9c:	3708      	adds	r7, #8
 8008f9e:	46bd      	mov	sp, r7
 8008fa0:	bd80      	pop	{r7, pc}

08008fa2 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8008fa2:	b480      	push	{r7}
 8008fa4:	b087      	sub	sp, #28
 8008fa6:	af00      	add	r7, sp, #0
 8008fa8:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8008fae:	697b      	ldr	r3, [r7, #20]
 8008fb0:	781b      	ldrb	r3, [r3, #0]
 8008fb2:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8008fb4:	697b      	ldr	r3, [r7, #20]
 8008fb6:	3301      	adds	r3, #1
 8008fb8:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8008fba:	697b      	ldr	r3, [r7, #20]
 8008fbc:	781b      	ldrb	r3, [r3, #0]
 8008fbe:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8008fc0:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8008fc4:	021b      	lsls	r3, r3, #8
 8008fc6:	b21a      	sxth	r2, r3
 8008fc8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008fcc:	4313      	orrs	r3, r2
 8008fce:	b21b      	sxth	r3, r3
 8008fd0:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8008fd2:	89fb      	ldrh	r3, [r7, #14]
}
 8008fd4:	4618      	mov	r0, r3
 8008fd6:	371c      	adds	r7, #28
 8008fd8:	46bd      	mov	sp, r7
 8008fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fde:	4770      	bx	lr

08008fe0 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008fe0:	b580      	push	{r7, lr}
 8008fe2:	b084      	sub	sp, #16
 8008fe4:	af00      	add	r7, sp, #0
 8008fe6:	6078      	str	r0, [r7, #4]
 8008fe8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008fea:	2300      	movs	r3, #0
 8008fec:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008fee:	683b      	ldr	r3, [r7, #0]
 8008ff0:	781b      	ldrb	r3, [r3, #0]
 8008ff2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008ff6:	2b40      	cmp	r3, #64	@ 0x40
 8008ff8:	d005      	beq.n	8009006 <USBD_StdDevReq+0x26>
 8008ffa:	2b40      	cmp	r3, #64	@ 0x40
 8008ffc:	d853      	bhi.n	80090a6 <USBD_StdDevReq+0xc6>
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d00b      	beq.n	800901a <USBD_StdDevReq+0x3a>
 8009002:	2b20      	cmp	r3, #32
 8009004:	d14f      	bne.n	80090a6 <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800900c:	689b      	ldr	r3, [r3, #8]
 800900e:	6839      	ldr	r1, [r7, #0]
 8009010:	6878      	ldr	r0, [r7, #4]
 8009012:	4798      	blx	r3
 8009014:	4603      	mov	r3, r0
 8009016:	73fb      	strb	r3, [r7, #15]
    break;
 8009018:	e04a      	b.n	80090b0 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800901a:	683b      	ldr	r3, [r7, #0]
 800901c:	785b      	ldrb	r3, [r3, #1]
 800901e:	2b09      	cmp	r3, #9
 8009020:	d83b      	bhi.n	800909a <USBD_StdDevReq+0xba>
 8009022:	a201      	add	r2, pc, #4	@ (adr r2, 8009028 <USBD_StdDevReq+0x48>)
 8009024:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009028:	0800907d 	.word	0x0800907d
 800902c:	08009091 	.word	0x08009091
 8009030:	0800909b 	.word	0x0800909b
 8009034:	08009087 	.word	0x08009087
 8009038:	0800909b 	.word	0x0800909b
 800903c:	0800905b 	.word	0x0800905b
 8009040:	08009051 	.word	0x08009051
 8009044:	0800909b 	.word	0x0800909b
 8009048:	08009073 	.word	0x08009073
 800904c:	08009065 	.word	0x08009065
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 8009050:	6839      	ldr	r1, [r7, #0]
 8009052:	6878      	ldr	r0, [r7, #4]
 8009054:	f000 f9da 	bl	800940c <USBD_GetDescriptor>
      break;
 8009058:	e024      	b.n	80090a4 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 800905a:	6839      	ldr	r1, [r7, #0]
 800905c:	6878      	ldr	r0, [r7, #4]
 800905e:	f000 fb69 	bl	8009734 <USBD_SetAddress>
      break;
 8009062:	e01f      	b.n	80090a4 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 8009064:	6839      	ldr	r1, [r7, #0]
 8009066:	6878      	ldr	r0, [r7, #4]
 8009068:	f000 fba8 	bl	80097bc <USBD_SetConfig>
 800906c:	4603      	mov	r3, r0
 800906e:	73fb      	strb	r3, [r7, #15]
      break;
 8009070:	e018      	b.n	80090a4 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 8009072:	6839      	ldr	r1, [r7, #0]
 8009074:	6878      	ldr	r0, [r7, #4]
 8009076:	f000 fc45 	bl	8009904 <USBD_GetConfig>
      break;
 800907a:	e013      	b.n	80090a4 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 800907c:	6839      	ldr	r1, [r7, #0]
 800907e:	6878      	ldr	r0, [r7, #4]
 8009080:	f000 fc75 	bl	800996e <USBD_GetStatus>
      break;
 8009084:	e00e      	b.n	80090a4 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 8009086:	6839      	ldr	r1, [r7, #0]
 8009088:	6878      	ldr	r0, [r7, #4]
 800908a:	f000 fca3 	bl	80099d4 <USBD_SetFeature>
      break;
 800908e:	e009      	b.n	80090a4 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 8009090:	6839      	ldr	r1, [r7, #0]
 8009092:	6878      	ldr	r0, [r7, #4]
 8009094:	f000 fcb2 	bl	80099fc <USBD_ClrFeature>
      break;
 8009098:	e004      	b.n	80090a4 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 800909a:	6839      	ldr	r1, [r7, #0]
 800909c:	6878      	ldr	r0, [r7, #4]
 800909e:	f000 fd08 	bl	8009ab2 <USBD_CtlError>
      break;
 80090a2:	bf00      	nop
    }
    break;
 80090a4:	e004      	b.n	80090b0 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 80090a6:	6839      	ldr	r1, [r7, #0]
 80090a8:	6878      	ldr	r0, [r7, #4]
 80090aa:	f000 fd02 	bl	8009ab2 <USBD_CtlError>
    break;
 80090ae:	bf00      	nop
  }

  return ret;
 80090b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80090b2:	4618      	mov	r0, r3
 80090b4:	3710      	adds	r7, #16
 80090b6:	46bd      	mov	sp, r7
 80090b8:	bd80      	pop	{r7, pc}
 80090ba:	bf00      	nop

080090bc <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80090bc:	b580      	push	{r7, lr}
 80090be:	b084      	sub	sp, #16
 80090c0:	af00      	add	r7, sp, #0
 80090c2:	6078      	str	r0, [r7, #4]
 80090c4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80090c6:	2300      	movs	r3, #0
 80090c8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80090ca:	683b      	ldr	r3, [r7, #0]
 80090cc:	781b      	ldrb	r3, [r3, #0]
 80090ce:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80090d2:	2b40      	cmp	r3, #64	@ 0x40
 80090d4:	d005      	beq.n	80090e2 <USBD_StdItfReq+0x26>
 80090d6:	2b40      	cmp	r3, #64	@ 0x40
 80090d8:	d82e      	bhi.n	8009138 <USBD_StdItfReq+0x7c>
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d001      	beq.n	80090e2 <USBD_StdItfReq+0x26>
 80090de:	2b20      	cmp	r3, #32
 80090e0:	d12a      	bne.n	8009138 <USBD_StdItfReq+0x7c>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80090e8:	3b01      	subs	r3, #1
 80090ea:	2b02      	cmp	r3, #2
 80090ec:	d81d      	bhi.n	800912a <USBD_StdItfReq+0x6e>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80090ee:	683b      	ldr	r3, [r7, #0]
 80090f0:	889b      	ldrh	r3, [r3, #4]
 80090f2:	b2db      	uxtb	r3, r3
 80090f4:	2b01      	cmp	r3, #1
 80090f6:	d813      	bhi.n	8009120 <USBD_StdItfReq+0x64>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80090fe:	689b      	ldr	r3, [r3, #8]
 8009100:	6839      	ldr	r1, [r7, #0]
 8009102:	6878      	ldr	r0, [r7, #4]
 8009104:	4798      	blx	r3
 8009106:	4603      	mov	r3, r0
 8009108:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 800910a:	683b      	ldr	r3, [r7, #0]
 800910c:	88db      	ldrh	r3, [r3, #6]
 800910e:	2b00      	cmp	r3, #0
 8009110:	d110      	bne.n	8009134 <USBD_StdItfReq+0x78>
 8009112:	7bfb      	ldrb	r3, [r7, #15]
 8009114:	2b00      	cmp	r3, #0
 8009116:	d10d      	bne.n	8009134 <USBD_StdItfReq+0x78>
        {
          (void)USBD_CtlSendStatus(pdev);
 8009118:	6878      	ldr	r0, [r7, #4]
 800911a:	f000 fd78 	bl	8009c0e <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 800911e:	e009      	b.n	8009134 <USBD_StdItfReq+0x78>
        USBD_CtlError(pdev, req);
 8009120:	6839      	ldr	r1, [r7, #0]
 8009122:	6878      	ldr	r0, [r7, #4]
 8009124:	f000 fcc5 	bl	8009ab2 <USBD_CtlError>
      break;
 8009128:	e004      	b.n	8009134 <USBD_StdItfReq+0x78>

    default:
      USBD_CtlError(pdev, req);
 800912a:	6839      	ldr	r1, [r7, #0]
 800912c:	6878      	ldr	r0, [r7, #4]
 800912e:	f000 fcc0 	bl	8009ab2 <USBD_CtlError>
      break;
 8009132:	e000      	b.n	8009136 <USBD_StdItfReq+0x7a>
      break;
 8009134:	bf00      	nop
    }
    break;
 8009136:	e004      	b.n	8009142 <USBD_StdItfReq+0x86>

  default:
    USBD_CtlError(pdev, req);
 8009138:	6839      	ldr	r1, [r7, #0]
 800913a:	6878      	ldr	r0, [r7, #4]
 800913c:	f000 fcb9 	bl	8009ab2 <USBD_CtlError>
    break;
 8009140:	bf00      	nop
  }

  return ret;
 8009142:	7bfb      	ldrb	r3, [r7, #15]
}
 8009144:	4618      	mov	r0, r3
 8009146:	3710      	adds	r7, #16
 8009148:	46bd      	mov	sp, r7
 800914a:	bd80      	pop	{r7, pc}

0800914c <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800914c:	b580      	push	{r7, lr}
 800914e:	b084      	sub	sp, #16
 8009150:	af00      	add	r7, sp, #0
 8009152:	6078      	str	r0, [r7, #4]
 8009154:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8009156:	2300      	movs	r3, #0
 8009158:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800915a:	683b      	ldr	r3, [r7, #0]
 800915c:	889b      	ldrh	r3, [r3, #4]
 800915e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009160:	683b      	ldr	r3, [r7, #0]
 8009162:	781b      	ldrb	r3, [r3, #0]
 8009164:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009168:	2b40      	cmp	r3, #64	@ 0x40
 800916a:	d007      	beq.n	800917c <USBD_StdEPReq+0x30>
 800916c:	2b40      	cmp	r3, #64	@ 0x40
 800916e:	f200 8142 	bhi.w	80093f6 <USBD_StdEPReq+0x2aa>
 8009172:	2b00      	cmp	r3, #0
 8009174:	d00c      	beq.n	8009190 <USBD_StdEPReq+0x44>
 8009176:	2b20      	cmp	r3, #32
 8009178:	f040 813d 	bne.w	80093f6 <USBD_StdEPReq+0x2aa>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009182:	689b      	ldr	r3, [r3, #8]
 8009184:	6839      	ldr	r1, [r7, #0]
 8009186:	6878      	ldr	r0, [r7, #4]
 8009188:	4798      	blx	r3
 800918a:	4603      	mov	r3, r0
 800918c:	73fb      	strb	r3, [r7, #15]
    break;
 800918e:	e137      	b.n	8009400 <USBD_StdEPReq+0x2b4>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8009190:	683b      	ldr	r3, [r7, #0]
 8009192:	785b      	ldrb	r3, [r3, #1]
 8009194:	2b03      	cmp	r3, #3
 8009196:	d007      	beq.n	80091a8 <USBD_StdEPReq+0x5c>
 8009198:	2b03      	cmp	r3, #3
 800919a:	f300 8126 	bgt.w	80093ea <USBD_StdEPReq+0x29e>
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d07d      	beq.n	800929e <USBD_StdEPReq+0x152>
 80091a2:	2b01      	cmp	r3, #1
 80091a4:	d03b      	beq.n	800921e <USBD_StdEPReq+0xd2>
 80091a6:	e120      	b.n	80093ea <USBD_StdEPReq+0x29e>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80091ae:	2b02      	cmp	r3, #2
 80091b0:	d002      	beq.n	80091b8 <USBD_StdEPReq+0x6c>
 80091b2:	2b03      	cmp	r3, #3
 80091b4:	d016      	beq.n	80091e4 <USBD_StdEPReq+0x98>
 80091b6:	e02c      	b.n	8009212 <USBD_StdEPReq+0xc6>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80091b8:	7bbb      	ldrb	r3, [r7, #14]
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d00d      	beq.n	80091da <USBD_StdEPReq+0x8e>
 80091be:	7bbb      	ldrb	r3, [r7, #14]
 80091c0:	2b80      	cmp	r3, #128	@ 0x80
 80091c2:	d00a      	beq.n	80091da <USBD_StdEPReq+0x8e>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 80091c4:	7bbb      	ldrb	r3, [r7, #14]
 80091c6:	4619      	mov	r1, r3
 80091c8:	6878      	ldr	r0, [r7, #4]
 80091ca:	f001 f8e9 	bl	800a3a0 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80091ce:	2180      	movs	r1, #128	@ 0x80
 80091d0:	6878      	ldr	r0, [r7, #4]
 80091d2:	f001 f8e5 	bl	800a3a0 <USBD_LL_StallEP>
 80091d6:	bf00      	nop
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 80091d8:	e020      	b.n	800921c <USBD_StdEPReq+0xd0>
          USBD_CtlError(pdev, req);
 80091da:	6839      	ldr	r1, [r7, #0]
 80091dc:	6878      	ldr	r0, [r7, #4]
 80091de:	f000 fc68 	bl	8009ab2 <USBD_CtlError>
        break;
 80091e2:	e01b      	b.n	800921c <USBD_StdEPReq+0xd0>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 80091e4:	683b      	ldr	r3, [r7, #0]
 80091e6:	885b      	ldrh	r3, [r3, #2]
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d10e      	bne.n	800920a <USBD_StdEPReq+0xbe>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80091ec:	7bbb      	ldrb	r3, [r7, #14]
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d00b      	beq.n	800920a <USBD_StdEPReq+0xbe>
 80091f2:	7bbb      	ldrb	r3, [r7, #14]
 80091f4:	2b80      	cmp	r3, #128	@ 0x80
 80091f6:	d008      	beq.n	800920a <USBD_StdEPReq+0xbe>
 80091f8:	683b      	ldr	r3, [r7, #0]
 80091fa:	88db      	ldrh	r3, [r3, #6]
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d104      	bne.n	800920a <USBD_StdEPReq+0xbe>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 8009200:	7bbb      	ldrb	r3, [r7, #14]
 8009202:	4619      	mov	r1, r3
 8009204:	6878      	ldr	r0, [r7, #4]
 8009206:	f001 f8cb 	bl	800a3a0 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 800920a:	6878      	ldr	r0, [r7, #4]
 800920c:	f000 fcff 	bl	8009c0e <USBD_CtlSendStatus>

        break;
 8009210:	e004      	b.n	800921c <USBD_StdEPReq+0xd0>

      default:
        USBD_CtlError(pdev, req);
 8009212:	6839      	ldr	r1, [r7, #0]
 8009214:	6878      	ldr	r0, [r7, #4]
 8009216:	f000 fc4c 	bl	8009ab2 <USBD_CtlError>
        break;
 800921a:	bf00      	nop
      }
      break;
 800921c:	e0ea      	b.n	80093f4 <USBD_StdEPReq+0x2a8>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009224:	2b02      	cmp	r3, #2
 8009226:	d002      	beq.n	800922e <USBD_StdEPReq+0xe2>
 8009228:	2b03      	cmp	r3, #3
 800922a:	d016      	beq.n	800925a <USBD_StdEPReq+0x10e>
 800922c:	e030      	b.n	8009290 <USBD_StdEPReq+0x144>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800922e:	7bbb      	ldrb	r3, [r7, #14]
 8009230:	2b00      	cmp	r3, #0
 8009232:	d00d      	beq.n	8009250 <USBD_StdEPReq+0x104>
 8009234:	7bbb      	ldrb	r3, [r7, #14]
 8009236:	2b80      	cmp	r3, #128	@ 0x80
 8009238:	d00a      	beq.n	8009250 <USBD_StdEPReq+0x104>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800923a:	7bbb      	ldrb	r3, [r7, #14]
 800923c:	4619      	mov	r1, r3
 800923e:	6878      	ldr	r0, [r7, #4]
 8009240:	f001 f8ae 	bl	800a3a0 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8009244:	2180      	movs	r1, #128	@ 0x80
 8009246:	6878      	ldr	r0, [r7, #4]
 8009248:	f001 f8aa 	bl	800a3a0 <USBD_LL_StallEP>
 800924c:	bf00      	nop
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800924e:	e025      	b.n	800929c <USBD_StdEPReq+0x150>
          USBD_CtlError(pdev, req);
 8009250:	6839      	ldr	r1, [r7, #0]
 8009252:	6878      	ldr	r0, [r7, #4]
 8009254:	f000 fc2d 	bl	8009ab2 <USBD_CtlError>
        break;
 8009258:	e020      	b.n	800929c <USBD_StdEPReq+0x150>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800925a:	683b      	ldr	r3, [r7, #0]
 800925c:	885b      	ldrh	r3, [r3, #2]
 800925e:	2b00      	cmp	r3, #0
 8009260:	d11b      	bne.n	800929a <USBD_StdEPReq+0x14e>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8009262:	7bbb      	ldrb	r3, [r7, #14]
 8009264:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009268:	2b00      	cmp	r3, #0
 800926a:	d004      	beq.n	8009276 <USBD_StdEPReq+0x12a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800926c:	7bbb      	ldrb	r3, [r7, #14]
 800926e:	4619      	mov	r1, r3
 8009270:	6878      	ldr	r0, [r7, #4]
 8009272:	f001 f8cb 	bl	800a40c <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 8009276:	6878      	ldr	r0, [r7, #4]
 8009278:	f000 fcc9 	bl	8009c0e <USBD_CtlSendStatus>
          ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009282:	689b      	ldr	r3, [r3, #8]
 8009284:	6839      	ldr	r1, [r7, #0]
 8009286:	6878      	ldr	r0, [r7, #4]
 8009288:	4798      	blx	r3
 800928a:	4603      	mov	r3, r0
 800928c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800928e:	e004      	b.n	800929a <USBD_StdEPReq+0x14e>

      default:
        USBD_CtlError(pdev, req);
 8009290:	6839      	ldr	r1, [r7, #0]
 8009292:	6878      	ldr	r0, [r7, #4]
 8009294:	f000 fc0d 	bl	8009ab2 <USBD_CtlError>
        break;
 8009298:	e000      	b.n	800929c <USBD_StdEPReq+0x150>
        break;
 800929a:	bf00      	nop
      }
      break;
 800929c:	e0aa      	b.n	80093f4 <USBD_StdEPReq+0x2a8>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80092a4:	2b02      	cmp	r3, #2
 80092a6:	d002      	beq.n	80092ae <USBD_StdEPReq+0x162>
 80092a8:	2b03      	cmp	r3, #3
 80092aa:	d032      	beq.n	8009312 <USBD_StdEPReq+0x1c6>
 80092ac:	e097      	b.n	80093de <USBD_StdEPReq+0x292>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80092ae:	7bbb      	ldrb	r3, [r7, #14]
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d007      	beq.n	80092c4 <USBD_StdEPReq+0x178>
 80092b4:	7bbb      	ldrb	r3, [r7, #14]
 80092b6:	2b80      	cmp	r3, #128	@ 0x80
 80092b8:	d004      	beq.n	80092c4 <USBD_StdEPReq+0x178>
        {
          USBD_CtlError(pdev, req);
 80092ba:	6839      	ldr	r1, [r7, #0]
 80092bc:	6878      	ldr	r0, [r7, #4]
 80092be:	f000 fbf8 	bl	8009ab2 <USBD_CtlError>
          break;
 80092c2:	e091      	b.n	80093e8 <USBD_StdEPReq+0x29c>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80092c4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	da0b      	bge.n	80092e4 <USBD_StdEPReq+0x198>
 80092cc:	7bbb      	ldrb	r3, [r7, #14]
 80092ce:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80092d2:	4613      	mov	r3, r2
 80092d4:	009b      	lsls	r3, r3, #2
 80092d6:	4413      	add	r3, r2
 80092d8:	009b      	lsls	r3, r3, #2
 80092da:	3310      	adds	r3, #16
 80092dc:	687a      	ldr	r2, [r7, #4]
 80092de:	4413      	add	r3, r2
 80092e0:	3304      	adds	r3, #4
 80092e2:	e00b      	b.n	80092fc <USBD_StdEPReq+0x1b0>
              &pdev->ep_out[ep_addr & 0x7FU];
 80092e4:	7bbb      	ldrb	r3, [r7, #14]
 80092e6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80092ea:	4613      	mov	r3, r2
 80092ec:	009b      	lsls	r3, r3, #2
 80092ee:	4413      	add	r3, r2
 80092f0:	009b      	lsls	r3, r3, #2
 80092f2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80092f6:	687a      	ldr	r2, [r7, #4]
 80092f8:	4413      	add	r3, r2
 80092fa:	3304      	adds	r3, #4
 80092fc:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 80092fe:	68bb      	ldr	r3, [r7, #8]
 8009300:	2200      	movs	r2, #0
 8009302:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009304:	68bb      	ldr	r3, [r7, #8]
 8009306:	2202      	movs	r2, #2
 8009308:	4619      	mov	r1, r3
 800930a:	6878      	ldr	r0, [r7, #4]
 800930c:	f000 fc42 	bl	8009b94 <USBD_CtlSendData>
        break;
 8009310:	e06a      	b.n	80093e8 <USBD_StdEPReq+0x29c>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 8009312:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009316:	2b00      	cmp	r3, #0
 8009318:	da11      	bge.n	800933e <USBD_StdEPReq+0x1f2>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800931a:	7bbb      	ldrb	r3, [r7, #14]
 800931c:	f003 020f 	and.w	r2, r3, #15
 8009320:	6879      	ldr	r1, [r7, #4]
 8009322:	4613      	mov	r3, r2
 8009324:	009b      	lsls	r3, r3, #2
 8009326:	4413      	add	r3, r2
 8009328:	009b      	lsls	r3, r3, #2
 800932a:	440b      	add	r3, r1
 800932c:	3324      	adds	r3, #36	@ 0x24
 800932e:	881b      	ldrh	r3, [r3, #0]
 8009330:	2b00      	cmp	r3, #0
 8009332:	d117      	bne.n	8009364 <USBD_StdEPReq+0x218>
          {
            USBD_CtlError(pdev, req);
 8009334:	6839      	ldr	r1, [r7, #0]
 8009336:	6878      	ldr	r0, [r7, #4]
 8009338:	f000 fbbb 	bl	8009ab2 <USBD_CtlError>
            break;
 800933c:	e054      	b.n	80093e8 <USBD_StdEPReq+0x29c>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800933e:	7bbb      	ldrb	r3, [r7, #14]
 8009340:	f003 020f 	and.w	r2, r3, #15
 8009344:	6879      	ldr	r1, [r7, #4]
 8009346:	4613      	mov	r3, r2
 8009348:	009b      	lsls	r3, r3, #2
 800934a:	4413      	add	r3, r2
 800934c:	009b      	lsls	r3, r3, #2
 800934e:	440b      	add	r3, r1
 8009350:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8009354:	881b      	ldrh	r3, [r3, #0]
 8009356:	2b00      	cmp	r3, #0
 8009358:	d104      	bne.n	8009364 <USBD_StdEPReq+0x218>
          {
            USBD_CtlError(pdev, req);
 800935a:	6839      	ldr	r1, [r7, #0]
 800935c:	6878      	ldr	r0, [r7, #4]
 800935e:	f000 fba8 	bl	8009ab2 <USBD_CtlError>
            break;
 8009362:	e041      	b.n	80093e8 <USBD_StdEPReq+0x29c>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009364:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009368:	2b00      	cmp	r3, #0
 800936a:	da0b      	bge.n	8009384 <USBD_StdEPReq+0x238>
 800936c:	7bbb      	ldrb	r3, [r7, #14]
 800936e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009372:	4613      	mov	r3, r2
 8009374:	009b      	lsls	r3, r3, #2
 8009376:	4413      	add	r3, r2
 8009378:	009b      	lsls	r3, r3, #2
 800937a:	3310      	adds	r3, #16
 800937c:	687a      	ldr	r2, [r7, #4]
 800937e:	4413      	add	r3, r2
 8009380:	3304      	adds	r3, #4
 8009382:	e00b      	b.n	800939c <USBD_StdEPReq+0x250>
              &pdev->ep_out[ep_addr & 0x7FU];
 8009384:	7bbb      	ldrb	r3, [r7, #14]
 8009386:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800938a:	4613      	mov	r3, r2
 800938c:	009b      	lsls	r3, r3, #2
 800938e:	4413      	add	r3, r2
 8009390:	009b      	lsls	r3, r3, #2
 8009392:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009396:	687a      	ldr	r2, [r7, #4]
 8009398:	4413      	add	r3, r2
 800939a:	3304      	adds	r3, #4
 800939c:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800939e:	7bbb      	ldrb	r3, [r7, #14]
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d002      	beq.n	80093aa <USBD_StdEPReq+0x25e>
 80093a4:	7bbb      	ldrb	r3, [r7, #14]
 80093a6:	2b80      	cmp	r3, #128	@ 0x80
 80093a8:	d103      	bne.n	80093b2 <USBD_StdEPReq+0x266>
          {
            pep->status = 0x0000U;
 80093aa:	68bb      	ldr	r3, [r7, #8]
 80093ac:	2200      	movs	r2, #0
 80093ae:	601a      	str	r2, [r3, #0]
 80093b0:	e00e      	b.n	80093d0 <USBD_StdEPReq+0x284>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80093b2:	7bbb      	ldrb	r3, [r7, #14]
 80093b4:	4619      	mov	r1, r3
 80093b6:	6878      	ldr	r0, [r7, #4]
 80093b8:	f001 f85e 	bl	800a478 <USBD_LL_IsStallEP>
 80093bc:	4603      	mov	r3, r0
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d003      	beq.n	80093ca <USBD_StdEPReq+0x27e>
          {
            pep->status = 0x0001U;
 80093c2:	68bb      	ldr	r3, [r7, #8]
 80093c4:	2201      	movs	r2, #1
 80093c6:	601a      	str	r2, [r3, #0]
 80093c8:	e002      	b.n	80093d0 <USBD_StdEPReq+0x284>
          }
          else
          {
            pep->status = 0x0000U;
 80093ca:	68bb      	ldr	r3, [r7, #8]
 80093cc:	2200      	movs	r2, #0
 80093ce:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80093d0:	68bb      	ldr	r3, [r7, #8]
 80093d2:	2202      	movs	r2, #2
 80093d4:	4619      	mov	r1, r3
 80093d6:	6878      	ldr	r0, [r7, #4]
 80093d8:	f000 fbdc 	bl	8009b94 <USBD_CtlSendData>
          break;
 80093dc:	e004      	b.n	80093e8 <USBD_StdEPReq+0x29c>

      default:
        USBD_CtlError(pdev, req);
 80093de:	6839      	ldr	r1, [r7, #0]
 80093e0:	6878      	ldr	r0, [r7, #4]
 80093e2:	f000 fb66 	bl	8009ab2 <USBD_CtlError>
        break;
 80093e6:	bf00      	nop
      }
      break;
 80093e8:	e004      	b.n	80093f4 <USBD_StdEPReq+0x2a8>

    default:
      USBD_CtlError(pdev, req);
 80093ea:	6839      	ldr	r1, [r7, #0]
 80093ec:	6878      	ldr	r0, [r7, #4]
 80093ee:	f000 fb60 	bl	8009ab2 <USBD_CtlError>
      break;
 80093f2:	bf00      	nop
    }
    break;
 80093f4:	e004      	b.n	8009400 <USBD_StdEPReq+0x2b4>

  default:
    USBD_CtlError(pdev, req);
 80093f6:	6839      	ldr	r1, [r7, #0]
 80093f8:	6878      	ldr	r0, [r7, #4]
 80093fa:	f000 fb5a 	bl	8009ab2 <USBD_CtlError>
    break;
 80093fe:	bf00      	nop
  }

  return ret;
 8009400:	7bfb      	ldrb	r3, [r7, #15]
}
 8009402:	4618      	mov	r0, r3
 8009404:	3710      	adds	r7, #16
 8009406:	46bd      	mov	sp, r7
 8009408:	bd80      	pop	{r7, pc}
	...

0800940c <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800940c:	b580      	push	{r7, lr}
 800940e:	b084      	sub	sp, #16
 8009410:	af00      	add	r7, sp, #0
 8009412:	6078      	str	r0, [r7, #4]
 8009414:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009416:	2300      	movs	r3, #0
 8009418:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800941a:	2300      	movs	r3, #0
 800941c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800941e:	2300      	movs	r3, #0
 8009420:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009422:	683b      	ldr	r3, [r7, #0]
 8009424:	885b      	ldrh	r3, [r3, #2]
 8009426:	0a1b      	lsrs	r3, r3, #8
 8009428:	b29b      	uxth	r3, r3
 800942a:	3b01      	subs	r3, #1
 800942c:	2b0e      	cmp	r3, #14
 800942e:	f200 8152 	bhi.w	80096d6 <USBD_GetDescriptor+0x2ca>
 8009432:	a201      	add	r2, pc, #4	@ (adr r2, 8009438 <USBD_GetDescriptor+0x2c>)
 8009434:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009438:	080094a9 	.word	0x080094a9
 800943c:	080094c1 	.word	0x080094c1
 8009440:	08009501 	.word	0x08009501
 8009444:	080096d7 	.word	0x080096d7
 8009448:	080096d7 	.word	0x080096d7
 800944c:	08009677 	.word	0x08009677
 8009450:	080096a3 	.word	0x080096a3
 8009454:	080096d7 	.word	0x080096d7
 8009458:	080096d7 	.word	0x080096d7
 800945c:	080096d7 	.word	0x080096d7
 8009460:	080096d7 	.word	0x080096d7
 8009464:	080096d7 	.word	0x080096d7
 8009468:	080096d7 	.word	0x080096d7
 800946c:	080096d7 	.word	0x080096d7
 8009470:	08009475 	.word	0x08009475
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
  case USB_DESC_TYPE_BOS:
    if (pdev->pDesc->GetBOSDescriptor != NULL)
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800947a:	69db      	ldr	r3, [r3, #28]
 800947c:	2b00      	cmp	r3, #0
 800947e:	d00b      	beq.n	8009498 <USBD_GetDescriptor+0x8c>
    {
      pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009486:	69db      	ldr	r3, [r3, #28]
 8009488:	687a      	ldr	r2, [r7, #4]
 800948a:	7c12      	ldrb	r2, [r2, #16]
 800948c:	f107 0108 	add.w	r1, r7, #8
 8009490:	4610      	mov	r0, r2
 8009492:	4798      	blx	r3
 8009494:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8009496:	e126      	b.n	80096e6 <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 8009498:	6839      	ldr	r1, [r7, #0]
 800949a:	6878      	ldr	r0, [r7, #4]
 800949c:	f000 fb09 	bl	8009ab2 <USBD_CtlError>
      err++;
 80094a0:	7afb      	ldrb	r3, [r7, #11]
 80094a2:	3301      	adds	r3, #1
 80094a4:	72fb      	strb	r3, [r7, #11]
    break;
 80094a6:	e11e      	b.n	80096e6 <USBD_GetDescriptor+0x2da>
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	687a      	ldr	r2, [r7, #4]
 80094b2:	7c12      	ldrb	r2, [r2, #16]
 80094b4:	f107 0108 	add.w	r1, r7, #8
 80094b8:	4610      	mov	r0, r2
 80094ba:	4798      	blx	r3
 80094bc:	60f8      	str	r0, [r7, #12]
    break;
 80094be:	e112      	b.n	80096e6 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	7c1b      	ldrb	r3, [r3, #16]
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d10d      	bne.n	80094e4 <USBD_GetDescriptor+0xd8>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80094ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80094d0:	f107 0208 	add.w	r2, r7, #8
 80094d4:	4610      	mov	r0, r2
 80094d6:	4798      	blx	r3
 80094d8:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	3301      	adds	r3, #1
 80094de:	2202      	movs	r2, #2
 80094e0:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 80094e2:	e100      	b.n	80096e6 <USBD_GetDescriptor+0x2da>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80094ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80094ec:	f107 0208 	add.w	r2, r7, #8
 80094f0:	4610      	mov	r0, r2
 80094f2:	4798      	blx	r3
 80094f4:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	3301      	adds	r3, #1
 80094fa:	2202      	movs	r2, #2
 80094fc:	701a      	strb	r2, [r3, #0]
    break;
 80094fe:	e0f2      	b.n	80096e6 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8009500:	683b      	ldr	r3, [r7, #0]
 8009502:	885b      	ldrh	r3, [r3, #2]
 8009504:	b2db      	uxtb	r3, r3
 8009506:	2b05      	cmp	r3, #5
 8009508:	f200 80ac 	bhi.w	8009664 <USBD_GetDescriptor+0x258>
 800950c:	a201      	add	r2, pc, #4	@ (adr r2, 8009514 <USBD_GetDescriptor+0x108>)
 800950e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009512:	bf00      	nop
 8009514:	0800952d 	.word	0x0800952d
 8009518:	08009561 	.word	0x08009561
 800951c:	08009595 	.word	0x08009595
 8009520:	080095c9 	.word	0x080095c9
 8009524:	080095fd 	.word	0x080095fd
 8009528:	08009631 	.word	0x08009631
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009532:	685b      	ldr	r3, [r3, #4]
 8009534:	2b00      	cmp	r3, #0
 8009536:	d00b      	beq.n	8009550 <USBD_GetDescriptor+0x144>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800953e:	685b      	ldr	r3, [r3, #4]
 8009540:	687a      	ldr	r2, [r7, #4]
 8009542:	7c12      	ldrb	r2, [r2, #16]
 8009544:	f107 0108 	add.w	r1, r7, #8
 8009548:	4610      	mov	r0, r2
 800954a:	4798      	blx	r3
 800954c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800954e:	e091      	b.n	8009674 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8009550:	6839      	ldr	r1, [r7, #0]
 8009552:	6878      	ldr	r0, [r7, #4]
 8009554:	f000 faad 	bl	8009ab2 <USBD_CtlError>
        err++;
 8009558:	7afb      	ldrb	r3, [r7, #11]
 800955a:	3301      	adds	r3, #1
 800955c:	72fb      	strb	r3, [r7, #11]
      break;
 800955e:	e089      	b.n	8009674 <USBD_GetDescriptor+0x268>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009566:	689b      	ldr	r3, [r3, #8]
 8009568:	2b00      	cmp	r3, #0
 800956a:	d00b      	beq.n	8009584 <USBD_GetDescriptor+0x178>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009572:	689b      	ldr	r3, [r3, #8]
 8009574:	687a      	ldr	r2, [r7, #4]
 8009576:	7c12      	ldrb	r2, [r2, #16]
 8009578:	f107 0108 	add.w	r1, r7, #8
 800957c:	4610      	mov	r0, r2
 800957e:	4798      	blx	r3
 8009580:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009582:	e077      	b.n	8009674 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8009584:	6839      	ldr	r1, [r7, #0]
 8009586:	6878      	ldr	r0, [r7, #4]
 8009588:	f000 fa93 	bl	8009ab2 <USBD_CtlError>
        err++;
 800958c:	7afb      	ldrb	r3, [r7, #11]
 800958e:	3301      	adds	r3, #1
 8009590:	72fb      	strb	r3, [r7, #11]
      break;
 8009592:	e06f      	b.n	8009674 <USBD_GetDescriptor+0x268>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800959a:	68db      	ldr	r3, [r3, #12]
 800959c:	2b00      	cmp	r3, #0
 800959e:	d00b      	beq.n	80095b8 <USBD_GetDescriptor+0x1ac>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80095a6:	68db      	ldr	r3, [r3, #12]
 80095a8:	687a      	ldr	r2, [r7, #4]
 80095aa:	7c12      	ldrb	r2, [r2, #16]
 80095ac:	f107 0108 	add.w	r1, r7, #8
 80095b0:	4610      	mov	r0, r2
 80095b2:	4798      	blx	r3
 80095b4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80095b6:	e05d      	b.n	8009674 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 80095b8:	6839      	ldr	r1, [r7, #0]
 80095ba:	6878      	ldr	r0, [r7, #4]
 80095bc:	f000 fa79 	bl	8009ab2 <USBD_CtlError>
        err++;
 80095c0:	7afb      	ldrb	r3, [r7, #11]
 80095c2:	3301      	adds	r3, #1
 80095c4:	72fb      	strb	r3, [r7, #11]
      break;
 80095c6:	e055      	b.n	8009674 <USBD_GetDescriptor+0x268>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80095ce:	691b      	ldr	r3, [r3, #16]
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d00b      	beq.n	80095ec <USBD_GetDescriptor+0x1e0>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80095da:	691b      	ldr	r3, [r3, #16]
 80095dc:	687a      	ldr	r2, [r7, #4]
 80095de:	7c12      	ldrb	r2, [r2, #16]
 80095e0:	f107 0108 	add.w	r1, r7, #8
 80095e4:	4610      	mov	r0, r2
 80095e6:	4798      	blx	r3
 80095e8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80095ea:	e043      	b.n	8009674 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 80095ec:	6839      	ldr	r1, [r7, #0]
 80095ee:	6878      	ldr	r0, [r7, #4]
 80095f0:	f000 fa5f 	bl	8009ab2 <USBD_CtlError>
        err++;
 80095f4:	7afb      	ldrb	r3, [r7, #11]
 80095f6:	3301      	adds	r3, #1
 80095f8:	72fb      	strb	r3, [r7, #11]
      break;
 80095fa:	e03b      	b.n	8009674 <USBD_GetDescriptor+0x268>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009602:	695b      	ldr	r3, [r3, #20]
 8009604:	2b00      	cmp	r3, #0
 8009606:	d00b      	beq.n	8009620 <USBD_GetDescriptor+0x214>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800960e:	695b      	ldr	r3, [r3, #20]
 8009610:	687a      	ldr	r2, [r7, #4]
 8009612:	7c12      	ldrb	r2, [r2, #16]
 8009614:	f107 0108 	add.w	r1, r7, #8
 8009618:	4610      	mov	r0, r2
 800961a:	4798      	blx	r3
 800961c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800961e:	e029      	b.n	8009674 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8009620:	6839      	ldr	r1, [r7, #0]
 8009622:	6878      	ldr	r0, [r7, #4]
 8009624:	f000 fa45 	bl	8009ab2 <USBD_CtlError>
        err++;
 8009628:	7afb      	ldrb	r3, [r7, #11]
 800962a:	3301      	adds	r3, #1
 800962c:	72fb      	strb	r3, [r7, #11]
      break;
 800962e:	e021      	b.n	8009674 <USBD_GetDescriptor+0x268>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009636:	699b      	ldr	r3, [r3, #24]
 8009638:	2b00      	cmp	r3, #0
 800963a:	d00b      	beq.n	8009654 <USBD_GetDescriptor+0x248>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009642:	699b      	ldr	r3, [r3, #24]
 8009644:	687a      	ldr	r2, [r7, #4]
 8009646:	7c12      	ldrb	r2, [r2, #16]
 8009648:	f107 0108 	add.w	r1, r7, #8
 800964c:	4610      	mov	r0, r2
 800964e:	4798      	blx	r3
 8009650:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009652:	e00f      	b.n	8009674 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8009654:	6839      	ldr	r1, [r7, #0]
 8009656:	6878      	ldr	r0, [r7, #4]
 8009658:	f000 fa2b 	bl	8009ab2 <USBD_CtlError>
        err++;
 800965c:	7afb      	ldrb	r3, [r7, #11]
 800965e:	3301      	adds	r3, #1
 8009660:	72fb      	strb	r3, [r7, #11]
      break;
 8009662:	e007      	b.n	8009674 <USBD_GetDescriptor+0x268>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 8009664:	6839      	ldr	r1, [r7, #0]
 8009666:	6878      	ldr	r0, [r7, #4]
 8009668:	f000 fa23 	bl	8009ab2 <USBD_CtlError>
      err++;
 800966c:	7afb      	ldrb	r3, [r7, #11]
 800966e:	3301      	adds	r3, #1
 8009670:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 8009672:	bf00      	nop
    }
    break;
 8009674:	e037      	b.n	80096e6 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	7c1b      	ldrb	r3, [r3, #16]
 800967a:	2b00      	cmp	r3, #0
 800967c:	d109      	bne.n	8009692 <USBD_GetDescriptor+0x286>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009684:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009686:	f107 0208 	add.w	r2, r7, #8
 800968a:	4610      	mov	r0, r2
 800968c:	4798      	blx	r3
 800968e:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8009690:	e029      	b.n	80096e6 <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 8009692:	6839      	ldr	r1, [r7, #0]
 8009694:	6878      	ldr	r0, [r7, #4]
 8009696:	f000 fa0c 	bl	8009ab2 <USBD_CtlError>
      err++;
 800969a:	7afb      	ldrb	r3, [r7, #11]
 800969c:	3301      	adds	r3, #1
 800969e:	72fb      	strb	r3, [r7, #11]
    break;
 80096a0:	e021      	b.n	80096e6 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	7c1b      	ldrb	r3, [r3, #16]
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d10d      	bne.n	80096c6 <USBD_GetDescriptor+0x2ba>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80096b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80096b2:	f107 0208 	add.w	r2, r7, #8
 80096b6:	4610      	mov	r0, r2
 80096b8:	4798      	blx	r3
 80096ba:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	3301      	adds	r3, #1
 80096c0:	2207      	movs	r2, #7
 80096c2:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 80096c4:	e00f      	b.n	80096e6 <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 80096c6:	6839      	ldr	r1, [r7, #0]
 80096c8:	6878      	ldr	r0, [r7, #4]
 80096ca:	f000 f9f2 	bl	8009ab2 <USBD_CtlError>
      err++;
 80096ce:	7afb      	ldrb	r3, [r7, #11]
 80096d0:	3301      	adds	r3, #1
 80096d2:	72fb      	strb	r3, [r7, #11]
    break;
 80096d4:	e007      	b.n	80096e6 <USBD_GetDescriptor+0x2da>

  default:
    USBD_CtlError(pdev, req);
 80096d6:	6839      	ldr	r1, [r7, #0]
 80096d8:	6878      	ldr	r0, [r7, #4]
 80096da:	f000 f9ea 	bl	8009ab2 <USBD_CtlError>
    err++;
 80096de:	7afb      	ldrb	r3, [r7, #11]
 80096e0:	3301      	adds	r3, #1
 80096e2:	72fb      	strb	r3, [r7, #11]
    break;
 80096e4:	bf00      	nop
  }

  if (err != 0U)
 80096e6:	7afb      	ldrb	r3, [r7, #11]
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d11e      	bne.n	800972a <USBD_GetDescriptor+0x31e>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 80096ec:	683b      	ldr	r3, [r7, #0]
 80096ee:	88db      	ldrh	r3, [r3, #6]
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d016      	beq.n	8009722 <USBD_GetDescriptor+0x316>
    {
      if (len != 0U)
 80096f4:	893b      	ldrh	r3, [r7, #8]
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d00e      	beq.n	8009718 <USBD_GetDescriptor+0x30c>
      {
        len = MIN(len, req->wLength);
 80096fa:	683b      	ldr	r3, [r7, #0]
 80096fc:	88da      	ldrh	r2, [r3, #6]
 80096fe:	893b      	ldrh	r3, [r7, #8]
 8009700:	4293      	cmp	r3, r2
 8009702:	bf28      	it	cs
 8009704:	4613      	movcs	r3, r2
 8009706:	b29b      	uxth	r3, r3
 8009708:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 800970a:	893b      	ldrh	r3, [r7, #8]
 800970c:	461a      	mov	r2, r3
 800970e:	68f9      	ldr	r1, [r7, #12]
 8009710:	6878      	ldr	r0, [r7, #4]
 8009712:	f000 fa3f 	bl	8009b94 <USBD_CtlSendData>
 8009716:	e009      	b.n	800972c <USBD_GetDescriptor+0x320>
      }
      else
      {
        USBD_CtlError(pdev, req);
 8009718:	6839      	ldr	r1, [r7, #0]
 800971a:	6878      	ldr	r0, [r7, #4]
 800971c:	f000 f9c9 	bl	8009ab2 <USBD_CtlError>
 8009720:	e004      	b.n	800972c <USBD_GetDescriptor+0x320>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 8009722:	6878      	ldr	r0, [r7, #4]
 8009724:	f000 fa73 	bl	8009c0e <USBD_CtlSendStatus>
 8009728:	e000      	b.n	800972c <USBD_GetDescriptor+0x320>
    return;
 800972a:	bf00      	nop
    }
  }
}
 800972c:	3710      	adds	r7, #16
 800972e:	46bd      	mov	sp, r7
 8009730:	bd80      	pop	{r7, pc}
 8009732:	bf00      	nop

08009734 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009734:	b580      	push	{r7, lr}
 8009736:	b084      	sub	sp, #16
 8009738:	af00      	add	r7, sp, #0
 800973a:	6078      	str	r0, [r7, #4]
 800973c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800973e:	683b      	ldr	r3, [r7, #0]
 8009740:	889b      	ldrh	r3, [r3, #4]
 8009742:	2b00      	cmp	r3, #0
 8009744:	d130      	bne.n	80097a8 <USBD_SetAddress+0x74>
 8009746:	683b      	ldr	r3, [r7, #0]
 8009748:	88db      	ldrh	r3, [r3, #6]
 800974a:	2b00      	cmp	r3, #0
 800974c:	d12c      	bne.n	80097a8 <USBD_SetAddress+0x74>
 800974e:	683b      	ldr	r3, [r7, #0]
 8009750:	885b      	ldrh	r3, [r3, #2]
 8009752:	2b7f      	cmp	r3, #127	@ 0x7f
 8009754:	d828      	bhi.n	80097a8 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009756:	683b      	ldr	r3, [r7, #0]
 8009758:	885b      	ldrh	r3, [r3, #2]
 800975a:	b2db      	uxtb	r3, r3
 800975c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009760:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009768:	2b03      	cmp	r3, #3
 800976a:	d104      	bne.n	8009776 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800976c:	6839      	ldr	r1, [r7, #0]
 800976e:	6878      	ldr	r0, [r7, #4]
 8009770:	f000 f99f 	bl	8009ab2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009774:	e01d      	b.n	80097b2 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	7bfa      	ldrb	r2, [r7, #15]
 800977a:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800977e:	7bfb      	ldrb	r3, [r7, #15]
 8009780:	4619      	mov	r1, r3
 8009782:	6878      	ldr	r0, [r7, #4]
 8009784:	f000 fea4 	bl	800a4d0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8009788:	6878      	ldr	r0, [r7, #4]
 800978a:	f000 fa40 	bl	8009c0e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800978e:	7bfb      	ldrb	r3, [r7, #15]
 8009790:	2b00      	cmp	r3, #0
 8009792:	d004      	beq.n	800979e <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	2202      	movs	r2, #2
 8009798:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800979c:	e009      	b.n	80097b2 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	2201      	movs	r2, #1
 80097a2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80097a6:	e004      	b.n	80097b2 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80097a8:	6839      	ldr	r1, [r7, #0]
 80097aa:	6878      	ldr	r0, [r7, #4]
 80097ac:	f000 f981 	bl	8009ab2 <USBD_CtlError>
  }
}
 80097b0:	bf00      	nop
 80097b2:	bf00      	nop
 80097b4:	3710      	adds	r7, #16
 80097b6:	46bd      	mov	sp, r7
 80097b8:	bd80      	pop	{r7, pc}
	...

080097bc <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80097bc:	b580      	push	{r7, lr}
 80097be:	b084      	sub	sp, #16
 80097c0:	af00      	add	r7, sp, #0
 80097c2:	6078      	str	r0, [r7, #4]
 80097c4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80097c6:	2300      	movs	r3, #0
 80097c8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80097ca:	683b      	ldr	r3, [r7, #0]
 80097cc:	885b      	ldrh	r3, [r3, #2]
 80097ce:	b2da      	uxtb	r2, r3
 80097d0:	4b4b      	ldr	r3, [pc, #300]	@ (8009900 <USBD_SetConfig+0x144>)
 80097d2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80097d4:	4b4a      	ldr	r3, [pc, #296]	@ (8009900 <USBD_SetConfig+0x144>)
 80097d6:	781b      	ldrb	r3, [r3, #0]
 80097d8:	2b01      	cmp	r3, #1
 80097da:	d905      	bls.n	80097e8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80097dc:	6839      	ldr	r1, [r7, #0]
 80097de:	6878      	ldr	r0, [r7, #4]
 80097e0:	f000 f967 	bl	8009ab2 <USBD_CtlError>
    return USBD_FAIL;
 80097e4:	2303      	movs	r3, #3
 80097e6:	e087      	b.n	80098f8 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80097ee:	2b02      	cmp	r3, #2
 80097f0:	d002      	beq.n	80097f8 <USBD_SetConfig+0x3c>
 80097f2:	2b03      	cmp	r3, #3
 80097f4:	d025      	beq.n	8009842 <USBD_SetConfig+0x86>
 80097f6:	e071      	b.n	80098dc <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 80097f8:	4b41      	ldr	r3, [pc, #260]	@ (8009900 <USBD_SetConfig+0x144>)
 80097fa:	781b      	ldrb	r3, [r3, #0]
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d01c      	beq.n	800983a <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 8009800:	4b3f      	ldr	r3, [pc, #252]	@ (8009900 <USBD_SetConfig+0x144>)
 8009802:	781b      	ldrb	r3, [r3, #0]
 8009804:	461a      	mov	r2, r3
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 800980a:	4b3d      	ldr	r3, [pc, #244]	@ (8009900 <USBD_SetConfig+0x144>)
 800980c:	781b      	ldrb	r3, [r3, #0]
 800980e:	4619      	mov	r1, r3
 8009810:	6878      	ldr	r0, [r7, #4]
 8009812:	f7ff f96d 	bl	8008af0 <USBD_SetClassConfig>
 8009816:	4603      	mov	r3, r0
 8009818:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 800981a:	7bfb      	ldrb	r3, [r7, #15]
 800981c:	2b00      	cmp	r3, #0
 800981e:	d004      	beq.n	800982a <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 8009820:	6839      	ldr	r1, [r7, #0]
 8009822:	6878      	ldr	r0, [r7, #4]
 8009824:	f000 f945 	bl	8009ab2 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8009828:	e065      	b.n	80098f6 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800982a:	6878      	ldr	r0, [r7, #4]
 800982c:	f000 f9ef 	bl	8009c0e <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	2203      	movs	r2, #3
 8009834:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    break;
 8009838:	e05d      	b.n	80098f6 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800983a:	6878      	ldr	r0, [r7, #4]
 800983c:	f000 f9e7 	bl	8009c0e <USBD_CtlSendStatus>
    break;
 8009840:	e059      	b.n	80098f6 <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 8009842:	4b2f      	ldr	r3, [pc, #188]	@ (8009900 <USBD_SetConfig+0x144>)
 8009844:	781b      	ldrb	r3, [r3, #0]
 8009846:	2b00      	cmp	r3, #0
 8009848:	d112      	bne.n	8009870 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	2202      	movs	r2, #2
 800984e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      pdev->dev_config = cfgidx;
 8009852:	4b2b      	ldr	r3, [pc, #172]	@ (8009900 <USBD_SetConfig+0x144>)
 8009854:	781b      	ldrb	r3, [r3, #0]
 8009856:	461a      	mov	r2, r3
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800985c:	4b28      	ldr	r3, [pc, #160]	@ (8009900 <USBD_SetConfig+0x144>)
 800985e:	781b      	ldrb	r3, [r3, #0]
 8009860:	4619      	mov	r1, r3
 8009862:	6878      	ldr	r0, [r7, #4]
 8009864:	f7ff f960 	bl	8008b28 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 8009868:	6878      	ldr	r0, [r7, #4]
 800986a:	f000 f9d0 	bl	8009c0e <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800986e:	e042      	b.n	80098f6 <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 8009870:	4b23      	ldr	r3, [pc, #140]	@ (8009900 <USBD_SetConfig+0x144>)
 8009872:	781b      	ldrb	r3, [r3, #0]
 8009874:	461a      	mov	r2, r3
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	685b      	ldr	r3, [r3, #4]
 800987a:	429a      	cmp	r2, r3
 800987c:	d02a      	beq.n	80098d4 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	685b      	ldr	r3, [r3, #4]
 8009882:	b2db      	uxtb	r3, r3
 8009884:	4619      	mov	r1, r3
 8009886:	6878      	ldr	r0, [r7, #4]
 8009888:	f7ff f94e 	bl	8008b28 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 800988c:	4b1c      	ldr	r3, [pc, #112]	@ (8009900 <USBD_SetConfig+0x144>)
 800988e:	781b      	ldrb	r3, [r3, #0]
 8009890:	461a      	mov	r2, r3
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 8009896:	4b1a      	ldr	r3, [pc, #104]	@ (8009900 <USBD_SetConfig+0x144>)
 8009898:	781b      	ldrb	r3, [r3, #0]
 800989a:	4619      	mov	r1, r3
 800989c:	6878      	ldr	r0, [r7, #4]
 800989e:	f7ff f927 	bl	8008af0 <USBD_SetClassConfig>
 80098a2:	4603      	mov	r3, r0
 80098a4:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 80098a6:	7bfb      	ldrb	r3, [r7, #15]
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d00f      	beq.n	80098cc <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 80098ac:	6839      	ldr	r1, [r7, #0]
 80098ae:	6878      	ldr	r0, [r7, #4]
 80098b0:	f000 f8ff 	bl	8009ab2 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	685b      	ldr	r3, [r3, #4]
 80098b8:	b2db      	uxtb	r3, r3
 80098ba:	4619      	mov	r1, r3
 80098bc:	6878      	ldr	r0, [r7, #4]
 80098be:	f7ff f933 	bl	8008b28 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	2202      	movs	r2, #2
 80098c6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    break;
 80098ca:	e014      	b.n	80098f6 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 80098cc:	6878      	ldr	r0, [r7, #4]
 80098ce:	f000 f99e 	bl	8009c0e <USBD_CtlSendStatus>
    break;
 80098d2:	e010      	b.n	80098f6 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 80098d4:	6878      	ldr	r0, [r7, #4]
 80098d6:	f000 f99a 	bl	8009c0e <USBD_CtlSendStatus>
    break;
 80098da:	e00c      	b.n	80098f6 <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 80098dc:	6839      	ldr	r1, [r7, #0]
 80098de:	6878      	ldr	r0, [r7, #4]
 80098e0:	f000 f8e7 	bl	8009ab2 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 80098e4:	4b06      	ldr	r3, [pc, #24]	@ (8009900 <USBD_SetConfig+0x144>)
 80098e6:	781b      	ldrb	r3, [r3, #0]
 80098e8:	4619      	mov	r1, r3
 80098ea:	6878      	ldr	r0, [r7, #4]
 80098ec:	f7ff f91c 	bl	8008b28 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 80098f0:	2303      	movs	r3, #3
 80098f2:	73fb      	strb	r3, [r7, #15]
    break;
 80098f4:	bf00      	nop
  }

  return ret;
 80098f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80098f8:	4618      	mov	r0, r3
 80098fa:	3710      	adds	r7, #16
 80098fc:	46bd      	mov	sp, r7
 80098fe:	bd80      	pop	{r7, pc}
 8009900:	20000614 	.word	0x20000614

08009904 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009904:	b580      	push	{r7, lr}
 8009906:	b082      	sub	sp, #8
 8009908:	af00      	add	r7, sp, #0
 800990a:	6078      	str	r0, [r7, #4]
 800990c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800990e:	683b      	ldr	r3, [r7, #0]
 8009910:	88db      	ldrh	r3, [r3, #6]
 8009912:	2b01      	cmp	r3, #1
 8009914:	d004      	beq.n	8009920 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009916:	6839      	ldr	r1, [r7, #0]
 8009918:	6878      	ldr	r0, [r7, #4]
 800991a:	f000 f8ca 	bl	8009ab2 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 800991e:	e022      	b.n	8009966 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009926:	2b02      	cmp	r3, #2
 8009928:	dc02      	bgt.n	8009930 <USBD_GetConfig+0x2c>
 800992a:	2b00      	cmp	r3, #0
 800992c:	dc03      	bgt.n	8009936 <USBD_GetConfig+0x32>
 800992e:	e015      	b.n	800995c <USBD_GetConfig+0x58>
 8009930:	2b03      	cmp	r3, #3
 8009932:	d00b      	beq.n	800994c <USBD_GetConfig+0x48>
 8009934:	e012      	b.n	800995c <USBD_GetConfig+0x58>
      pdev->dev_default_config = 0U;
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	2200      	movs	r2, #0
 800993a:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	3308      	adds	r3, #8
 8009940:	2201      	movs	r2, #1
 8009942:	4619      	mov	r1, r3
 8009944:	6878      	ldr	r0, [r7, #4]
 8009946:	f000 f925 	bl	8009b94 <USBD_CtlSendData>
      break;
 800994a:	e00c      	b.n	8009966 <USBD_GetConfig+0x62>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	3304      	adds	r3, #4
 8009950:	2201      	movs	r2, #1
 8009952:	4619      	mov	r1, r3
 8009954:	6878      	ldr	r0, [r7, #4]
 8009956:	f000 f91d 	bl	8009b94 <USBD_CtlSendData>
      break;
 800995a:	e004      	b.n	8009966 <USBD_GetConfig+0x62>
      USBD_CtlError(pdev, req);
 800995c:	6839      	ldr	r1, [r7, #0]
 800995e:	6878      	ldr	r0, [r7, #4]
 8009960:	f000 f8a7 	bl	8009ab2 <USBD_CtlError>
      break;
 8009964:	bf00      	nop
}
 8009966:	bf00      	nop
 8009968:	3708      	adds	r7, #8
 800996a:	46bd      	mov	sp, r7
 800996c:	bd80      	pop	{r7, pc}

0800996e <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800996e:	b580      	push	{r7, lr}
 8009970:	b082      	sub	sp, #8
 8009972:	af00      	add	r7, sp, #0
 8009974:	6078      	str	r0, [r7, #4]
 8009976:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800997e:	3b01      	subs	r3, #1
 8009980:	2b02      	cmp	r3, #2
 8009982:	d81e      	bhi.n	80099c2 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 8009984:	683b      	ldr	r3, [r7, #0]
 8009986:	88db      	ldrh	r3, [r3, #6]
 8009988:	2b02      	cmp	r3, #2
 800998a:	d004      	beq.n	8009996 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 800998c:	6839      	ldr	r1, [r7, #0]
 800998e:	6878      	ldr	r0, [r7, #4]
 8009990:	f000 f88f 	bl	8009ab2 <USBD_CtlError>
      break;
 8009994:	e01a      	b.n	80099cc <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	2201      	movs	r2, #1
 800999a:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d005      	beq.n	80099b2 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	68db      	ldr	r3, [r3, #12]
 80099aa:	f043 0202 	orr.w	r2, r3, #2
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	330c      	adds	r3, #12
 80099b6:	2202      	movs	r2, #2
 80099b8:	4619      	mov	r1, r3
 80099ba:	6878      	ldr	r0, [r7, #4]
 80099bc:	f000 f8ea 	bl	8009b94 <USBD_CtlSendData>
    break;
 80099c0:	e004      	b.n	80099cc <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 80099c2:	6839      	ldr	r1, [r7, #0]
 80099c4:	6878      	ldr	r0, [r7, #4]
 80099c6:	f000 f874 	bl	8009ab2 <USBD_CtlError>
    break;
 80099ca:	bf00      	nop
  }
}
 80099cc:	bf00      	nop
 80099ce:	3708      	adds	r7, #8
 80099d0:	46bd      	mov	sp, r7
 80099d2:	bd80      	pop	{r7, pc}

080099d4 <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80099d4:	b580      	push	{r7, lr}
 80099d6:	b082      	sub	sp, #8
 80099d8:	af00      	add	r7, sp, #0
 80099da:	6078      	str	r0, [r7, #4]
 80099dc:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80099de:	683b      	ldr	r3, [r7, #0]
 80099e0:	885b      	ldrh	r3, [r3, #2]
 80099e2:	2b01      	cmp	r3, #1
 80099e4:	d106      	bne.n	80099f4 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	2201      	movs	r2, #1
 80099ea:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80099ee:	6878      	ldr	r0, [r7, #4]
 80099f0:	f000 f90d 	bl	8009c0e <USBD_CtlSendStatus>
  }
}
 80099f4:	bf00      	nop
 80099f6:	3708      	adds	r7, #8
 80099f8:	46bd      	mov	sp, r7
 80099fa:	bd80      	pop	{r7, pc}

080099fc <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80099fc:	b580      	push	{r7, lr}
 80099fe:	b082      	sub	sp, #8
 8009a00:	af00      	add	r7, sp, #0
 8009a02:	6078      	str	r0, [r7, #4]
 8009a04:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009a0c:	3b01      	subs	r3, #1
 8009a0e:	2b02      	cmp	r3, #2
 8009a10:	d80b      	bhi.n	8009a2a <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009a12:	683b      	ldr	r3, [r7, #0]
 8009a14:	885b      	ldrh	r3, [r3, #2]
 8009a16:	2b01      	cmp	r3, #1
 8009a18:	d10c      	bne.n	8009a34 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	2200      	movs	r2, #0
 8009a1e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8009a22:	6878      	ldr	r0, [r7, #4]
 8009a24:	f000 f8f3 	bl	8009c0e <USBD_CtlSendStatus>
      }
      break;
 8009a28:	e004      	b.n	8009a34 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8009a2a:	6839      	ldr	r1, [r7, #0]
 8009a2c:	6878      	ldr	r0, [r7, #4]
 8009a2e:	f000 f840 	bl	8009ab2 <USBD_CtlError>
      break;
 8009a32:	e000      	b.n	8009a36 <USBD_ClrFeature+0x3a>
      break;
 8009a34:	bf00      	nop
  }
}
 8009a36:	bf00      	nop
 8009a38:	3708      	adds	r7, #8
 8009a3a:	46bd      	mov	sp, r7
 8009a3c:	bd80      	pop	{r7, pc}

08009a3e <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009a3e:	b580      	push	{r7, lr}
 8009a40:	b084      	sub	sp, #16
 8009a42:	af00      	add	r7, sp, #0
 8009a44:	6078      	str	r0, [r7, #4]
 8009a46:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8009a48:	683b      	ldr	r3, [r7, #0]
 8009a4a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	781a      	ldrb	r2, [r3, #0]
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	3301      	adds	r3, #1
 8009a58:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8009a5a:	68fb      	ldr	r3, [r7, #12]
 8009a5c:	781a      	ldrb	r2, [r3, #0]
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	3301      	adds	r3, #1
 8009a66:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8009a68:	68f8      	ldr	r0, [r7, #12]
 8009a6a:	f7ff fa9a 	bl	8008fa2 <SWAPBYTE>
 8009a6e:	4603      	mov	r3, r0
 8009a70:	461a      	mov	r2, r3
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	3301      	adds	r3, #1
 8009a7a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	3301      	adds	r3, #1
 8009a80:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8009a82:	68f8      	ldr	r0, [r7, #12]
 8009a84:	f7ff fa8d 	bl	8008fa2 <SWAPBYTE>
 8009a88:	4603      	mov	r3, r0
 8009a8a:	461a      	mov	r2, r3
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	3301      	adds	r3, #1
 8009a94:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	3301      	adds	r3, #1
 8009a9a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8009a9c:	68f8      	ldr	r0, [r7, #12]
 8009a9e:	f7ff fa80 	bl	8008fa2 <SWAPBYTE>
 8009aa2:	4603      	mov	r3, r0
 8009aa4:	461a      	mov	r2, r3
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	80da      	strh	r2, [r3, #6]
}
 8009aaa:	bf00      	nop
 8009aac:	3710      	adds	r7, #16
 8009aae:	46bd      	mov	sp, r7
 8009ab0:	bd80      	pop	{r7, pc}

08009ab2 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009ab2:	b580      	push	{r7, lr}
 8009ab4:	b082      	sub	sp, #8
 8009ab6:	af00      	add	r7, sp, #0
 8009ab8:	6078      	str	r0, [r7, #4]
 8009aba:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8009abc:	2180      	movs	r1, #128	@ 0x80
 8009abe:	6878      	ldr	r0, [r7, #4]
 8009ac0:	f000 fc6e 	bl	800a3a0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8009ac4:	2100      	movs	r1, #0
 8009ac6:	6878      	ldr	r0, [r7, #4]
 8009ac8:	f000 fc6a 	bl	800a3a0 <USBD_LL_StallEP>
}
 8009acc:	bf00      	nop
 8009ace:	3708      	adds	r7, #8
 8009ad0:	46bd      	mov	sp, r7
 8009ad2:	bd80      	pop	{r7, pc}

08009ad4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009ad4:	b580      	push	{r7, lr}
 8009ad6:	b086      	sub	sp, #24
 8009ad8:	af00      	add	r7, sp, #0
 8009ada:	60f8      	str	r0, [r7, #12]
 8009adc:	60b9      	str	r1, [r7, #8]
 8009ade:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009ae0:	2300      	movs	r3, #0
 8009ae2:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d036      	beq.n	8009b58 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8009aee:	6938      	ldr	r0, [r7, #16]
 8009af0:	f000 f836 	bl	8009b60 <USBD_GetLen>
 8009af4:	4603      	mov	r3, r0
 8009af6:	3301      	adds	r3, #1
 8009af8:	b29b      	uxth	r3, r3
 8009afa:	005b      	lsls	r3, r3, #1
 8009afc:	b29a      	uxth	r2, r3
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8009b02:	7dfb      	ldrb	r3, [r7, #23]
 8009b04:	68ba      	ldr	r2, [r7, #8]
 8009b06:	4413      	add	r3, r2
 8009b08:	687a      	ldr	r2, [r7, #4]
 8009b0a:	7812      	ldrb	r2, [r2, #0]
 8009b0c:	701a      	strb	r2, [r3, #0]
  idx++;
 8009b0e:	7dfb      	ldrb	r3, [r7, #23]
 8009b10:	3301      	adds	r3, #1
 8009b12:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8009b14:	7dfb      	ldrb	r3, [r7, #23]
 8009b16:	68ba      	ldr	r2, [r7, #8]
 8009b18:	4413      	add	r3, r2
 8009b1a:	2203      	movs	r2, #3
 8009b1c:	701a      	strb	r2, [r3, #0]
  idx++;
 8009b1e:	7dfb      	ldrb	r3, [r7, #23]
 8009b20:	3301      	adds	r3, #1
 8009b22:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8009b24:	e013      	b.n	8009b4e <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8009b26:	7dfb      	ldrb	r3, [r7, #23]
 8009b28:	68ba      	ldr	r2, [r7, #8]
 8009b2a:	4413      	add	r3, r2
 8009b2c:	693a      	ldr	r2, [r7, #16]
 8009b2e:	7812      	ldrb	r2, [r2, #0]
 8009b30:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8009b32:	693b      	ldr	r3, [r7, #16]
 8009b34:	3301      	adds	r3, #1
 8009b36:	613b      	str	r3, [r7, #16]
    idx++;
 8009b38:	7dfb      	ldrb	r3, [r7, #23]
 8009b3a:	3301      	adds	r3, #1
 8009b3c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8009b3e:	7dfb      	ldrb	r3, [r7, #23]
 8009b40:	68ba      	ldr	r2, [r7, #8]
 8009b42:	4413      	add	r3, r2
 8009b44:	2200      	movs	r2, #0
 8009b46:	701a      	strb	r2, [r3, #0]
    idx++;
 8009b48:	7dfb      	ldrb	r3, [r7, #23]
 8009b4a:	3301      	adds	r3, #1
 8009b4c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8009b4e:	693b      	ldr	r3, [r7, #16]
 8009b50:	781b      	ldrb	r3, [r3, #0]
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	d1e7      	bne.n	8009b26 <USBD_GetString+0x52>
 8009b56:	e000      	b.n	8009b5a <USBD_GetString+0x86>
    return;
 8009b58:	bf00      	nop
  }
}
 8009b5a:	3718      	adds	r7, #24
 8009b5c:	46bd      	mov	sp, r7
 8009b5e:	bd80      	pop	{r7, pc}

08009b60 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009b60:	b480      	push	{r7}
 8009b62:	b085      	sub	sp, #20
 8009b64:	af00      	add	r7, sp, #0
 8009b66:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009b68:	2300      	movs	r3, #0
 8009b6a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8009b70:	e005      	b.n	8009b7e <USBD_GetLen+0x1e>
  {
    len++;
 8009b72:	7bfb      	ldrb	r3, [r7, #15]
 8009b74:	3301      	adds	r3, #1
 8009b76:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8009b78:	68bb      	ldr	r3, [r7, #8]
 8009b7a:	3301      	adds	r3, #1
 8009b7c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8009b7e:	68bb      	ldr	r3, [r7, #8]
 8009b80:	781b      	ldrb	r3, [r3, #0]
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d1f5      	bne.n	8009b72 <USBD_GetLen+0x12>
  }

  return len;
 8009b86:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b88:	4618      	mov	r0, r3
 8009b8a:	3714      	adds	r7, #20
 8009b8c:	46bd      	mov	sp, r7
 8009b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b92:	4770      	bx	lr

08009b94 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8009b94:	b580      	push	{r7, lr}
 8009b96:	b084      	sub	sp, #16
 8009b98:	af00      	add	r7, sp, #0
 8009b9a:	60f8      	str	r0, [r7, #12]
 8009b9c:	60b9      	str	r1, [r7, #8]
 8009b9e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	2202      	movs	r2, #2
 8009ba4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	687a      	ldr	r2, [r7, #4]
 8009bac:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	687a      	ldr	r2, [r7, #4]
 8009bb2:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	68ba      	ldr	r2, [r7, #8]
 8009bb8:	2100      	movs	r1, #0
 8009bba:	68f8      	ldr	r0, [r7, #12]
 8009bbc:	f000 fcbe 	bl	800a53c <USBD_LL_Transmit>

  return USBD_OK;
 8009bc0:	2300      	movs	r3, #0
}
 8009bc2:	4618      	mov	r0, r3
 8009bc4:	3710      	adds	r7, #16
 8009bc6:	46bd      	mov	sp, r7
 8009bc8:	bd80      	pop	{r7, pc}

08009bca <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8009bca:	b580      	push	{r7, lr}
 8009bcc:	b084      	sub	sp, #16
 8009bce:	af00      	add	r7, sp, #0
 8009bd0:	60f8      	str	r0, [r7, #12]
 8009bd2:	60b9      	str	r1, [r7, #8]
 8009bd4:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	68ba      	ldr	r2, [r7, #8]
 8009bda:	2100      	movs	r1, #0
 8009bdc:	68f8      	ldr	r0, [r7, #12]
 8009bde:	f000 fcad 	bl	800a53c <USBD_LL_Transmit>

  return USBD_OK;
 8009be2:	2300      	movs	r3, #0
}
 8009be4:	4618      	mov	r0, r3
 8009be6:	3710      	adds	r7, #16
 8009be8:	46bd      	mov	sp, r7
 8009bea:	bd80      	pop	{r7, pc}

08009bec <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8009bec:	b580      	push	{r7, lr}
 8009bee:	b084      	sub	sp, #16
 8009bf0:	af00      	add	r7, sp, #0
 8009bf2:	60f8      	str	r0, [r7, #12]
 8009bf4:	60b9      	str	r1, [r7, #8]
 8009bf6:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	68ba      	ldr	r2, [r7, #8]
 8009bfc:	2100      	movs	r1, #0
 8009bfe:	68f8      	ldr	r0, [r7, #12]
 8009c00:	f000 fcd4 	bl	800a5ac <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009c04:	2300      	movs	r3, #0
}
 8009c06:	4618      	mov	r0, r3
 8009c08:	3710      	adds	r7, #16
 8009c0a:	46bd      	mov	sp, r7
 8009c0c:	bd80      	pop	{r7, pc}

08009c0e <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009c0e:	b580      	push	{r7, lr}
 8009c10:	b082      	sub	sp, #8
 8009c12:	af00      	add	r7, sp, #0
 8009c14:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	2204      	movs	r2, #4
 8009c1a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009c1e:	2300      	movs	r3, #0
 8009c20:	2200      	movs	r2, #0
 8009c22:	2100      	movs	r1, #0
 8009c24:	6878      	ldr	r0, [r7, #4]
 8009c26:	f000 fc89 	bl	800a53c <USBD_LL_Transmit>

  return USBD_OK;
 8009c2a:	2300      	movs	r3, #0
}
 8009c2c:	4618      	mov	r0, r3
 8009c2e:	3708      	adds	r7, #8
 8009c30:	46bd      	mov	sp, r7
 8009c32:	bd80      	pop	{r7, pc}

08009c34 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009c34:	b580      	push	{r7, lr}
 8009c36:	b082      	sub	sp, #8
 8009c38:	af00      	add	r7, sp, #0
 8009c3a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	2205      	movs	r2, #5
 8009c40:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009c44:	2300      	movs	r3, #0
 8009c46:	2200      	movs	r2, #0
 8009c48:	2100      	movs	r1, #0
 8009c4a:	6878      	ldr	r0, [r7, #4]
 8009c4c:	f000 fcae 	bl	800a5ac <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009c50:	2300      	movs	r3, #0
}
 8009c52:	4618      	mov	r0, r3
 8009c54:	3708      	adds	r7, #8
 8009c56:	46bd      	mov	sp, r7
 8009c58:	bd80      	pop	{r7, pc}
	...

08009c5c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009c5c:	b580      	push	{r7, lr}
 8009c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009c60:	2200      	movs	r2, #0
 8009c62:	490e      	ldr	r1, [pc, #56]	@ (8009c9c <MX_USB_DEVICE_Init+0x40>)
 8009c64:	480e      	ldr	r0, [pc, #56]	@ (8009ca0 <MX_USB_DEVICE_Init+0x44>)
 8009c66:	f7fe fed5 	bl	8008a14 <USBD_Init>
 8009c6a:	4603      	mov	r3, r0
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d001      	beq.n	8009c74 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009c70:	f7f7 fd72 	bl	8001758 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 8009c74:	490b      	ldr	r1, [pc, #44]	@ (8009ca4 <MX_USB_DEVICE_Init+0x48>)
 8009c76:	480a      	ldr	r0, [pc, #40]	@ (8009ca0 <MX_USB_DEVICE_Init+0x44>)
 8009c78:	f7fe fefc 	bl	8008a74 <USBD_RegisterClass>
 8009c7c:	4603      	mov	r3, r0
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d001      	beq.n	8009c86 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8009c82:	f7f7 fd69 	bl	8001758 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009c86:	4806      	ldr	r0, [pc, #24]	@ (8009ca0 <MX_USB_DEVICE_Init+0x44>)
 8009c88:	f7fe ff1b 	bl	8008ac2 <USBD_Start>
 8009c8c:	4603      	mov	r3, r0
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d001      	beq.n	8009c96 <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 8009c92:	f7f7 fd61 	bl	8001758 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009c96:	bf00      	nop
 8009c98:	bd80      	pop	{r7, pc}
 8009c9a:	bf00      	nop
 8009c9c:	200001b0 	.word	0x200001b0
 8009ca0:	20000618 	.word	0x20000618
 8009ca4:	200000a8 	.word	0x200000a8

08009ca8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009ca8:	b480      	push	{r7}
 8009caa:	b083      	sub	sp, #12
 8009cac:	af00      	add	r7, sp, #0
 8009cae:	4603      	mov	r3, r0
 8009cb0:	6039      	str	r1, [r7, #0]
 8009cb2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009cb4:	683b      	ldr	r3, [r7, #0]
 8009cb6:	2212      	movs	r2, #18
 8009cb8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8009cba:	4b03      	ldr	r3, [pc, #12]	@ (8009cc8 <USBD_FS_DeviceDescriptor+0x20>)
}
 8009cbc:	4618      	mov	r0, r3
 8009cbe:	370c      	adds	r7, #12
 8009cc0:	46bd      	mov	sp, r7
 8009cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cc6:	4770      	bx	lr
 8009cc8:	200001d0 	.word	0x200001d0

08009ccc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009ccc:	b480      	push	{r7}
 8009cce:	b083      	sub	sp, #12
 8009cd0:	af00      	add	r7, sp, #0
 8009cd2:	4603      	mov	r3, r0
 8009cd4:	6039      	str	r1, [r7, #0]
 8009cd6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009cd8:	683b      	ldr	r3, [r7, #0]
 8009cda:	2204      	movs	r2, #4
 8009cdc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009cde:	4b03      	ldr	r3, [pc, #12]	@ (8009cec <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009ce0:	4618      	mov	r0, r3
 8009ce2:	370c      	adds	r7, #12
 8009ce4:	46bd      	mov	sp, r7
 8009ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cea:	4770      	bx	lr
 8009cec:	200001f0 	.word	0x200001f0

08009cf0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009cf0:	b580      	push	{r7, lr}
 8009cf2:	b082      	sub	sp, #8
 8009cf4:	af00      	add	r7, sp, #0
 8009cf6:	4603      	mov	r3, r0
 8009cf8:	6039      	str	r1, [r7, #0]
 8009cfa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009cfc:	79fb      	ldrb	r3, [r7, #7]
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d105      	bne.n	8009d0e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009d02:	683a      	ldr	r2, [r7, #0]
 8009d04:	4907      	ldr	r1, [pc, #28]	@ (8009d24 <USBD_FS_ProductStrDescriptor+0x34>)
 8009d06:	4808      	ldr	r0, [pc, #32]	@ (8009d28 <USBD_FS_ProductStrDescriptor+0x38>)
 8009d08:	f7ff fee4 	bl	8009ad4 <USBD_GetString>
 8009d0c:	e004      	b.n	8009d18 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009d0e:	683a      	ldr	r2, [r7, #0]
 8009d10:	4904      	ldr	r1, [pc, #16]	@ (8009d24 <USBD_FS_ProductStrDescriptor+0x34>)
 8009d12:	4805      	ldr	r0, [pc, #20]	@ (8009d28 <USBD_FS_ProductStrDescriptor+0x38>)
 8009d14:	f7ff fede 	bl	8009ad4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009d18:	4b02      	ldr	r3, [pc, #8]	@ (8009d24 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8009d1a:	4618      	mov	r0, r3
 8009d1c:	3708      	adds	r7, #8
 8009d1e:	46bd      	mov	sp, r7
 8009d20:	bd80      	pop	{r7, pc}
 8009d22:	bf00      	nop
 8009d24:	200008e8 	.word	0x200008e8
 8009d28:	0800ef54 	.word	0x0800ef54

08009d2c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009d2c:	b580      	push	{r7, lr}
 8009d2e:	b082      	sub	sp, #8
 8009d30:	af00      	add	r7, sp, #0
 8009d32:	4603      	mov	r3, r0
 8009d34:	6039      	str	r1, [r7, #0]
 8009d36:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009d38:	683a      	ldr	r2, [r7, #0]
 8009d3a:	4904      	ldr	r1, [pc, #16]	@ (8009d4c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009d3c:	4804      	ldr	r0, [pc, #16]	@ (8009d50 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8009d3e:	f7ff fec9 	bl	8009ad4 <USBD_GetString>
  return USBD_StrDesc;
 8009d42:	4b02      	ldr	r3, [pc, #8]	@ (8009d4c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009d44:	4618      	mov	r0, r3
 8009d46:	3708      	adds	r7, #8
 8009d48:	46bd      	mov	sp, r7
 8009d4a:	bd80      	pop	{r7, pc}
 8009d4c:	200008e8 	.word	0x200008e8
 8009d50:	0800ef5c 	.word	0x0800ef5c

08009d54 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009d54:	b580      	push	{r7, lr}
 8009d56:	b082      	sub	sp, #8
 8009d58:	af00      	add	r7, sp, #0
 8009d5a:	4603      	mov	r3, r0
 8009d5c:	6039      	str	r1, [r7, #0]
 8009d5e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009d60:	683b      	ldr	r3, [r7, #0]
 8009d62:	221a      	movs	r2, #26
 8009d64:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009d66:	f000 f855 	bl	8009e14 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8009d6a:	4b02      	ldr	r3, [pc, #8]	@ (8009d74 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009d6c:	4618      	mov	r0, r3
 8009d6e:	3708      	adds	r7, #8
 8009d70:	46bd      	mov	sp, r7
 8009d72:	bd80      	pop	{r7, pc}
 8009d74:	200001f4 	.word	0x200001f4

08009d78 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009d78:	b580      	push	{r7, lr}
 8009d7a:	b082      	sub	sp, #8
 8009d7c:	af00      	add	r7, sp, #0
 8009d7e:	4603      	mov	r3, r0
 8009d80:	6039      	str	r1, [r7, #0]
 8009d82:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009d84:	79fb      	ldrb	r3, [r7, #7]
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d105      	bne.n	8009d96 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009d8a:	683a      	ldr	r2, [r7, #0]
 8009d8c:	4907      	ldr	r1, [pc, #28]	@ (8009dac <USBD_FS_ConfigStrDescriptor+0x34>)
 8009d8e:	4808      	ldr	r0, [pc, #32]	@ (8009db0 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009d90:	f7ff fea0 	bl	8009ad4 <USBD_GetString>
 8009d94:	e004      	b.n	8009da0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009d96:	683a      	ldr	r2, [r7, #0]
 8009d98:	4904      	ldr	r1, [pc, #16]	@ (8009dac <USBD_FS_ConfigStrDescriptor+0x34>)
 8009d9a:	4805      	ldr	r0, [pc, #20]	@ (8009db0 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009d9c:	f7ff fe9a 	bl	8009ad4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009da0:	4b02      	ldr	r3, [pc, #8]	@ (8009dac <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8009da2:	4618      	mov	r0, r3
 8009da4:	3708      	adds	r7, #8
 8009da6:	46bd      	mov	sp, r7
 8009da8:	bd80      	pop	{r7, pc}
 8009daa:	bf00      	nop
 8009dac:	200008e8 	.word	0x200008e8
 8009db0:	0800ef70 	.word	0x0800ef70

08009db4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009db4:	b580      	push	{r7, lr}
 8009db6:	b082      	sub	sp, #8
 8009db8:	af00      	add	r7, sp, #0
 8009dba:	4603      	mov	r3, r0
 8009dbc:	6039      	str	r1, [r7, #0]
 8009dbe:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009dc0:	79fb      	ldrb	r3, [r7, #7]
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d105      	bne.n	8009dd2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009dc6:	683a      	ldr	r2, [r7, #0]
 8009dc8:	4907      	ldr	r1, [pc, #28]	@ (8009de8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009dca:	4808      	ldr	r0, [pc, #32]	@ (8009dec <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009dcc:	f7ff fe82 	bl	8009ad4 <USBD_GetString>
 8009dd0:	e004      	b.n	8009ddc <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009dd2:	683a      	ldr	r2, [r7, #0]
 8009dd4:	4904      	ldr	r1, [pc, #16]	@ (8009de8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009dd6:	4805      	ldr	r0, [pc, #20]	@ (8009dec <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009dd8:	f7ff fe7c 	bl	8009ad4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009ddc:	4b02      	ldr	r3, [pc, #8]	@ (8009de8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8009dde:	4618      	mov	r0, r3
 8009de0:	3708      	adds	r7, #8
 8009de2:	46bd      	mov	sp, r7
 8009de4:	bd80      	pop	{r7, pc}
 8009de6:	bf00      	nop
 8009de8:	200008e8 	.word	0x200008e8
 8009dec:	0800ef7c 	.word	0x0800ef7c

08009df0 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009df0:	b480      	push	{r7}
 8009df2:	b083      	sub	sp, #12
 8009df4:	af00      	add	r7, sp, #0
 8009df6:	4603      	mov	r3, r0
 8009df8:	6039      	str	r1, [r7, #0]
 8009dfa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8009dfc:	683b      	ldr	r3, [r7, #0]
 8009dfe:	220c      	movs	r2, #12
 8009e00:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 8009e02:	4b03      	ldr	r3, [pc, #12]	@ (8009e10 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 8009e04:	4618      	mov	r0, r3
 8009e06:	370c      	adds	r7, #12
 8009e08:	46bd      	mov	sp, r7
 8009e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e0e:	4770      	bx	lr
 8009e10:	200001e4 	.word	0x200001e4

08009e14 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009e14:	b580      	push	{r7, lr}
 8009e16:	b084      	sub	sp, #16
 8009e18:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009e1a:	4b0f      	ldr	r3, [pc, #60]	@ (8009e58 <Get_SerialNum+0x44>)
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009e20:	4b0e      	ldr	r3, [pc, #56]	@ (8009e5c <Get_SerialNum+0x48>)
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009e26:	4b0e      	ldr	r3, [pc, #56]	@ (8009e60 <Get_SerialNum+0x4c>)
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009e2c:	68fa      	ldr	r2, [r7, #12]
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	4413      	add	r3, r2
 8009e32:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d009      	beq.n	8009e4e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009e3a:	2208      	movs	r2, #8
 8009e3c:	4909      	ldr	r1, [pc, #36]	@ (8009e64 <Get_SerialNum+0x50>)
 8009e3e:	68f8      	ldr	r0, [r7, #12]
 8009e40:	f000 f814 	bl	8009e6c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009e44:	2204      	movs	r2, #4
 8009e46:	4908      	ldr	r1, [pc, #32]	@ (8009e68 <Get_SerialNum+0x54>)
 8009e48:	68b8      	ldr	r0, [r7, #8]
 8009e4a:	f000 f80f 	bl	8009e6c <IntToUnicode>
  }
}
 8009e4e:	bf00      	nop
 8009e50:	3710      	adds	r7, #16
 8009e52:	46bd      	mov	sp, r7
 8009e54:	bd80      	pop	{r7, pc}
 8009e56:	bf00      	nop
 8009e58:	1fff7590 	.word	0x1fff7590
 8009e5c:	1fff7594 	.word	0x1fff7594
 8009e60:	1fff7598 	.word	0x1fff7598
 8009e64:	200001f6 	.word	0x200001f6
 8009e68:	20000206 	.word	0x20000206

08009e6c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009e6c:	b480      	push	{r7}
 8009e6e:	b087      	sub	sp, #28
 8009e70:	af00      	add	r7, sp, #0
 8009e72:	60f8      	str	r0, [r7, #12]
 8009e74:	60b9      	str	r1, [r7, #8]
 8009e76:	4613      	mov	r3, r2
 8009e78:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009e7a:	2300      	movs	r3, #0
 8009e7c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009e7e:	2300      	movs	r3, #0
 8009e80:	75fb      	strb	r3, [r7, #23]
 8009e82:	e027      	b.n	8009ed4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	0f1b      	lsrs	r3, r3, #28
 8009e88:	2b09      	cmp	r3, #9
 8009e8a:	d80b      	bhi.n	8009ea4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	0f1b      	lsrs	r3, r3, #28
 8009e90:	b2da      	uxtb	r2, r3
 8009e92:	7dfb      	ldrb	r3, [r7, #23]
 8009e94:	005b      	lsls	r3, r3, #1
 8009e96:	4619      	mov	r1, r3
 8009e98:	68bb      	ldr	r3, [r7, #8]
 8009e9a:	440b      	add	r3, r1
 8009e9c:	3230      	adds	r2, #48	@ 0x30
 8009e9e:	b2d2      	uxtb	r2, r2
 8009ea0:	701a      	strb	r2, [r3, #0]
 8009ea2:	e00a      	b.n	8009eba <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	0f1b      	lsrs	r3, r3, #28
 8009ea8:	b2da      	uxtb	r2, r3
 8009eaa:	7dfb      	ldrb	r3, [r7, #23]
 8009eac:	005b      	lsls	r3, r3, #1
 8009eae:	4619      	mov	r1, r3
 8009eb0:	68bb      	ldr	r3, [r7, #8]
 8009eb2:	440b      	add	r3, r1
 8009eb4:	3237      	adds	r2, #55	@ 0x37
 8009eb6:	b2d2      	uxtb	r2, r2
 8009eb8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	011b      	lsls	r3, r3, #4
 8009ebe:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009ec0:	7dfb      	ldrb	r3, [r7, #23]
 8009ec2:	005b      	lsls	r3, r3, #1
 8009ec4:	3301      	adds	r3, #1
 8009ec6:	68ba      	ldr	r2, [r7, #8]
 8009ec8:	4413      	add	r3, r2
 8009eca:	2200      	movs	r2, #0
 8009ecc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009ece:	7dfb      	ldrb	r3, [r7, #23]
 8009ed0:	3301      	adds	r3, #1
 8009ed2:	75fb      	strb	r3, [r7, #23]
 8009ed4:	7dfa      	ldrb	r2, [r7, #23]
 8009ed6:	79fb      	ldrb	r3, [r7, #7]
 8009ed8:	429a      	cmp	r2, r3
 8009eda:	d3d3      	bcc.n	8009e84 <IntToUnicode+0x18>
  }
}
 8009edc:	bf00      	nop
 8009ede:	bf00      	nop
 8009ee0:	371c      	adds	r7, #28
 8009ee2:	46bd      	mov	sp, r7
 8009ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ee8:	4770      	bx	lr
	...

08009eec <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009eec:	b580      	push	{r7, lr}
 8009eee:	b08a      	sub	sp, #40	@ 0x28
 8009ef0:	af00      	add	r7, sp, #0
 8009ef2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009ef4:	f107 0314 	add.w	r3, r7, #20
 8009ef8:	2200      	movs	r2, #0
 8009efa:	601a      	str	r2, [r3, #0]
 8009efc:	605a      	str	r2, [r3, #4]
 8009efe:	609a      	str	r2, [r3, #8]
 8009f00:	60da      	str	r2, [r3, #12]
 8009f02:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009f0c:	d14e      	bne.n	8009fac <HAL_PCD_MspInit+0xc0>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009f0e:	4b29      	ldr	r3, [pc, #164]	@ (8009fb4 <HAL_PCD_MspInit+0xc8>)
 8009f10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009f12:	4a28      	ldr	r2, [pc, #160]	@ (8009fb4 <HAL_PCD_MspInit+0xc8>)
 8009f14:	f043 0301 	orr.w	r3, r3, #1
 8009f18:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8009f1a:	4b26      	ldr	r3, [pc, #152]	@ (8009fb4 <HAL_PCD_MspInit+0xc8>)
 8009f1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009f1e:	f003 0301 	and.w	r3, r3, #1
 8009f22:	613b      	str	r3, [r7, #16]
 8009f24:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8009f26:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8009f2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009f2c:	2302      	movs	r3, #2
 8009f2e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009f30:	2300      	movs	r3, #0
 8009f32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009f34:	2303      	movs	r3, #3
 8009f36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009f38:	230a      	movs	r3, #10
 8009f3a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009f3c:	f107 0314 	add.w	r3, r7, #20
 8009f40:	4619      	mov	r1, r3
 8009f42:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8009f46:	f7f9 f9c3 	bl	80032d0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009f4a:	4b1a      	ldr	r3, [pc, #104]	@ (8009fb4 <HAL_PCD_MspInit+0xc8>)
 8009f4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009f4e:	4a19      	ldr	r2, [pc, #100]	@ (8009fb4 <HAL_PCD_MspInit+0xc8>)
 8009f50:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8009f54:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8009f56:	4b17      	ldr	r3, [pc, #92]	@ (8009fb4 <HAL_PCD_MspInit+0xc8>)
 8009f58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009f5a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8009f5e:	60fb      	str	r3, [r7, #12]
 8009f60:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009f62:	4b14      	ldr	r3, [pc, #80]	@ (8009fb4 <HAL_PCD_MspInit+0xc8>)
 8009f64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009f66:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	d114      	bne.n	8009f98 <HAL_PCD_MspInit+0xac>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009f6e:	4b11      	ldr	r3, [pc, #68]	@ (8009fb4 <HAL_PCD_MspInit+0xc8>)
 8009f70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009f72:	4a10      	ldr	r2, [pc, #64]	@ (8009fb4 <HAL_PCD_MspInit+0xc8>)
 8009f74:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009f78:	6593      	str	r3, [r2, #88]	@ 0x58
 8009f7a:	4b0e      	ldr	r3, [pc, #56]	@ (8009fb4 <HAL_PCD_MspInit+0xc8>)
 8009f7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009f7e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009f82:	60bb      	str	r3, [r7, #8]
 8009f84:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8009f86:	f7fa fda1 	bl	8004acc <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8009f8a:	4b0a      	ldr	r3, [pc, #40]	@ (8009fb4 <HAL_PCD_MspInit+0xc8>)
 8009f8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009f8e:	4a09      	ldr	r2, [pc, #36]	@ (8009fb4 <HAL_PCD_MspInit+0xc8>)
 8009f90:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009f94:	6593      	str	r3, [r2, #88]	@ 0x58
 8009f96:	e001      	b.n	8009f9c <HAL_PCD_MspInit+0xb0>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 8009f98:	f7fa fd98 	bl	8004acc <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8009f9c:	2200      	movs	r2, #0
 8009f9e:	2100      	movs	r1, #0
 8009fa0:	2043      	movs	r0, #67	@ 0x43
 8009fa2:	f7f9 f91e 	bl	80031e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8009fa6:	2043      	movs	r0, #67	@ 0x43
 8009fa8:	f7f9 f937 	bl	800321a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009fac:	bf00      	nop
 8009fae:	3728      	adds	r7, #40	@ 0x28
 8009fb0:	46bd      	mov	sp, r7
 8009fb2:	bd80      	pop	{r7, pc}
 8009fb4:	40021000 	.word	0x40021000

08009fb8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009fb8:	b580      	push	{r7, lr}
 8009fba:	b082      	sub	sp, #8
 8009fbc:	af00      	add	r7, sp, #0
 8009fbe:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	f8d3 2404 	ldr.w	r2, [r3, #1028]	@ 0x404
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	f503 7371 	add.w	r3, r3, #964	@ 0x3c4
 8009fcc:	4619      	mov	r1, r3
 8009fce:	4610      	mov	r0, r2
 8009fd0:	f7fe fdc2 	bl	8008b58 <USBD_LL_SetupStage>
}
 8009fd4:	bf00      	nop
 8009fd6:	3708      	adds	r7, #8
 8009fd8:	46bd      	mov	sp, r7
 8009fda:	bd80      	pop	{r7, pc}

08009fdc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009fdc:	b580      	push	{r7, lr}
 8009fde:	b082      	sub	sp, #8
 8009fe0:	af00      	add	r7, sp, #0
 8009fe2:	6078      	str	r0, [r7, #4]
 8009fe4:	460b      	mov	r3, r1
 8009fe6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	f8d3 0404 	ldr.w	r0, [r3, #1028]	@ 0x404
 8009fee:	78fa      	ldrb	r2, [r7, #3]
 8009ff0:	6879      	ldr	r1, [r7, #4]
 8009ff2:	4613      	mov	r3, r2
 8009ff4:	00db      	lsls	r3, r3, #3
 8009ff6:	1a9b      	subs	r3, r3, r2
 8009ff8:	009b      	lsls	r3, r3, #2
 8009ffa:	440b      	add	r3, r1
 8009ffc:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 800a000:	681a      	ldr	r2, [r3, #0]
 800a002:	78fb      	ldrb	r3, [r7, #3]
 800a004:	4619      	mov	r1, r3
 800a006:	f7fe fdfc 	bl	8008c02 <USBD_LL_DataOutStage>
}
 800a00a:	bf00      	nop
 800a00c:	3708      	adds	r7, #8
 800a00e:	46bd      	mov	sp, r7
 800a010:	bd80      	pop	{r7, pc}

0800a012 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a012:	b580      	push	{r7, lr}
 800a014:	b082      	sub	sp, #8
 800a016:	af00      	add	r7, sp, #0
 800a018:	6078      	str	r0, [r7, #4]
 800a01a:	460b      	mov	r3, r1
 800a01c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	f8d3 0404 	ldr.w	r0, [r3, #1028]	@ 0x404
 800a024:	78fa      	ldrb	r2, [r7, #3]
 800a026:	6879      	ldr	r1, [r7, #4]
 800a028:	4613      	mov	r3, r2
 800a02a:	00db      	lsls	r3, r3, #3
 800a02c:	1a9b      	subs	r3, r3, r2
 800a02e:	009b      	lsls	r3, r3, #2
 800a030:	440b      	add	r3, r1
 800a032:	3348      	adds	r3, #72	@ 0x48
 800a034:	681a      	ldr	r2, [r3, #0]
 800a036:	78fb      	ldrb	r3, [r7, #3]
 800a038:	4619      	mov	r1, r3
 800a03a:	f7fe fe45 	bl	8008cc8 <USBD_LL_DataInStage>
}
 800a03e:	bf00      	nop
 800a040:	3708      	adds	r7, #8
 800a042:	46bd      	mov	sp, r7
 800a044:	bd80      	pop	{r7, pc}

0800a046 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a046:	b580      	push	{r7, lr}
 800a048:	b082      	sub	sp, #8
 800a04a:	af00      	add	r7, sp, #0
 800a04c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 800a054:	4618      	mov	r0, r3
 800a056:	f7fe ff49 	bl	8008eec <USBD_LL_SOF>
}
 800a05a:	bf00      	nop
 800a05c:	3708      	adds	r7, #8
 800a05e:	46bd      	mov	sp, r7
 800a060:	bd80      	pop	{r7, pc}

0800a062 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a062:	b580      	push	{r7, lr}
 800a064:	b084      	sub	sp, #16
 800a066:	af00      	add	r7, sp, #0
 800a068:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a06a:	2301      	movs	r3, #1
 800a06c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	68db      	ldr	r3, [r3, #12]
 800a072:	2b02      	cmp	r3, #2
 800a074:	d001      	beq.n	800a07a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800a076:	f7f7 fb6f 	bl	8001758 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 800a080:	7bfa      	ldrb	r2, [r7, #15]
 800a082:	4611      	mov	r1, r2
 800a084:	4618      	mov	r0, r3
 800a086:	f7fe fef6 	bl	8008e76 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 800a090:	4618      	mov	r0, r3
 800a092:	f7fe feaf 	bl	8008df4 <USBD_LL_Reset>
}
 800a096:	bf00      	nop
 800a098:	3710      	adds	r7, #16
 800a09a:	46bd      	mov	sp, r7
 800a09c:	bd80      	pop	{r7, pc}
	...

0800a0a0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a0a0:	b580      	push	{r7, lr}
 800a0a2:	b082      	sub	sp, #8
 800a0a4:	af00      	add	r7, sp, #0
 800a0a6:	6078      	str	r0, [r7, #4]
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	687a      	ldr	r2, [r7, #4]
 800a0b4:	6812      	ldr	r2, [r2, #0]
 800a0b6:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800a0ba:	f043 0301 	orr.w	r3, r3, #1
 800a0be:	6013      	str	r3, [r2, #0]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 800a0c6:	4618      	mov	r0, r3
 800a0c8:	f7fe fee5 	bl	8008e96 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	6a1b      	ldr	r3, [r3, #32]
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d005      	beq.n	800a0e0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a0d4:	4b04      	ldr	r3, [pc, #16]	@ (800a0e8 <HAL_PCD_SuspendCallback+0x48>)
 800a0d6:	691b      	ldr	r3, [r3, #16]
 800a0d8:	4a03      	ldr	r2, [pc, #12]	@ (800a0e8 <HAL_PCD_SuspendCallback+0x48>)
 800a0da:	f043 0306 	orr.w	r3, r3, #6
 800a0de:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800a0e0:	bf00      	nop
 800a0e2:	3708      	adds	r7, #8
 800a0e4:	46bd      	mov	sp, r7
 800a0e6:	bd80      	pop	{r7, pc}
 800a0e8:	e000ed00 	.word	0xe000ed00

0800a0ec <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a0ec:	b580      	push	{r7, lr}
 800a0ee:	b082      	sub	sp, #8
 800a0f0:	af00      	add	r7, sp, #0
 800a0f2:	6078      	str	r0, [r7, #4]
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	687a      	ldr	r2, [r7, #4]
 800a100:	6812      	ldr	r2, [r2, #0]
 800a102:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800a106:	f023 0301 	bic.w	r3, r3, #1
 800a10a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	6a1b      	ldr	r3, [r3, #32]
 800a110:	2b00      	cmp	r3, #0
 800a112:	d007      	beq.n	800a124 <HAL_PCD_ResumeCallback+0x38>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a114:	4b08      	ldr	r3, [pc, #32]	@ (800a138 <HAL_PCD_ResumeCallback+0x4c>)
 800a116:	691b      	ldr	r3, [r3, #16]
 800a118:	4a07      	ldr	r2, [pc, #28]	@ (800a138 <HAL_PCD_ResumeCallback+0x4c>)
 800a11a:	f023 0306 	bic.w	r3, r3, #6
 800a11e:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800a120:	f000 faca 	bl	800a6b8 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 800a12a:	4618      	mov	r0, r3
 800a12c:	f7fe fec8 	bl	8008ec0 <USBD_LL_Resume>
}
 800a130:	bf00      	nop
 800a132:	3708      	adds	r7, #8
 800a134:	46bd      	mov	sp, r7
 800a136:	bd80      	pop	{r7, pc}
 800a138:	e000ed00 	.word	0xe000ed00

0800a13c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a13c:	b580      	push	{r7, lr}
 800a13e:	b082      	sub	sp, #8
 800a140:	af00      	add	r7, sp, #0
 800a142:	6078      	str	r0, [r7, #4]
 800a144:	460b      	mov	r3, r1
 800a146:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 800a14e:	78fa      	ldrb	r2, [r7, #3]
 800a150:	4611      	mov	r1, r2
 800a152:	4618      	mov	r0, r3
 800a154:	f7fe fef1 	bl	8008f3a <USBD_LL_IsoOUTIncomplete>
}
 800a158:	bf00      	nop
 800a15a:	3708      	adds	r7, #8
 800a15c:	46bd      	mov	sp, r7
 800a15e:	bd80      	pop	{r7, pc}

0800a160 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a160:	b580      	push	{r7, lr}
 800a162:	b082      	sub	sp, #8
 800a164:	af00      	add	r7, sp, #0
 800a166:	6078      	str	r0, [r7, #4]
 800a168:	460b      	mov	r3, r1
 800a16a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 800a172:	78fa      	ldrb	r2, [r7, #3]
 800a174:	4611      	mov	r1, r2
 800a176:	4618      	mov	r0, r3
 800a178:	f7fe fed2 	bl	8008f20 <USBD_LL_IsoINIncomplete>
}
 800a17c:	bf00      	nop
 800a17e:	3708      	adds	r7, #8
 800a180:	46bd      	mov	sp, r7
 800a182:	bd80      	pop	{r7, pc}

0800a184 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a184:	b580      	push	{r7, lr}
 800a186:	b082      	sub	sp, #8
 800a188:	af00      	add	r7, sp, #0
 800a18a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 800a192:	4618      	mov	r0, r3
 800a194:	f7fe fede 	bl	8008f54 <USBD_LL_DevConnected>
}
 800a198:	bf00      	nop
 800a19a:	3708      	adds	r7, #8
 800a19c:	46bd      	mov	sp, r7
 800a19e:	bd80      	pop	{r7, pc}

0800a1a0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a1a0:	b580      	push	{r7, lr}
 800a1a2:	b082      	sub	sp, #8
 800a1a4:	af00      	add	r7, sp, #0
 800a1a6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 800a1ae:	4618      	mov	r0, r3
 800a1b0:	f7fe fedb 	bl	8008f6a <USBD_LL_DevDisconnected>
}
 800a1b4:	bf00      	nop
 800a1b6:	3708      	adds	r7, #8
 800a1b8:	46bd      	mov	sp, r7
 800a1ba:	bd80      	pop	{r7, pc}

0800a1bc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a1bc:	b580      	push	{r7, lr}
 800a1be:	b082      	sub	sp, #8
 800a1c0:	af00      	add	r7, sp, #0
 800a1c2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	781b      	ldrb	r3, [r3, #0]
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	d13c      	bne.n	800a246 <USBD_LL_Init+0x8a>
  /* Enable USB power on Pwrctrl CR2 register. */
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800a1cc:	4a20      	ldr	r2, [pc, #128]	@ (800a250 <USBD_LL_Init+0x94>)
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	f8c2 3404 	str.w	r3, [r2, #1028]	@ 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	4a1e      	ldr	r2, [pc, #120]	@ (800a250 <USBD_LL_Init+0x94>)
 800a1d8:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800a1dc:	4b1c      	ldr	r3, [pc, #112]	@ (800a250 <USBD_LL_Init+0x94>)
 800a1de:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800a1e2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800a1e4:	4b1a      	ldr	r3, [pc, #104]	@ (800a250 <USBD_LL_Init+0x94>)
 800a1e6:	2206      	movs	r2, #6
 800a1e8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800a1ea:	4b19      	ldr	r3, [pc, #100]	@ (800a250 <USBD_LL_Init+0x94>)
 800a1ec:	2202      	movs	r2, #2
 800a1ee:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800a1f0:	4b17      	ldr	r3, [pc, #92]	@ (800a250 <USBD_LL_Init+0x94>)
 800a1f2:	2202      	movs	r2, #2
 800a1f4:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800a1f6:	4b16      	ldr	r3, [pc, #88]	@ (800a250 <USBD_LL_Init+0x94>)
 800a1f8:	2200      	movs	r2, #0
 800a1fa:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800a1fc:	4b14      	ldr	r3, [pc, #80]	@ (800a250 <USBD_LL_Init+0x94>)
 800a1fe:	2200      	movs	r2, #0
 800a200:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800a202:	4b13      	ldr	r3, [pc, #76]	@ (800a250 <USBD_LL_Init+0x94>)
 800a204:	2200      	movs	r2, #0
 800a206:	625a      	str	r2, [r3, #36]	@ 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 800a208:	4b11      	ldr	r3, [pc, #68]	@ (800a250 <USBD_LL_Init+0x94>)
 800a20a:	2200      	movs	r2, #0
 800a20c:	629a      	str	r2, [r3, #40]	@ 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800a20e:	4b10      	ldr	r3, [pc, #64]	@ (800a250 <USBD_LL_Init+0x94>)
 800a210:	2200      	movs	r2, #0
 800a212:	631a      	str	r2, [r3, #48]	@ 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800a214:	4b0e      	ldr	r3, [pc, #56]	@ (800a250 <USBD_LL_Init+0x94>)
 800a216:	2200      	movs	r2, #0
 800a218:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800a21a:	480d      	ldr	r0, [pc, #52]	@ (800a250 <USBD_LL_Init+0x94>)
 800a21c:	f7f9 fb5a 	bl	80038d4 <HAL_PCD_Init>
 800a220:	4603      	mov	r3, r0
 800a222:	2b00      	cmp	r3, #0
 800a224:	d001      	beq.n	800a22a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800a226:	f7f7 fa97 	bl	8001758 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800a22a:	2180      	movs	r1, #128	@ 0x80
 800a22c:	4808      	ldr	r0, [pc, #32]	@ (800a250 <USBD_LL_Init+0x94>)
 800a22e:	f7fa fba4 	bl	800497a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800a232:	2240      	movs	r2, #64	@ 0x40
 800a234:	2100      	movs	r1, #0
 800a236:	4806      	ldr	r0, [pc, #24]	@ (800a250 <USBD_LL_Init+0x94>)
 800a238:	f7fa fb58 	bl	80048ec <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800a23c:	2280      	movs	r2, #128	@ 0x80
 800a23e:	2101      	movs	r1, #1
 800a240:	4803      	ldr	r0, [pc, #12]	@ (800a250 <USBD_LL_Init+0x94>)
 800a242:	f7fa fb53 	bl	80048ec <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800a246:	2300      	movs	r3, #0
}
 800a248:	4618      	mov	r0, r3
 800a24a:	3708      	adds	r7, #8
 800a24c:	46bd      	mov	sp, r7
 800a24e:	bd80      	pop	{r7, pc}
 800a250:	20000ae8 	.word	0x20000ae8

0800a254 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a254:	b580      	push	{r7, lr}
 800a256:	b084      	sub	sp, #16
 800a258:	af00      	add	r7, sp, #0
 800a25a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a25c:	2300      	movs	r3, #0
 800a25e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a260:	2300      	movs	r3, #0
 800a262:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800a26a:	4618      	mov	r0, r3
 800a26c:	f7f9 fc56 	bl	8003b1c <HAL_PCD_Start>
 800a270:	4603      	mov	r3, r0
 800a272:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800a274:	7bbb      	ldrb	r3, [r7, #14]
 800a276:	2b03      	cmp	r3, #3
 800a278:	d816      	bhi.n	800a2a8 <USBD_LL_Start+0x54>
 800a27a:	a201      	add	r2, pc, #4	@ (adr r2, 800a280 <USBD_LL_Start+0x2c>)
 800a27c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a280:	0800a291 	.word	0x0800a291
 800a284:	0800a297 	.word	0x0800a297
 800a288:	0800a29d 	.word	0x0800a29d
 800a28c:	0800a2a3 	.word	0x0800a2a3
    case HAL_OK :
      usb_status = USBD_OK;
 800a290:	2300      	movs	r3, #0
 800a292:	73fb      	strb	r3, [r7, #15]
    break;
 800a294:	e00b      	b.n	800a2ae <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a296:	2303      	movs	r3, #3
 800a298:	73fb      	strb	r3, [r7, #15]
    break;
 800a29a:	e008      	b.n	800a2ae <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a29c:	2301      	movs	r3, #1
 800a29e:	73fb      	strb	r3, [r7, #15]
    break;
 800a2a0:	e005      	b.n	800a2ae <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a2a2:	2303      	movs	r3, #3
 800a2a4:	73fb      	strb	r3, [r7, #15]
    break;
 800a2a6:	e002      	b.n	800a2ae <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 800a2a8:	2303      	movs	r3, #3
 800a2aa:	73fb      	strb	r3, [r7, #15]
    break;
 800a2ac:	bf00      	nop
  }
  return usb_status;
 800a2ae:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2b0:	4618      	mov	r0, r3
 800a2b2:	3710      	adds	r7, #16
 800a2b4:	46bd      	mov	sp, r7
 800a2b6:	bd80      	pop	{r7, pc}

0800a2b8 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a2b8:	b580      	push	{r7, lr}
 800a2ba:	b084      	sub	sp, #16
 800a2bc:	af00      	add	r7, sp, #0
 800a2be:	6078      	str	r0, [r7, #4]
 800a2c0:	4608      	mov	r0, r1
 800a2c2:	4611      	mov	r1, r2
 800a2c4:	461a      	mov	r2, r3
 800a2c6:	4603      	mov	r3, r0
 800a2c8:	70fb      	strb	r3, [r7, #3]
 800a2ca:	460b      	mov	r3, r1
 800a2cc:	70bb      	strb	r3, [r7, #2]
 800a2ce:	4613      	mov	r3, r2
 800a2d0:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a2d2:	2300      	movs	r3, #0
 800a2d4:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a2d6:	2300      	movs	r3, #0
 800a2d8:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800a2e0:	78bb      	ldrb	r3, [r7, #2]
 800a2e2:	883a      	ldrh	r2, [r7, #0]
 800a2e4:	78f9      	ldrb	r1, [r7, #3]
 800a2e6:	f7fa f811 	bl	800430c <HAL_PCD_EP_Open>
 800a2ea:	4603      	mov	r3, r0
 800a2ec:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800a2ee:	7bbb      	ldrb	r3, [r7, #14]
 800a2f0:	2b03      	cmp	r3, #3
 800a2f2:	d817      	bhi.n	800a324 <USBD_LL_OpenEP+0x6c>
 800a2f4:	a201      	add	r2, pc, #4	@ (adr r2, 800a2fc <USBD_LL_OpenEP+0x44>)
 800a2f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2fa:	bf00      	nop
 800a2fc:	0800a30d 	.word	0x0800a30d
 800a300:	0800a313 	.word	0x0800a313
 800a304:	0800a319 	.word	0x0800a319
 800a308:	0800a31f 	.word	0x0800a31f
    case HAL_OK :
      usb_status = USBD_OK;
 800a30c:	2300      	movs	r3, #0
 800a30e:	73fb      	strb	r3, [r7, #15]
    break;
 800a310:	e00b      	b.n	800a32a <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a312:	2303      	movs	r3, #3
 800a314:	73fb      	strb	r3, [r7, #15]
    break;
 800a316:	e008      	b.n	800a32a <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a318:	2301      	movs	r3, #1
 800a31a:	73fb      	strb	r3, [r7, #15]
    break;
 800a31c:	e005      	b.n	800a32a <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a31e:	2303      	movs	r3, #3
 800a320:	73fb      	strb	r3, [r7, #15]
    break;
 800a322:	e002      	b.n	800a32a <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 800a324:	2303      	movs	r3, #3
 800a326:	73fb      	strb	r3, [r7, #15]
    break;
 800a328:	bf00      	nop
  }
  return usb_status;
 800a32a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a32c:	4618      	mov	r0, r3
 800a32e:	3710      	adds	r7, #16
 800a330:	46bd      	mov	sp, r7
 800a332:	bd80      	pop	{r7, pc}

0800a334 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a334:	b580      	push	{r7, lr}
 800a336:	b084      	sub	sp, #16
 800a338:	af00      	add	r7, sp, #0
 800a33a:	6078      	str	r0, [r7, #4]
 800a33c:	460b      	mov	r3, r1
 800a33e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a340:	2300      	movs	r3, #0
 800a342:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a344:	2300      	movs	r3, #0
 800a346:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800a34e:	78fa      	ldrb	r2, [r7, #3]
 800a350:	4611      	mov	r1, r2
 800a352:	4618      	mov	r0, r3
 800a354:	f7fa f842 	bl	80043dc <HAL_PCD_EP_Close>
 800a358:	4603      	mov	r3, r0
 800a35a:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800a35c:	7bbb      	ldrb	r3, [r7, #14]
 800a35e:	2b03      	cmp	r3, #3
 800a360:	d816      	bhi.n	800a390 <USBD_LL_CloseEP+0x5c>
 800a362:	a201      	add	r2, pc, #4	@ (adr r2, 800a368 <USBD_LL_CloseEP+0x34>)
 800a364:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a368:	0800a379 	.word	0x0800a379
 800a36c:	0800a37f 	.word	0x0800a37f
 800a370:	0800a385 	.word	0x0800a385
 800a374:	0800a38b 	.word	0x0800a38b
    case HAL_OK :
      usb_status = USBD_OK;
 800a378:	2300      	movs	r3, #0
 800a37a:	73fb      	strb	r3, [r7, #15]
    break;
 800a37c:	e00b      	b.n	800a396 <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a37e:	2303      	movs	r3, #3
 800a380:	73fb      	strb	r3, [r7, #15]
    break;
 800a382:	e008      	b.n	800a396 <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a384:	2301      	movs	r3, #1
 800a386:	73fb      	strb	r3, [r7, #15]
    break;
 800a388:	e005      	b.n	800a396 <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a38a:	2303      	movs	r3, #3
 800a38c:	73fb      	strb	r3, [r7, #15]
    break;
 800a38e:	e002      	b.n	800a396 <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800a390:	2303      	movs	r3, #3
 800a392:	73fb      	strb	r3, [r7, #15]
    break;
 800a394:	bf00      	nop
  }
  return usb_status;
 800a396:	7bfb      	ldrb	r3, [r7, #15]
}
 800a398:	4618      	mov	r0, r3
 800a39a:	3710      	adds	r7, #16
 800a39c:	46bd      	mov	sp, r7
 800a39e:	bd80      	pop	{r7, pc}

0800a3a0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a3a0:	b580      	push	{r7, lr}
 800a3a2:	b084      	sub	sp, #16
 800a3a4:	af00      	add	r7, sp, #0
 800a3a6:	6078      	str	r0, [r7, #4]
 800a3a8:	460b      	mov	r3, r1
 800a3aa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a3ac:	2300      	movs	r3, #0
 800a3ae:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a3b0:	2300      	movs	r3, #0
 800a3b2:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800a3ba:	78fa      	ldrb	r2, [r7, #3]
 800a3bc:	4611      	mov	r1, r2
 800a3be:	4618      	mov	r0, r3
 800a3c0:	f7fa f8d1 	bl	8004566 <HAL_PCD_EP_SetStall>
 800a3c4:	4603      	mov	r3, r0
 800a3c6:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800a3c8:	7bbb      	ldrb	r3, [r7, #14]
 800a3ca:	2b03      	cmp	r3, #3
 800a3cc:	d816      	bhi.n	800a3fc <USBD_LL_StallEP+0x5c>
 800a3ce:	a201      	add	r2, pc, #4	@ (adr r2, 800a3d4 <USBD_LL_StallEP+0x34>)
 800a3d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3d4:	0800a3e5 	.word	0x0800a3e5
 800a3d8:	0800a3eb 	.word	0x0800a3eb
 800a3dc:	0800a3f1 	.word	0x0800a3f1
 800a3e0:	0800a3f7 	.word	0x0800a3f7
    case HAL_OK :
      usb_status = USBD_OK;
 800a3e4:	2300      	movs	r3, #0
 800a3e6:	73fb      	strb	r3, [r7, #15]
    break;
 800a3e8:	e00b      	b.n	800a402 <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a3ea:	2303      	movs	r3, #3
 800a3ec:	73fb      	strb	r3, [r7, #15]
    break;
 800a3ee:	e008      	b.n	800a402 <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a3f0:	2301      	movs	r3, #1
 800a3f2:	73fb      	strb	r3, [r7, #15]
    break;
 800a3f4:	e005      	b.n	800a402 <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a3f6:	2303      	movs	r3, #3
 800a3f8:	73fb      	strb	r3, [r7, #15]
    break;
 800a3fa:	e002      	b.n	800a402 <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800a3fc:	2303      	movs	r3, #3
 800a3fe:	73fb      	strb	r3, [r7, #15]
    break;
 800a400:	bf00      	nop
  }
  return usb_status;
 800a402:	7bfb      	ldrb	r3, [r7, #15]
}
 800a404:	4618      	mov	r0, r3
 800a406:	3710      	adds	r7, #16
 800a408:	46bd      	mov	sp, r7
 800a40a:	bd80      	pop	{r7, pc}

0800a40c <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a40c:	b580      	push	{r7, lr}
 800a40e:	b084      	sub	sp, #16
 800a410:	af00      	add	r7, sp, #0
 800a412:	6078      	str	r0, [r7, #4]
 800a414:	460b      	mov	r3, r1
 800a416:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a418:	2300      	movs	r3, #0
 800a41a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a41c:	2300      	movs	r3, #0
 800a41e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800a426:	78fa      	ldrb	r2, [r7, #3]
 800a428:	4611      	mov	r1, r2
 800a42a:	4618      	mov	r0, r3
 800a42c:	f7fa f8fd 	bl	800462a <HAL_PCD_EP_ClrStall>
 800a430:	4603      	mov	r3, r0
 800a432:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800a434:	7bbb      	ldrb	r3, [r7, #14]
 800a436:	2b03      	cmp	r3, #3
 800a438:	d816      	bhi.n	800a468 <USBD_LL_ClearStallEP+0x5c>
 800a43a:	a201      	add	r2, pc, #4	@ (adr r2, 800a440 <USBD_LL_ClearStallEP+0x34>)
 800a43c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a440:	0800a451 	.word	0x0800a451
 800a444:	0800a457 	.word	0x0800a457
 800a448:	0800a45d 	.word	0x0800a45d
 800a44c:	0800a463 	.word	0x0800a463
    case HAL_OK :
      usb_status = USBD_OK;
 800a450:	2300      	movs	r3, #0
 800a452:	73fb      	strb	r3, [r7, #15]
    break;
 800a454:	e00b      	b.n	800a46e <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a456:	2303      	movs	r3, #3
 800a458:	73fb      	strb	r3, [r7, #15]
    break;
 800a45a:	e008      	b.n	800a46e <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a45c:	2301      	movs	r3, #1
 800a45e:	73fb      	strb	r3, [r7, #15]
    break;
 800a460:	e005      	b.n	800a46e <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a462:	2303      	movs	r3, #3
 800a464:	73fb      	strb	r3, [r7, #15]
    break;
 800a466:	e002      	b.n	800a46e <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800a468:	2303      	movs	r3, #3
 800a46a:	73fb      	strb	r3, [r7, #15]
    break;
 800a46c:	bf00      	nop
  }
  return usb_status;
 800a46e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a470:	4618      	mov	r0, r3
 800a472:	3710      	adds	r7, #16
 800a474:	46bd      	mov	sp, r7
 800a476:	bd80      	pop	{r7, pc}

0800a478 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a478:	b480      	push	{r7}
 800a47a:	b085      	sub	sp, #20
 800a47c:	af00      	add	r7, sp, #0
 800a47e:	6078      	str	r0, [r7, #4]
 800a480:	460b      	mov	r3, r1
 800a482:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800a48a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a48c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a490:	2b00      	cmp	r3, #0
 800a492:	da0b      	bge.n	800a4ac <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a494:	78fb      	ldrb	r3, [r7, #3]
 800a496:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a49a:	68f9      	ldr	r1, [r7, #12]
 800a49c:	4613      	mov	r3, r2
 800a49e:	00db      	lsls	r3, r3, #3
 800a4a0:	1a9b      	subs	r3, r3, r2
 800a4a2:	009b      	lsls	r3, r3, #2
 800a4a4:	440b      	add	r3, r1
 800a4a6:	333e      	adds	r3, #62	@ 0x3e
 800a4a8:	781b      	ldrb	r3, [r3, #0]
 800a4aa:	e00b      	b.n	800a4c4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a4ac:	78fb      	ldrb	r3, [r7, #3]
 800a4ae:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a4b2:	68f9      	ldr	r1, [r7, #12]
 800a4b4:	4613      	mov	r3, r2
 800a4b6:	00db      	lsls	r3, r3, #3
 800a4b8:	1a9b      	subs	r3, r3, r2
 800a4ba:	009b      	lsls	r3, r3, #2
 800a4bc:	440b      	add	r3, r1
 800a4be:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800a4c2:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a4c4:	4618      	mov	r0, r3
 800a4c6:	3714      	adds	r7, #20
 800a4c8:	46bd      	mov	sp, r7
 800a4ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ce:	4770      	bx	lr

0800a4d0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a4d0:	b580      	push	{r7, lr}
 800a4d2:	b084      	sub	sp, #16
 800a4d4:	af00      	add	r7, sp, #0
 800a4d6:	6078      	str	r0, [r7, #4]
 800a4d8:	460b      	mov	r3, r1
 800a4da:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a4dc:	2300      	movs	r3, #0
 800a4de:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a4e0:	2300      	movs	r3, #0
 800a4e2:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800a4ea:	78fa      	ldrb	r2, [r7, #3]
 800a4ec:	4611      	mov	r1, r2
 800a4ee:	4618      	mov	r0, r3
 800a4f0:	f7f9 fee7 	bl	80042c2 <HAL_PCD_SetAddress>
 800a4f4:	4603      	mov	r3, r0
 800a4f6:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800a4f8:	7bbb      	ldrb	r3, [r7, #14]
 800a4fa:	2b03      	cmp	r3, #3
 800a4fc:	d816      	bhi.n	800a52c <USBD_LL_SetUSBAddress+0x5c>
 800a4fe:	a201      	add	r2, pc, #4	@ (adr r2, 800a504 <USBD_LL_SetUSBAddress+0x34>)
 800a500:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a504:	0800a515 	.word	0x0800a515
 800a508:	0800a51b 	.word	0x0800a51b
 800a50c:	0800a521 	.word	0x0800a521
 800a510:	0800a527 	.word	0x0800a527
    case HAL_OK :
      usb_status = USBD_OK;
 800a514:	2300      	movs	r3, #0
 800a516:	73fb      	strb	r3, [r7, #15]
    break;
 800a518:	e00b      	b.n	800a532 <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a51a:	2303      	movs	r3, #3
 800a51c:	73fb      	strb	r3, [r7, #15]
    break;
 800a51e:	e008      	b.n	800a532 <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a520:	2301      	movs	r3, #1
 800a522:	73fb      	strb	r3, [r7, #15]
    break;
 800a524:	e005      	b.n	800a532 <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a526:	2303      	movs	r3, #3
 800a528:	73fb      	strb	r3, [r7, #15]
    break;
 800a52a:	e002      	b.n	800a532 <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 800a52c:	2303      	movs	r3, #3
 800a52e:	73fb      	strb	r3, [r7, #15]
    break;
 800a530:	bf00      	nop
  }
  return usb_status;
 800a532:	7bfb      	ldrb	r3, [r7, #15]
}
 800a534:	4618      	mov	r0, r3
 800a536:	3710      	adds	r7, #16
 800a538:	46bd      	mov	sp, r7
 800a53a:	bd80      	pop	{r7, pc}

0800a53c <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a53c:	b580      	push	{r7, lr}
 800a53e:	b086      	sub	sp, #24
 800a540:	af00      	add	r7, sp, #0
 800a542:	60f8      	str	r0, [r7, #12]
 800a544:	607a      	str	r2, [r7, #4]
 800a546:	603b      	str	r3, [r7, #0]
 800a548:	460b      	mov	r3, r1
 800a54a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a54c:	2300      	movs	r3, #0
 800a54e:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a550:	2300      	movs	r3, #0
 800a552:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800a55a:	7af9      	ldrb	r1, [r7, #11]
 800a55c:	683b      	ldr	r3, [r7, #0]
 800a55e:	687a      	ldr	r2, [r7, #4]
 800a560:	f7f9 ffc4 	bl	80044ec <HAL_PCD_EP_Transmit>
 800a564:	4603      	mov	r3, r0
 800a566:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800a568:	7dbb      	ldrb	r3, [r7, #22]
 800a56a:	2b03      	cmp	r3, #3
 800a56c:	d816      	bhi.n	800a59c <USBD_LL_Transmit+0x60>
 800a56e:	a201      	add	r2, pc, #4	@ (adr r2, 800a574 <USBD_LL_Transmit+0x38>)
 800a570:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a574:	0800a585 	.word	0x0800a585
 800a578:	0800a58b 	.word	0x0800a58b
 800a57c:	0800a591 	.word	0x0800a591
 800a580:	0800a597 	.word	0x0800a597
    case HAL_OK :
      usb_status = USBD_OK;
 800a584:	2300      	movs	r3, #0
 800a586:	75fb      	strb	r3, [r7, #23]
    break;
 800a588:	e00b      	b.n	800a5a2 <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a58a:	2303      	movs	r3, #3
 800a58c:	75fb      	strb	r3, [r7, #23]
    break;
 800a58e:	e008      	b.n	800a5a2 <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a590:	2301      	movs	r3, #1
 800a592:	75fb      	strb	r3, [r7, #23]
    break;
 800a594:	e005      	b.n	800a5a2 <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a596:	2303      	movs	r3, #3
 800a598:	75fb      	strb	r3, [r7, #23]
    break;
 800a59a:	e002      	b.n	800a5a2 <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 800a59c:	2303      	movs	r3, #3
 800a59e:	75fb      	strb	r3, [r7, #23]
    break;
 800a5a0:	bf00      	nop
  }
  return usb_status;
 800a5a2:	7dfb      	ldrb	r3, [r7, #23]
}
 800a5a4:	4618      	mov	r0, r3
 800a5a6:	3718      	adds	r7, #24
 800a5a8:	46bd      	mov	sp, r7
 800a5aa:	bd80      	pop	{r7, pc}

0800a5ac <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a5ac:	b580      	push	{r7, lr}
 800a5ae:	b086      	sub	sp, #24
 800a5b0:	af00      	add	r7, sp, #0
 800a5b2:	60f8      	str	r0, [r7, #12]
 800a5b4:	607a      	str	r2, [r7, #4]
 800a5b6:	603b      	str	r3, [r7, #0]
 800a5b8:	460b      	mov	r3, r1
 800a5ba:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a5bc:	2300      	movs	r3, #0
 800a5be:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a5c0:	2300      	movs	r3, #0
 800a5c2:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800a5ca:	7af9      	ldrb	r1, [r7, #11]
 800a5cc:	683b      	ldr	r3, [r7, #0]
 800a5ce:	687a      	ldr	r2, [r7, #4]
 800a5d0:	f7f9 ff4e 	bl	8004470 <HAL_PCD_EP_Receive>
 800a5d4:	4603      	mov	r3, r0
 800a5d6:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800a5d8:	7dbb      	ldrb	r3, [r7, #22]
 800a5da:	2b03      	cmp	r3, #3
 800a5dc:	d816      	bhi.n	800a60c <USBD_LL_PrepareReceive+0x60>
 800a5de:	a201      	add	r2, pc, #4	@ (adr r2, 800a5e4 <USBD_LL_PrepareReceive+0x38>)
 800a5e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5e4:	0800a5f5 	.word	0x0800a5f5
 800a5e8:	0800a5fb 	.word	0x0800a5fb
 800a5ec:	0800a601 	.word	0x0800a601
 800a5f0:	0800a607 	.word	0x0800a607
    case HAL_OK :
      usb_status = USBD_OK;
 800a5f4:	2300      	movs	r3, #0
 800a5f6:	75fb      	strb	r3, [r7, #23]
    break;
 800a5f8:	e00b      	b.n	800a612 <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a5fa:	2303      	movs	r3, #3
 800a5fc:	75fb      	strb	r3, [r7, #23]
    break;
 800a5fe:	e008      	b.n	800a612 <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a600:	2301      	movs	r3, #1
 800a602:	75fb      	strb	r3, [r7, #23]
    break;
 800a604:	e005      	b.n	800a612 <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a606:	2303      	movs	r3, #3
 800a608:	75fb      	strb	r3, [r7, #23]
    break;
 800a60a:	e002      	b.n	800a612 <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 800a60c:	2303      	movs	r3, #3
 800a60e:	75fb      	strb	r3, [r7, #23]
    break;
 800a610:	bf00      	nop
  }
  return usb_status;
 800a612:	7dfb      	ldrb	r3, [r7, #23]
}
 800a614:	4618      	mov	r0, r3
 800a616:	3718      	adds	r7, #24
 800a618:	46bd      	mov	sp, r7
 800a61a:	bd80      	pop	{r7, pc}

0800a61c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800a61c:	b580      	push	{r7, lr}
 800a61e:	b082      	sub	sp, #8
 800a620:	af00      	add	r7, sp, #0
 800a622:	6078      	str	r0, [r7, #4]
 800a624:	460b      	mov	r3, r1
 800a626:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800a628:	78fb      	ldrb	r3, [r7, #3]
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	d002      	beq.n	800a634 <HAL_PCDEx_LPM_Callback+0x18>
 800a62e:	2b01      	cmp	r3, #1
 800a630:	d01f      	beq.n	800a672 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800a632:	e03b      	b.n	800a6ac <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	6a1b      	ldr	r3, [r3, #32]
 800a638:	2b00      	cmp	r3, #0
 800a63a:	d007      	beq.n	800a64c <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800a63c:	f000 f83c 	bl	800a6b8 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a640:	4b1c      	ldr	r3, [pc, #112]	@ (800a6b4 <HAL_PCDEx_LPM_Callback+0x98>)
 800a642:	691b      	ldr	r3, [r3, #16]
 800a644:	4a1b      	ldr	r2, [pc, #108]	@ (800a6b4 <HAL_PCDEx_LPM_Callback+0x98>)
 800a646:	f023 0306 	bic.w	r3, r3, #6
 800a64a:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	687a      	ldr	r2, [r7, #4]
 800a658:	6812      	ldr	r2, [r2, #0]
 800a65a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800a65e:	f023 0301 	bic.w	r3, r3, #1
 800a662:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 800a66a:	4618      	mov	r0, r3
 800a66c:	f7fe fc28 	bl	8008ec0 <USBD_LL_Resume>
    break;
 800a670:	e01c      	b.n	800a6ac <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	687a      	ldr	r2, [r7, #4]
 800a67e:	6812      	ldr	r2, [r2, #0]
 800a680:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800a684:	f043 0301 	orr.w	r3, r3, #1
 800a688:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 800a690:	4618      	mov	r0, r3
 800a692:	f7fe fc00 	bl	8008e96 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	6a1b      	ldr	r3, [r3, #32]
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	d005      	beq.n	800a6aa <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a69e:	4b05      	ldr	r3, [pc, #20]	@ (800a6b4 <HAL_PCDEx_LPM_Callback+0x98>)
 800a6a0:	691b      	ldr	r3, [r3, #16]
 800a6a2:	4a04      	ldr	r2, [pc, #16]	@ (800a6b4 <HAL_PCDEx_LPM_Callback+0x98>)
 800a6a4:	f043 0306 	orr.w	r3, r3, #6
 800a6a8:	6113      	str	r3, [r2, #16]
    break;
 800a6aa:	bf00      	nop
}
 800a6ac:	bf00      	nop
 800a6ae:	3708      	adds	r7, #8
 800a6b0:	46bd      	mov	sp, r7
 800a6b2:	bd80      	pop	{r7, pc}
 800a6b4:	e000ed00 	.word	0xe000ed00

0800a6b8 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800a6b8:	b580      	push	{r7, lr}
 800a6ba:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800a6bc:	f7f6 ffae 	bl	800161c <SystemClock_Config>
}
 800a6c0:	bf00      	nop
 800a6c2:	bd80      	pop	{r7, pc}

0800a6c4 <malloc>:
 800a6c4:	4b02      	ldr	r3, [pc, #8]	@ (800a6d0 <malloc+0xc>)
 800a6c6:	4601      	mov	r1, r0
 800a6c8:	6818      	ldr	r0, [r3, #0]
 800a6ca:	f000 b82d 	b.w	800a728 <_malloc_r>
 800a6ce:	bf00      	nop
 800a6d0:	2000021c 	.word	0x2000021c

0800a6d4 <free>:
 800a6d4:	4b02      	ldr	r3, [pc, #8]	@ (800a6e0 <free+0xc>)
 800a6d6:	4601      	mov	r1, r0
 800a6d8:	6818      	ldr	r0, [r3, #0]
 800a6da:	f002 b831 	b.w	800c740 <_free_r>
 800a6de:	bf00      	nop
 800a6e0:	2000021c 	.word	0x2000021c

0800a6e4 <sbrk_aligned>:
 800a6e4:	b570      	push	{r4, r5, r6, lr}
 800a6e6:	4e0f      	ldr	r6, [pc, #60]	@ (800a724 <sbrk_aligned+0x40>)
 800a6e8:	460c      	mov	r4, r1
 800a6ea:	6831      	ldr	r1, [r6, #0]
 800a6ec:	4605      	mov	r5, r0
 800a6ee:	b911      	cbnz	r1, 800a6f6 <sbrk_aligned+0x12>
 800a6f0:	f001 f976 	bl	800b9e0 <_sbrk_r>
 800a6f4:	6030      	str	r0, [r6, #0]
 800a6f6:	4621      	mov	r1, r4
 800a6f8:	4628      	mov	r0, r5
 800a6fa:	f001 f971 	bl	800b9e0 <_sbrk_r>
 800a6fe:	1c43      	adds	r3, r0, #1
 800a700:	d103      	bne.n	800a70a <sbrk_aligned+0x26>
 800a702:	f04f 34ff 	mov.w	r4, #4294967295
 800a706:	4620      	mov	r0, r4
 800a708:	bd70      	pop	{r4, r5, r6, pc}
 800a70a:	1cc4      	adds	r4, r0, #3
 800a70c:	f024 0403 	bic.w	r4, r4, #3
 800a710:	42a0      	cmp	r0, r4
 800a712:	d0f8      	beq.n	800a706 <sbrk_aligned+0x22>
 800a714:	1a21      	subs	r1, r4, r0
 800a716:	4628      	mov	r0, r5
 800a718:	f001 f962 	bl	800b9e0 <_sbrk_r>
 800a71c:	3001      	adds	r0, #1
 800a71e:	d1f2      	bne.n	800a706 <sbrk_aligned+0x22>
 800a720:	e7ef      	b.n	800a702 <sbrk_aligned+0x1e>
 800a722:	bf00      	nop
 800a724:	20000ef0 	.word	0x20000ef0

0800a728 <_malloc_r>:
 800a728:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a72c:	1ccd      	adds	r5, r1, #3
 800a72e:	f025 0503 	bic.w	r5, r5, #3
 800a732:	3508      	adds	r5, #8
 800a734:	2d0c      	cmp	r5, #12
 800a736:	bf38      	it	cc
 800a738:	250c      	movcc	r5, #12
 800a73a:	2d00      	cmp	r5, #0
 800a73c:	4606      	mov	r6, r0
 800a73e:	db01      	blt.n	800a744 <_malloc_r+0x1c>
 800a740:	42a9      	cmp	r1, r5
 800a742:	d904      	bls.n	800a74e <_malloc_r+0x26>
 800a744:	230c      	movs	r3, #12
 800a746:	6033      	str	r3, [r6, #0]
 800a748:	2000      	movs	r0, #0
 800a74a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a74e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a824 <_malloc_r+0xfc>
 800a752:	f000 f869 	bl	800a828 <__malloc_lock>
 800a756:	f8d8 3000 	ldr.w	r3, [r8]
 800a75a:	461c      	mov	r4, r3
 800a75c:	bb44      	cbnz	r4, 800a7b0 <_malloc_r+0x88>
 800a75e:	4629      	mov	r1, r5
 800a760:	4630      	mov	r0, r6
 800a762:	f7ff ffbf 	bl	800a6e4 <sbrk_aligned>
 800a766:	1c43      	adds	r3, r0, #1
 800a768:	4604      	mov	r4, r0
 800a76a:	d158      	bne.n	800a81e <_malloc_r+0xf6>
 800a76c:	f8d8 4000 	ldr.w	r4, [r8]
 800a770:	4627      	mov	r7, r4
 800a772:	2f00      	cmp	r7, #0
 800a774:	d143      	bne.n	800a7fe <_malloc_r+0xd6>
 800a776:	2c00      	cmp	r4, #0
 800a778:	d04b      	beq.n	800a812 <_malloc_r+0xea>
 800a77a:	6823      	ldr	r3, [r4, #0]
 800a77c:	4639      	mov	r1, r7
 800a77e:	4630      	mov	r0, r6
 800a780:	eb04 0903 	add.w	r9, r4, r3
 800a784:	f001 f92c 	bl	800b9e0 <_sbrk_r>
 800a788:	4581      	cmp	r9, r0
 800a78a:	d142      	bne.n	800a812 <_malloc_r+0xea>
 800a78c:	6821      	ldr	r1, [r4, #0]
 800a78e:	1a6d      	subs	r5, r5, r1
 800a790:	4629      	mov	r1, r5
 800a792:	4630      	mov	r0, r6
 800a794:	f7ff ffa6 	bl	800a6e4 <sbrk_aligned>
 800a798:	3001      	adds	r0, #1
 800a79a:	d03a      	beq.n	800a812 <_malloc_r+0xea>
 800a79c:	6823      	ldr	r3, [r4, #0]
 800a79e:	442b      	add	r3, r5
 800a7a0:	6023      	str	r3, [r4, #0]
 800a7a2:	f8d8 3000 	ldr.w	r3, [r8]
 800a7a6:	685a      	ldr	r2, [r3, #4]
 800a7a8:	bb62      	cbnz	r2, 800a804 <_malloc_r+0xdc>
 800a7aa:	f8c8 7000 	str.w	r7, [r8]
 800a7ae:	e00f      	b.n	800a7d0 <_malloc_r+0xa8>
 800a7b0:	6822      	ldr	r2, [r4, #0]
 800a7b2:	1b52      	subs	r2, r2, r5
 800a7b4:	d420      	bmi.n	800a7f8 <_malloc_r+0xd0>
 800a7b6:	2a0b      	cmp	r2, #11
 800a7b8:	d917      	bls.n	800a7ea <_malloc_r+0xc2>
 800a7ba:	1961      	adds	r1, r4, r5
 800a7bc:	42a3      	cmp	r3, r4
 800a7be:	6025      	str	r5, [r4, #0]
 800a7c0:	bf18      	it	ne
 800a7c2:	6059      	strne	r1, [r3, #4]
 800a7c4:	6863      	ldr	r3, [r4, #4]
 800a7c6:	bf08      	it	eq
 800a7c8:	f8c8 1000 	streq.w	r1, [r8]
 800a7cc:	5162      	str	r2, [r4, r5]
 800a7ce:	604b      	str	r3, [r1, #4]
 800a7d0:	4630      	mov	r0, r6
 800a7d2:	f000 f82f 	bl	800a834 <__malloc_unlock>
 800a7d6:	f104 000b 	add.w	r0, r4, #11
 800a7da:	1d23      	adds	r3, r4, #4
 800a7dc:	f020 0007 	bic.w	r0, r0, #7
 800a7e0:	1ac2      	subs	r2, r0, r3
 800a7e2:	bf1c      	itt	ne
 800a7e4:	1a1b      	subne	r3, r3, r0
 800a7e6:	50a3      	strne	r3, [r4, r2]
 800a7e8:	e7af      	b.n	800a74a <_malloc_r+0x22>
 800a7ea:	6862      	ldr	r2, [r4, #4]
 800a7ec:	42a3      	cmp	r3, r4
 800a7ee:	bf0c      	ite	eq
 800a7f0:	f8c8 2000 	streq.w	r2, [r8]
 800a7f4:	605a      	strne	r2, [r3, #4]
 800a7f6:	e7eb      	b.n	800a7d0 <_malloc_r+0xa8>
 800a7f8:	4623      	mov	r3, r4
 800a7fa:	6864      	ldr	r4, [r4, #4]
 800a7fc:	e7ae      	b.n	800a75c <_malloc_r+0x34>
 800a7fe:	463c      	mov	r4, r7
 800a800:	687f      	ldr	r7, [r7, #4]
 800a802:	e7b6      	b.n	800a772 <_malloc_r+0x4a>
 800a804:	461a      	mov	r2, r3
 800a806:	685b      	ldr	r3, [r3, #4]
 800a808:	42a3      	cmp	r3, r4
 800a80a:	d1fb      	bne.n	800a804 <_malloc_r+0xdc>
 800a80c:	2300      	movs	r3, #0
 800a80e:	6053      	str	r3, [r2, #4]
 800a810:	e7de      	b.n	800a7d0 <_malloc_r+0xa8>
 800a812:	230c      	movs	r3, #12
 800a814:	6033      	str	r3, [r6, #0]
 800a816:	4630      	mov	r0, r6
 800a818:	f000 f80c 	bl	800a834 <__malloc_unlock>
 800a81c:	e794      	b.n	800a748 <_malloc_r+0x20>
 800a81e:	6005      	str	r5, [r0, #0]
 800a820:	e7d6      	b.n	800a7d0 <_malloc_r+0xa8>
 800a822:	bf00      	nop
 800a824:	20000ef4 	.word	0x20000ef4

0800a828 <__malloc_lock>:
 800a828:	4801      	ldr	r0, [pc, #4]	@ (800a830 <__malloc_lock+0x8>)
 800a82a:	f001 b926 	b.w	800ba7a <__retarget_lock_acquire_recursive>
 800a82e:	bf00      	nop
 800a830:	20001038 	.word	0x20001038

0800a834 <__malloc_unlock>:
 800a834:	4801      	ldr	r0, [pc, #4]	@ (800a83c <__malloc_unlock+0x8>)
 800a836:	f001 b921 	b.w	800ba7c <__retarget_lock_release_recursive>
 800a83a:	bf00      	nop
 800a83c:	20001038 	.word	0x20001038

0800a840 <__cvt>:
 800a840:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a844:	ec57 6b10 	vmov	r6, r7, d0
 800a848:	2f00      	cmp	r7, #0
 800a84a:	460c      	mov	r4, r1
 800a84c:	4619      	mov	r1, r3
 800a84e:	463b      	mov	r3, r7
 800a850:	bfbb      	ittet	lt
 800a852:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800a856:	461f      	movlt	r7, r3
 800a858:	2300      	movge	r3, #0
 800a85a:	232d      	movlt	r3, #45	@ 0x2d
 800a85c:	700b      	strb	r3, [r1, #0]
 800a85e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a860:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800a864:	4691      	mov	r9, r2
 800a866:	f023 0820 	bic.w	r8, r3, #32
 800a86a:	bfbc      	itt	lt
 800a86c:	4632      	movlt	r2, r6
 800a86e:	4616      	movlt	r6, r2
 800a870:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800a874:	d005      	beq.n	800a882 <__cvt+0x42>
 800a876:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800a87a:	d100      	bne.n	800a87e <__cvt+0x3e>
 800a87c:	3401      	adds	r4, #1
 800a87e:	2102      	movs	r1, #2
 800a880:	e000      	b.n	800a884 <__cvt+0x44>
 800a882:	2103      	movs	r1, #3
 800a884:	ab03      	add	r3, sp, #12
 800a886:	9301      	str	r3, [sp, #4]
 800a888:	ab02      	add	r3, sp, #8
 800a88a:	9300      	str	r3, [sp, #0]
 800a88c:	ec47 6b10 	vmov	d0, r6, r7
 800a890:	4653      	mov	r3, sl
 800a892:	4622      	mov	r2, r4
 800a894:	f001 f984 	bl	800bba0 <_dtoa_r>
 800a898:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800a89c:	4605      	mov	r5, r0
 800a89e:	d119      	bne.n	800a8d4 <__cvt+0x94>
 800a8a0:	f019 0f01 	tst.w	r9, #1
 800a8a4:	d00e      	beq.n	800a8c4 <__cvt+0x84>
 800a8a6:	eb00 0904 	add.w	r9, r0, r4
 800a8aa:	2200      	movs	r2, #0
 800a8ac:	2300      	movs	r3, #0
 800a8ae:	4630      	mov	r0, r6
 800a8b0:	4639      	mov	r1, r7
 800a8b2:	f7f6 f909 	bl	8000ac8 <__aeabi_dcmpeq>
 800a8b6:	b108      	cbz	r0, 800a8bc <__cvt+0x7c>
 800a8b8:	f8cd 900c 	str.w	r9, [sp, #12]
 800a8bc:	2230      	movs	r2, #48	@ 0x30
 800a8be:	9b03      	ldr	r3, [sp, #12]
 800a8c0:	454b      	cmp	r3, r9
 800a8c2:	d31e      	bcc.n	800a902 <__cvt+0xc2>
 800a8c4:	9b03      	ldr	r3, [sp, #12]
 800a8c6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a8c8:	1b5b      	subs	r3, r3, r5
 800a8ca:	4628      	mov	r0, r5
 800a8cc:	6013      	str	r3, [r2, #0]
 800a8ce:	b004      	add	sp, #16
 800a8d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a8d4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800a8d8:	eb00 0904 	add.w	r9, r0, r4
 800a8dc:	d1e5      	bne.n	800a8aa <__cvt+0x6a>
 800a8de:	7803      	ldrb	r3, [r0, #0]
 800a8e0:	2b30      	cmp	r3, #48	@ 0x30
 800a8e2:	d10a      	bne.n	800a8fa <__cvt+0xba>
 800a8e4:	2200      	movs	r2, #0
 800a8e6:	2300      	movs	r3, #0
 800a8e8:	4630      	mov	r0, r6
 800a8ea:	4639      	mov	r1, r7
 800a8ec:	f7f6 f8ec 	bl	8000ac8 <__aeabi_dcmpeq>
 800a8f0:	b918      	cbnz	r0, 800a8fa <__cvt+0xba>
 800a8f2:	f1c4 0401 	rsb	r4, r4, #1
 800a8f6:	f8ca 4000 	str.w	r4, [sl]
 800a8fa:	f8da 3000 	ldr.w	r3, [sl]
 800a8fe:	4499      	add	r9, r3
 800a900:	e7d3      	b.n	800a8aa <__cvt+0x6a>
 800a902:	1c59      	adds	r1, r3, #1
 800a904:	9103      	str	r1, [sp, #12]
 800a906:	701a      	strb	r2, [r3, #0]
 800a908:	e7d9      	b.n	800a8be <__cvt+0x7e>

0800a90a <__exponent>:
 800a90a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a90c:	2900      	cmp	r1, #0
 800a90e:	bfba      	itte	lt
 800a910:	4249      	neglt	r1, r1
 800a912:	232d      	movlt	r3, #45	@ 0x2d
 800a914:	232b      	movge	r3, #43	@ 0x2b
 800a916:	2909      	cmp	r1, #9
 800a918:	7002      	strb	r2, [r0, #0]
 800a91a:	7043      	strb	r3, [r0, #1]
 800a91c:	dd29      	ble.n	800a972 <__exponent+0x68>
 800a91e:	f10d 0307 	add.w	r3, sp, #7
 800a922:	461d      	mov	r5, r3
 800a924:	270a      	movs	r7, #10
 800a926:	461a      	mov	r2, r3
 800a928:	fbb1 f6f7 	udiv	r6, r1, r7
 800a92c:	fb07 1416 	mls	r4, r7, r6, r1
 800a930:	3430      	adds	r4, #48	@ 0x30
 800a932:	f802 4c01 	strb.w	r4, [r2, #-1]
 800a936:	460c      	mov	r4, r1
 800a938:	2c63      	cmp	r4, #99	@ 0x63
 800a93a:	f103 33ff 	add.w	r3, r3, #4294967295
 800a93e:	4631      	mov	r1, r6
 800a940:	dcf1      	bgt.n	800a926 <__exponent+0x1c>
 800a942:	3130      	adds	r1, #48	@ 0x30
 800a944:	1e94      	subs	r4, r2, #2
 800a946:	f803 1c01 	strb.w	r1, [r3, #-1]
 800a94a:	1c41      	adds	r1, r0, #1
 800a94c:	4623      	mov	r3, r4
 800a94e:	42ab      	cmp	r3, r5
 800a950:	d30a      	bcc.n	800a968 <__exponent+0x5e>
 800a952:	f10d 0309 	add.w	r3, sp, #9
 800a956:	1a9b      	subs	r3, r3, r2
 800a958:	42ac      	cmp	r4, r5
 800a95a:	bf88      	it	hi
 800a95c:	2300      	movhi	r3, #0
 800a95e:	3302      	adds	r3, #2
 800a960:	4403      	add	r3, r0
 800a962:	1a18      	subs	r0, r3, r0
 800a964:	b003      	add	sp, #12
 800a966:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a968:	f813 6b01 	ldrb.w	r6, [r3], #1
 800a96c:	f801 6f01 	strb.w	r6, [r1, #1]!
 800a970:	e7ed      	b.n	800a94e <__exponent+0x44>
 800a972:	2330      	movs	r3, #48	@ 0x30
 800a974:	3130      	adds	r1, #48	@ 0x30
 800a976:	7083      	strb	r3, [r0, #2]
 800a978:	70c1      	strb	r1, [r0, #3]
 800a97a:	1d03      	adds	r3, r0, #4
 800a97c:	e7f1      	b.n	800a962 <__exponent+0x58>
	...

0800a980 <_printf_float>:
 800a980:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a984:	b08d      	sub	sp, #52	@ 0x34
 800a986:	460c      	mov	r4, r1
 800a988:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800a98c:	4616      	mov	r6, r2
 800a98e:	461f      	mov	r7, r3
 800a990:	4605      	mov	r5, r0
 800a992:	f000 ffed 	bl	800b970 <_localeconv_r>
 800a996:	6803      	ldr	r3, [r0, #0]
 800a998:	9304      	str	r3, [sp, #16]
 800a99a:	4618      	mov	r0, r3
 800a99c:	f7f5 fc68 	bl	8000270 <strlen>
 800a9a0:	2300      	movs	r3, #0
 800a9a2:	930a      	str	r3, [sp, #40]	@ 0x28
 800a9a4:	f8d8 3000 	ldr.w	r3, [r8]
 800a9a8:	9005      	str	r0, [sp, #20]
 800a9aa:	3307      	adds	r3, #7
 800a9ac:	f023 0307 	bic.w	r3, r3, #7
 800a9b0:	f103 0208 	add.w	r2, r3, #8
 800a9b4:	f894 a018 	ldrb.w	sl, [r4, #24]
 800a9b8:	f8d4 b000 	ldr.w	fp, [r4]
 800a9bc:	f8c8 2000 	str.w	r2, [r8]
 800a9c0:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a9c4:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800a9c8:	9307      	str	r3, [sp, #28]
 800a9ca:	f8cd 8018 	str.w	r8, [sp, #24]
 800a9ce:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800a9d2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a9d6:	4b9c      	ldr	r3, [pc, #624]	@ (800ac48 <_printf_float+0x2c8>)
 800a9d8:	f04f 32ff 	mov.w	r2, #4294967295
 800a9dc:	f7f6 f8a6 	bl	8000b2c <__aeabi_dcmpun>
 800a9e0:	bb70      	cbnz	r0, 800aa40 <_printf_float+0xc0>
 800a9e2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a9e6:	4b98      	ldr	r3, [pc, #608]	@ (800ac48 <_printf_float+0x2c8>)
 800a9e8:	f04f 32ff 	mov.w	r2, #4294967295
 800a9ec:	f7f6 f880 	bl	8000af0 <__aeabi_dcmple>
 800a9f0:	bb30      	cbnz	r0, 800aa40 <_printf_float+0xc0>
 800a9f2:	2200      	movs	r2, #0
 800a9f4:	2300      	movs	r3, #0
 800a9f6:	4640      	mov	r0, r8
 800a9f8:	4649      	mov	r1, r9
 800a9fa:	f7f6 f86f 	bl	8000adc <__aeabi_dcmplt>
 800a9fe:	b110      	cbz	r0, 800aa06 <_printf_float+0x86>
 800aa00:	232d      	movs	r3, #45	@ 0x2d
 800aa02:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800aa06:	4a91      	ldr	r2, [pc, #580]	@ (800ac4c <_printf_float+0x2cc>)
 800aa08:	4b91      	ldr	r3, [pc, #580]	@ (800ac50 <_printf_float+0x2d0>)
 800aa0a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800aa0e:	bf8c      	ite	hi
 800aa10:	4690      	movhi	r8, r2
 800aa12:	4698      	movls	r8, r3
 800aa14:	2303      	movs	r3, #3
 800aa16:	6123      	str	r3, [r4, #16]
 800aa18:	f02b 0304 	bic.w	r3, fp, #4
 800aa1c:	6023      	str	r3, [r4, #0]
 800aa1e:	f04f 0900 	mov.w	r9, #0
 800aa22:	9700      	str	r7, [sp, #0]
 800aa24:	4633      	mov	r3, r6
 800aa26:	aa0b      	add	r2, sp, #44	@ 0x2c
 800aa28:	4621      	mov	r1, r4
 800aa2a:	4628      	mov	r0, r5
 800aa2c:	f000 f9d2 	bl	800add4 <_printf_common>
 800aa30:	3001      	adds	r0, #1
 800aa32:	f040 808d 	bne.w	800ab50 <_printf_float+0x1d0>
 800aa36:	f04f 30ff 	mov.w	r0, #4294967295
 800aa3a:	b00d      	add	sp, #52	@ 0x34
 800aa3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa40:	4642      	mov	r2, r8
 800aa42:	464b      	mov	r3, r9
 800aa44:	4640      	mov	r0, r8
 800aa46:	4649      	mov	r1, r9
 800aa48:	f7f6 f870 	bl	8000b2c <__aeabi_dcmpun>
 800aa4c:	b140      	cbz	r0, 800aa60 <_printf_float+0xe0>
 800aa4e:	464b      	mov	r3, r9
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	bfbc      	itt	lt
 800aa54:	232d      	movlt	r3, #45	@ 0x2d
 800aa56:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800aa5a:	4a7e      	ldr	r2, [pc, #504]	@ (800ac54 <_printf_float+0x2d4>)
 800aa5c:	4b7e      	ldr	r3, [pc, #504]	@ (800ac58 <_printf_float+0x2d8>)
 800aa5e:	e7d4      	b.n	800aa0a <_printf_float+0x8a>
 800aa60:	6863      	ldr	r3, [r4, #4]
 800aa62:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800aa66:	9206      	str	r2, [sp, #24]
 800aa68:	1c5a      	adds	r2, r3, #1
 800aa6a:	d13b      	bne.n	800aae4 <_printf_float+0x164>
 800aa6c:	2306      	movs	r3, #6
 800aa6e:	6063      	str	r3, [r4, #4]
 800aa70:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800aa74:	2300      	movs	r3, #0
 800aa76:	6022      	str	r2, [r4, #0]
 800aa78:	9303      	str	r3, [sp, #12]
 800aa7a:	ab0a      	add	r3, sp, #40	@ 0x28
 800aa7c:	e9cd a301 	strd	sl, r3, [sp, #4]
 800aa80:	ab09      	add	r3, sp, #36	@ 0x24
 800aa82:	9300      	str	r3, [sp, #0]
 800aa84:	6861      	ldr	r1, [r4, #4]
 800aa86:	ec49 8b10 	vmov	d0, r8, r9
 800aa8a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800aa8e:	4628      	mov	r0, r5
 800aa90:	f7ff fed6 	bl	800a840 <__cvt>
 800aa94:	9b06      	ldr	r3, [sp, #24]
 800aa96:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800aa98:	2b47      	cmp	r3, #71	@ 0x47
 800aa9a:	4680      	mov	r8, r0
 800aa9c:	d129      	bne.n	800aaf2 <_printf_float+0x172>
 800aa9e:	1cc8      	adds	r0, r1, #3
 800aaa0:	db02      	blt.n	800aaa8 <_printf_float+0x128>
 800aaa2:	6863      	ldr	r3, [r4, #4]
 800aaa4:	4299      	cmp	r1, r3
 800aaa6:	dd41      	ble.n	800ab2c <_printf_float+0x1ac>
 800aaa8:	f1aa 0a02 	sub.w	sl, sl, #2
 800aaac:	fa5f fa8a 	uxtb.w	sl, sl
 800aab0:	3901      	subs	r1, #1
 800aab2:	4652      	mov	r2, sl
 800aab4:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800aab8:	9109      	str	r1, [sp, #36]	@ 0x24
 800aaba:	f7ff ff26 	bl	800a90a <__exponent>
 800aabe:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800aac0:	1813      	adds	r3, r2, r0
 800aac2:	2a01      	cmp	r2, #1
 800aac4:	4681      	mov	r9, r0
 800aac6:	6123      	str	r3, [r4, #16]
 800aac8:	dc02      	bgt.n	800aad0 <_printf_float+0x150>
 800aaca:	6822      	ldr	r2, [r4, #0]
 800aacc:	07d2      	lsls	r2, r2, #31
 800aace:	d501      	bpl.n	800aad4 <_printf_float+0x154>
 800aad0:	3301      	adds	r3, #1
 800aad2:	6123      	str	r3, [r4, #16]
 800aad4:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800aad8:	2b00      	cmp	r3, #0
 800aada:	d0a2      	beq.n	800aa22 <_printf_float+0xa2>
 800aadc:	232d      	movs	r3, #45	@ 0x2d
 800aade:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800aae2:	e79e      	b.n	800aa22 <_printf_float+0xa2>
 800aae4:	9a06      	ldr	r2, [sp, #24]
 800aae6:	2a47      	cmp	r2, #71	@ 0x47
 800aae8:	d1c2      	bne.n	800aa70 <_printf_float+0xf0>
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	d1c0      	bne.n	800aa70 <_printf_float+0xf0>
 800aaee:	2301      	movs	r3, #1
 800aaf0:	e7bd      	b.n	800aa6e <_printf_float+0xee>
 800aaf2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800aaf6:	d9db      	bls.n	800aab0 <_printf_float+0x130>
 800aaf8:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800aafc:	d118      	bne.n	800ab30 <_printf_float+0x1b0>
 800aafe:	2900      	cmp	r1, #0
 800ab00:	6863      	ldr	r3, [r4, #4]
 800ab02:	dd0b      	ble.n	800ab1c <_printf_float+0x19c>
 800ab04:	6121      	str	r1, [r4, #16]
 800ab06:	b913      	cbnz	r3, 800ab0e <_printf_float+0x18e>
 800ab08:	6822      	ldr	r2, [r4, #0]
 800ab0a:	07d0      	lsls	r0, r2, #31
 800ab0c:	d502      	bpl.n	800ab14 <_printf_float+0x194>
 800ab0e:	3301      	adds	r3, #1
 800ab10:	440b      	add	r3, r1
 800ab12:	6123      	str	r3, [r4, #16]
 800ab14:	65a1      	str	r1, [r4, #88]	@ 0x58
 800ab16:	f04f 0900 	mov.w	r9, #0
 800ab1a:	e7db      	b.n	800aad4 <_printf_float+0x154>
 800ab1c:	b913      	cbnz	r3, 800ab24 <_printf_float+0x1a4>
 800ab1e:	6822      	ldr	r2, [r4, #0]
 800ab20:	07d2      	lsls	r2, r2, #31
 800ab22:	d501      	bpl.n	800ab28 <_printf_float+0x1a8>
 800ab24:	3302      	adds	r3, #2
 800ab26:	e7f4      	b.n	800ab12 <_printf_float+0x192>
 800ab28:	2301      	movs	r3, #1
 800ab2a:	e7f2      	b.n	800ab12 <_printf_float+0x192>
 800ab2c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800ab30:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ab32:	4299      	cmp	r1, r3
 800ab34:	db05      	blt.n	800ab42 <_printf_float+0x1c2>
 800ab36:	6823      	ldr	r3, [r4, #0]
 800ab38:	6121      	str	r1, [r4, #16]
 800ab3a:	07d8      	lsls	r0, r3, #31
 800ab3c:	d5ea      	bpl.n	800ab14 <_printf_float+0x194>
 800ab3e:	1c4b      	adds	r3, r1, #1
 800ab40:	e7e7      	b.n	800ab12 <_printf_float+0x192>
 800ab42:	2900      	cmp	r1, #0
 800ab44:	bfd4      	ite	le
 800ab46:	f1c1 0202 	rsble	r2, r1, #2
 800ab4a:	2201      	movgt	r2, #1
 800ab4c:	4413      	add	r3, r2
 800ab4e:	e7e0      	b.n	800ab12 <_printf_float+0x192>
 800ab50:	6823      	ldr	r3, [r4, #0]
 800ab52:	055a      	lsls	r2, r3, #21
 800ab54:	d407      	bmi.n	800ab66 <_printf_float+0x1e6>
 800ab56:	6923      	ldr	r3, [r4, #16]
 800ab58:	4642      	mov	r2, r8
 800ab5a:	4631      	mov	r1, r6
 800ab5c:	4628      	mov	r0, r5
 800ab5e:	47b8      	blx	r7
 800ab60:	3001      	adds	r0, #1
 800ab62:	d12b      	bne.n	800abbc <_printf_float+0x23c>
 800ab64:	e767      	b.n	800aa36 <_printf_float+0xb6>
 800ab66:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800ab6a:	f240 80dd 	bls.w	800ad28 <_printf_float+0x3a8>
 800ab6e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800ab72:	2200      	movs	r2, #0
 800ab74:	2300      	movs	r3, #0
 800ab76:	f7f5 ffa7 	bl	8000ac8 <__aeabi_dcmpeq>
 800ab7a:	2800      	cmp	r0, #0
 800ab7c:	d033      	beq.n	800abe6 <_printf_float+0x266>
 800ab7e:	4a37      	ldr	r2, [pc, #220]	@ (800ac5c <_printf_float+0x2dc>)
 800ab80:	2301      	movs	r3, #1
 800ab82:	4631      	mov	r1, r6
 800ab84:	4628      	mov	r0, r5
 800ab86:	47b8      	blx	r7
 800ab88:	3001      	adds	r0, #1
 800ab8a:	f43f af54 	beq.w	800aa36 <_printf_float+0xb6>
 800ab8e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800ab92:	4543      	cmp	r3, r8
 800ab94:	db02      	blt.n	800ab9c <_printf_float+0x21c>
 800ab96:	6823      	ldr	r3, [r4, #0]
 800ab98:	07d8      	lsls	r0, r3, #31
 800ab9a:	d50f      	bpl.n	800abbc <_printf_float+0x23c>
 800ab9c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800aba0:	4631      	mov	r1, r6
 800aba2:	4628      	mov	r0, r5
 800aba4:	47b8      	blx	r7
 800aba6:	3001      	adds	r0, #1
 800aba8:	f43f af45 	beq.w	800aa36 <_printf_float+0xb6>
 800abac:	f04f 0900 	mov.w	r9, #0
 800abb0:	f108 38ff 	add.w	r8, r8, #4294967295
 800abb4:	f104 0a1a 	add.w	sl, r4, #26
 800abb8:	45c8      	cmp	r8, r9
 800abba:	dc09      	bgt.n	800abd0 <_printf_float+0x250>
 800abbc:	6823      	ldr	r3, [r4, #0]
 800abbe:	079b      	lsls	r3, r3, #30
 800abc0:	f100 8103 	bmi.w	800adca <_printf_float+0x44a>
 800abc4:	68e0      	ldr	r0, [r4, #12]
 800abc6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800abc8:	4298      	cmp	r0, r3
 800abca:	bfb8      	it	lt
 800abcc:	4618      	movlt	r0, r3
 800abce:	e734      	b.n	800aa3a <_printf_float+0xba>
 800abd0:	2301      	movs	r3, #1
 800abd2:	4652      	mov	r2, sl
 800abd4:	4631      	mov	r1, r6
 800abd6:	4628      	mov	r0, r5
 800abd8:	47b8      	blx	r7
 800abda:	3001      	adds	r0, #1
 800abdc:	f43f af2b 	beq.w	800aa36 <_printf_float+0xb6>
 800abe0:	f109 0901 	add.w	r9, r9, #1
 800abe4:	e7e8      	b.n	800abb8 <_printf_float+0x238>
 800abe6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800abe8:	2b00      	cmp	r3, #0
 800abea:	dc39      	bgt.n	800ac60 <_printf_float+0x2e0>
 800abec:	4a1b      	ldr	r2, [pc, #108]	@ (800ac5c <_printf_float+0x2dc>)
 800abee:	2301      	movs	r3, #1
 800abf0:	4631      	mov	r1, r6
 800abf2:	4628      	mov	r0, r5
 800abf4:	47b8      	blx	r7
 800abf6:	3001      	adds	r0, #1
 800abf8:	f43f af1d 	beq.w	800aa36 <_printf_float+0xb6>
 800abfc:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800ac00:	ea59 0303 	orrs.w	r3, r9, r3
 800ac04:	d102      	bne.n	800ac0c <_printf_float+0x28c>
 800ac06:	6823      	ldr	r3, [r4, #0]
 800ac08:	07d9      	lsls	r1, r3, #31
 800ac0a:	d5d7      	bpl.n	800abbc <_printf_float+0x23c>
 800ac0c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ac10:	4631      	mov	r1, r6
 800ac12:	4628      	mov	r0, r5
 800ac14:	47b8      	blx	r7
 800ac16:	3001      	adds	r0, #1
 800ac18:	f43f af0d 	beq.w	800aa36 <_printf_float+0xb6>
 800ac1c:	f04f 0a00 	mov.w	sl, #0
 800ac20:	f104 0b1a 	add.w	fp, r4, #26
 800ac24:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ac26:	425b      	negs	r3, r3
 800ac28:	4553      	cmp	r3, sl
 800ac2a:	dc01      	bgt.n	800ac30 <_printf_float+0x2b0>
 800ac2c:	464b      	mov	r3, r9
 800ac2e:	e793      	b.n	800ab58 <_printf_float+0x1d8>
 800ac30:	2301      	movs	r3, #1
 800ac32:	465a      	mov	r2, fp
 800ac34:	4631      	mov	r1, r6
 800ac36:	4628      	mov	r0, r5
 800ac38:	47b8      	blx	r7
 800ac3a:	3001      	adds	r0, #1
 800ac3c:	f43f aefb 	beq.w	800aa36 <_printf_float+0xb6>
 800ac40:	f10a 0a01 	add.w	sl, sl, #1
 800ac44:	e7ee      	b.n	800ac24 <_printf_float+0x2a4>
 800ac46:	bf00      	nop
 800ac48:	7fefffff 	.word	0x7fefffff
 800ac4c:	0800efd8 	.word	0x0800efd8
 800ac50:	0800efd4 	.word	0x0800efd4
 800ac54:	0800efe0 	.word	0x0800efe0
 800ac58:	0800efdc 	.word	0x0800efdc
 800ac5c:	0800efe4 	.word	0x0800efe4
 800ac60:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800ac62:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800ac66:	4553      	cmp	r3, sl
 800ac68:	bfa8      	it	ge
 800ac6a:	4653      	movge	r3, sl
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	4699      	mov	r9, r3
 800ac70:	dc36      	bgt.n	800ace0 <_printf_float+0x360>
 800ac72:	f04f 0b00 	mov.w	fp, #0
 800ac76:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ac7a:	f104 021a 	add.w	r2, r4, #26
 800ac7e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800ac80:	9306      	str	r3, [sp, #24]
 800ac82:	eba3 0309 	sub.w	r3, r3, r9
 800ac86:	455b      	cmp	r3, fp
 800ac88:	dc31      	bgt.n	800acee <_printf_float+0x36e>
 800ac8a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ac8c:	459a      	cmp	sl, r3
 800ac8e:	dc3a      	bgt.n	800ad06 <_printf_float+0x386>
 800ac90:	6823      	ldr	r3, [r4, #0]
 800ac92:	07da      	lsls	r2, r3, #31
 800ac94:	d437      	bmi.n	800ad06 <_printf_float+0x386>
 800ac96:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ac98:	ebaa 0903 	sub.w	r9, sl, r3
 800ac9c:	9b06      	ldr	r3, [sp, #24]
 800ac9e:	ebaa 0303 	sub.w	r3, sl, r3
 800aca2:	4599      	cmp	r9, r3
 800aca4:	bfa8      	it	ge
 800aca6:	4699      	movge	r9, r3
 800aca8:	f1b9 0f00 	cmp.w	r9, #0
 800acac:	dc33      	bgt.n	800ad16 <_printf_float+0x396>
 800acae:	f04f 0800 	mov.w	r8, #0
 800acb2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800acb6:	f104 0b1a 	add.w	fp, r4, #26
 800acba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800acbc:	ebaa 0303 	sub.w	r3, sl, r3
 800acc0:	eba3 0309 	sub.w	r3, r3, r9
 800acc4:	4543      	cmp	r3, r8
 800acc6:	f77f af79 	ble.w	800abbc <_printf_float+0x23c>
 800acca:	2301      	movs	r3, #1
 800accc:	465a      	mov	r2, fp
 800acce:	4631      	mov	r1, r6
 800acd0:	4628      	mov	r0, r5
 800acd2:	47b8      	blx	r7
 800acd4:	3001      	adds	r0, #1
 800acd6:	f43f aeae 	beq.w	800aa36 <_printf_float+0xb6>
 800acda:	f108 0801 	add.w	r8, r8, #1
 800acde:	e7ec      	b.n	800acba <_printf_float+0x33a>
 800ace0:	4642      	mov	r2, r8
 800ace2:	4631      	mov	r1, r6
 800ace4:	4628      	mov	r0, r5
 800ace6:	47b8      	blx	r7
 800ace8:	3001      	adds	r0, #1
 800acea:	d1c2      	bne.n	800ac72 <_printf_float+0x2f2>
 800acec:	e6a3      	b.n	800aa36 <_printf_float+0xb6>
 800acee:	2301      	movs	r3, #1
 800acf0:	4631      	mov	r1, r6
 800acf2:	4628      	mov	r0, r5
 800acf4:	9206      	str	r2, [sp, #24]
 800acf6:	47b8      	blx	r7
 800acf8:	3001      	adds	r0, #1
 800acfa:	f43f ae9c 	beq.w	800aa36 <_printf_float+0xb6>
 800acfe:	9a06      	ldr	r2, [sp, #24]
 800ad00:	f10b 0b01 	add.w	fp, fp, #1
 800ad04:	e7bb      	b.n	800ac7e <_printf_float+0x2fe>
 800ad06:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ad0a:	4631      	mov	r1, r6
 800ad0c:	4628      	mov	r0, r5
 800ad0e:	47b8      	blx	r7
 800ad10:	3001      	adds	r0, #1
 800ad12:	d1c0      	bne.n	800ac96 <_printf_float+0x316>
 800ad14:	e68f      	b.n	800aa36 <_printf_float+0xb6>
 800ad16:	9a06      	ldr	r2, [sp, #24]
 800ad18:	464b      	mov	r3, r9
 800ad1a:	4442      	add	r2, r8
 800ad1c:	4631      	mov	r1, r6
 800ad1e:	4628      	mov	r0, r5
 800ad20:	47b8      	blx	r7
 800ad22:	3001      	adds	r0, #1
 800ad24:	d1c3      	bne.n	800acae <_printf_float+0x32e>
 800ad26:	e686      	b.n	800aa36 <_printf_float+0xb6>
 800ad28:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800ad2c:	f1ba 0f01 	cmp.w	sl, #1
 800ad30:	dc01      	bgt.n	800ad36 <_printf_float+0x3b6>
 800ad32:	07db      	lsls	r3, r3, #31
 800ad34:	d536      	bpl.n	800ada4 <_printf_float+0x424>
 800ad36:	2301      	movs	r3, #1
 800ad38:	4642      	mov	r2, r8
 800ad3a:	4631      	mov	r1, r6
 800ad3c:	4628      	mov	r0, r5
 800ad3e:	47b8      	blx	r7
 800ad40:	3001      	adds	r0, #1
 800ad42:	f43f ae78 	beq.w	800aa36 <_printf_float+0xb6>
 800ad46:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ad4a:	4631      	mov	r1, r6
 800ad4c:	4628      	mov	r0, r5
 800ad4e:	47b8      	blx	r7
 800ad50:	3001      	adds	r0, #1
 800ad52:	f43f ae70 	beq.w	800aa36 <_printf_float+0xb6>
 800ad56:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800ad5a:	2200      	movs	r2, #0
 800ad5c:	2300      	movs	r3, #0
 800ad5e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ad62:	f7f5 feb1 	bl	8000ac8 <__aeabi_dcmpeq>
 800ad66:	b9c0      	cbnz	r0, 800ad9a <_printf_float+0x41a>
 800ad68:	4653      	mov	r3, sl
 800ad6a:	f108 0201 	add.w	r2, r8, #1
 800ad6e:	4631      	mov	r1, r6
 800ad70:	4628      	mov	r0, r5
 800ad72:	47b8      	blx	r7
 800ad74:	3001      	adds	r0, #1
 800ad76:	d10c      	bne.n	800ad92 <_printf_float+0x412>
 800ad78:	e65d      	b.n	800aa36 <_printf_float+0xb6>
 800ad7a:	2301      	movs	r3, #1
 800ad7c:	465a      	mov	r2, fp
 800ad7e:	4631      	mov	r1, r6
 800ad80:	4628      	mov	r0, r5
 800ad82:	47b8      	blx	r7
 800ad84:	3001      	adds	r0, #1
 800ad86:	f43f ae56 	beq.w	800aa36 <_printf_float+0xb6>
 800ad8a:	f108 0801 	add.w	r8, r8, #1
 800ad8e:	45d0      	cmp	r8, sl
 800ad90:	dbf3      	blt.n	800ad7a <_printf_float+0x3fa>
 800ad92:	464b      	mov	r3, r9
 800ad94:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800ad98:	e6df      	b.n	800ab5a <_printf_float+0x1da>
 800ad9a:	f04f 0800 	mov.w	r8, #0
 800ad9e:	f104 0b1a 	add.w	fp, r4, #26
 800ada2:	e7f4      	b.n	800ad8e <_printf_float+0x40e>
 800ada4:	2301      	movs	r3, #1
 800ada6:	4642      	mov	r2, r8
 800ada8:	e7e1      	b.n	800ad6e <_printf_float+0x3ee>
 800adaa:	2301      	movs	r3, #1
 800adac:	464a      	mov	r2, r9
 800adae:	4631      	mov	r1, r6
 800adb0:	4628      	mov	r0, r5
 800adb2:	47b8      	blx	r7
 800adb4:	3001      	adds	r0, #1
 800adb6:	f43f ae3e 	beq.w	800aa36 <_printf_float+0xb6>
 800adba:	f108 0801 	add.w	r8, r8, #1
 800adbe:	68e3      	ldr	r3, [r4, #12]
 800adc0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800adc2:	1a5b      	subs	r3, r3, r1
 800adc4:	4543      	cmp	r3, r8
 800adc6:	dcf0      	bgt.n	800adaa <_printf_float+0x42a>
 800adc8:	e6fc      	b.n	800abc4 <_printf_float+0x244>
 800adca:	f04f 0800 	mov.w	r8, #0
 800adce:	f104 0919 	add.w	r9, r4, #25
 800add2:	e7f4      	b.n	800adbe <_printf_float+0x43e>

0800add4 <_printf_common>:
 800add4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800add8:	4616      	mov	r6, r2
 800adda:	4698      	mov	r8, r3
 800addc:	688a      	ldr	r2, [r1, #8]
 800adde:	690b      	ldr	r3, [r1, #16]
 800ade0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800ade4:	4293      	cmp	r3, r2
 800ade6:	bfb8      	it	lt
 800ade8:	4613      	movlt	r3, r2
 800adea:	6033      	str	r3, [r6, #0]
 800adec:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800adf0:	4607      	mov	r7, r0
 800adf2:	460c      	mov	r4, r1
 800adf4:	b10a      	cbz	r2, 800adfa <_printf_common+0x26>
 800adf6:	3301      	adds	r3, #1
 800adf8:	6033      	str	r3, [r6, #0]
 800adfa:	6823      	ldr	r3, [r4, #0]
 800adfc:	0699      	lsls	r1, r3, #26
 800adfe:	bf42      	ittt	mi
 800ae00:	6833      	ldrmi	r3, [r6, #0]
 800ae02:	3302      	addmi	r3, #2
 800ae04:	6033      	strmi	r3, [r6, #0]
 800ae06:	6825      	ldr	r5, [r4, #0]
 800ae08:	f015 0506 	ands.w	r5, r5, #6
 800ae0c:	d106      	bne.n	800ae1c <_printf_common+0x48>
 800ae0e:	f104 0a19 	add.w	sl, r4, #25
 800ae12:	68e3      	ldr	r3, [r4, #12]
 800ae14:	6832      	ldr	r2, [r6, #0]
 800ae16:	1a9b      	subs	r3, r3, r2
 800ae18:	42ab      	cmp	r3, r5
 800ae1a:	dc26      	bgt.n	800ae6a <_printf_common+0x96>
 800ae1c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800ae20:	6822      	ldr	r2, [r4, #0]
 800ae22:	3b00      	subs	r3, #0
 800ae24:	bf18      	it	ne
 800ae26:	2301      	movne	r3, #1
 800ae28:	0692      	lsls	r2, r2, #26
 800ae2a:	d42b      	bmi.n	800ae84 <_printf_common+0xb0>
 800ae2c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800ae30:	4641      	mov	r1, r8
 800ae32:	4638      	mov	r0, r7
 800ae34:	47c8      	blx	r9
 800ae36:	3001      	adds	r0, #1
 800ae38:	d01e      	beq.n	800ae78 <_printf_common+0xa4>
 800ae3a:	6823      	ldr	r3, [r4, #0]
 800ae3c:	6922      	ldr	r2, [r4, #16]
 800ae3e:	f003 0306 	and.w	r3, r3, #6
 800ae42:	2b04      	cmp	r3, #4
 800ae44:	bf02      	ittt	eq
 800ae46:	68e5      	ldreq	r5, [r4, #12]
 800ae48:	6833      	ldreq	r3, [r6, #0]
 800ae4a:	1aed      	subeq	r5, r5, r3
 800ae4c:	68a3      	ldr	r3, [r4, #8]
 800ae4e:	bf0c      	ite	eq
 800ae50:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ae54:	2500      	movne	r5, #0
 800ae56:	4293      	cmp	r3, r2
 800ae58:	bfc4      	itt	gt
 800ae5a:	1a9b      	subgt	r3, r3, r2
 800ae5c:	18ed      	addgt	r5, r5, r3
 800ae5e:	2600      	movs	r6, #0
 800ae60:	341a      	adds	r4, #26
 800ae62:	42b5      	cmp	r5, r6
 800ae64:	d11a      	bne.n	800ae9c <_printf_common+0xc8>
 800ae66:	2000      	movs	r0, #0
 800ae68:	e008      	b.n	800ae7c <_printf_common+0xa8>
 800ae6a:	2301      	movs	r3, #1
 800ae6c:	4652      	mov	r2, sl
 800ae6e:	4641      	mov	r1, r8
 800ae70:	4638      	mov	r0, r7
 800ae72:	47c8      	blx	r9
 800ae74:	3001      	adds	r0, #1
 800ae76:	d103      	bne.n	800ae80 <_printf_common+0xac>
 800ae78:	f04f 30ff 	mov.w	r0, #4294967295
 800ae7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ae80:	3501      	adds	r5, #1
 800ae82:	e7c6      	b.n	800ae12 <_printf_common+0x3e>
 800ae84:	18e1      	adds	r1, r4, r3
 800ae86:	1c5a      	adds	r2, r3, #1
 800ae88:	2030      	movs	r0, #48	@ 0x30
 800ae8a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800ae8e:	4422      	add	r2, r4
 800ae90:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800ae94:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800ae98:	3302      	adds	r3, #2
 800ae9a:	e7c7      	b.n	800ae2c <_printf_common+0x58>
 800ae9c:	2301      	movs	r3, #1
 800ae9e:	4622      	mov	r2, r4
 800aea0:	4641      	mov	r1, r8
 800aea2:	4638      	mov	r0, r7
 800aea4:	47c8      	blx	r9
 800aea6:	3001      	adds	r0, #1
 800aea8:	d0e6      	beq.n	800ae78 <_printf_common+0xa4>
 800aeaa:	3601      	adds	r6, #1
 800aeac:	e7d9      	b.n	800ae62 <_printf_common+0x8e>
	...

0800aeb0 <_printf_i>:
 800aeb0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800aeb4:	7e0f      	ldrb	r7, [r1, #24]
 800aeb6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800aeb8:	2f78      	cmp	r7, #120	@ 0x78
 800aeba:	4691      	mov	r9, r2
 800aebc:	4680      	mov	r8, r0
 800aebe:	460c      	mov	r4, r1
 800aec0:	469a      	mov	sl, r3
 800aec2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800aec6:	d807      	bhi.n	800aed8 <_printf_i+0x28>
 800aec8:	2f62      	cmp	r7, #98	@ 0x62
 800aeca:	d80a      	bhi.n	800aee2 <_printf_i+0x32>
 800aecc:	2f00      	cmp	r7, #0
 800aece:	f000 80d1 	beq.w	800b074 <_printf_i+0x1c4>
 800aed2:	2f58      	cmp	r7, #88	@ 0x58
 800aed4:	f000 80b8 	beq.w	800b048 <_printf_i+0x198>
 800aed8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800aedc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800aee0:	e03a      	b.n	800af58 <_printf_i+0xa8>
 800aee2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800aee6:	2b15      	cmp	r3, #21
 800aee8:	d8f6      	bhi.n	800aed8 <_printf_i+0x28>
 800aeea:	a101      	add	r1, pc, #4	@ (adr r1, 800aef0 <_printf_i+0x40>)
 800aeec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800aef0:	0800af49 	.word	0x0800af49
 800aef4:	0800af5d 	.word	0x0800af5d
 800aef8:	0800aed9 	.word	0x0800aed9
 800aefc:	0800aed9 	.word	0x0800aed9
 800af00:	0800aed9 	.word	0x0800aed9
 800af04:	0800aed9 	.word	0x0800aed9
 800af08:	0800af5d 	.word	0x0800af5d
 800af0c:	0800aed9 	.word	0x0800aed9
 800af10:	0800aed9 	.word	0x0800aed9
 800af14:	0800aed9 	.word	0x0800aed9
 800af18:	0800aed9 	.word	0x0800aed9
 800af1c:	0800b05b 	.word	0x0800b05b
 800af20:	0800af87 	.word	0x0800af87
 800af24:	0800b015 	.word	0x0800b015
 800af28:	0800aed9 	.word	0x0800aed9
 800af2c:	0800aed9 	.word	0x0800aed9
 800af30:	0800b07d 	.word	0x0800b07d
 800af34:	0800aed9 	.word	0x0800aed9
 800af38:	0800af87 	.word	0x0800af87
 800af3c:	0800aed9 	.word	0x0800aed9
 800af40:	0800aed9 	.word	0x0800aed9
 800af44:	0800b01d 	.word	0x0800b01d
 800af48:	6833      	ldr	r3, [r6, #0]
 800af4a:	1d1a      	adds	r2, r3, #4
 800af4c:	681b      	ldr	r3, [r3, #0]
 800af4e:	6032      	str	r2, [r6, #0]
 800af50:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800af54:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800af58:	2301      	movs	r3, #1
 800af5a:	e09c      	b.n	800b096 <_printf_i+0x1e6>
 800af5c:	6833      	ldr	r3, [r6, #0]
 800af5e:	6820      	ldr	r0, [r4, #0]
 800af60:	1d19      	adds	r1, r3, #4
 800af62:	6031      	str	r1, [r6, #0]
 800af64:	0606      	lsls	r6, r0, #24
 800af66:	d501      	bpl.n	800af6c <_printf_i+0xbc>
 800af68:	681d      	ldr	r5, [r3, #0]
 800af6a:	e003      	b.n	800af74 <_printf_i+0xc4>
 800af6c:	0645      	lsls	r5, r0, #25
 800af6e:	d5fb      	bpl.n	800af68 <_printf_i+0xb8>
 800af70:	f9b3 5000 	ldrsh.w	r5, [r3]
 800af74:	2d00      	cmp	r5, #0
 800af76:	da03      	bge.n	800af80 <_printf_i+0xd0>
 800af78:	232d      	movs	r3, #45	@ 0x2d
 800af7a:	426d      	negs	r5, r5
 800af7c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800af80:	4858      	ldr	r0, [pc, #352]	@ (800b0e4 <_printf_i+0x234>)
 800af82:	230a      	movs	r3, #10
 800af84:	e011      	b.n	800afaa <_printf_i+0xfa>
 800af86:	6821      	ldr	r1, [r4, #0]
 800af88:	6833      	ldr	r3, [r6, #0]
 800af8a:	0608      	lsls	r0, r1, #24
 800af8c:	f853 5b04 	ldr.w	r5, [r3], #4
 800af90:	d402      	bmi.n	800af98 <_printf_i+0xe8>
 800af92:	0649      	lsls	r1, r1, #25
 800af94:	bf48      	it	mi
 800af96:	b2ad      	uxthmi	r5, r5
 800af98:	2f6f      	cmp	r7, #111	@ 0x6f
 800af9a:	4852      	ldr	r0, [pc, #328]	@ (800b0e4 <_printf_i+0x234>)
 800af9c:	6033      	str	r3, [r6, #0]
 800af9e:	bf14      	ite	ne
 800afa0:	230a      	movne	r3, #10
 800afa2:	2308      	moveq	r3, #8
 800afa4:	2100      	movs	r1, #0
 800afa6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800afaa:	6866      	ldr	r6, [r4, #4]
 800afac:	60a6      	str	r6, [r4, #8]
 800afae:	2e00      	cmp	r6, #0
 800afb0:	db05      	blt.n	800afbe <_printf_i+0x10e>
 800afb2:	6821      	ldr	r1, [r4, #0]
 800afb4:	432e      	orrs	r6, r5
 800afb6:	f021 0104 	bic.w	r1, r1, #4
 800afba:	6021      	str	r1, [r4, #0]
 800afbc:	d04b      	beq.n	800b056 <_printf_i+0x1a6>
 800afbe:	4616      	mov	r6, r2
 800afc0:	fbb5 f1f3 	udiv	r1, r5, r3
 800afc4:	fb03 5711 	mls	r7, r3, r1, r5
 800afc8:	5dc7      	ldrb	r7, [r0, r7]
 800afca:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800afce:	462f      	mov	r7, r5
 800afd0:	42bb      	cmp	r3, r7
 800afd2:	460d      	mov	r5, r1
 800afd4:	d9f4      	bls.n	800afc0 <_printf_i+0x110>
 800afd6:	2b08      	cmp	r3, #8
 800afd8:	d10b      	bne.n	800aff2 <_printf_i+0x142>
 800afda:	6823      	ldr	r3, [r4, #0]
 800afdc:	07df      	lsls	r7, r3, #31
 800afde:	d508      	bpl.n	800aff2 <_printf_i+0x142>
 800afe0:	6923      	ldr	r3, [r4, #16]
 800afe2:	6861      	ldr	r1, [r4, #4]
 800afe4:	4299      	cmp	r1, r3
 800afe6:	bfde      	ittt	le
 800afe8:	2330      	movle	r3, #48	@ 0x30
 800afea:	f806 3c01 	strble.w	r3, [r6, #-1]
 800afee:	f106 36ff 	addle.w	r6, r6, #4294967295
 800aff2:	1b92      	subs	r2, r2, r6
 800aff4:	6122      	str	r2, [r4, #16]
 800aff6:	f8cd a000 	str.w	sl, [sp]
 800affa:	464b      	mov	r3, r9
 800affc:	aa03      	add	r2, sp, #12
 800affe:	4621      	mov	r1, r4
 800b000:	4640      	mov	r0, r8
 800b002:	f7ff fee7 	bl	800add4 <_printf_common>
 800b006:	3001      	adds	r0, #1
 800b008:	d14a      	bne.n	800b0a0 <_printf_i+0x1f0>
 800b00a:	f04f 30ff 	mov.w	r0, #4294967295
 800b00e:	b004      	add	sp, #16
 800b010:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b014:	6823      	ldr	r3, [r4, #0]
 800b016:	f043 0320 	orr.w	r3, r3, #32
 800b01a:	6023      	str	r3, [r4, #0]
 800b01c:	4832      	ldr	r0, [pc, #200]	@ (800b0e8 <_printf_i+0x238>)
 800b01e:	2778      	movs	r7, #120	@ 0x78
 800b020:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b024:	6823      	ldr	r3, [r4, #0]
 800b026:	6831      	ldr	r1, [r6, #0]
 800b028:	061f      	lsls	r7, r3, #24
 800b02a:	f851 5b04 	ldr.w	r5, [r1], #4
 800b02e:	d402      	bmi.n	800b036 <_printf_i+0x186>
 800b030:	065f      	lsls	r7, r3, #25
 800b032:	bf48      	it	mi
 800b034:	b2ad      	uxthmi	r5, r5
 800b036:	6031      	str	r1, [r6, #0]
 800b038:	07d9      	lsls	r1, r3, #31
 800b03a:	bf44      	itt	mi
 800b03c:	f043 0320 	orrmi.w	r3, r3, #32
 800b040:	6023      	strmi	r3, [r4, #0]
 800b042:	b11d      	cbz	r5, 800b04c <_printf_i+0x19c>
 800b044:	2310      	movs	r3, #16
 800b046:	e7ad      	b.n	800afa4 <_printf_i+0xf4>
 800b048:	4826      	ldr	r0, [pc, #152]	@ (800b0e4 <_printf_i+0x234>)
 800b04a:	e7e9      	b.n	800b020 <_printf_i+0x170>
 800b04c:	6823      	ldr	r3, [r4, #0]
 800b04e:	f023 0320 	bic.w	r3, r3, #32
 800b052:	6023      	str	r3, [r4, #0]
 800b054:	e7f6      	b.n	800b044 <_printf_i+0x194>
 800b056:	4616      	mov	r6, r2
 800b058:	e7bd      	b.n	800afd6 <_printf_i+0x126>
 800b05a:	6833      	ldr	r3, [r6, #0]
 800b05c:	6825      	ldr	r5, [r4, #0]
 800b05e:	6961      	ldr	r1, [r4, #20]
 800b060:	1d18      	adds	r0, r3, #4
 800b062:	6030      	str	r0, [r6, #0]
 800b064:	062e      	lsls	r6, r5, #24
 800b066:	681b      	ldr	r3, [r3, #0]
 800b068:	d501      	bpl.n	800b06e <_printf_i+0x1be>
 800b06a:	6019      	str	r1, [r3, #0]
 800b06c:	e002      	b.n	800b074 <_printf_i+0x1c4>
 800b06e:	0668      	lsls	r0, r5, #25
 800b070:	d5fb      	bpl.n	800b06a <_printf_i+0x1ba>
 800b072:	8019      	strh	r1, [r3, #0]
 800b074:	2300      	movs	r3, #0
 800b076:	6123      	str	r3, [r4, #16]
 800b078:	4616      	mov	r6, r2
 800b07a:	e7bc      	b.n	800aff6 <_printf_i+0x146>
 800b07c:	6833      	ldr	r3, [r6, #0]
 800b07e:	1d1a      	adds	r2, r3, #4
 800b080:	6032      	str	r2, [r6, #0]
 800b082:	681e      	ldr	r6, [r3, #0]
 800b084:	6862      	ldr	r2, [r4, #4]
 800b086:	2100      	movs	r1, #0
 800b088:	4630      	mov	r0, r6
 800b08a:	f7f5 f8a1 	bl	80001d0 <memchr>
 800b08e:	b108      	cbz	r0, 800b094 <_printf_i+0x1e4>
 800b090:	1b80      	subs	r0, r0, r6
 800b092:	6060      	str	r0, [r4, #4]
 800b094:	6863      	ldr	r3, [r4, #4]
 800b096:	6123      	str	r3, [r4, #16]
 800b098:	2300      	movs	r3, #0
 800b09a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b09e:	e7aa      	b.n	800aff6 <_printf_i+0x146>
 800b0a0:	6923      	ldr	r3, [r4, #16]
 800b0a2:	4632      	mov	r2, r6
 800b0a4:	4649      	mov	r1, r9
 800b0a6:	4640      	mov	r0, r8
 800b0a8:	47d0      	blx	sl
 800b0aa:	3001      	adds	r0, #1
 800b0ac:	d0ad      	beq.n	800b00a <_printf_i+0x15a>
 800b0ae:	6823      	ldr	r3, [r4, #0]
 800b0b0:	079b      	lsls	r3, r3, #30
 800b0b2:	d413      	bmi.n	800b0dc <_printf_i+0x22c>
 800b0b4:	68e0      	ldr	r0, [r4, #12]
 800b0b6:	9b03      	ldr	r3, [sp, #12]
 800b0b8:	4298      	cmp	r0, r3
 800b0ba:	bfb8      	it	lt
 800b0bc:	4618      	movlt	r0, r3
 800b0be:	e7a6      	b.n	800b00e <_printf_i+0x15e>
 800b0c0:	2301      	movs	r3, #1
 800b0c2:	4632      	mov	r2, r6
 800b0c4:	4649      	mov	r1, r9
 800b0c6:	4640      	mov	r0, r8
 800b0c8:	47d0      	blx	sl
 800b0ca:	3001      	adds	r0, #1
 800b0cc:	d09d      	beq.n	800b00a <_printf_i+0x15a>
 800b0ce:	3501      	adds	r5, #1
 800b0d0:	68e3      	ldr	r3, [r4, #12]
 800b0d2:	9903      	ldr	r1, [sp, #12]
 800b0d4:	1a5b      	subs	r3, r3, r1
 800b0d6:	42ab      	cmp	r3, r5
 800b0d8:	dcf2      	bgt.n	800b0c0 <_printf_i+0x210>
 800b0da:	e7eb      	b.n	800b0b4 <_printf_i+0x204>
 800b0dc:	2500      	movs	r5, #0
 800b0de:	f104 0619 	add.w	r6, r4, #25
 800b0e2:	e7f5      	b.n	800b0d0 <_printf_i+0x220>
 800b0e4:	0800efe6 	.word	0x0800efe6
 800b0e8:	0800eff7 	.word	0x0800eff7

0800b0ec <_scanf_float>:
 800b0ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0f0:	b087      	sub	sp, #28
 800b0f2:	4691      	mov	r9, r2
 800b0f4:	9303      	str	r3, [sp, #12]
 800b0f6:	688b      	ldr	r3, [r1, #8]
 800b0f8:	1e5a      	subs	r2, r3, #1
 800b0fa:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800b0fe:	bf81      	itttt	hi
 800b100:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800b104:	eb03 0b05 	addhi.w	fp, r3, r5
 800b108:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800b10c:	608b      	strhi	r3, [r1, #8]
 800b10e:	680b      	ldr	r3, [r1, #0]
 800b110:	460a      	mov	r2, r1
 800b112:	f04f 0500 	mov.w	r5, #0
 800b116:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800b11a:	f842 3b1c 	str.w	r3, [r2], #28
 800b11e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800b122:	4680      	mov	r8, r0
 800b124:	460c      	mov	r4, r1
 800b126:	bf98      	it	ls
 800b128:	f04f 0b00 	movls.w	fp, #0
 800b12c:	9201      	str	r2, [sp, #4]
 800b12e:	4616      	mov	r6, r2
 800b130:	46aa      	mov	sl, r5
 800b132:	462f      	mov	r7, r5
 800b134:	9502      	str	r5, [sp, #8]
 800b136:	68a2      	ldr	r2, [r4, #8]
 800b138:	b15a      	cbz	r2, 800b152 <_scanf_float+0x66>
 800b13a:	f8d9 3000 	ldr.w	r3, [r9]
 800b13e:	781b      	ldrb	r3, [r3, #0]
 800b140:	2b4e      	cmp	r3, #78	@ 0x4e
 800b142:	d863      	bhi.n	800b20c <_scanf_float+0x120>
 800b144:	2b40      	cmp	r3, #64	@ 0x40
 800b146:	d83b      	bhi.n	800b1c0 <_scanf_float+0xd4>
 800b148:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800b14c:	b2c8      	uxtb	r0, r1
 800b14e:	280e      	cmp	r0, #14
 800b150:	d939      	bls.n	800b1c6 <_scanf_float+0xda>
 800b152:	b11f      	cbz	r7, 800b15c <_scanf_float+0x70>
 800b154:	6823      	ldr	r3, [r4, #0]
 800b156:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b15a:	6023      	str	r3, [r4, #0]
 800b15c:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b160:	f1ba 0f01 	cmp.w	sl, #1
 800b164:	f200 8114 	bhi.w	800b390 <_scanf_float+0x2a4>
 800b168:	9b01      	ldr	r3, [sp, #4]
 800b16a:	429e      	cmp	r6, r3
 800b16c:	f200 8105 	bhi.w	800b37a <_scanf_float+0x28e>
 800b170:	2001      	movs	r0, #1
 800b172:	b007      	add	sp, #28
 800b174:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b178:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800b17c:	2a0d      	cmp	r2, #13
 800b17e:	d8e8      	bhi.n	800b152 <_scanf_float+0x66>
 800b180:	a101      	add	r1, pc, #4	@ (adr r1, 800b188 <_scanf_float+0x9c>)
 800b182:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800b186:	bf00      	nop
 800b188:	0800b2d1 	.word	0x0800b2d1
 800b18c:	0800b153 	.word	0x0800b153
 800b190:	0800b153 	.word	0x0800b153
 800b194:	0800b153 	.word	0x0800b153
 800b198:	0800b32d 	.word	0x0800b32d
 800b19c:	0800b307 	.word	0x0800b307
 800b1a0:	0800b153 	.word	0x0800b153
 800b1a4:	0800b153 	.word	0x0800b153
 800b1a8:	0800b2df 	.word	0x0800b2df
 800b1ac:	0800b153 	.word	0x0800b153
 800b1b0:	0800b153 	.word	0x0800b153
 800b1b4:	0800b153 	.word	0x0800b153
 800b1b8:	0800b153 	.word	0x0800b153
 800b1bc:	0800b29b 	.word	0x0800b29b
 800b1c0:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800b1c4:	e7da      	b.n	800b17c <_scanf_float+0x90>
 800b1c6:	290e      	cmp	r1, #14
 800b1c8:	d8c3      	bhi.n	800b152 <_scanf_float+0x66>
 800b1ca:	a001      	add	r0, pc, #4	@ (adr r0, 800b1d0 <_scanf_float+0xe4>)
 800b1cc:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800b1d0:	0800b28b 	.word	0x0800b28b
 800b1d4:	0800b153 	.word	0x0800b153
 800b1d8:	0800b28b 	.word	0x0800b28b
 800b1dc:	0800b31b 	.word	0x0800b31b
 800b1e0:	0800b153 	.word	0x0800b153
 800b1e4:	0800b22d 	.word	0x0800b22d
 800b1e8:	0800b271 	.word	0x0800b271
 800b1ec:	0800b271 	.word	0x0800b271
 800b1f0:	0800b271 	.word	0x0800b271
 800b1f4:	0800b271 	.word	0x0800b271
 800b1f8:	0800b271 	.word	0x0800b271
 800b1fc:	0800b271 	.word	0x0800b271
 800b200:	0800b271 	.word	0x0800b271
 800b204:	0800b271 	.word	0x0800b271
 800b208:	0800b271 	.word	0x0800b271
 800b20c:	2b6e      	cmp	r3, #110	@ 0x6e
 800b20e:	d809      	bhi.n	800b224 <_scanf_float+0x138>
 800b210:	2b60      	cmp	r3, #96	@ 0x60
 800b212:	d8b1      	bhi.n	800b178 <_scanf_float+0x8c>
 800b214:	2b54      	cmp	r3, #84	@ 0x54
 800b216:	d07b      	beq.n	800b310 <_scanf_float+0x224>
 800b218:	2b59      	cmp	r3, #89	@ 0x59
 800b21a:	d19a      	bne.n	800b152 <_scanf_float+0x66>
 800b21c:	2d07      	cmp	r5, #7
 800b21e:	d198      	bne.n	800b152 <_scanf_float+0x66>
 800b220:	2508      	movs	r5, #8
 800b222:	e02f      	b.n	800b284 <_scanf_float+0x198>
 800b224:	2b74      	cmp	r3, #116	@ 0x74
 800b226:	d073      	beq.n	800b310 <_scanf_float+0x224>
 800b228:	2b79      	cmp	r3, #121	@ 0x79
 800b22a:	e7f6      	b.n	800b21a <_scanf_float+0x12e>
 800b22c:	6821      	ldr	r1, [r4, #0]
 800b22e:	05c8      	lsls	r0, r1, #23
 800b230:	d51e      	bpl.n	800b270 <_scanf_float+0x184>
 800b232:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800b236:	6021      	str	r1, [r4, #0]
 800b238:	3701      	adds	r7, #1
 800b23a:	f1bb 0f00 	cmp.w	fp, #0
 800b23e:	d003      	beq.n	800b248 <_scanf_float+0x15c>
 800b240:	3201      	adds	r2, #1
 800b242:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b246:	60a2      	str	r2, [r4, #8]
 800b248:	68a3      	ldr	r3, [r4, #8]
 800b24a:	3b01      	subs	r3, #1
 800b24c:	60a3      	str	r3, [r4, #8]
 800b24e:	6923      	ldr	r3, [r4, #16]
 800b250:	3301      	adds	r3, #1
 800b252:	6123      	str	r3, [r4, #16]
 800b254:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800b258:	3b01      	subs	r3, #1
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	f8c9 3004 	str.w	r3, [r9, #4]
 800b260:	f340 8082 	ble.w	800b368 <_scanf_float+0x27c>
 800b264:	f8d9 3000 	ldr.w	r3, [r9]
 800b268:	3301      	adds	r3, #1
 800b26a:	f8c9 3000 	str.w	r3, [r9]
 800b26e:	e762      	b.n	800b136 <_scanf_float+0x4a>
 800b270:	eb1a 0105 	adds.w	r1, sl, r5
 800b274:	f47f af6d 	bne.w	800b152 <_scanf_float+0x66>
 800b278:	6822      	ldr	r2, [r4, #0]
 800b27a:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800b27e:	6022      	str	r2, [r4, #0]
 800b280:	460d      	mov	r5, r1
 800b282:	468a      	mov	sl, r1
 800b284:	f806 3b01 	strb.w	r3, [r6], #1
 800b288:	e7de      	b.n	800b248 <_scanf_float+0x15c>
 800b28a:	6822      	ldr	r2, [r4, #0]
 800b28c:	0610      	lsls	r0, r2, #24
 800b28e:	f57f af60 	bpl.w	800b152 <_scanf_float+0x66>
 800b292:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800b296:	6022      	str	r2, [r4, #0]
 800b298:	e7f4      	b.n	800b284 <_scanf_float+0x198>
 800b29a:	f1ba 0f00 	cmp.w	sl, #0
 800b29e:	d10c      	bne.n	800b2ba <_scanf_float+0x1ce>
 800b2a0:	b977      	cbnz	r7, 800b2c0 <_scanf_float+0x1d4>
 800b2a2:	6822      	ldr	r2, [r4, #0]
 800b2a4:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800b2a8:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800b2ac:	d108      	bne.n	800b2c0 <_scanf_float+0x1d4>
 800b2ae:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800b2b2:	6022      	str	r2, [r4, #0]
 800b2b4:	f04f 0a01 	mov.w	sl, #1
 800b2b8:	e7e4      	b.n	800b284 <_scanf_float+0x198>
 800b2ba:	f1ba 0f02 	cmp.w	sl, #2
 800b2be:	d050      	beq.n	800b362 <_scanf_float+0x276>
 800b2c0:	2d01      	cmp	r5, #1
 800b2c2:	d002      	beq.n	800b2ca <_scanf_float+0x1de>
 800b2c4:	2d04      	cmp	r5, #4
 800b2c6:	f47f af44 	bne.w	800b152 <_scanf_float+0x66>
 800b2ca:	3501      	adds	r5, #1
 800b2cc:	b2ed      	uxtb	r5, r5
 800b2ce:	e7d9      	b.n	800b284 <_scanf_float+0x198>
 800b2d0:	f1ba 0f01 	cmp.w	sl, #1
 800b2d4:	f47f af3d 	bne.w	800b152 <_scanf_float+0x66>
 800b2d8:	f04f 0a02 	mov.w	sl, #2
 800b2dc:	e7d2      	b.n	800b284 <_scanf_float+0x198>
 800b2de:	b975      	cbnz	r5, 800b2fe <_scanf_float+0x212>
 800b2e0:	2f00      	cmp	r7, #0
 800b2e2:	f47f af37 	bne.w	800b154 <_scanf_float+0x68>
 800b2e6:	6822      	ldr	r2, [r4, #0]
 800b2e8:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800b2ec:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800b2f0:	f040 8103 	bne.w	800b4fa <_scanf_float+0x40e>
 800b2f4:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800b2f8:	6022      	str	r2, [r4, #0]
 800b2fa:	2501      	movs	r5, #1
 800b2fc:	e7c2      	b.n	800b284 <_scanf_float+0x198>
 800b2fe:	2d03      	cmp	r5, #3
 800b300:	d0e3      	beq.n	800b2ca <_scanf_float+0x1de>
 800b302:	2d05      	cmp	r5, #5
 800b304:	e7df      	b.n	800b2c6 <_scanf_float+0x1da>
 800b306:	2d02      	cmp	r5, #2
 800b308:	f47f af23 	bne.w	800b152 <_scanf_float+0x66>
 800b30c:	2503      	movs	r5, #3
 800b30e:	e7b9      	b.n	800b284 <_scanf_float+0x198>
 800b310:	2d06      	cmp	r5, #6
 800b312:	f47f af1e 	bne.w	800b152 <_scanf_float+0x66>
 800b316:	2507      	movs	r5, #7
 800b318:	e7b4      	b.n	800b284 <_scanf_float+0x198>
 800b31a:	6822      	ldr	r2, [r4, #0]
 800b31c:	0591      	lsls	r1, r2, #22
 800b31e:	f57f af18 	bpl.w	800b152 <_scanf_float+0x66>
 800b322:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800b326:	6022      	str	r2, [r4, #0]
 800b328:	9702      	str	r7, [sp, #8]
 800b32a:	e7ab      	b.n	800b284 <_scanf_float+0x198>
 800b32c:	6822      	ldr	r2, [r4, #0]
 800b32e:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800b332:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800b336:	d005      	beq.n	800b344 <_scanf_float+0x258>
 800b338:	0550      	lsls	r0, r2, #21
 800b33a:	f57f af0a 	bpl.w	800b152 <_scanf_float+0x66>
 800b33e:	2f00      	cmp	r7, #0
 800b340:	f000 80db 	beq.w	800b4fa <_scanf_float+0x40e>
 800b344:	0591      	lsls	r1, r2, #22
 800b346:	bf58      	it	pl
 800b348:	9902      	ldrpl	r1, [sp, #8]
 800b34a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800b34e:	bf58      	it	pl
 800b350:	1a79      	subpl	r1, r7, r1
 800b352:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800b356:	bf58      	it	pl
 800b358:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800b35c:	6022      	str	r2, [r4, #0]
 800b35e:	2700      	movs	r7, #0
 800b360:	e790      	b.n	800b284 <_scanf_float+0x198>
 800b362:	f04f 0a03 	mov.w	sl, #3
 800b366:	e78d      	b.n	800b284 <_scanf_float+0x198>
 800b368:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800b36c:	4649      	mov	r1, r9
 800b36e:	4640      	mov	r0, r8
 800b370:	4798      	blx	r3
 800b372:	2800      	cmp	r0, #0
 800b374:	f43f aedf 	beq.w	800b136 <_scanf_float+0x4a>
 800b378:	e6eb      	b.n	800b152 <_scanf_float+0x66>
 800b37a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b37e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b382:	464a      	mov	r2, r9
 800b384:	4640      	mov	r0, r8
 800b386:	4798      	blx	r3
 800b388:	6923      	ldr	r3, [r4, #16]
 800b38a:	3b01      	subs	r3, #1
 800b38c:	6123      	str	r3, [r4, #16]
 800b38e:	e6eb      	b.n	800b168 <_scanf_float+0x7c>
 800b390:	1e6b      	subs	r3, r5, #1
 800b392:	2b06      	cmp	r3, #6
 800b394:	d824      	bhi.n	800b3e0 <_scanf_float+0x2f4>
 800b396:	2d02      	cmp	r5, #2
 800b398:	d836      	bhi.n	800b408 <_scanf_float+0x31c>
 800b39a:	9b01      	ldr	r3, [sp, #4]
 800b39c:	429e      	cmp	r6, r3
 800b39e:	f67f aee7 	bls.w	800b170 <_scanf_float+0x84>
 800b3a2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b3a6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b3aa:	464a      	mov	r2, r9
 800b3ac:	4640      	mov	r0, r8
 800b3ae:	4798      	blx	r3
 800b3b0:	6923      	ldr	r3, [r4, #16]
 800b3b2:	3b01      	subs	r3, #1
 800b3b4:	6123      	str	r3, [r4, #16]
 800b3b6:	e7f0      	b.n	800b39a <_scanf_float+0x2ae>
 800b3b8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b3bc:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800b3c0:	464a      	mov	r2, r9
 800b3c2:	4640      	mov	r0, r8
 800b3c4:	4798      	blx	r3
 800b3c6:	6923      	ldr	r3, [r4, #16]
 800b3c8:	3b01      	subs	r3, #1
 800b3ca:	6123      	str	r3, [r4, #16]
 800b3cc:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b3d0:	fa5f fa8a 	uxtb.w	sl, sl
 800b3d4:	f1ba 0f02 	cmp.w	sl, #2
 800b3d8:	d1ee      	bne.n	800b3b8 <_scanf_float+0x2cc>
 800b3da:	3d03      	subs	r5, #3
 800b3dc:	b2ed      	uxtb	r5, r5
 800b3de:	1b76      	subs	r6, r6, r5
 800b3e0:	6823      	ldr	r3, [r4, #0]
 800b3e2:	05da      	lsls	r2, r3, #23
 800b3e4:	d530      	bpl.n	800b448 <_scanf_float+0x35c>
 800b3e6:	055b      	lsls	r3, r3, #21
 800b3e8:	d511      	bpl.n	800b40e <_scanf_float+0x322>
 800b3ea:	9b01      	ldr	r3, [sp, #4]
 800b3ec:	429e      	cmp	r6, r3
 800b3ee:	f67f aebf 	bls.w	800b170 <_scanf_float+0x84>
 800b3f2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b3f6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b3fa:	464a      	mov	r2, r9
 800b3fc:	4640      	mov	r0, r8
 800b3fe:	4798      	blx	r3
 800b400:	6923      	ldr	r3, [r4, #16]
 800b402:	3b01      	subs	r3, #1
 800b404:	6123      	str	r3, [r4, #16]
 800b406:	e7f0      	b.n	800b3ea <_scanf_float+0x2fe>
 800b408:	46aa      	mov	sl, r5
 800b40a:	46b3      	mov	fp, r6
 800b40c:	e7de      	b.n	800b3cc <_scanf_float+0x2e0>
 800b40e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800b412:	6923      	ldr	r3, [r4, #16]
 800b414:	2965      	cmp	r1, #101	@ 0x65
 800b416:	f103 33ff 	add.w	r3, r3, #4294967295
 800b41a:	f106 35ff 	add.w	r5, r6, #4294967295
 800b41e:	6123      	str	r3, [r4, #16]
 800b420:	d00c      	beq.n	800b43c <_scanf_float+0x350>
 800b422:	2945      	cmp	r1, #69	@ 0x45
 800b424:	d00a      	beq.n	800b43c <_scanf_float+0x350>
 800b426:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b42a:	464a      	mov	r2, r9
 800b42c:	4640      	mov	r0, r8
 800b42e:	4798      	blx	r3
 800b430:	6923      	ldr	r3, [r4, #16]
 800b432:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800b436:	3b01      	subs	r3, #1
 800b438:	1eb5      	subs	r5, r6, #2
 800b43a:	6123      	str	r3, [r4, #16]
 800b43c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b440:	464a      	mov	r2, r9
 800b442:	4640      	mov	r0, r8
 800b444:	4798      	blx	r3
 800b446:	462e      	mov	r6, r5
 800b448:	6822      	ldr	r2, [r4, #0]
 800b44a:	f012 0210 	ands.w	r2, r2, #16
 800b44e:	d001      	beq.n	800b454 <_scanf_float+0x368>
 800b450:	2000      	movs	r0, #0
 800b452:	e68e      	b.n	800b172 <_scanf_float+0x86>
 800b454:	7032      	strb	r2, [r6, #0]
 800b456:	6823      	ldr	r3, [r4, #0]
 800b458:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800b45c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b460:	d125      	bne.n	800b4ae <_scanf_float+0x3c2>
 800b462:	9b02      	ldr	r3, [sp, #8]
 800b464:	429f      	cmp	r7, r3
 800b466:	d00a      	beq.n	800b47e <_scanf_float+0x392>
 800b468:	1bda      	subs	r2, r3, r7
 800b46a:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800b46e:	429e      	cmp	r6, r3
 800b470:	bf28      	it	cs
 800b472:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800b476:	4922      	ldr	r1, [pc, #136]	@ (800b500 <_scanf_float+0x414>)
 800b478:	4630      	mov	r0, r6
 800b47a:	f000 f977 	bl	800b76c <siprintf>
 800b47e:	9901      	ldr	r1, [sp, #4]
 800b480:	2200      	movs	r2, #0
 800b482:	4640      	mov	r0, r8
 800b484:	f002 fc54 	bl	800dd30 <_strtod_r>
 800b488:	9b03      	ldr	r3, [sp, #12]
 800b48a:	6821      	ldr	r1, [r4, #0]
 800b48c:	681b      	ldr	r3, [r3, #0]
 800b48e:	f011 0f02 	tst.w	r1, #2
 800b492:	ec57 6b10 	vmov	r6, r7, d0
 800b496:	f103 0204 	add.w	r2, r3, #4
 800b49a:	d015      	beq.n	800b4c8 <_scanf_float+0x3dc>
 800b49c:	9903      	ldr	r1, [sp, #12]
 800b49e:	600a      	str	r2, [r1, #0]
 800b4a0:	681b      	ldr	r3, [r3, #0]
 800b4a2:	e9c3 6700 	strd	r6, r7, [r3]
 800b4a6:	68e3      	ldr	r3, [r4, #12]
 800b4a8:	3301      	adds	r3, #1
 800b4aa:	60e3      	str	r3, [r4, #12]
 800b4ac:	e7d0      	b.n	800b450 <_scanf_float+0x364>
 800b4ae:	9b04      	ldr	r3, [sp, #16]
 800b4b0:	2b00      	cmp	r3, #0
 800b4b2:	d0e4      	beq.n	800b47e <_scanf_float+0x392>
 800b4b4:	9905      	ldr	r1, [sp, #20]
 800b4b6:	230a      	movs	r3, #10
 800b4b8:	3101      	adds	r1, #1
 800b4ba:	4640      	mov	r0, r8
 800b4bc:	f002 fcb8 	bl	800de30 <_strtol_r>
 800b4c0:	9b04      	ldr	r3, [sp, #16]
 800b4c2:	9e05      	ldr	r6, [sp, #20]
 800b4c4:	1ac2      	subs	r2, r0, r3
 800b4c6:	e7d0      	b.n	800b46a <_scanf_float+0x37e>
 800b4c8:	f011 0f04 	tst.w	r1, #4
 800b4cc:	9903      	ldr	r1, [sp, #12]
 800b4ce:	600a      	str	r2, [r1, #0]
 800b4d0:	d1e6      	bne.n	800b4a0 <_scanf_float+0x3b4>
 800b4d2:	681d      	ldr	r5, [r3, #0]
 800b4d4:	4632      	mov	r2, r6
 800b4d6:	463b      	mov	r3, r7
 800b4d8:	4630      	mov	r0, r6
 800b4da:	4639      	mov	r1, r7
 800b4dc:	f7f5 fb26 	bl	8000b2c <__aeabi_dcmpun>
 800b4e0:	b128      	cbz	r0, 800b4ee <_scanf_float+0x402>
 800b4e2:	4808      	ldr	r0, [pc, #32]	@ (800b504 <_scanf_float+0x418>)
 800b4e4:	f000 facc 	bl	800ba80 <nanf>
 800b4e8:	ed85 0a00 	vstr	s0, [r5]
 800b4ec:	e7db      	b.n	800b4a6 <_scanf_float+0x3ba>
 800b4ee:	4630      	mov	r0, r6
 800b4f0:	4639      	mov	r1, r7
 800b4f2:	f7f5 fb79 	bl	8000be8 <__aeabi_d2f>
 800b4f6:	6028      	str	r0, [r5, #0]
 800b4f8:	e7d5      	b.n	800b4a6 <_scanf_float+0x3ba>
 800b4fa:	2700      	movs	r7, #0
 800b4fc:	e62e      	b.n	800b15c <_scanf_float+0x70>
 800b4fe:	bf00      	nop
 800b500:	0800f008 	.word	0x0800f008
 800b504:	0800f149 	.word	0x0800f149

0800b508 <std>:
 800b508:	2300      	movs	r3, #0
 800b50a:	b510      	push	{r4, lr}
 800b50c:	4604      	mov	r4, r0
 800b50e:	e9c0 3300 	strd	r3, r3, [r0]
 800b512:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b516:	6083      	str	r3, [r0, #8]
 800b518:	8181      	strh	r1, [r0, #12]
 800b51a:	6643      	str	r3, [r0, #100]	@ 0x64
 800b51c:	81c2      	strh	r2, [r0, #14]
 800b51e:	6183      	str	r3, [r0, #24]
 800b520:	4619      	mov	r1, r3
 800b522:	2208      	movs	r2, #8
 800b524:	305c      	adds	r0, #92	@ 0x5c
 800b526:	f000 fa1b 	bl	800b960 <memset>
 800b52a:	4b0d      	ldr	r3, [pc, #52]	@ (800b560 <std+0x58>)
 800b52c:	6263      	str	r3, [r4, #36]	@ 0x24
 800b52e:	4b0d      	ldr	r3, [pc, #52]	@ (800b564 <std+0x5c>)
 800b530:	62a3      	str	r3, [r4, #40]	@ 0x28
 800b532:	4b0d      	ldr	r3, [pc, #52]	@ (800b568 <std+0x60>)
 800b534:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800b536:	4b0d      	ldr	r3, [pc, #52]	@ (800b56c <std+0x64>)
 800b538:	6323      	str	r3, [r4, #48]	@ 0x30
 800b53a:	4b0d      	ldr	r3, [pc, #52]	@ (800b570 <std+0x68>)
 800b53c:	6224      	str	r4, [r4, #32]
 800b53e:	429c      	cmp	r4, r3
 800b540:	d006      	beq.n	800b550 <std+0x48>
 800b542:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800b546:	4294      	cmp	r4, r2
 800b548:	d002      	beq.n	800b550 <std+0x48>
 800b54a:	33d0      	adds	r3, #208	@ 0xd0
 800b54c:	429c      	cmp	r4, r3
 800b54e:	d105      	bne.n	800b55c <std+0x54>
 800b550:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800b554:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b558:	f000 ba8e 	b.w	800ba78 <__retarget_lock_init_recursive>
 800b55c:	bd10      	pop	{r4, pc}
 800b55e:	bf00      	nop
 800b560:	0800b7b1 	.word	0x0800b7b1
 800b564:	0800b7d3 	.word	0x0800b7d3
 800b568:	0800b80b 	.word	0x0800b80b
 800b56c:	0800b82f 	.word	0x0800b82f
 800b570:	20000ef8 	.word	0x20000ef8

0800b574 <stdio_exit_handler>:
 800b574:	4a02      	ldr	r2, [pc, #8]	@ (800b580 <stdio_exit_handler+0xc>)
 800b576:	4903      	ldr	r1, [pc, #12]	@ (800b584 <stdio_exit_handler+0x10>)
 800b578:	4803      	ldr	r0, [pc, #12]	@ (800b588 <stdio_exit_handler+0x14>)
 800b57a:	f000 b869 	b.w	800b650 <_fwalk_sglue>
 800b57e:	bf00      	nop
 800b580:	20000210 	.word	0x20000210
 800b584:	0800e471 	.word	0x0800e471
 800b588:	20000220 	.word	0x20000220

0800b58c <cleanup_stdio>:
 800b58c:	6841      	ldr	r1, [r0, #4]
 800b58e:	4b0c      	ldr	r3, [pc, #48]	@ (800b5c0 <cleanup_stdio+0x34>)
 800b590:	4299      	cmp	r1, r3
 800b592:	b510      	push	{r4, lr}
 800b594:	4604      	mov	r4, r0
 800b596:	d001      	beq.n	800b59c <cleanup_stdio+0x10>
 800b598:	f002 ff6a 	bl	800e470 <_fflush_r>
 800b59c:	68a1      	ldr	r1, [r4, #8]
 800b59e:	4b09      	ldr	r3, [pc, #36]	@ (800b5c4 <cleanup_stdio+0x38>)
 800b5a0:	4299      	cmp	r1, r3
 800b5a2:	d002      	beq.n	800b5aa <cleanup_stdio+0x1e>
 800b5a4:	4620      	mov	r0, r4
 800b5a6:	f002 ff63 	bl	800e470 <_fflush_r>
 800b5aa:	68e1      	ldr	r1, [r4, #12]
 800b5ac:	4b06      	ldr	r3, [pc, #24]	@ (800b5c8 <cleanup_stdio+0x3c>)
 800b5ae:	4299      	cmp	r1, r3
 800b5b0:	d004      	beq.n	800b5bc <cleanup_stdio+0x30>
 800b5b2:	4620      	mov	r0, r4
 800b5b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b5b8:	f002 bf5a 	b.w	800e470 <_fflush_r>
 800b5bc:	bd10      	pop	{r4, pc}
 800b5be:	bf00      	nop
 800b5c0:	20000ef8 	.word	0x20000ef8
 800b5c4:	20000f60 	.word	0x20000f60
 800b5c8:	20000fc8 	.word	0x20000fc8

0800b5cc <global_stdio_init.part.0>:
 800b5cc:	b510      	push	{r4, lr}
 800b5ce:	4b0b      	ldr	r3, [pc, #44]	@ (800b5fc <global_stdio_init.part.0+0x30>)
 800b5d0:	4c0b      	ldr	r4, [pc, #44]	@ (800b600 <global_stdio_init.part.0+0x34>)
 800b5d2:	4a0c      	ldr	r2, [pc, #48]	@ (800b604 <global_stdio_init.part.0+0x38>)
 800b5d4:	601a      	str	r2, [r3, #0]
 800b5d6:	4620      	mov	r0, r4
 800b5d8:	2200      	movs	r2, #0
 800b5da:	2104      	movs	r1, #4
 800b5dc:	f7ff ff94 	bl	800b508 <std>
 800b5e0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800b5e4:	2201      	movs	r2, #1
 800b5e6:	2109      	movs	r1, #9
 800b5e8:	f7ff ff8e 	bl	800b508 <std>
 800b5ec:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800b5f0:	2202      	movs	r2, #2
 800b5f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b5f6:	2112      	movs	r1, #18
 800b5f8:	f7ff bf86 	b.w	800b508 <std>
 800b5fc:	20001030 	.word	0x20001030
 800b600:	20000ef8 	.word	0x20000ef8
 800b604:	0800b575 	.word	0x0800b575

0800b608 <__sfp_lock_acquire>:
 800b608:	4801      	ldr	r0, [pc, #4]	@ (800b610 <__sfp_lock_acquire+0x8>)
 800b60a:	f000 ba36 	b.w	800ba7a <__retarget_lock_acquire_recursive>
 800b60e:	bf00      	nop
 800b610:	20001039 	.word	0x20001039

0800b614 <__sfp_lock_release>:
 800b614:	4801      	ldr	r0, [pc, #4]	@ (800b61c <__sfp_lock_release+0x8>)
 800b616:	f000 ba31 	b.w	800ba7c <__retarget_lock_release_recursive>
 800b61a:	bf00      	nop
 800b61c:	20001039 	.word	0x20001039

0800b620 <__sinit>:
 800b620:	b510      	push	{r4, lr}
 800b622:	4604      	mov	r4, r0
 800b624:	f7ff fff0 	bl	800b608 <__sfp_lock_acquire>
 800b628:	6a23      	ldr	r3, [r4, #32]
 800b62a:	b11b      	cbz	r3, 800b634 <__sinit+0x14>
 800b62c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b630:	f7ff bff0 	b.w	800b614 <__sfp_lock_release>
 800b634:	4b04      	ldr	r3, [pc, #16]	@ (800b648 <__sinit+0x28>)
 800b636:	6223      	str	r3, [r4, #32]
 800b638:	4b04      	ldr	r3, [pc, #16]	@ (800b64c <__sinit+0x2c>)
 800b63a:	681b      	ldr	r3, [r3, #0]
 800b63c:	2b00      	cmp	r3, #0
 800b63e:	d1f5      	bne.n	800b62c <__sinit+0xc>
 800b640:	f7ff ffc4 	bl	800b5cc <global_stdio_init.part.0>
 800b644:	e7f2      	b.n	800b62c <__sinit+0xc>
 800b646:	bf00      	nop
 800b648:	0800b58d 	.word	0x0800b58d
 800b64c:	20001030 	.word	0x20001030

0800b650 <_fwalk_sglue>:
 800b650:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b654:	4607      	mov	r7, r0
 800b656:	4688      	mov	r8, r1
 800b658:	4614      	mov	r4, r2
 800b65a:	2600      	movs	r6, #0
 800b65c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b660:	f1b9 0901 	subs.w	r9, r9, #1
 800b664:	d505      	bpl.n	800b672 <_fwalk_sglue+0x22>
 800b666:	6824      	ldr	r4, [r4, #0]
 800b668:	2c00      	cmp	r4, #0
 800b66a:	d1f7      	bne.n	800b65c <_fwalk_sglue+0xc>
 800b66c:	4630      	mov	r0, r6
 800b66e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b672:	89ab      	ldrh	r3, [r5, #12]
 800b674:	2b01      	cmp	r3, #1
 800b676:	d907      	bls.n	800b688 <_fwalk_sglue+0x38>
 800b678:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b67c:	3301      	adds	r3, #1
 800b67e:	d003      	beq.n	800b688 <_fwalk_sglue+0x38>
 800b680:	4629      	mov	r1, r5
 800b682:	4638      	mov	r0, r7
 800b684:	47c0      	blx	r8
 800b686:	4306      	orrs	r6, r0
 800b688:	3568      	adds	r5, #104	@ 0x68
 800b68a:	e7e9      	b.n	800b660 <_fwalk_sglue+0x10>

0800b68c <iprintf>:
 800b68c:	b40f      	push	{r0, r1, r2, r3}
 800b68e:	b507      	push	{r0, r1, r2, lr}
 800b690:	4906      	ldr	r1, [pc, #24]	@ (800b6ac <iprintf+0x20>)
 800b692:	ab04      	add	r3, sp, #16
 800b694:	6808      	ldr	r0, [r1, #0]
 800b696:	f853 2b04 	ldr.w	r2, [r3], #4
 800b69a:	6881      	ldr	r1, [r0, #8]
 800b69c:	9301      	str	r3, [sp, #4]
 800b69e:	f002 fd4b 	bl	800e138 <_vfiprintf_r>
 800b6a2:	b003      	add	sp, #12
 800b6a4:	f85d eb04 	ldr.w	lr, [sp], #4
 800b6a8:	b004      	add	sp, #16
 800b6aa:	4770      	bx	lr
 800b6ac:	2000021c 	.word	0x2000021c

0800b6b0 <_puts_r>:
 800b6b0:	6a03      	ldr	r3, [r0, #32]
 800b6b2:	b570      	push	{r4, r5, r6, lr}
 800b6b4:	6884      	ldr	r4, [r0, #8]
 800b6b6:	4605      	mov	r5, r0
 800b6b8:	460e      	mov	r6, r1
 800b6ba:	b90b      	cbnz	r3, 800b6c0 <_puts_r+0x10>
 800b6bc:	f7ff ffb0 	bl	800b620 <__sinit>
 800b6c0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b6c2:	07db      	lsls	r3, r3, #31
 800b6c4:	d405      	bmi.n	800b6d2 <_puts_r+0x22>
 800b6c6:	89a3      	ldrh	r3, [r4, #12]
 800b6c8:	0598      	lsls	r0, r3, #22
 800b6ca:	d402      	bmi.n	800b6d2 <_puts_r+0x22>
 800b6cc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b6ce:	f000 f9d4 	bl	800ba7a <__retarget_lock_acquire_recursive>
 800b6d2:	89a3      	ldrh	r3, [r4, #12]
 800b6d4:	0719      	lsls	r1, r3, #28
 800b6d6:	d502      	bpl.n	800b6de <_puts_r+0x2e>
 800b6d8:	6923      	ldr	r3, [r4, #16]
 800b6da:	2b00      	cmp	r3, #0
 800b6dc:	d135      	bne.n	800b74a <_puts_r+0x9a>
 800b6de:	4621      	mov	r1, r4
 800b6e0:	4628      	mov	r0, r5
 800b6e2:	f000 f8e7 	bl	800b8b4 <__swsetup_r>
 800b6e6:	b380      	cbz	r0, 800b74a <_puts_r+0x9a>
 800b6e8:	f04f 35ff 	mov.w	r5, #4294967295
 800b6ec:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b6ee:	07da      	lsls	r2, r3, #31
 800b6f0:	d405      	bmi.n	800b6fe <_puts_r+0x4e>
 800b6f2:	89a3      	ldrh	r3, [r4, #12]
 800b6f4:	059b      	lsls	r3, r3, #22
 800b6f6:	d402      	bmi.n	800b6fe <_puts_r+0x4e>
 800b6f8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b6fa:	f000 f9bf 	bl	800ba7c <__retarget_lock_release_recursive>
 800b6fe:	4628      	mov	r0, r5
 800b700:	bd70      	pop	{r4, r5, r6, pc}
 800b702:	2b00      	cmp	r3, #0
 800b704:	da04      	bge.n	800b710 <_puts_r+0x60>
 800b706:	69a2      	ldr	r2, [r4, #24]
 800b708:	429a      	cmp	r2, r3
 800b70a:	dc17      	bgt.n	800b73c <_puts_r+0x8c>
 800b70c:	290a      	cmp	r1, #10
 800b70e:	d015      	beq.n	800b73c <_puts_r+0x8c>
 800b710:	6823      	ldr	r3, [r4, #0]
 800b712:	1c5a      	adds	r2, r3, #1
 800b714:	6022      	str	r2, [r4, #0]
 800b716:	7019      	strb	r1, [r3, #0]
 800b718:	68a3      	ldr	r3, [r4, #8]
 800b71a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800b71e:	3b01      	subs	r3, #1
 800b720:	60a3      	str	r3, [r4, #8]
 800b722:	2900      	cmp	r1, #0
 800b724:	d1ed      	bne.n	800b702 <_puts_r+0x52>
 800b726:	2b00      	cmp	r3, #0
 800b728:	da11      	bge.n	800b74e <_puts_r+0x9e>
 800b72a:	4622      	mov	r2, r4
 800b72c:	210a      	movs	r1, #10
 800b72e:	4628      	mov	r0, r5
 800b730:	f000 f881 	bl	800b836 <__swbuf_r>
 800b734:	3001      	adds	r0, #1
 800b736:	d0d7      	beq.n	800b6e8 <_puts_r+0x38>
 800b738:	250a      	movs	r5, #10
 800b73a:	e7d7      	b.n	800b6ec <_puts_r+0x3c>
 800b73c:	4622      	mov	r2, r4
 800b73e:	4628      	mov	r0, r5
 800b740:	f000 f879 	bl	800b836 <__swbuf_r>
 800b744:	3001      	adds	r0, #1
 800b746:	d1e7      	bne.n	800b718 <_puts_r+0x68>
 800b748:	e7ce      	b.n	800b6e8 <_puts_r+0x38>
 800b74a:	3e01      	subs	r6, #1
 800b74c:	e7e4      	b.n	800b718 <_puts_r+0x68>
 800b74e:	6823      	ldr	r3, [r4, #0]
 800b750:	1c5a      	adds	r2, r3, #1
 800b752:	6022      	str	r2, [r4, #0]
 800b754:	220a      	movs	r2, #10
 800b756:	701a      	strb	r2, [r3, #0]
 800b758:	e7ee      	b.n	800b738 <_puts_r+0x88>
	...

0800b75c <puts>:
 800b75c:	4b02      	ldr	r3, [pc, #8]	@ (800b768 <puts+0xc>)
 800b75e:	4601      	mov	r1, r0
 800b760:	6818      	ldr	r0, [r3, #0]
 800b762:	f7ff bfa5 	b.w	800b6b0 <_puts_r>
 800b766:	bf00      	nop
 800b768:	2000021c 	.word	0x2000021c

0800b76c <siprintf>:
 800b76c:	b40e      	push	{r1, r2, r3}
 800b76e:	b510      	push	{r4, lr}
 800b770:	b09d      	sub	sp, #116	@ 0x74
 800b772:	ab1f      	add	r3, sp, #124	@ 0x7c
 800b774:	9002      	str	r0, [sp, #8]
 800b776:	9006      	str	r0, [sp, #24]
 800b778:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800b77c:	480a      	ldr	r0, [pc, #40]	@ (800b7a8 <siprintf+0x3c>)
 800b77e:	9107      	str	r1, [sp, #28]
 800b780:	9104      	str	r1, [sp, #16]
 800b782:	490a      	ldr	r1, [pc, #40]	@ (800b7ac <siprintf+0x40>)
 800b784:	f853 2b04 	ldr.w	r2, [r3], #4
 800b788:	9105      	str	r1, [sp, #20]
 800b78a:	2400      	movs	r4, #0
 800b78c:	a902      	add	r1, sp, #8
 800b78e:	6800      	ldr	r0, [r0, #0]
 800b790:	9301      	str	r3, [sp, #4]
 800b792:	941b      	str	r4, [sp, #108]	@ 0x6c
 800b794:	f002 fbaa 	bl	800deec <_svfiprintf_r>
 800b798:	9b02      	ldr	r3, [sp, #8]
 800b79a:	701c      	strb	r4, [r3, #0]
 800b79c:	b01d      	add	sp, #116	@ 0x74
 800b79e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b7a2:	b003      	add	sp, #12
 800b7a4:	4770      	bx	lr
 800b7a6:	bf00      	nop
 800b7a8:	2000021c 	.word	0x2000021c
 800b7ac:	ffff0208 	.word	0xffff0208

0800b7b0 <__sread>:
 800b7b0:	b510      	push	{r4, lr}
 800b7b2:	460c      	mov	r4, r1
 800b7b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b7b8:	f000 f900 	bl	800b9bc <_read_r>
 800b7bc:	2800      	cmp	r0, #0
 800b7be:	bfab      	itete	ge
 800b7c0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800b7c2:	89a3      	ldrhlt	r3, [r4, #12]
 800b7c4:	181b      	addge	r3, r3, r0
 800b7c6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800b7ca:	bfac      	ite	ge
 800b7cc:	6563      	strge	r3, [r4, #84]	@ 0x54
 800b7ce:	81a3      	strhlt	r3, [r4, #12]
 800b7d0:	bd10      	pop	{r4, pc}

0800b7d2 <__swrite>:
 800b7d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b7d6:	461f      	mov	r7, r3
 800b7d8:	898b      	ldrh	r3, [r1, #12]
 800b7da:	05db      	lsls	r3, r3, #23
 800b7dc:	4605      	mov	r5, r0
 800b7de:	460c      	mov	r4, r1
 800b7e0:	4616      	mov	r6, r2
 800b7e2:	d505      	bpl.n	800b7f0 <__swrite+0x1e>
 800b7e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b7e8:	2302      	movs	r3, #2
 800b7ea:	2200      	movs	r2, #0
 800b7ec:	f000 f8d4 	bl	800b998 <_lseek_r>
 800b7f0:	89a3      	ldrh	r3, [r4, #12]
 800b7f2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b7f6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b7fa:	81a3      	strh	r3, [r4, #12]
 800b7fc:	4632      	mov	r2, r6
 800b7fe:	463b      	mov	r3, r7
 800b800:	4628      	mov	r0, r5
 800b802:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b806:	f000 b8fb 	b.w	800ba00 <_write_r>

0800b80a <__sseek>:
 800b80a:	b510      	push	{r4, lr}
 800b80c:	460c      	mov	r4, r1
 800b80e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b812:	f000 f8c1 	bl	800b998 <_lseek_r>
 800b816:	1c43      	adds	r3, r0, #1
 800b818:	89a3      	ldrh	r3, [r4, #12]
 800b81a:	bf15      	itete	ne
 800b81c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800b81e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800b822:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800b826:	81a3      	strheq	r3, [r4, #12]
 800b828:	bf18      	it	ne
 800b82a:	81a3      	strhne	r3, [r4, #12]
 800b82c:	bd10      	pop	{r4, pc}

0800b82e <__sclose>:
 800b82e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b832:	f000 b8a1 	b.w	800b978 <_close_r>

0800b836 <__swbuf_r>:
 800b836:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b838:	460e      	mov	r6, r1
 800b83a:	4614      	mov	r4, r2
 800b83c:	4605      	mov	r5, r0
 800b83e:	b118      	cbz	r0, 800b848 <__swbuf_r+0x12>
 800b840:	6a03      	ldr	r3, [r0, #32]
 800b842:	b90b      	cbnz	r3, 800b848 <__swbuf_r+0x12>
 800b844:	f7ff feec 	bl	800b620 <__sinit>
 800b848:	69a3      	ldr	r3, [r4, #24]
 800b84a:	60a3      	str	r3, [r4, #8]
 800b84c:	89a3      	ldrh	r3, [r4, #12]
 800b84e:	071a      	lsls	r2, r3, #28
 800b850:	d501      	bpl.n	800b856 <__swbuf_r+0x20>
 800b852:	6923      	ldr	r3, [r4, #16]
 800b854:	b943      	cbnz	r3, 800b868 <__swbuf_r+0x32>
 800b856:	4621      	mov	r1, r4
 800b858:	4628      	mov	r0, r5
 800b85a:	f000 f82b 	bl	800b8b4 <__swsetup_r>
 800b85e:	b118      	cbz	r0, 800b868 <__swbuf_r+0x32>
 800b860:	f04f 37ff 	mov.w	r7, #4294967295
 800b864:	4638      	mov	r0, r7
 800b866:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b868:	6823      	ldr	r3, [r4, #0]
 800b86a:	6922      	ldr	r2, [r4, #16]
 800b86c:	1a98      	subs	r0, r3, r2
 800b86e:	6963      	ldr	r3, [r4, #20]
 800b870:	b2f6      	uxtb	r6, r6
 800b872:	4283      	cmp	r3, r0
 800b874:	4637      	mov	r7, r6
 800b876:	dc05      	bgt.n	800b884 <__swbuf_r+0x4e>
 800b878:	4621      	mov	r1, r4
 800b87a:	4628      	mov	r0, r5
 800b87c:	f002 fdf8 	bl	800e470 <_fflush_r>
 800b880:	2800      	cmp	r0, #0
 800b882:	d1ed      	bne.n	800b860 <__swbuf_r+0x2a>
 800b884:	68a3      	ldr	r3, [r4, #8]
 800b886:	3b01      	subs	r3, #1
 800b888:	60a3      	str	r3, [r4, #8]
 800b88a:	6823      	ldr	r3, [r4, #0]
 800b88c:	1c5a      	adds	r2, r3, #1
 800b88e:	6022      	str	r2, [r4, #0]
 800b890:	701e      	strb	r6, [r3, #0]
 800b892:	6962      	ldr	r2, [r4, #20]
 800b894:	1c43      	adds	r3, r0, #1
 800b896:	429a      	cmp	r2, r3
 800b898:	d004      	beq.n	800b8a4 <__swbuf_r+0x6e>
 800b89a:	89a3      	ldrh	r3, [r4, #12]
 800b89c:	07db      	lsls	r3, r3, #31
 800b89e:	d5e1      	bpl.n	800b864 <__swbuf_r+0x2e>
 800b8a0:	2e0a      	cmp	r6, #10
 800b8a2:	d1df      	bne.n	800b864 <__swbuf_r+0x2e>
 800b8a4:	4621      	mov	r1, r4
 800b8a6:	4628      	mov	r0, r5
 800b8a8:	f002 fde2 	bl	800e470 <_fflush_r>
 800b8ac:	2800      	cmp	r0, #0
 800b8ae:	d0d9      	beq.n	800b864 <__swbuf_r+0x2e>
 800b8b0:	e7d6      	b.n	800b860 <__swbuf_r+0x2a>
	...

0800b8b4 <__swsetup_r>:
 800b8b4:	b538      	push	{r3, r4, r5, lr}
 800b8b6:	4b29      	ldr	r3, [pc, #164]	@ (800b95c <__swsetup_r+0xa8>)
 800b8b8:	4605      	mov	r5, r0
 800b8ba:	6818      	ldr	r0, [r3, #0]
 800b8bc:	460c      	mov	r4, r1
 800b8be:	b118      	cbz	r0, 800b8c8 <__swsetup_r+0x14>
 800b8c0:	6a03      	ldr	r3, [r0, #32]
 800b8c2:	b90b      	cbnz	r3, 800b8c8 <__swsetup_r+0x14>
 800b8c4:	f7ff feac 	bl	800b620 <__sinit>
 800b8c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b8cc:	0719      	lsls	r1, r3, #28
 800b8ce:	d422      	bmi.n	800b916 <__swsetup_r+0x62>
 800b8d0:	06da      	lsls	r2, r3, #27
 800b8d2:	d407      	bmi.n	800b8e4 <__swsetup_r+0x30>
 800b8d4:	2209      	movs	r2, #9
 800b8d6:	602a      	str	r2, [r5, #0]
 800b8d8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b8dc:	81a3      	strh	r3, [r4, #12]
 800b8de:	f04f 30ff 	mov.w	r0, #4294967295
 800b8e2:	e033      	b.n	800b94c <__swsetup_r+0x98>
 800b8e4:	0758      	lsls	r0, r3, #29
 800b8e6:	d512      	bpl.n	800b90e <__swsetup_r+0x5a>
 800b8e8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b8ea:	b141      	cbz	r1, 800b8fe <__swsetup_r+0x4a>
 800b8ec:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b8f0:	4299      	cmp	r1, r3
 800b8f2:	d002      	beq.n	800b8fa <__swsetup_r+0x46>
 800b8f4:	4628      	mov	r0, r5
 800b8f6:	f000 ff23 	bl	800c740 <_free_r>
 800b8fa:	2300      	movs	r3, #0
 800b8fc:	6363      	str	r3, [r4, #52]	@ 0x34
 800b8fe:	89a3      	ldrh	r3, [r4, #12]
 800b900:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800b904:	81a3      	strh	r3, [r4, #12]
 800b906:	2300      	movs	r3, #0
 800b908:	6063      	str	r3, [r4, #4]
 800b90a:	6923      	ldr	r3, [r4, #16]
 800b90c:	6023      	str	r3, [r4, #0]
 800b90e:	89a3      	ldrh	r3, [r4, #12]
 800b910:	f043 0308 	orr.w	r3, r3, #8
 800b914:	81a3      	strh	r3, [r4, #12]
 800b916:	6923      	ldr	r3, [r4, #16]
 800b918:	b94b      	cbnz	r3, 800b92e <__swsetup_r+0x7a>
 800b91a:	89a3      	ldrh	r3, [r4, #12]
 800b91c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800b920:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b924:	d003      	beq.n	800b92e <__swsetup_r+0x7a>
 800b926:	4621      	mov	r1, r4
 800b928:	4628      	mov	r0, r5
 800b92a:	f002 fdef 	bl	800e50c <__smakebuf_r>
 800b92e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b932:	f013 0201 	ands.w	r2, r3, #1
 800b936:	d00a      	beq.n	800b94e <__swsetup_r+0x9a>
 800b938:	2200      	movs	r2, #0
 800b93a:	60a2      	str	r2, [r4, #8]
 800b93c:	6962      	ldr	r2, [r4, #20]
 800b93e:	4252      	negs	r2, r2
 800b940:	61a2      	str	r2, [r4, #24]
 800b942:	6922      	ldr	r2, [r4, #16]
 800b944:	b942      	cbnz	r2, 800b958 <__swsetup_r+0xa4>
 800b946:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800b94a:	d1c5      	bne.n	800b8d8 <__swsetup_r+0x24>
 800b94c:	bd38      	pop	{r3, r4, r5, pc}
 800b94e:	0799      	lsls	r1, r3, #30
 800b950:	bf58      	it	pl
 800b952:	6962      	ldrpl	r2, [r4, #20]
 800b954:	60a2      	str	r2, [r4, #8]
 800b956:	e7f4      	b.n	800b942 <__swsetup_r+0x8e>
 800b958:	2000      	movs	r0, #0
 800b95a:	e7f7      	b.n	800b94c <__swsetup_r+0x98>
 800b95c:	2000021c 	.word	0x2000021c

0800b960 <memset>:
 800b960:	4402      	add	r2, r0
 800b962:	4603      	mov	r3, r0
 800b964:	4293      	cmp	r3, r2
 800b966:	d100      	bne.n	800b96a <memset+0xa>
 800b968:	4770      	bx	lr
 800b96a:	f803 1b01 	strb.w	r1, [r3], #1
 800b96e:	e7f9      	b.n	800b964 <memset+0x4>

0800b970 <_localeconv_r>:
 800b970:	4800      	ldr	r0, [pc, #0]	@ (800b974 <_localeconv_r+0x4>)
 800b972:	4770      	bx	lr
 800b974:	2000035c 	.word	0x2000035c

0800b978 <_close_r>:
 800b978:	b538      	push	{r3, r4, r5, lr}
 800b97a:	4d06      	ldr	r5, [pc, #24]	@ (800b994 <_close_r+0x1c>)
 800b97c:	2300      	movs	r3, #0
 800b97e:	4604      	mov	r4, r0
 800b980:	4608      	mov	r0, r1
 800b982:	602b      	str	r3, [r5, #0]
 800b984:	f7f6 f822 	bl	80019cc <_close>
 800b988:	1c43      	adds	r3, r0, #1
 800b98a:	d102      	bne.n	800b992 <_close_r+0x1a>
 800b98c:	682b      	ldr	r3, [r5, #0]
 800b98e:	b103      	cbz	r3, 800b992 <_close_r+0x1a>
 800b990:	6023      	str	r3, [r4, #0]
 800b992:	bd38      	pop	{r3, r4, r5, pc}
 800b994:	20001034 	.word	0x20001034

0800b998 <_lseek_r>:
 800b998:	b538      	push	{r3, r4, r5, lr}
 800b99a:	4d07      	ldr	r5, [pc, #28]	@ (800b9b8 <_lseek_r+0x20>)
 800b99c:	4604      	mov	r4, r0
 800b99e:	4608      	mov	r0, r1
 800b9a0:	4611      	mov	r1, r2
 800b9a2:	2200      	movs	r2, #0
 800b9a4:	602a      	str	r2, [r5, #0]
 800b9a6:	461a      	mov	r2, r3
 800b9a8:	f7f6 f837 	bl	8001a1a <_lseek>
 800b9ac:	1c43      	adds	r3, r0, #1
 800b9ae:	d102      	bne.n	800b9b6 <_lseek_r+0x1e>
 800b9b0:	682b      	ldr	r3, [r5, #0]
 800b9b2:	b103      	cbz	r3, 800b9b6 <_lseek_r+0x1e>
 800b9b4:	6023      	str	r3, [r4, #0]
 800b9b6:	bd38      	pop	{r3, r4, r5, pc}
 800b9b8:	20001034 	.word	0x20001034

0800b9bc <_read_r>:
 800b9bc:	b538      	push	{r3, r4, r5, lr}
 800b9be:	4d07      	ldr	r5, [pc, #28]	@ (800b9dc <_read_r+0x20>)
 800b9c0:	4604      	mov	r4, r0
 800b9c2:	4608      	mov	r0, r1
 800b9c4:	4611      	mov	r1, r2
 800b9c6:	2200      	movs	r2, #0
 800b9c8:	602a      	str	r2, [r5, #0]
 800b9ca:	461a      	mov	r2, r3
 800b9cc:	f7f5 ffe1 	bl	8001992 <_read>
 800b9d0:	1c43      	adds	r3, r0, #1
 800b9d2:	d102      	bne.n	800b9da <_read_r+0x1e>
 800b9d4:	682b      	ldr	r3, [r5, #0]
 800b9d6:	b103      	cbz	r3, 800b9da <_read_r+0x1e>
 800b9d8:	6023      	str	r3, [r4, #0]
 800b9da:	bd38      	pop	{r3, r4, r5, pc}
 800b9dc:	20001034 	.word	0x20001034

0800b9e0 <_sbrk_r>:
 800b9e0:	b538      	push	{r3, r4, r5, lr}
 800b9e2:	4d06      	ldr	r5, [pc, #24]	@ (800b9fc <_sbrk_r+0x1c>)
 800b9e4:	2300      	movs	r3, #0
 800b9e6:	4604      	mov	r4, r0
 800b9e8:	4608      	mov	r0, r1
 800b9ea:	602b      	str	r3, [r5, #0]
 800b9ec:	f7f6 f822 	bl	8001a34 <_sbrk>
 800b9f0:	1c43      	adds	r3, r0, #1
 800b9f2:	d102      	bne.n	800b9fa <_sbrk_r+0x1a>
 800b9f4:	682b      	ldr	r3, [r5, #0]
 800b9f6:	b103      	cbz	r3, 800b9fa <_sbrk_r+0x1a>
 800b9f8:	6023      	str	r3, [r4, #0]
 800b9fa:	bd38      	pop	{r3, r4, r5, pc}
 800b9fc:	20001034 	.word	0x20001034

0800ba00 <_write_r>:
 800ba00:	b538      	push	{r3, r4, r5, lr}
 800ba02:	4d07      	ldr	r5, [pc, #28]	@ (800ba20 <_write_r+0x20>)
 800ba04:	4604      	mov	r4, r0
 800ba06:	4608      	mov	r0, r1
 800ba08:	4611      	mov	r1, r2
 800ba0a:	2200      	movs	r2, #0
 800ba0c:	602a      	str	r2, [r5, #0]
 800ba0e:	461a      	mov	r2, r3
 800ba10:	f7f5 fdb2 	bl	8001578 <_write>
 800ba14:	1c43      	adds	r3, r0, #1
 800ba16:	d102      	bne.n	800ba1e <_write_r+0x1e>
 800ba18:	682b      	ldr	r3, [r5, #0]
 800ba1a:	b103      	cbz	r3, 800ba1e <_write_r+0x1e>
 800ba1c:	6023      	str	r3, [r4, #0]
 800ba1e:	bd38      	pop	{r3, r4, r5, pc}
 800ba20:	20001034 	.word	0x20001034

0800ba24 <__errno>:
 800ba24:	4b01      	ldr	r3, [pc, #4]	@ (800ba2c <__errno+0x8>)
 800ba26:	6818      	ldr	r0, [r3, #0]
 800ba28:	4770      	bx	lr
 800ba2a:	bf00      	nop
 800ba2c:	2000021c 	.word	0x2000021c

0800ba30 <__libc_init_array>:
 800ba30:	b570      	push	{r4, r5, r6, lr}
 800ba32:	4d0d      	ldr	r5, [pc, #52]	@ (800ba68 <__libc_init_array+0x38>)
 800ba34:	4c0d      	ldr	r4, [pc, #52]	@ (800ba6c <__libc_init_array+0x3c>)
 800ba36:	1b64      	subs	r4, r4, r5
 800ba38:	10a4      	asrs	r4, r4, #2
 800ba3a:	2600      	movs	r6, #0
 800ba3c:	42a6      	cmp	r6, r4
 800ba3e:	d109      	bne.n	800ba54 <__libc_init_array+0x24>
 800ba40:	4d0b      	ldr	r5, [pc, #44]	@ (800ba70 <__libc_init_array+0x40>)
 800ba42:	4c0c      	ldr	r4, [pc, #48]	@ (800ba74 <__libc_init_array+0x44>)
 800ba44:	f003 fa22 	bl	800ee8c <_init>
 800ba48:	1b64      	subs	r4, r4, r5
 800ba4a:	10a4      	asrs	r4, r4, #2
 800ba4c:	2600      	movs	r6, #0
 800ba4e:	42a6      	cmp	r6, r4
 800ba50:	d105      	bne.n	800ba5e <__libc_init_array+0x2e>
 800ba52:	bd70      	pop	{r4, r5, r6, pc}
 800ba54:	f855 3b04 	ldr.w	r3, [r5], #4
 800ba58:	4798      	blx	r3
 800ba5a:	3601      	adds	r6, #1
 800ba5c:	e7ee      	b.n	800ba3c <__libc_init_array+0xc>
 800ba5e:	f855 3b04 	ldr.w	r3, [r5], #4
 800ba62:	4798      	blx	r3
 800ba64:	3601      	adds	r6, #1
 800ba66:	e7f2      	b.n	800ba4e <__libc_init_array+0x1e>
 800ba68:	0800f404 	.word	0x0800f404
 800ba6c:	0800f404 	.word	0x0800f404
 800ba70:	0800f404 	.word	0x0800f404
 800ba74:	0800f408 	.word	0x0800f408

0800ba78 <__retarget_lock_init_recursive>:
 800ba78:	4770      	bx	lr

0800ba7a <__retarget_lock_acquire_recursive>:
 800ba7a:	4770      	bx	lr

0800ba7c <__retarget_lock_release_recursive>:
 800ba7c:	4770      	bx	lr
	...

0800ba80 <nanf>:
 800ba80:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800ba88 <nanf+0x8>
 800ba84:	4770      	bx	lr
 800ba86:	bf00      	nop
 800ba88:	7fc00000 	.word	0x7fc00000

0800ba8c <quorem>:
 800ba8c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba90:	6903      	ldr	r3, [r0, #16]
 800ba92:	690c      	ldr	r4, [r1, #16]
 800ba94:	42a3      	cmp	r3, r4
 800ba96:	4607      	mov	r7, r0
 800ba98:	db7e      	blt.n	800bb98 <quorem+0x10c>
 800ba9a:	3c01      	subs	r4, #1
 800ba9c:	f101 0814 	add.w	r8, r1, #20
 800baa0:	00a3      	lsls	r3, r4, #2
 800baa2:	f100 0514 	add.w	r5, r0, #20
 800baa6:	9300      	str	r3, [sp, #0]
 800baa8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800baac:	9301      	str	r3, [sp, #4]
 800baae:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800bab2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bab6:	3301      	adds	r3, #1
 800bab8:	429a      	cmp	r2, r3
 800baba:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800babe:	fbb2 f6f3 	udiv	r6, r2, r3
 800bac2:	d32e      	bcc.n	800bb22 <quorem+0x96>
 800bac4:	f04f 0a00 	mov.w	sl, #0
 800bac8:	46c4      	mov	ip, r8
 800baca:	46ae      	mov	lr, r5
 800bacc:	46d3      	mov	fp, sl
 800bace:	f85c 3b04 	ldr.w	r3, [ip], #4
 800bad2:	b298      	uxth	r0, r3
 800bad4:	fb06 a000 	mla	r0, r6, r0, sl
 800bad8:	0c02      	lsrs	r2, r0, #16
 800bada:	0c1b      	lsrs	r3, r3, #16
 800badc:	fb06 2303 	mla	r3, r6, r3, r2
 800bae0:	f8de 2000 	ldr.w	r2, [lr]
 800bae4:	b280      	uxth	r0, r0
 800bae6:	b292      	uxth	r2, r2
 800bae8:	1a12      	subs	r2, r2, r0
 800baea:	445a      	add	r2, fp
 800baec:	f8de 0000 	ldr.w	r0, [lr]
 800baf0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800baf4:	b29b      	uxth	r3, r3
 800baf6:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800bafa:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800bafe:	b292      	uxth	r2, r2
 800bb00:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800bb04:	45e1      	cmp	r9, ip
 800bb06:	f84e 2b04 	str.w	r2, [lr], #4
 800bb0a:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800bb0e:	d2de      	bcs.n	800bace <quorem+0x42>
 800bb10:	9b00      	ldr	r3, [sp, #0]
 800bb12:	58eb      	ldr	r3, [r5, r3]
 800bb14:	b92b      	cbnz	r3, 800bb22 <quorem+0x96>
 800bb16:	9b01      	ldr	r3, [sp, #4]
 800bb18:	3b04      	subs	r3, #4
 800bb1a:	429d      	cmp	r5, r3
 800bb1c:	461a      	mov	r2, r3
 800bb1e:	d32f      	bcc.n	800bb80 <quorem+0xf4>
 800bb20:	613c      	str	r4, [r7, #16]
 800bb22:	4638      	mov	r0, r7
 800bb24:	f001 f912 	bl	800cd4c <__mcmp>
 800bb28:	2800      	cmp	r0, #0
 800bb2a:	db25      	blt.n	800bb78 <quorem+0xec>
 800bb2c:	4629      	mov	r1, r5
 800bb2e:	2000      	movs	r0, #0
 800bb30:	f858 2b04 	ldr.w	r2, [r8], #4
 800bb34:	f8d1 c000 	ldr.w	ip, [r1]
 800bb38:	fa1f fe82 	uxth.w	lr, r2
 800bb3c:	fa1f f38c 	uxth.w	r3, ip
 800bb40:	eba3 030e 	sub.w	r3, r3, lr
 800bb44:	4403      	add	r3, r0
 800bb46:	0c12      	lsrs	r2, r2, #16
 800bb48:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800bb4c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800bb50:	b29b      	uxth	r3, r3
 800bb52:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bb56:	45c1      	cmp	r9, r8
 800bb58:	f841 3b04 	str.w	r3, [r1], #4
 800bb5c:	ea4f 4022 	mov.w	r0, r2, asr #16
 800bb60:	d2e6      	bcs.n	800bb30 <quorem+0xa4>
 800bb62:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bb66:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bb6a:	b922      	cbnz	r2, 800bb76 <quorem+0xea>
 800bb6c:	3b04      	subs	r3, #4
 800bb6e:	429d      	cmp	r5, r3
 800bb70:	461a      	mov	r2, r3
 800bb72:	d30b      	bcc.n	800bb8c <quorem+0x100>
 800bb74:	613c      	str	r4, [r7, #16]
 800bb76:	3601      	adds	r6, #1
 800bb78:	4630      	mov	r0, r6
 800bb7a:	b003      	add	sp, #12
 800bb7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb80:	6812      	ldr	r2, [r2, #0]
 800bb82:	3b04      	subs	r3, #4
 800bb84:	2a00      	cmp	r2, #0
 800bb86:	d1cb      	bne.n	800bb20 <quorem+0x94>
 800bb88:	3c01      	subs	r4, #1
 800bb8a:	e7c6      	b.n	800bb1a <quorem+0x8e>
 800bb8c:	6812      	ldr	r2, [r2, #0]
 800bb8e:	3b04      	subs	r3, #4
 800bb90:	2a00      	cmp	r2, #0
 800bb92:	d1ef      	bne.n	800bb74 <quorem+0xe8>
 800bb94:	3c01      	subs	r4, #1
 800bb96:	e7ea      	b.n	800bb6e <quorem+0xe2>
 800bb98:	2000      	movs	r0, #0
 800bb9a:	e7ee      	b.n	800bb7a <quorem+0xee>
 800bb9c:	0000      	movs	r0, r0
	...

0800bba0 <_dtoa_r>:
 800bba0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bba4:	69c7      	ldr	r7, [r0, #28]
 800bba6:	b097      	sub	sp, #92	@ 0x5c
 800bba8:	ed8d 0b04 	vstr	d0, [sp, #16]
 800bbac:	ec55 4b10 	vmov	r4, r5, d0
 800bbb0:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800bbb2:	9107      	str	r1, [sp, #28]
 800bbb4:	4681      	mov	r9, r0
 800bbb6:	920c      	str	r2, [sp, #48]	@ 0x30
 800bbb8:	9311      	str	r3, [sp, #68]	@ 0x44
 800bbba:	b97f      	cbnz	r7, 800bbdc <_dtoa_r+0x3c>
 800bbbc:	2010      	movs	r0, #16
 800bbbe:	f7fe fd81 	bl	800a6c4 <malloc>
 800bbc2:	4602      	mov	r2, r0
 800bbc4:	f8c9 001c 	str.w	r0, [r9, #28]
 800bbc8:	b920      	cbnz	r0, 800bbd4 <_dtoa_r+0x34>
 800bbca:	4ba9      	ldr	r3, [pc, #676]	@ (800be70 <_dtoa_r+0x2d0>)
 800bbcc:	21ef      	movs	r1, #239	@ 0xef
 800bbce:	48a9      	ldr	r0, [pc, #676]	@ (800be74 <_dtoa_r+0x2d4>)
 800bbd0:	f002 fd3e 	bl	800e650 <__assert_func>
 800bbd4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800bbd8:	6007      	str	r7, [r0, #0]
 800bbda:	60c7      	str	r7, [r0, #12]
 800bbdc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800bbe0:	6819      	ldr	r1, [r3, #0]
 800bbe2:	b159      	cbz	r1, 800bbfc <_dtoa_r+0x5c>
 800bbe4:	685a      	ldr	r2, [r3, #4]
 800bbe6:	604a      	str	r2, [r1, #4]
 800bbe8:	2301      	movs	r3, #1
 800bbea:	4093      	lsls	r3, r2
 800bbec:	608b      	str	r3, [r1, #8]
 800bbee:	4648      	mov	r0, r9
 800bbf0:	f000 fe30 	bl	800c854 <_Bfree>
 800bbf4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800bbf8:	2200      	movs	r2, #0
 800bbfa:	601a      	str	r2, [r3, #0]
 800bbfc:	1e2b      	subs	r3, r5, #0
 800bbfe:	bfb9      	ittee	lt
 800bc00:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800bc04:	9305      	strlt	r3, [sp, #20]
 800bc06:	2300      	movge	r3, #0
 800bc08:	6033      	strge	r3, [r6, #0]
 800bc0a:	9f05      	ldr	r7, [sp, #20]
 800bc0c:	4b9a      	ldr	r3, [pc, #616]	@ (800be78 <_dtoa_r+0x2d8>)
 800bc0e:	bfbc      	itt	lt
 800bc10:	2201      	movlt	r2, #1
 800bc12:	6032      	strlt	r2, [r6, #0]
 800bc14:	43bb      	bics	r3, r7
 800bc16:	d112      	bne.n	800bc3e <_dtoa_r+0x9e>
 800bc18:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800bc1a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800bc1e:	6013      	str	r3, [r2, #0]
 800bc20:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800bc24:	4323      	orrs	r3, r4
 800bc26:	f000 855a 	beq.w	800c6de <_dtoa_r+0xb3e>
 800bc2a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800bc2c:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800be8c <_dtoa_r+0x2ec>
 800bc30:	2b00      	cmp	r3, #0
 800bc32:	f000 855c 	beq.w	800c6ee <_dtoa_r+0xb4e>
 800bc36:	f10a 0303 	add.w	r3, sl, #3
 800bc3a:	f000 bd56 	b.w	800c6ea <_dtoa_r+0xb4a>
 800bc3e:	ed9d 7b04 	vldr	d7, [sp, #16]
 800bc42:	2200      	movs	r2, #0
 800bc44:	ec51 0b17 	vmov	r0, r1, d7
 800bc48:	2300      	movs	r3, #0
 800bc4a:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800bc4e:	f7f4 ff3b 	bl	8000ac8 <__aeabi_dcmpeq>
 800bc52:	4680      	mov	r8, r0
 800bc54:	b158      	cbz	r0, 800bc6e <_dtoa_r+0xce>
 800bc56:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800bc58:	2301      	movs	r3, #1
 800bc5a:	6013      	str	r3, [r2, #0]
 800bc5c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800bc5e:	b113      	cbz	r3, 800bc66 <_dtoa_r+0xc6>
 800bc60:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800bc62:	4b86      	ldr	r3, [pc, #536]	@ (800be7c <_dtoa_r+0x2dc>)
 800bc64:	6013      	str	r3, [r2, #0]
 800bc66:	f8df a228 	ldr.w	sl, [pc, #552]	@ 800be90 <_dtoa_r+0x2f0>
 800bc6a:	f000 bd40 	b.w	800c6ee <_dtoa_r+0xb4e>
 800bc6e:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800bc72:	aa14      	add	r2, sp, #80	@ 0x50
 800bc74:	a915      	add	r1, sp, #84	@ 0x54
 800bc76:	4648      	mov	r0, r9
 800bc78:	f001 f988 	bl	800cf8c <__d2b>
 800bc7c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800bc80:	9002      	str	r0, [sp, #8]
 800bc82:	2e00      	cmp	r6, #0
 800bc84:	d078      	beq.n	800bd78 <_dtoa_r+0x1d8>
 800bc86:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bc88:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800bc8c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bc90:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800bc94:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800bc98:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800bc9c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800bca0:	4619      	mov	r1, r3
 800bca2:	2200      	movs	r2, #0
 800bca4:	4b76      	ldr	r3, [pc, #472]	@ (800be80 <_dtoa_r+0x2e0>)
 800bca6:	f7f4 faef 	bl	8000288 <__aeabi_dsub>
 800bcaa:	a36b      	add	r3, pc, #428	@ (adr r3, 800be58 <_dtoa_r+0x2b8>)
 800bcac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcb0:	f7f4 fca2 	bl	80005f8 <__aeabi_dmul>
 800bcb4:	a36a      	add	r3, pc, #424	@ (adr r3, 800be60 <_dtoa_r+0x2c0>)
 800bcb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcba:	f7f4 fae7 	bl	800028c <__adddf3>
 800bcbe:	4604      	mov	r4, r0
 800bcc0:	4630      	mov	r0, r6
 800bcc2:	460d      	mov	r5, r1
 800bcc4:	f7f4 fc2e 	bl	8000524 <__aeabi_i2d>
 800bcc8:	a367      	add	r3, pc, #412	@ (adr r3, 800be68 <_dtoa_r+0x2c8>)
 800bcca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcce:	f7f4 fc93 	bl	80005f8 <__aeabi_dmul>
 800bcd2:	4602      	mov	r2, r0
 800bcd4:	460b      	mov	r3, r1
 800bcd6:	4620      	mov	r0, r4
 800bcd8:	4629      	mov	r1, r5
 800bcda:	f7f4 fad7 	bl	800028c <__adddf3>
 800bcde:	4604      	mov	r4, r0
 800bce0:	460d      	mov	r5, r1
 800bce2:	f7f4 ff39 	bl	8000b58 <__aeabi_d2iz>
 800bce6:	2200      	movs	r2, #0
 800bce8:	4607      	mov	r7, r0
 800bcea:	2300      	movs	r3, #0
 800bcec:	4620      	mov	r0, r4
 800bcee:	4629      	mov	r1, r5
 800bcf0:	f7f4 fef4 	bl	8000adc <__aeabi_dcmplt>
 800bcf4:	b140      	cbz	r0, 800bd08 <_dtoa_r+0x168>
 800bcf6:	4638      	mov	r0, r7
 800bcf8:	f7f4 fc14 	bl	8000524 <__aeabi_i2d>
 800bcfc:	4622      	mov	r2, r4
 800bcfe:	462b      	mov	r3, r5
 800bd00:	f7f4 fee2 	bl	8000ac8 <__aeabi_dcmpeq>
 800bd04:	b900      	cbnz	r0, 800bd08 <_dtoa_r+0x168>
 800bd06:	3f01      	subs	r7, #1
 800bd08:	2f16      	cmp	r7, #22
 800bd0a:	d852      	bhi.n	800bdb2 <_dtoa_r+0x212>
 800bd0c:	4b5d      	ldr	r3, [pc, #372]	@ (800be84 <_dtoa_r+0x2e4>)
 800bd0e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800bd12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd16:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800bd1a:	f7f4 fedf 	bl	8000adc <__aeabi_dcmplt>
 800bd1e:	2800      	cmp	r0, #0
 800bd20:	d049      	beq.n	800bdb6 <_dtoa_r+0x216>
 800bd22:	3f01      	subs	r7, #1
 800bd24:	2300      	movs	r3, #0
 800bd26:	9310      	str	r3, [sp, #64]	@ 0x40
 800bd28:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800bd2a:	1b9b      	subs	r3, r3, r6
 800bd2c:	1e5a      	subs	r2, r3, #1
 800bd2e:	bf45      	ittet	mi
 800bd30:	f1c3 0301 	rsbmi	r3, r3, #1
 800bd34:	9300      	strmi	r3, [sp, #0]
 800bd36:	2300      	movpl	r3, #0
 800bd38:	2300      	movmi	r3, #0
 800bd3a:	9206      	str	r2, [sp, #24]
 800bd3c:	bf54      	ite	pl
 800bd3e:	9300      	strpl	r3, [sp, #0]
 800bd40:	9306      	strmi	r3, [sp, #24]
 800bd42:	2f00      	cmp	r7, #0
 800bd44:	db39      	blt.n	800bdba <_dtoa_r+0x21a>
 800bd46:	9b06      	ldr	r3, [sp, #24]
 800bd48:	970d      	str	r7, [sp, #52]	@ 0x34
 800bd4a:	443b      	add	r3, r7
 800bd4c:	9306      	str	r3, [sp, #24]
 800bd4e:	2300      	movs	r3, #0
 800bd50:	9308      	str	r3, [sp, #32]
 800bd52:	9b07      	ldr	r3, [sp, #28]
 800bd54:	2b09      	cmp	r3, #9
 800bd56:	d863      	bhi.n	800be20 <_dtoa_r+0x280>
 800bd58:	2b05      	cmp	r3, #5
 800bd5a:	bfc4      	itt	gt
 800bd5c:	3b04      	subgt	r3, #4
 800bd5e:	9307      	strgt	r3, [sp, #28]
 800bd60:	9b07      	ldr	r3, [sp, #28]
 800bd62:	f1a3 0302 	sub.w	r3, r3, #2
 800bd66:	bfcc      	ite	gt
 800bd68:	2400      	movgt	r4, #0
 800bd6a:	2401      	movle	r4, #1
 800bd6c:	2b03      	cmp	r3, #3
 800bd6e:	d863      	bhi.n	800be38 <_dtoa_r+0x298>
 800bd70:	e8df f003 	tbb	[pc, r3]
 800bd74:	2b375452 	.word	0x2b375452
 800bd78:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800bd7c:	441e      	add	r6, r3
 800bd7e:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800bd82:	2b20      	cmp	r3, #32
 800bd84:	bfc1      	itttt	gt
 800bd86:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800bd8a:	409f      	lslgt	r7, r3
 800bd8c:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800bd90:	fa24 f303 	lsrgt.w	r3, r4, r3
 800bd94:	bfd6      	itet	le
 800bd96:	f1c3 0320 	rsble	r3, r3, #32
 800bd9a:	ea47 0003 	orrgt.w	r0, r7, r3
 800bd9e:	fa04 f003 	lslle.w	r0, r4, r3
 800bda2:	f7f4 fbaf 	bl	8000504 <__aeabi_ui2d>
 800bda6:	2201      	movs	r2, #1
 800bda8:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800bdac:	3e01      	subs	r6, #1
 800bdae:	9212      	str	r2, [sp, #72]	@ 0x48
 800bdb0:	e776      	b.n	800bca0 <_dtoa_r+0x100>
 800bdb2:	2301      	movs	r3, #1
 800bdb4:	e7b7      	b.n	800bd26 <_dtoa_r+0x186>
 800bdb6:	9010      	str	r0, [sp, #64]	@ 0x40
 800bdb8:	e7b6      	b.n	800bd28 <_dtoa_r+0x188>
 800bdba:	9b00      	ldr	r3, [sp, #0]
 800bdbc:	1bdb      	subs	r3, r3, r7
 800bdbe:	9300      	str	r3, [sp, #0]
 800bdc0:	427b      	negs	r3, r7
 800bdc2:	9308      	str	r3, [sp, #32]
 800bdc4:	2300      	movs	r3, #0
 800bdc6:	930d      	str	r3, [sp, #52]	@ 0x34
 800bdc8:	e7c3      	b.n	800bd52 <_dtoa_r+0x1b2>
 800bdca:	2301      	movs	r3, #1
 800bdcc:	9309      	str	r3, [sp, #36]	@ 0x24
 800bdce:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800bdd0:	eb07 0b03 	add.w	fp, r7, r3
 800bdd4:	f10b 0301 	add.w	r3, fp, #1
 800bdd8:	2b01      	cmp	r3, #1
 800bdda:	9303      	str	r3, [sp, #12]
 800bddc:	bfb8      	it	lt
 800bdde:	2301      	movlt	r3, #1
 800bde0:	e006      	b.n	800bdf0 <_dtoa_r+0x250>
 800bde2:	2301      	movs	r3, #1
 800bde4:	9309      	str	r3, [sp, #36]	@ 0x24
 800bde6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800bde8:	2b00      	cmp	r3, #0
 800bdea:	dd28      	ble.n	800be3e <_dtoa_r+0x29e>
 800bdec:	469b      	mov	fp, r3
 800bdee:	9303      	str	r3, [sp, #12]
 800bdf0:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800bdf4:	2100      	movs	r1, #0
 800bdf6:	2204      	movs	r2, #4
 800bdf8:	f102 0514 	add.w	r5, r2, #20
 800bdfc:	429d      	cmp	r5, r3
 800bdfe:	d926      	bls.n	800be4e <_dtoa_r+0x2ae>
 800be00:	6041      	str	r1, [r0, #4]
 800be02:	4648      	mov	r0, r9
 800be04:	f000 fce6 	bl	800c7d4 <_Balloc>
 800be08:	4682      	mov	sl, r0
 800be0a:	2800      	cmp	r0, #0
 800be0c:	d142      	bne.n	800be94 <_dtoa_r+0x2f4>
 800be0e:	4b1e      	ldr	r3, [pc, #120]	@ (800be88 <_dtoa_r+0x2e8>)
 800be10:	4602      	mov	r2, r0
 800be12:	f240 11af 	movw	r1, #431	@ 0x1af
 800be16:	e6da      	b.n	800bbce <_dtoa_r+0x2e>
 800be18:	2300      	movs	r3, #0
 800be1a:	e7e3      	b.n	800bde4 <_dtoa_r+0x244>
 800be1c:	2300      	movs	r3, #0
 800be1e:	e7d5      	b.n	800bdcc <_dtoa_r+0x22c>
 800be20:	2401      	movs	r4, #1
 800be22:	2300      	movs	r3, #0
 800be24:	9307      	str	r3, [sp, #28]
 800be26:	9409      	str	r4, [sp, #36]	@ 0x24
 800be28:	f04f 3bff 	mov.w	fp, #4294967295
 800be2c:	2200      	movs	r2, #0
 800be2e:	f8cd b00c 	str.w	fp, [sp, #12]
 800be32:	2312      	movs	r3, #18
 800be34:	920c      	str	r2, [sp, #48]	@ 0x30
 800be36:	e7db      	b.n	800bdf0 <_dtoa_r+0x250>
 800be38:	2301      	movs	r3, #1
 800be3a:	9309      	str	r3, [sp, #36]	@ 0x24
 800be3c:	e7f4      	b.n	800be28 <_dtoa_r+0x288>
 800be3e:	f04f 0b01 	mov.w	fp, #1
 800be42:	f8cd b00c 	str.w	fp, [sp, #12]
 800be46:	465b      	mov	r3, fp
 800be48:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800be4c:	e7d0      	b.n	800bdf0 <_dtoa_r+0x250>
 800be4e:	3101      	adds	r1, #1
 800be50:	0052      	lsls	r2, r2, #1
 800be52:	e7d1      	b.n	800bdf8 <_dtoa_r+0x258>
 800be54:	f3af 8000 	nop.w
 800be58:	636f4361 	.word	0x636f4361
 800be5c:	3fd287a7 	.word	0x3fd287a7
 800be60:	8b60c8b3 	.word	0x8b60c8b3
 800be64:	3fc68a28 	.word	0x3fc68a28
 800be68:	509f79fb 	.word	0x509f79fb
 800be6c:	3fd34413 	.word	0x3fd34413
 800be70:	0800f01a 	.word	0x0800f01a
 800be74:	0800f031 	.word	0x0800f031
 800be78:	7ff00000 	.word	0x7ff00000
 800be7c:	0800efe5 	.word	0x0800efe5
 800be80:	3ff80000 	.word	0x3ff80000
 800be84:	0800f1e0 	.word	0x0800f1e0
 800be88:	0800f089 	.word	0x0800f089
 800be8c:	0800f016 	.word	0x0800f016
 800be90:	0800efe4 	.word	0x0800efe4
 800be94:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800be98:	6018      	str	r0, [r3, #0]
 800be9a:	9b03      	ldr	r3, [sp, #12]
 800be9c:	2b0e      	cmp	r3, #14
 800be9e:	f200 80a1 	bhi.w	800bfe4 <_dtoa_r+0x444>
 800bea2:	2c00      	cmp	r4, #0
 800bea4:	f000 809e 	beq.w	800bfe4 <_dtoa_r+0x444>
 800bea8:	2f00      	cmp	r7, #0
 800beaa:	dd33      	ble.n	800bf14 <_dtoa_r+0x374>
 800beac:	4b9c      	ldr	r3, [pc, #624]	@ (800c120 <_dtoa_r+0x580>)
 800beae:	f007 020f 	and.w	r2, r7, #15
 800beb2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800beb6:	ed93 7b00 	vldr	d7, [r3]
 800beba:	05f8      	lsls	r0, r7, #23
 800bebc:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800bec0:	ea4f 1427 	mov.w	r4, r7, asr #4
 800bec4:	d516      	bpl.n	800bef4 <_dtoa_r+0x354>
 800bec6:	4b97      	ldr	r3, [pc, #604]	@ (800c124 <_dtoa_r+0x584>)
 800bec8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800becc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800bed0:	f7f4 fcbc 	bl	800084c <__aeabi_ddiv>
 800bed4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bed8:	f004 040f 	and.w	r4, r4, #15
 800bedc:	2603      	movs	r6, #3
 800bede:	4d91      	ldr	r5, [pc, #580]	@ (800c124 <_dtoa_r+0x584>)
 800bee0:	b954      	cbnz	r4, 800bef8 <_dtoa_r+0x358>
 800bee2:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800bee6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800beea:	f7f4 fcaf 	bl	800084c <__aeabi_ddiv>
 800beee:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bef2:	e028      	b.n	800bf46 <_dtoa_r+0x3a6>
 800bef4:	2602      	movs	r6, #2
 800bef6:	e7f2      	b.n	800bede <_dtoa_r+0x33e>
 800bef8:	07e1      	lsls	r1, r4, #31
 800befa:	d508      	bpl.n	800bf0e <_dtoa_r+0x36e>
 800befc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800bf00:	e9d5 2300 	ldrd	r2, r3, [r5]
 800bf04:	f7f4 fb78 	bl	80005f8 <__aeabi_dmul>
 800bf08:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800bf0c:	3601      	adds	r6, #1
 800bf0e:	1064      	asrs	r4, r4, #1
 800bf10:	3508      	adds	r5, #8
 800bf12:	e7e5      	b.n	800bee0 <_dtoa_r+0x340>
 800bf14:	f000 80af 	beq.w	800c076 <_dtoa_r+0x4d6>
 800bf18:	427c      	negs	r4, r7
 800bf1a:	4b81      	ldr	r3, [pc, #516]	@ (800c120 <_dtoa_r+0x580>)
 800bf1c:	4d81      	ldr	r5, [pc, #516]	@ (800c124 <_dtoa_r+0x584>)
 800bf1e:	f004 020f 	and.w	r2, r4, #15
 800bf22:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bf26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf2a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800bf2e:	f7f4 fb63 	bl	80005f8 <__aeabi_dmul>
 800bf32:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bf36:	1124      	asrs	r4, r4, #4
 800bf38:	2300      	movs	r3, #0
 800bf3a:	2602      	movs	r6, #2
 800bf3c:	2c00      	cmp	r4, #0
 800bf3e:	f040 808f 	bne.w	800c060 <_dtoa_r+0x4c0>
 800bf42:	2b00      	cmp	r3, #0
 800bf44:	d1d3      	bne.n	800beee <_dtoa_r+0x34e>
 800bf46:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800bf48:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800bf4c:	2b00      	cmp	r3, #0
 800bf4e:	f000 8094 	beq.w	800c07a <_dtoa_r+0x4da>
 800bf52:	4b75      	ldr	r3, [pc, #468]	@ (800c128 <_dtoa_r+0x588>)
 800bf54:	2200      	movs	r2, #0
 800bf56:	4620      	mov	r0, r4
 800bf58:	4629      	mov	r1, r5
 800bf5a:	f7f4 fdbf 	bl	8000adc <__aeabi_dcmplt>
 800bf5e:	2800      	cmp	r0, #0
 800bf60:	f000 808b 	beq.w	800c07a <_dtoa_r+0x4da>
 800bf64:	9b03      	ldr	r3, [sp, #12]
 800bf66:	2b00      	cmp	r3, #0
 800bf68:	f000 8087 	beq.w	800c07a <_dtoa_r+0x4da>
 800bf6c:	f1bb 0f00 	cmp.w	fp, #0
 800bf70:	dd34      	ble.n	800bfdc <_dtoa_r+0x43c>
 800bf72:	4620      	mov	r0, r4
 800bf74:	4b6d      	ldr	r3, [pc, #436]	@ (800c12c <_dtoa_r+0x58c>)
 800bf76:	2200      	movs	r2, #0
 800bf78:	4629      	mov	r1, r5
 800bf7a:	f7f4 fb3d 	bl	80005f8 <__aeabi_dmul>
 800bf7e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bf82:	f107 38ff 	add.w	r8, r7, #4294967295
 800bf86:	3601      	adds	r6, #1
 800bf88:	465c      	mov	r4, fp
 800bf8a:	4630      	mov	r0, r6
 800bf8c:	f7f4 faca 	bl	8000524 <__aeabi_i2d>
 800bf90:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bf94:	f7f4 fb30 	bl	80005f8 <__aeabi_dmul>
 800bf98:	4b65      	ldr	r3, [pc, #404]	@ (800c130 <_dtoa_r+0x590>)
 800bf9a:	2200      	movs	r2, #0
 800bf9c:	f7f4 f976 	bl	800028c <__adddf3>
 800bfa0:	4605      	mov	r5, r0
 800bfa2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800bfa6:	2c00      	cmp	r4, #0
 800bfa8:	d16a      	bne.n	800c080 <_dtoa_r+0x4e0>
 800bfaa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bfae:	4b61      	ldr	r3, [pc, #388]	@ (800c134 <_dtoa_r+0x594>)
 800bfb0:	2200      	movs	r2, #0
 800bfb2:	f7f4 f969 	bl	8000288 <__aeabi_dsub>
 800bfb6:	4602      	mov	r2, r0
 800bfb8:	460b      	mov	r3, r1
 800bfba:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800bfbe:	462a      	mov	r2, r5
 800bfc0:	4633      	mov	r3, r6
 800bfc2:	f7f4 fda9 	bl	8000b18 <__aeabi_dcmpgt>
 800bfc6:	2800      	cmp	r0, #0
 800bfc8:	f040 8298 	bne.w	800c4fc <_dtoa_r+0x95c>
 800bfcc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bfd0:	462a      	mov	r2, r5
 800bfd2:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800bfd6:	f7f4 fd81 	bl	8000adc <__aeabi_dcmplt>
 800bfda:	bb38      	cbnz	r0, 800c02c <_dtoa_r+0x48c>
 800bfdc:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 800bfe0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800bfe4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800bfe6:	2b00      	cmp	r3, #0
 800bfe8:	f2c0 8157 	blt.w	800c29a <_dtoa_r+0x6fa>
 800bfec:	2f0e      	cmp	r7, #14
 800bfee:	f300 8154 	bgt.w	800c29a <_dtoa_r+0x6fa>
 800bff2:	4b4b      	ldr	r3, [pc, #300]	@ (800c120 <_dtoa_r+0x580>)
 800bff4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800bff8:	ed93 7b00 	vldr	d7, [r3]
 800bffc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800bffe:	2b00      	cmp	r3, #0
 800c000:	ed8d 7b00 	vstr	d7, [sp]
 800c004:	f280 80e5 	bge.w	800c1d2 <_dtoa_r+0x632>
 800c008:	9b03      	ldr	r3, [sp, #12]
 800c00a:	2b00      	cmp	r3, #0
 800c00c:	f300 80e1 	bgt.w	800c1d2 <_dtoa_r+0x632>
 800c010:	d10c      	bne.n	800c02c <_dtoa_r+0x48c>
 800c012:	4b48      	ldr	r3, [pc, #288]	@ (800c134 <_dtoa_r+0x594>)
 800c014:	2200      	movs	r2, #0
 800c016:	ec51 0b17 	vmov	r0, r1, d7
 800c01a:	f7f4 faed 	bl	80005f8 <__aeabi_dmul>
 800c01e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c022:	f7f4 fd6f 	bl	8000b04 <__aeabi_dcmpge>
 800c026:	2800      	cmp	r0, #0
 800c028:	f000 8266 	beq.w	800c4f8 <_dtoa_r+0x958>
 800c02c:	2400      	movs	r4, #0
 800c02e:	4625      	mov	r5, r4
 800c030:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c032:	4656      	mov	r6, sl
 800c034:	ea6f 0803 	mvn.w	r8, r3
 800c038:	2700      	movs	r7, #0
 800c03a:	4621      	mov	r1, r4
 800c03c:	4648      	mov	r0, r9
 800c03e:	f000 fc09 	bl	800c854 <_Bfree>
 800c042:	2d00      	cmp	r5, #0
 800c044:	f000 80bd 	beq.w	800c1c2 <_dtoa_r+0x622>
 800c048:	b12f      	cbz	r7, 800c056 <_dtoa_r+0x4b6>
 800c04a:	42af      	cmp	r7, r5
 800c04c:	d003      	beq.n	800c056 <_dtoa_r+0x4b6>
 800c04e:	4639      	mov	r1, r7
 800c050:	4648      	mov	r0, r9
 800c052:	f000 fbff 	bl	800c854 <_Bfree>
 800c056:	4629      	mov	r1, r5
 800c058:	4648      	mov	r0, r9
 800c05a:	f000 fbfb 	bl	800c854 <_Bfree>
 800c05e:	e0b0      	b.n	800c1c2 <_dtoa_r+0x622>
 800c060:	07e2      	lsls	r2, r4, #31
 800c062:	d505      	bpl.n	800c070 <_dtoa_r+0x4d0>
 800c064:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c068:	f7f4 fac6 	bl	80005f8 <__aeabi_dmul>
 800c06c:	3601      	adds	r6, #1
 800c06e:	2301      	movs	r3, #1
 800c070:	1064      	asrs	r4, r4, #1
 800c072:	3508      	adds	r5, #8
 800c074:	e762      	b.n	800bf3c <_dtoa_r+0x39c>
 800c076:	2602      	movs	r6, #2
 800c078:	e765      	b.n	800bf46 <_dtoa_r+0x3a6>
 800c07a:	9c03      	ldr	r4, [sp, #12]
 800c07c:	46b8      	mov	r8, r7
 800c07e:	e784      	b.n	800bf8a <_dtoa_r+0x3ea>
 800c080:	4b27      	ldr	r3, [pc, #156]	@ (800c120 <_dtoa_r+0x580>)
 800c082:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c084:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c088:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c08c:	4454      	add	r4, sl
 800c08e:	2900      	cmp	r1, #0
 800c090:	d054      	beq.n	800c13c <_dtoa_r+0x59c>
 800c092:	4929      	ldr	r1, [pc, #164]	@ (800c138 <_dtoa_r+0x598>)
 800c094:	2000      	movs	r0, #0
 800c096:	f7f4 fbd9 	bl	800084c <__aeabi_ddiv>
 800c09a:	4633      	mov	r3, r6
 800c09c:	462a      	mov	r2, r5
 800c09e:	f7f4 f8f3 	bl	8000288 <__aeabi_dsub>
 800c0a2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800c0a6:	4656      	mov	r6, sl
 800c0a8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c0ac:	f7f4 fd54 	bl	8000b58 <__aeabi_d2iz>
 800c0b0:	4605      	mov	r5, r0
 800c0b2:	f7f4 fa37 	bl	8000524 <__aeabi_i2d>
 800c0b6:	4602      	mov	r2, r0
 800c0b8:	460b      	mov	r3, r1
 800c0ba:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c0be:	f7f4 f8e3 	bl	8000288 <__aeabi_dsub>
 800c0c2:	3530      	adds	r5, #48	@ 0x30
 800c0c4:	4602      	mov	r2, r0
 800c0c6:	460b      	mov	r3, r1
 800c0c8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800c0cc:	f806 5b01 	strb.w	r5, [r6], #1
 800c0d0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800c0d4:	f7f4 fd02 	bl	8000adc <__aeabi_dcmplt>
 800c0d8:	2800      	cmp	r0, #0
 800c0da:	d172      	bne.n	800c1c2 <_dtoa_r+0x622>
 800c0dc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c0e0:	4911      	ldr	r1, [pc, #68]	@ (800c128 <_dtoa_r+0x588>)
 800c0e2:	2000      	movs	r0, #0
 800c0e4:	f7f4 f8d0 	bl	8000288 <__aeabi_dsub>
 800c0e8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800c0ec:	f7f4 fcf6 	bl	8000adc <__aeabi_dcmplt>
 800c0f0:	2800      	cmp	r0, #0
 800c0f2:	f040 80b4 	bne.w	800c25e <_dtoa_r+0x6be>
 800c0f6:	42a6      	cmp	r6, r4
 800c0f8:	f43f af70 	beq.w	800bfdc <_dtoa_r+0x43c>
 800c0fc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800c100:	4b0a      	ldr	r3, [pc, #40]	@ (800c12c <_dtoa_r+0x58c>)
 800c102:	2200      	movs	r2, #0
 800c104:	f7f4 fa78 	bl	80005f8 <__aeabi_dmul>
 800c108:	4b08      	ldr	r3, [pc, #32]	@ (800c12c <_dtoa_r+0x58c>)
 800c10a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800c10e:	2200      	movs	r2, #0
 800c110:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c114:	f7f4 fa70 	bl	80005f8 <__aeabi_dmul>
 800c118:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c11c:	e7c4      	b.n	800c0a8 <_dtoa_r+0x508>
 800c11e:	bf00      	nop
 800c120:	0800f1e0 	.word	0x0800f1e0
 800c124:	0800f1b8 	.word	0x0800f1b8
 800c128:	3ff00000 	.word	0x3ff00000
 800c12c:	40240000 	.word	0x40240000
 800c130:	401c0000 	.word	0x401c0000
 800c134:	40140000 	.word	0x40140000
 800c138:	3fe00000 	.word	0x3fe00000
 800c13c:	4631      	mov	r1, r6
 800c13e:	4628      	mov	r0, r5
 800c140:	f7f4 fa5a 	bl	80005f8 <__aeabi_dmul>
 800c144:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800c148:	9413      	str	r4, [sp, #76]	@ 0x4c
 800c14a:	4656      	mov	r6, sl
 800c14c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c150:	f7f4 fd02 	bl	8000b58 <__aeabi_d2iz>
 800c154:	4605      	mov	r5, r0
 800c156:	f7f4 f9e5 	bl	8000524 <__aeabi_i2d>
 800c15a:	4602      	mov	r2, r0
 800c15c:	460b      	mov	r3, r1
 800c15e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c162:	f7f4 f891 	bl	8000288 <__aeabi_dsub>
 800c166:	3530      	adds	r5, #48	@ 0x30
 800c168:	f806 5b01 	strb.w	r5, [r6], #1
 800c16c:	4602      	mov	r2, r0
 800c16e:	460b      	mov	r3, r1
 800c170:	42a6      	cmp	r6, r4
 800c172:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800c176:	f04f 0200 	mov.w	r2, #0
 800c17a:	d124      	bne.n	800c1c6 <_dtoa_r+0x626>
 800c17c:	4baf      	ldr	r3, [pc, #700]	@ (800c43c <_dtoa_r+0x89c>)
 800c17e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800c182:	f7f4 f883 	bl	800028c <__adddf3>
 800c186:	4602      	mov	r2, r0
 800c188:	460b      	mov	r3, r1
 800c18a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c18e:	f7f4 fcc3 	bl	8000b18 <__aeabi_dcmpgt>
 800c192:	2800      	cmp	r0, #0
 800c194:	d163      	bne.n	800c25e <_dtoa_r+0x6be>
 800c196:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800c19a:	49a8      	ldr	r1, [pc, #672]	@ (800c43c <_dtoa_r+0x89c>)
 800c19c:	2000      	movs	r0, #0
 800c19e:	f7f4 f873 	bl	8000288 <__aeabi_dsub>
 800c1a2:	4602      	mov	r2, r0
 800c1a4:	460b      	mov	r3, r1
 800c1a6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c1aa:	f7f4 fc97 	bl	8000adc <__aeabi_dcmplt>
 800c1ae:	2800      	cmp	r0, #0
 800c1b0:	f43f af14 	beq.w	800bfdc <_dtoa_r+0x43c>
 800c1b4:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800c1b6:	1e73      	subs	r3, r6, #1
 800c1b8:	9313      	str	r3, [sp, #76]	@ 0x4c
 800c1ba:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800c1be:	2b30      	cmp	r3, #48	@ 0x30
 800c1c0:	d0f8      	beq.n	800c1b4 <_dtoa_r+0x614>
 800c1c2:	4647      	mov	r7, r8
 800c1c4:	e03b      	b.n	800c23e <_dtoa_r+0x69e>
 800c1c6:	4b9e      	ldr	r3, [pc, #632]	@ (800c440 <_dtoa_r+0x8a0>)
 800c1c8:	f7f4 fa16 	bl	80005f8 <__aeabi_dmul>
 800c1cc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c1d0:	e7bc      	b.n	800c14c <_dtoa_r+0x5ac>
 800c1d2:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800c1d6:	4656      	mov	r6, sl
 800c1d8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c1dc:	4620      	mov	r0, r4
 800c1de:	4629      	mov	r1, r5
 800c1e0:	f7f4 fb34 	bl	800084c <__aeabi_ddiv>
 800c1e4:	f7f4 fcb8 	bl	8000b58 <__aeabi_d2iz>
 800c1e8:	4680      	mov	r8, r0
 800c1ea:	f7f4 f99b 	bl	8000524 <__aeabi_i2d>
 800c1ee:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c1f2:	f7f4 fa01 	bl	80005f8 <__aeabi_dmul>
 800c1f6:	4602      	mov	r2, r0
 800c1f8:	460b      	mov	r3, r1
 800c1fa:	4620      	mov	r0, r4
 800c1fc:	4629      	mov	r1, r5
 800c1fe:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800c202:	f7f4 f841 	bl	8000288 <__aeabi_dsub>
 800c206:	f806 4b01 	strb.w	r4, [r6], #1
 800c20a:	9d03      	ldr	r5, [sp, #12]
 800c20c:	eba6 040a 	sub.w	r4, r6, sl
 800c210:	42a5      	cmp	r5, r4
 800c212:	4602      	mov	r2, r0
 800c214:	460b      	mov	r3, r1
 800c216:	d133      	bne.n	800c280 <_dtoa_r+0x6e0>
 800c218:	f7f4 f838 	bl	800028c <__adddf3>
 800c21c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c220:	4604      	mov	r4, r0
 800c222:	460d      	mov	r5, r1
 800c224:	f7f4 fc78 	bl	8000b18 <__aeabi_dcmpgt>
 800c228:	b9c0      	cbnz	r0, 800c25c <_dtoa_r+0x6bc>
 800c22a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c22e:	4620      	mov	r0, r4
 800c230:	4629      	mov	r1, r5
 800c232:	f7f4 fc49 	bl	8000ac8 <__aeabi_dcmpeq>
 800c236:	b110      	cbz	r0, 800c23e <_dtoa_r+0x69e>
 800c238:	f018 0f01 	tst.w	r8, #1
 800c23c:	d10e      	bne.n	800c25c <_dtoa_r+0x6bc>
 800c23e:	9902      	ldr	r1, [sp, #8]
 800c240:	4648      	mov	r0, r9
 800c242:	f000 fb07 	bl	800c854 <_Bfree>
 800c246:	2300      	movs	r3, #0
 800c248:	7033      	strb	r3, [r6, #0]
 800c24a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800c24c:	3701      	adds	r7, #1
 800c24e:	601f      	str	r7, [r3, #0]
 800c250:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800c252:	2b00      	cmp	r3, #0
 800c254:	f000 824b 	beq.w	800c6ee <_dtoa_r+0xb4e>
 800c258:	601e      	str	r6, [r3, #0]
 800c25a:	e248      	b.n	800c6ee <_dtoa_r+0xb4e>
 800c25c:	46b8      	mov	r8, r7
 800c25e:	4633      	mov	r3, r6
 800c260:	461e      	mov	r6, r3
 800c262:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c266:	2a39      	cmp	r2, #57	@ 0x39
 800c268:	d106      	bne.n	800c278 <_dtoa_r+0x6d8>
 800c26a:	459a      	cmp	sl, r3
 800c26c:	d1f8      	bne.n	800c260 <_dtoa_r+0x6c0>
 800c26e:	2230      	movs	r2, #48	@ 0x30
 800c270:	f108 0801 	add.w	r8, r8, #1
 800c274:	f88a 2000 	strb.w	r2, [sl]
 800c278:	781a      	ldrb	r2, [r3, #0]
 800c27a:	3201      	adds	r2, #1
 800c27c:	701a      	strb	r2, [r3, #0]
 800c27e:	e7a0      	b.n	800c1c2 <_dtoa_r+0x622>
 800c280:	4b6f      	ldr	r3, [pc, #444]	@ (800c440 <_dtoa_r+0x8a0>)
 800c282:	2200      	movs	r2, #0
 800c284:	f7f4 f9b8 	bl	80005f8 <__aeabi_dmul>
 800c288:	2200      	movs	r2, #0
 800c28a:	2300      	movs	r3, #0
 800c28c:	4604      	mov	r4, r0
 800c28e:	460d      	mov	r5, r1
 800c290:	f7f4 fc1a 	bl	8000ac8 <__aeabi_dcmpeq>
 800c294:	2800      	cmp	r0, #0
 800c296:	d09f      	beq.n	800c1d8 <_dtoa_r+0x638>
 800c298:	e7d1      	b.n	800c23e <_dtoa_r+0x69e>
 800c29a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c29c:	2a00      	cmp	r2, #0
 800c29e:	f000 80ea 	beq.w	800c476 <_dtoa_r+0x8d6>
 800c2a2:	9a07      	ldr	r2, [sp, #28]
 800c2a4:	2a01      	cmp	r2, #1
 800c2a6:	f300 80cd 	bgt.w	800c444 <_dtoa_r+0x8a4>
 800c2aa:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800c2ac:	2a00      	cmp	r2, #0
 800c2ae:	f000 80c1 	beq.w	800c434 <_dtoa_r+0x894>
 800c2b2:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800c2b6:	9c08      	ldr	r4, [sp, #32]
 800c2b8:	9e00      	ldr	r6, [sp, #0]
 800c2ba:	9a00      	ldr	r2, [sp, #0]
 800c2bc:	441a      	add	r2, r3
 800c2be:	9200      	str	r2, [sp, #0]
 800c2c0:	9a06      	ldr	r2, [sp, #24]
 800c2c2:	2101      	movs	r1, #1
 800c2c4:	441a      	add	r2, r3
 800c2c6:	4648      	mov	r0, r9
 800c2c8:	9206      	str	r2, [sp, #24]
 800c2ca:	f000 fbc1 	bl	800ca50 <__i2b>
 800c2ce:	4605      	mov	r5, r0
 800c2d0:	b166      	cbz	r6, 800c2ec <_dtoa_r+0x74c>
 800c2d2:	9b06      	ldr	r3, [sp, #24]
 800c2d4:	2b00      	cmp	r3, #0
 800c2d6:	dd09      	ble.n	800c2ec <_dtoa_r+0x74c>
 800c2d8:	42b3      	cmp	r3, r6
 800c2da:	9a00      	ldr	r2, [sp, #0]
 800c2dc:	bfa8      	it	ge
 800c2de:	4633      	movge	r3, r6
 800c2e0:	1ad2      	subs	r2, r2, r3
 800c2e2:	9200      	str	r2, [sp, #0]
 800c2e4:	9a06      	ldr	r2, [sp, #24]
 800c2e6:	1af6      	subs	r6, r6, r3
 800c2e8:	1ad3      	subs	r3, r2, r3
 800c2ea:	9306      	str	r3, [sp, #24]
 800c2ec:	9b08      	ldr	r3, [sp, #32]
 800c2ee:	b30b      	cbz	r3, 800c334 <_dtoa_r+0x794>
 800c2f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c2f2:	2b00      	cmp	r3, #0
 800c2f4:	f000 80c6 	beq.w	800c484 <_dtoa_r+0x8e4>
 800c2f8:	2c00      	cmp	r4, #0
 800c2fa:	f000 80c0 	beq.w	800c47e <_dtoa_r+0x8de>
 800c2fe:	4629      	mov	r1, r5
 800c300:	4622      	mov	r2, r4
 800c302:	4648      	mov	r0, r9
 800c304:	f000 fc5c 	bl	800cbc0 <__pow5mult>
 800c308:	9a02      	ldr	r2, [sp, #8]
 800c30a:	4601      	mov	r1, r0
 800c30c:	4605      	mov	r5, r0
 800c30e:	4648      	mov	r0, r9
 800c310:	f000 fbb4 	bl	800ca7c <__multiply>
 800c314:	9902      	ldr	r1, [sp, #8]
 800c316:	4680      	mov	r8, r0
 800c318:	4648      	mov	r0, r9
 800c31a:	f000 fa9b 	bl	800c854 <_Bfree>
 800c31e:	9b08      	ldr	r3, [sp, #32]
 800c320:	1b1b      	subs	r3, r3, r4
 800c322:	9308      	str	r3, [sp, #32]
 800c324:	f000 80b1 	beq.w	800c48a <_dtoa_r+0x8ea>
 800c328:	9a08      	ldr	r2, [sp, #32]
 800c32a:	4641      	mov	r1, r8
 800c32c:	4648      	mov	r0, r9
 800c32e:	f000 fc47 	bl	800cbc0 <__pow5mult>
 800c332:	9002      	str	r0, [sp, #8]
 800c334:	2101      	movs	r1, #1
 800c336:	4648      	mov	r0, r9
 800c338:	f000 fb8a 	bl	800ca50 <__i2b>
 800c33c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c33e:	4604      	mov	r4, r0
 800c340:	2b00      	cmp	r3, #0
 800c342:	f000 81d8 	beq.w	800c6f6 <_dtoa_r+0xb56>
 800c346:	461a      	mov	r2, r3
 800c348:	4601      	mov	r1, r0
 800c34a:	4648      	mov	r0, r9
 800c34c:	f000 fc38 	bl	800cbc0 <__pow5mult>
 800c350:	9b07      	ldr	r3, [sp, #28]
 800c352:	2b01      	cmp	r3, #1
 800c354:	4604      	mov	r4, r0
 800c356:	f300 809f 	bgt.w	800c498 <_dtoa_r+0x8f8>
 800c35a:	9b04      	ldr	r3, [sp, #16]
 800c35c:	2b00      	cmp	r3, #0
 800c35e:	f040 8097 	bne.w	800c490 <_dtoa_r+0x8f0>
 800c362:	9b05      	ldr	r3, [sp, #20]
 800c364:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c368:	2b00      	cmp	r3, #0
 800c36a:	f040 8093 	bne.w	800c494 <_dtoa_r+0x8f4>
 800c36e:	9b05      	ldr	r3, [sp, #20]
 800c370:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800c374:	0d1b      	lsrs	r3, r3, #20
 800c376:	051b      	lsls	r3, r3, #20
 800c378:	b133      	cbz	r3, 800c388 <_dtoa_r+0x7e8>
 800c37a:	9b00      	ldr	r3, [sp, #0]
 800c37c:	3301      	adds	r3, #1
 800c37e:	9300      	str	r3, [sp, #0]
 800c380:	9b06      	ldr	r3, [sp, #24]
 800c382:	3301      	adds	r3, #1
 800c384:	9306      	str	r3, [sp, #24]
 800c386:	2301      	movs	r3, #1
 800c388:	9308      	str	r3, [sp, #32]
 800c38a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c38c:	2b00      	cmp	r3, #0
 800c38e:	f000 81b8 	beq.w	800c702 <_dtoa_r+0xb62>
 800c392:	6923      	ldr	r3, [r4, #16]
 800c394:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c398:	6918      	ldr	r0, [r3, #16]
 800c39a:	f000 fb0d 	bl	800c9b8 <__hi0bits>
 800c39e:	f1c0 0020 	rsb	r0, r0, #32
 800c3a2:	9b06      	ldr	r3, [sp, #24]
 800c3a4:	4418      	add	r0, r3
 800c3a6:	f010 001f 	ands.w	r0, r0, #31
 800c3aa:	f000 8082 	beq.w	800c4b2 <_dtoa_r+0x912>
 800c3ae:	f1c0 0320 	rsb	r3, r0, #32
 800c3b2:	2b04      	cmp	r3, #4
 800c3b4:	dd73      	ble.n	800c49e <_dtoa_r+0x8fe>
 800c3b6:	9b00      	ldr	r3, [sp, #0]
 800c3b8:	f1c0 001c 	rsb	r0, r0, #28
 800c3bc:	4403      	add	r3, r0
 800c3be:	9300      	str	r3, [sp, #0]
 800c3c0:	9b06      	ldr	r3, [sp, #24]
 800c3c2:	4403      	add	r3, r0
 800c3c4:	4406      	add	r6, r0
 800c3c6:	9306      	str	r3, [sp, #24]
 800c3c8:	9b00      	ldr	r3, [sp, #0]
 800c3ca:	2b00      	cmp	r3, #0
 800c3cc:	dd05      	ble.n	800c3da <_dtoa_r+0x83a>
 800c3ce:	9902      	ldr	r1, [sp, #8]
 800c3d0:	461a      	mov	r2, r3
 800c3d2:	4648      	mov	r0, r9
 800c3d4:	f000 fc4e 	bl	800cc74 <__lshift>
 800c3d8:	9002      	str	r0, [sp, #8]
 800c3da:	9b06      	ldr	r3, [sp, #24]
 800c3dc:	2b00      	cmp	r3, #0
 800c3de:	dd05      	ble.n	800c3ec <_dtoa_r+0x84c>
 800c3e0:	4621      	mov	r1, r4
 800c3e2:	461a      	mov	r2, r3
 800c3e4:	4648      	mov	r0, r9
 800c3e6:	f000 fc45 	bl	800cc74 <__lshift>
 800c3ea:	4604      	mov	r4, r0
 800c3ec:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800c3ee:	2b00      	cmp	r3, #0
 800c3f0:	d061      	beq.n	800c4b6 <_dtoa_r+0x916>
 800c3f2:	9802      	ldr	r0, [sp, #8]
 800c3f4:	4621      	mov	r1, r4
 800c3f6:	f000 fca9 	bl	800cd4c <__mcmp>
 800c3fa:	2800      	cmp	r0, #0
 800c3fc:	da5b      	bge.n	800c4b6 <_dtoa_r+0x916>
 800c3fe:	2300      	movs	r3, #0
 800c400:	9902      	ldr	r1, [sp, #8]
 800c402:	220a      	movs	r2, #10
 800c404:	4648      	mov	r0, r9
 800c406:	f000 fa47 	bl	800c898 <__multadd>
 800c40a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c40c:	9002      	str	r0, [sp, #8]
 800c40e:	f107 38ff 	add.w	r8, r7, #4294967295
 800c412:	2b00      	cmp	r3, #0
 800c414:	f000 8177 	beq.w	800c706 <_dtoa_r+0xb66>
 800c418:	4629      	mov	r1, r5
 800c41a:	2300      	movs	r3, #0
 800c41c:	220a      	movs	r2, #10
 800c41e:	4648      	mov	r0, r9
 800c420:	f000 fa3a 	bl	800c898 <__multadd>
 800c424:	f1bb 0f00 	cmp.w	fp, #0
 800c428:	4605      	mov	r5, r0
 800c42a:	dc6f      	bgt.n	800c50c <_dtoa_r+0x96c>
 800c42c:	9b07      	ldr	r3, [sp, #28]
 800c42e:	2b02      	cmp	r3, #2
 800c430:	dc49      	bgt.n	800c4c6 <_dtoa_r+0x926>
 800c432:	e06b      	b.n	800c50c <_dtoa_r+0x96c>
 800c434:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800c436:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800c43a:	e73c      	b.n	800c2b6 <_dtoa_r+0x716>
 800c43c:	3fe00000 	.word	0x3fe00000
 800c440:	40240000 	.word	0x40240000
 800c444:	9b03      	ldr	r3, [sp, #12]
 800c446:	1e5c      	subs	r4, r3, #1
 800c448:	9b08      	ldr	r3, [sp, #32]
 800c44a:	42a3      	cmp	r3, r4
 800c44c:	db09      	blt.n	800c462 <_dtoa_r+0x8c2>
 800c44e:	1b1c      	subs	r4, r3, r4
 800c450:	9b03      	ldr	r3, [sp, #12]
 800c452:	2b00      	cmp	r3, #0
 800c454:	f6bf af30 	bge.w	800c2b8 <_dtoa_r+0x718>
 800c458:	9b00      	ldr	r3, [sp, #0]
 800c45a:	9a03      	ldr	r2, [sp, #12]
 800c45c:	1a9e      	subs	r6, r3, r2
 800c45e:	2300      	movs	r3, #0
 800c460:	e72b      	b.n	800c2ba <_dtoa_r+0x71a>
 800c462:	9b08      	ldr	r3, [sp, #32]
 800c464:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800c466:	9408      	str	r4, [sp, #32]
 800c468:	1ae3      	subs	r3, r4, r3
 800c46a:	441a      	add	r2, r3
 800c46c:	9e00      	ldr	r6, [sp, #0]
 800c46e:	9b03      	ldr	r3, [sp, #12]
 800c470:	920d      	str	r2, [sp, #52]	@ 0x34
 800c472:	2400      	movs	r4, #0
 800c474:	e721      	b.n	800c2ba <_dtoa_r+0x71a>
 800c476:	9c08      	ldr	r4, [sp, #32]
 800c478:	9e00      	ldr	r6, [sp, #0]
 800c47a:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800c47c:	e728      	b.n	800c2d0 <_dtoa_r+0x730>
 800c47e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800c482:	e751      	b.n	800c328 <_dtoa_r+0x788>
 800c484:	9a08      	ldr	r2, [sp, #32]
 800c486:	9902      	ldr	r1, [sp, #8]
 800c488:	e750      	b.n	800c32c <_dtoa_r+0x78c>
 800c48a:	f8cd 8008 	str.w	r8, [sp, #8]
 800c48e:	e751      	b.n	800c334 <_dtoa_r+0x794>
 800c490:	2300      	movs	r3, #0
 800c492:	e779      	b.n	800c388 <_dtoa_r+0x7e8>
 800c494:	9b04      	ldr	r3, [sp, #16]
 800c496:	e777      	b.n	800c388 <_dtoa_r+0x7e8>
 800c498:	2300      	movs	r3, #0
 800c49a:	9308      	str	r3, [sp, #32]
 800c49c:	e779      	b.n	800c392 <_dtoa_r+0x7f2>
 800c49e:	d093      	beq.n	800c3c8 <_dtoa_r+0x828>
 800c4a0:	9a00      	ldr	r2, [sp, #0]
 800c4a2:	331c      	adds	r3, #28
 800c4a4:	441a      	add	r2, r3
 800c4a6:	9200      	str	r2, [sp, #0]
 800c4a8:	9a06      	ldr	r2, [sp, #24]
 800c4aa:	441a      	add	r2, r3
 800c4ac:	441e      	add	r6, r3
 800c4ae:	9206      	str	r2, [sp, #24]
 800c4b0:	e78a      	b.n	800c3c8 <_dtoa_r+0x828>
 800c4b2:	4603      	mov	r3, r0
 800c4b4:	e7f4      	b.n	800c4a0 <_dtoa_r+0x900>
 800c4b6:	9b03      	ldr	r3, [sp, #12]
 800c4b8:	2b00      	cmp	r3, #0
 800c4ba:	46b8      	mov	r8, r7
 800c4bc:	dc20      	bgt.n	800c500 <_dtoa_r+0x960>
 800c4be:	469b      	mov	fp, r3
 800c4c0:	9b07      	ldr	r3, [sp, #28]
 800c4c2:	2b02      	cmp	r3, #2
 800c4c4:	dd1e      	ble.n	800c504 <_dtoa_r+0x964>
 800c4c6:	f1bb 0f00 	cmp.w	fp, #0
 800c4ca:	f47f adb1 	bne.w	800c030 <_dtoa_r+0x490>
 800c4ce:	4621      	mov	r1, r4
 800c4d0:	465b      	mov	r3, fp
 800c4d2:	2205      	movs	r2, #5
 800c4d4:	4648      	mov	r0, r9
 800c4d6:	f000 f9df 	bl	800c898 <__multadd>
 800c4da:	4601      	mov	r1, r0
 800c4dc:	4604      	mov	r4, r0
 800c4de:	9802      	ldr	r0, [sp, #8]
 800c4e0:	f000 fc34 	bl	800cd4c <__mcmp>
 800c4e4:	2800      	cmp	r0, #0
 800c4e6:	f77f ada3 	ble.w	800c030 <_dtoa_r+0x490>
 800c4ea:	4656      	mov	r6, sl
 800c4ec:	2331      	movs	r3, #49	@ 0x31
 800c4ee:	f806 3b01 	strb.w	r3, [r6], #1
 800c4f2:	f108 0801 	add.w	r8, r8, #1
 800c4f6:	e59f      	b.n	800c038 <_dtoa_r+0x498>
 800c4f8:	9c03      	ldr	r4, [sp, #12]
 800c4fa:	46b8      	mov	r8, r7
 800c4fc:	4625      	mov	r5, r4
 800c4fe:	e7f4      	b.n	800c4ea <_dtoa_r+0x94a>
 800c500:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800c504:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c506:	2b00      	cmp	r3, #0
 800c508:	f000 8101 	beq.w	800c70e <_dtoa_r+0xb6e>
 800c50c:	2e00      	cmp	r6, #0
 800c50e:	dd05      	ble.n	800c51c <_dtoa_r+0x97c>
 800c510:	4629      	mov	r1, r5
 800c512:	4632      	mov	r2, r6
 800c514:	4648      	mov	r0, r9
 800c516:	f000 fbad 	bl	800cc74 <__lshift>
 800c51a:	4605      	mov	r5, r0
 800c51c:	9b08      	ldr	r3, [sp, #32]
 800c51e:	2b00      	cmp	r3, #0
 800c520:	d05c      	beq.n	800c5dc <_dtoa_r+0xa3c>
 800c522:	6869      	ldr	r1, [r5, #4]
 800c524:	4648      	mov	r0, r9
 800c526:	f000 f955 	bl	800c7d4 <_Balloc>
 800c52a:	4606      	mov	r6, r0
 800c52c:	b928      	cbnz	r0, 800c53a <_dtoa_r+0x99a>
 800c52e:	4b82      	ldr	r3, [pc, #520]	@ (800c738 <_dtoa_r+0xb98>)
 800c530:	4602      	mov	r2, r0
 800c532:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800c536:	f7ff bb4a 	b.w	800bbce <_dtoa_r+0x2e>
 800c53a:	692a      	ldr	r2, [r5, #16]
 800c53c:	3202      	adds	r2, #2
 800c53e:	0092      	lsls	r2, r2, #2
 800c540:	f105 010c 	add.w	r1, r5, #12
 800c544:	300c      	adds	r0, #12
 800c546:	f002 f86b 	bl	800e620 <memcpy>
 800c54a:	2201      	movs	r2, #1
 800c54c:	4631      	mov	r1, r6
 800c54e:	4648      	mov	r0, r9
 800c550:	f000 fb90 	bl	800cc74 <__lshift>
 800c554:	f10a 0301 	add.w	r3, sl, #1
 800c558:	9300      	str	r3, [sp, #0]
 800c55a:	eb0a 030b 	add.w	r3, sl, fp
 800c55e:	9308      	str	r3, [sp, #32]
 800c560:	9b04      	ldr	r3, [sp, #16]
 800c562:	f003 0301 	and.w	r3, r3, #1
 800c566:	462f      	mov	r7, r5
 800c568:	9306      	str	r3, [sp, #24]
 800c56a:	4605      	mov	r5, r0
 800c56c:	9b00      	ldr	r3, [sp, #0]
 800c56e:	9802      	ldr	r0, [sp, #8]
 800c570:	4621      	mov	r1, r4
 800c572:	f103 3bff 	add.w	fp, r3, #4294967295
 800c576:	f7ff fa89 	bl	800ba8c <quorem>
 800c57a:	4603      	mov	r3, r0
 800c57c:	3330      	adds	r3, #48	@ 0x30
 800c57e:	9003      	str	r0, [sp, #12]
 800c580:	4639      	mov	r1, r7
 800c582:	9802      	ldr	r0, [sp, #8]
 800c584:	9309      	str	r3, [sp, #36]	@ 0x24
 800c586:	f000 fbe1 	bl	800cd4c <__mcmp>
 800c58a:	462a      	mov	r2, r5
 800c58c:	9004      	str	r0, [sp, #16]
 800c58e:	4621      	mov	r1, r4
 800c590:	4648      	mov	r0, r9
 800c592:	f000 fbf7 	bl	800cd84 <__mdiff>
 800c596:	68c2      	ldr	r2, [r0, #12]
 800c598:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c59a:	4606      	mov	r6, r0
 800c59c:	bb02      	cbnz	r2, 800c5e0 <_dtoa_r+0xa40>
 800c59e:	4601      	mov	r1, r0
 800c5a0:	9802      	ldr	r0, [sp, #8]
 800c5a2:	f000 fbd3 	bl	800cd4c <__mcmp>
 800c5a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c5a8:	4602      	mov	r2, r0
 800c5aa:	4631      	mov	r1, r6
 800c5ac:	4648      	mov	r0, r9
 800c5ae:	920c      	str	r2, [sp, #48]	@ 0x30
 800c5b0:	9309      	str	r3, [sp, #36]	@ 0x24
 800c5b2:	f000 f94f 	bl	800c854 <_Bfree>
 800c5b6:	9b07      	ldr	r3, [sp, #28]
 800c5b8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800c5ba:	9e00      	ldr	r6, [sp, #0]
 800c5bc:	ea42 0103 	orr.w	r1, r2, r3
 800c5c0:	9b06      	ldr	r3, [sp, #24]
 800c5c2:	4319      	orrs	r1, r3
 800c5c4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c5c6:	d10d      	bne.n	800c5e4 <_dtoa_r+0xa44>
 800c5c8:	2b39      	cmp	r3, #57	@ 0x39
 800c5ca:	d027      	beq.n	800c61c <_dtoa_r+0xa7c>
 800c5cc:	9a04      	ldr	r2, [sp, #16]
 800c5ce:	2a00      	cmp	r2, #0
 800c5d0:	dd01      	ble.n	800c5d6 <_dtoa_r+0xa36>
 800c5d2:	9b03      	ldr	r3, [sp, #12]
 800c5d4:	3331      	adds	r3, #49	@ 0x31
 800c5d6:	f88b 3000 	strb.w	r3, [fp]
 800c5da:	e52e      	b.n	800c03a <_dtoa_r+0x49a>
 800c5dc:	4628      	mov	r0, r5
 800c5de:	e7b9      	b.n	800c554 <_dtoa_r+0x9b4>
 800c5e0:	2201      	movs	r2, #1
 800c5e2:	e7e2      	b.n	800c5aa <_dtoa_r+0xa0a>
 800c5e4:	9904      	ldr	r1, [sp, #16]
 800c5e6:	2900      	cmp	r1, #0
 800c5e8:	db04      	blt.n	800c5f4 <_dtoa_r+0xa54>
 800c5ea:	9807      	ldr	r0, [sp, #28]
 800c5ec:	4301      	orrs	r1, r0
 800c5ee:	9806      	ldr	r0, [sp, #24]
 800c5f0:	4301      	orrs	r1, r0
 800c5f2:	d120      	bne.n	800c636 <_dtoa_r+0xa96>
 800c5f4:	2a00      	cmp	r2, #0
 800c5f6:	ddee      	ble.n	800c5d6 <_dtoa_r+0xa36>
 800c5f8:	9902      	ldr	r1, [sp, #8]
 800c5fa:	9300      	str	r3, [sp, #0]
 800c5fc:	2201      	movs	r2, #1
 800c5fe:	4648      	mov	r0, r9
 800c600:	f000 fb38 	bl	800cc74 <__lshift>
 800c604:	4621      	mov	r1, r4
 800c606:	9002      	str	r0, [sp, #8]
 800c608:	f000 fba0 	bl	800cd4c <__mcmp>
 800c60c:	2800      	cmp	r0, #0
 800c60e:	9b00      	ldr	r3, [sp, #0]
 800c610:	dc02      	bgt.n	800c618 <_dtoa_r+0xa78>
 800c612:	d1e0      	bne.n	800c5d6 <_dtoa_r+0xa36>
 800c614:	07da      	lsls	r2, r3, #31
 800c616:	d5de      	bpl.n	800c5d6 <_dtoa_r+0xa36>
 800c618:	2b39      	cmp	r3, #57	@ 0x39
 800c61a:	d1da      	bne.n	800c5d2 <_dtoa_r+0xa32>
 800c61c:	2339      	movs	r3, #57	@ 0x39
 800c61e:	f88b 3000 	strb.w	r3, [fp]
 800c622:	4633      	mov	r3, r6
 800c624:	461e      	mov	r6, r3
 800c626:	3b01      	subs	r3, #1
 800c628:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800c62c:	2a39      	cmp	r2, #57	@ 0x39
 800c62e:	d04e      	beq.n	800c6ce <_dtoa_r+0xb2e>
 800c630:	3201      	adds	r2, #1
 800c632:	701a      	strb	r2, [r3, #0]
 800c634:	e501      	b.n	800c03a <_dtoa_r+0x49a>
 800c636:	2a00      	cmp	r2, #0
 800c638:	dd03      	ble.n	800c642 <_dtoa_r+0xaa2>
 800c63a:	2b39      	cmp	r3, #57	@ 0x39
 800c63c:	d0ee      	beq.n	800c61c <_dtoa_r+0xa7c>
 800c63e:	3301      	adds	r3, #1
 800c640:	e7c9      	b.n	800c5d6 <_dtoa_r+0xa36>
 800c642:	9a00      	ldr	r2, [sp, #0]
 800c644:	9908      	ldr	r1, [sp, #32]
 800c646:	f802 3c01 	strb.w	r3, [r2, #-1]
 800c64a:	428a      	cmp	r2, r1
 800c64c:	d028      	beq.n	800c6a0 <_dtoa_r+0xb00>
 800c64e:	9902      	ldr	r1, [sp, #8]
 800c650:	2300      	movs	r3, #0
 800c652:	220a      	movs	r2, #10
 800c654:	4648      	mov	r0, r9
 800c656:	f000 f91f 	bl	800c898 <__multadd>
 800c65a:	42af      	cmp	r7, r5
 800c65c:	9002      	str	r0, [sp, #8]
 800c65e:	f04f 0300 	mov.w	r3, #0
 800c662:	f04f 020a 	mov.w	r2, #10
 800c666:	4639      	mov	r1, r7
 800c668:	4648      	mov	r0, r9
 800c66a:	d107      	bne.n	800c67c <_dtoa_r+0xadc>
 800c66c:	f000 f914 	bl	800c898 <__multadd>
 800c670:	4607      	mov	r7, r0
 800c672:	4605      	mov	r5, r0
 800c674:	9b00      	ldr	r3, [sp, #0]
 800c676:	3301      	adds	r3, #1
 800c678:	9300      	str	r3, [sp, #0]
 800c67a:	e777      	b.n	800c56c <_dtoa_r+0x9cc>
 800c67c:	f000 f90c 	bl	800c898 <__multadd>
 800c680:	4629      	mov	r1, r5
 800c682:	4607      	mov	r7, r0
 800c684:	2300      	movs	r3, #0
 800c686:	220a      	movs	r2, #10
 800c688:	4648      	mov	r0, r9
 800c68a:	f000 f905 	bl	800c898 <__multadd>
 800c68e:	4605      	mov	r5, r0
 800c690:	e7f0      	b.n	800c674 <_dtoa_r+0xad4>
 800c692:	f1bb 0f00 	cmp.w	fp, #0
 800c696:	bfcc      	ite	gt
 800c698:	465e      	movgt	r6, fp
 800c69a:	2601      	movle	r6, #1
 800c69c:	4456      	add	r6, sl
 800c69e:	2700      	movs	r7, #0
 800c6a0:	9902      	ldr	r1, [sp, #8]
 800c6a2:	9300      	str	r3, [sp, #0]
 800c6a4:	2201      	movs	r2, #1
 800c6a6:	4648      	mov	r0, r9
 800c6a8:	f000 fae4 	bl	800cc74 <__lshift>
 800c6ac:	4621      	mov	r1, r4
 800c6ae:	9002      	str	r0, [sp, #8]
 800c6b0:	f000 fb4c 	bl	800cd4c <__mcmp>
 800c6b4:	2800      	cmp	r0, #0
 800c6b6:	dcb4      	bgt.n	800c622 <_dtoa_r+0xa82>
 800c6b8:	d102      	bne.n	800c6c0 <_dtoa_r+0xb20>
 800c6ba:	9b00      	ldr	r3, [sp, #0]
 800c6bc:	07db      	lsls	r3, r3, #31
 800c6be:	d4b0      	bmi.n	800c622 <_dtoa_r+0xa82>
 800c6c0:	4633      	mov	r3, r6
 800c6c2:	461e      	mov	r6, r3
 800c6c4:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c6c8:	2a30      	cmp	r2, #48	@ 0x30
 800c6ca:	d0fa      	beq.n	800c6c2 <_dtoa_r+0xb22>
 800c6cc:	e4b5      	b.n	800c03a <_dtoa_r+0x49a>
 800c6ce:	459a      	cmp	sl, r3
 800c6d0:	d1a8      	bne.n	800c624 <_dtoa_r+0xa84>
 800c6d2:	2331      	movs	r3, #49	@ 0x31
 800c6d4:	f108 0801 	add.w	r8, r8, #1
 800c6d8:	f88a 3000 	strb.w	r3, [sl]
 800c6dc:	e4ad      	b.n	800c03a <_dtoa_r+0x49a>
 800c6de:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800c6e0:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800c73c <_dtoa_r+0xb9c>
 800c6e4:	b11b      	cbz	r3, 800c6ee <_dtoa_r+0xb4e>
 800c6e6:	f10a 0308 	add.w	r3, sl, #8
 800c6ea:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800c6ec:	6013      	str	r3, [r2, #0]
 800c6ee:	4650      	mov	r0, sl
 800c6f0:	b017      	add	sp, #92	@ 0x5c
 800c6f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c6f6:	9b07      	ldr	r3, [sp, #28]
 800c6f8:	2b01      	cmp	r3, #1
 800c6fa:	f77f ae2e 	ble.w	800c35a <_dtoa_r+0x7ba>
 800c6fe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c700:	9308      	str	r3, [sp, #32]
 800c702:	2001      	movs	r0, #1
 800c704:	e64d      	b.n	800c3a2 <_dtoa_r+0x802>
 800c706:	f1bb 0f00 	cmp.w	fp, #0
 800c70a:	f77f aed9 	ble.w	800c4c0 <_dtoa_r+0x920>
 800c70e:	4656      	mov	r6, sl
 800c710:	9802      	ldr	r0, [sp, #8]
 800c712:	4621      	mov	r1, r4
 800c714:	f7ff f9ba 	bl	800ba8c <quorem>
 800c718:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800c71c:	f806 3b01 	strb.w	r3, [r6], #1
 800c720:	eba6 020a 	sub.w	r2, r6, sl
 800c724:	4593      	cmp	fp, r2
 800c726:	ddb4      	ble.n	800c692 <_dtoa_r+0xaf2>
 800c728:	9902      	ldr	r1, [sp, #8]
 800c72a:	2300      	movs	r3, #0
 800c72c:	220a      	movs	r2, #10
 800c72e:	4648      	mov	r0, r9
 800c730:	f000 f8b2 	bl	800c898 <__multadd>
 800c734:	9002      	str	r0, [sp, #8]
 800c736:	e7eb      	b.n	800c710 <_dtoa_r+0xb70>
 800c738:	0800f089 	.word	0x0800f089
 800c73c:	0800f00d 	.word	0x0800f00d

0800c740 <_free_r>:
 800c740:	b538      	push	{r3, r4, r5, lr}
 800c742:	4605      	mov	r5, r0
 800c744:	2900      	cmp	r1, #0
 800c746:	d041      	beq.n	800c7cc <_free_r+0x8c>
 800c748:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c74c:	1f0c      	subs	r4, r1, #4
 800c74e:	2b00      	cmp	r3, #0
 800c750:	bfb8      	it	lt
 800c752:	18e4      	addlt	r4, r4, r3
 800c754:	f7fe f868 	bl	800a828 <__malloc_lock>
 800c758:	4a1d      	ldr	r2, [pc, #116]	@ (800c7d0 <_free_r+0x90>)
 800c75a:	6813      	ldr	r3, [r2, #0]
 800c75c:	b933      	cbnz	r3, 800c76c <_free_r+0x2c>
 800c75e:	6063      	str	r3, [r4, #4]
 800c760:	6014      	str	r4, [r2, #0]
 800c762:	4628      	mov	r0, r5
 800c764:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c768:	f7fe b864 	b.w	800a834 <__malloc_unlock>
 800c76c:	42a3      	cmp	r3, r4
 800c76e:	d908      	bls.n	800c782 <_free_r+0x42>
 800c770:	6820      	ldr	r0, [r4, #0]
 800c772:	1821      	adds	r1, r4, r0
 800c774:	428b      	cmp	r3, r1
 800c776:	bf01      	itttt	eq
 800c778:	6819      	ldreq	r1, [r3, #0]
 800c77a:	685b      	ldreq	r3, [r3, #4]
 800c77c:	1809      	addeq	r1, r1, r0
 800c77e:	6021      	streq	r1, [r4, #0]
 800c780:	e7ed      	b.n	800c75e <_free_r+0x1e>
 800c782:	461a      	mov	r2, r3
 800c784:	685b      	ldr	r3, [r3, #4]
 800c786:	b10b      	cbz	r3, 800c78c <_free_r+0x4c>
 800c788:	42a3      	cmp	r3, r4
 800c78a:	d9fa      	bls.n	800c782 <_free_r+0x42>
 800c78c:	6811      	ldr	r1, [r2, #0]
 800c78e:	1850      	adds	r0, r2, r1
 800c790:	42a0      	cmp	r0, r4
 800c792:	d10b      	bne.n	800c7ac <_free_r+0x6c>
 800c794:	6820      	ldr	r0, [r4, #0]
 800c796:	4401      	add	r1, r0
 800c798:	1850      	adds	r0, r2, r1
 800c79a:	4283      	cmp	r3, r0
 800c79c:	6011      	str	r1, [r2, #0]
 800c79e:	d1e0      	bne.n	800c762 <_free_r+0x22>
 800c7a0:	6818      	ldr	r0, [r3, #0]
 800c7a2:	685b      	ldr	r3, [r3, #4]
 800c7a4:	6053      	str	r3, [r2, #4]
 800c7a6:	4408      	add	r0, r1
 800c7a8:	6010      	str	r0, [r2, #0]
 800c7aa:	e7da      	b.n	800c762 <_free_r+0x22>
 800c7ac:	d902      	bls.n	800c7b4 <_free_r+0x74>
 800c7ae:	230c      	movs	r3, #12
 800c7b0:	602b      	str	r3, [r5, #0]
 800c7b2:	e7d6      	b.n	800c762 <_free_r+0x22>
 800c7b4:	6820      	ldr	r0, [r4, #0]
 800c7b6:	1821      	adds	r1, r4, r0
 800c7b8:	428b      	cmp	r3, r1
 800c7ba:	bf04      	itt	eq
 800c7bc:	6819      	ldreq	r1, [r3, #0]
 800c7be:	685b      	ldreq	r3, [r3, #4]
 800c7c0:	6063      	str	r3, [r4, #4]
 800c7c2:	bf04      	itt	eq
 800c7c4:	1809      	addeq	r1, r1, r0
 800c7c6:	6021      	streq	r1, [r4, #0]
 800c7c8:	6054      	str	r4, [r2, #4]
 800c7ca:	e7ca      	b.n	800c762 <_free_r+0x22>
 800c7cc:	bd38      	pop	{r3, r4, r5, pc}
 800c7ce:	bf00      	nop
 800c7d0:	20000ef4 	.word	0x20000ef4

0800c7d4 <_Balloc>:
 800c7d4:	b570      	push	{r4, r5, r6, lr}
 800c7d6:	69c6      	ldr	r6, [r0, #28]
 800c7d8:	4604      	mov	r4, r0
 800c7da:	460d      	mov	r5, r1
 800c7dc:	b976      	cbnz	r6, 800c7fc <_Balloc+0x28>
 800c7de:	2010      	movs	r0, #16
 800c7e0:	f7fd ff70 	bl	800a6c4 <malloc>
 800c7e4:	4602      	mov	r2, r0
 800c7e6:	61e0      	str	r0, [r4, #28]
 800c7e8:	b920      	cbnz	r0, 800c7f4 <_Balloc+0x20>
 800c7ea:	4b18      	ldr	r3, [pc, #96]	@ (800c84c <_Balloc+0x78>)
 800c7ec:	4818      	ldr	r0, [pc, #96]	@ (800c850 <_Balloc+0x7c>)
 800c7ee:	216b      	movs	r1, #107	@ 0x6b
 800c7f0:	f001 ff2e 	bl	800e650 <__assert_func>
 800c7f4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c7f8:	6006      	str	r6, [r0, #0]
 800c7fa:	60c6      	str	r6, [r0, #12]
 800c7fc:	69e6      	ldr	r6, [r4, #28]
 800c7fe:	68f3      	ldr	r3, [r6, #12]
 800c800:	b183      	cbz	r3, 800c824 <_Balloc+0x50>
 800c802:	69e3      	ldr	r3, [r4, #28]
 800c804:	68db      	ldr	r3, [r3, #12]
 800c806:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c80a:	b9b8      	cbnz	r0, 800c83c <_Balloc+0x68>
 800c80c:	2101      	movs	r1, #1
 800c80e:	fa01 f605 	lsl.w	r6, r1, r5
 800c812:	1d72      	adds	r2, r6, #5
 800c814:	0092      	lsls	r2, r2, #2
 800c816:	4620      	mov	r0, r4
 800c818:	f001 ff38 	bl	800e68c <_calloc_r>
 800c81c:	b160      	cbz	r0, 800c838 <_Balloc+0x64>
 800c81e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c822:	e00e      	b.n	800c842 <_Balloc+0x6e>
 800c824:	2221      	movs	r2, #33	@ 0x21
 800c826:	2104      	movs	r1, #4
 800c828:	4620      	mov	r0, r4
 800c82a:	f001 ff2f 	bl	800e68c <_calloc_r>
 800c82e:	69e3      	ldr	r3, [r4, #28]
 800c830:	60f0      	str	r0, [r6, #12]
 800c832:	68db      	ldr	r3, [r3, #12]
 800c834:	2b00      	cmp	r3, #0
 800c836:	d1e4      	bne.n	800c802 <_Balloc+0x2e>
 800c838:	2000      	movs	r0, #0
 800c83a:	bd70      	pop	{r4, r5, r6, pc}
 800c83c:	6802      	ldr	r2, [r0, #0]
 800c83e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c842:	2300      	movs	r3, #0
 800c844:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c848:	e7f7      	b.n	800c83a <_Balloc+0x66>
 800c84a:	bf00      	nop
 800c84c:	0800f01a 	.word	0x0800f01a
 800c850:	0800f09a 	.word	0x0800f09a

0800c854 <_Bfree>:
 800c854:	b570      	push	{r4, r5, r6, lr}
 800c856:	69c6      	ldr	r6, [r0, #28]
 800c858:	4605      	mov	r5, r0
 800c85a:	460c      	mov	r4, r1
 800c85c:	b976      	cbnz	r6, 800c87c <_Bfree+0x28>
 800c85e:	2010      	movs	r0, #16
 800c860:	f7fd ff30 	bl	800a6c4 <malloc>
 800c864:	4602      	mov	r2, r0
 800c866:	61e8      	str	r0, [r5, #28]
 800c868:	b920      	cbnz	r0, 800c874 <_Bfree+0x20>
 800c86a:	4b09      	ldr	r3, [pc, #36]	@ (800c890 <_Bfree+0x3c>)
 800c86c:	4809      	ldr	r0, [pc, #36]	@ (800c894 <_Bfree+0x40>)
 800c86e:	218f      	movs	r1, #143	@ 0x8f
 800c870:	f001 feee 	bl	800e650 <__assert_func>
 800c874:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c878:	6006      	str	r6, [r0, #0]
 800c87a:	60c6      	str	r6, [r0, #12]
 800c87c:	b13c      	cbz	r4, 800c88e <_Bfree+0x3a>
 800c87e:	69eb      	ldr	r3, [r5, #28]
 800c880:	6862      	ldr	r2, [r4, #4]
 800c882:	68db      	ldr	r3, [r3, #12]
 800c884:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c888:	6021      	str	r1, [r4, #0]
 800c88a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c88e:	bd70      	pop	{r4, r5, r6, pc}
 800c890:	0800f01a 	.word	0x0800f01a
 800c894:	0800f09a 	.word	0x0800f09a

0800c898 <__multadd>:
 800c898:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c89c:	690d      	ldr	r5, [r1, #16]
 800c89e:	4607      	mov	r7, r0
 800c8a0:	460c      	mov	r4, r1
 800c8a2:	461e      	mov	r6, r3
 800c8a4:	f101 0c14 	add.w	ip, r1, #20
 800c8a8:	2000      	movs	r0, #0
 800c8aa:	f8dc 3000 	ldr.w	r3, [ip]
 800c8ae:	b299      	uxth	r1, r3
 800c8b0:	fb02 6101 	mla	r1, r2, r1, r6
 800c8b4:	0c1e      	lsrs	r6, r3, #16
 800c8b6:	0c0b      	lsrs	r3, r1, #16
 800c8b8:	fb02 3306 	mla	r3, r2, r6, r3
 800c8bc:	b289      	uxth	r1, r1
 800c8be:	3001      	adds	r0, #1
 800c8c0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c8c4:	4285      	cmp	r5, r0
 800c8c6:	f84c 1b04 	str.w	r1, [ip], #4
 800c8ca:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c8ce:	dcec      	bgt.n	800c8aa <__multadd+0x12>
 800c8d0:	b30e      	cbz	r6, 800c916 <__multadd+0x7e>
 800c8d2:	68a3      	ldr	r3, [r4, #8]
 800c8d4:	42ab      	cmp	r3, r5
 800c8d6:	dc19      	bgt.n	800c90c <__multadd+0x74>
 800c8d8:	6861      	ldr	r1, [r4, #4]
 800c8da:	4638      	mov	r0, r7
 800c8dc:	3101      	adds	r1, #1
 800c8de:	f7ff ff79 	bl	800c7d4 <_Balloc>
 800c8e2:	4680      	mov	r8, r0
 800c8e4:	b928      	cbnz	r0, 800c8f2 <__multadd+0x5a>
 800c8e6:	4602      	mov	r2, r0
 800c8e8:	4b0c      	ldr	r3, [pc, #48]	@ (800c91c <__multadd+0x84>)
 800c8ea:	480d      	ldr	r0, [pc, #52]	@ (800c920 <__multadd+0x88>)
 800c8ec:	21ba      	movs	r1, #186	@ 0xba
 800c8ee:	f001 feaf 	bl	800e650 <__assert_func>
 800c8f2:	6922      	ldr	r2, [r4, #16]
 800c8f4:	3202      	adds	r2, #2
 800c8f6:	f104 010c 	add.w	r1, r4, #12
 800c8fa:	0092      	lsls	r2, r2, #2
 800c8fc:	300c      	adds	r0, #12
 800c8fe:	f001 fe8f 	bl	800e620 <memcpy>
 800c902:	4621      	mov	r1, r4
 800c904:	4638      	mov	r0, r7
 800c906:	f7ff ffa5 	bl	800c854 <_Bfree>
 800c90a:	4644      	mov	r4, r8
 800c90c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c910:	3501      	adds	r5, #1
 800c912:	615e      	str	r6, [r3, #20]
 800c914:	6125      	str	r5, [r4, #16]
 800c916:	4620      	mov	r0, r4
 800c918:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c91c:	0800f089 	.word	0x0800f089
 800c920:	0800f09a 	.word	0x0800f09a

0800c924 <__s2b>:
 800c924:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c928:	460c      	mov	r4, r1
 800c92a:	4615      	mov	r5, r2
 800c92c:	461f      	mov	r7, r3
 800c92e:	2209      	movs	r2, #9
 800c930:	3308      	adds	r3, #8
 800c932:	4606      	mov	r6, r0
 800c934:	fb93 f3f2 	sdiv	r3, r3, r2
 800c938:	2100      	movs	r1, #0
 800c93a:	2201      	movs	r2, #1
 800c93c:	429a      	cmp	r2, r3
 800c93e:	db09      	blt.n	800c954 <__s2b+0x30>
 800c940:	4630      	mov	r0, r6
 800c942:	f7ff ff47 	bl	800c7d4 <_Balloc>
 800c946:	b940      	cbnz	r0, 800c95a <__s2b+0x36>
 800c948:	4602      	mov	r2, r0
 800c94a:	4b19      	ldr	r3, [pc, #100]	@ (800c9b0 <__s2b+0x8c>)
 800c94c:	4819      	ldr	r0, [pc, #100]	@ (800c9b4 <__s2b+0x90>)
 800c94e:	21d3      	movs	r1, #211	@ 0xd3
 800c950:	f001 fe7e 	bl	800e650 <__assert_func>
 800c954:	0052      	lsls	r2, r2, #1
 800c956:	3101      	adds	r1, #1
 800c958:	e7f0      	b.n	800c93c <__s2b+0x18>
 800c95a:	9b08      	ldr	r3, [sp, #32]
 800c95c:	6143      	str	r3, [r0, #20]
 800c95e:	2d09      	cmp	r5, #9
 800c960:	f04f 0301 	mov.w	r3, #1
 800c964:	6103      	str	r3, [r0, #16]
 800c966:	dd16      	ble.n	800c996 <__s2b+0x72>
 800c968:	f104 0909 	add.w	r9, r4, #9
 800c96c:	46c8      	mov	r8, r9
 800c96e:	442c      	add	r4, r5
 800c970:	f818 3b01 	ldrb.w	r3, [r8], #1
 800c974:	4601      	mov	r1, r0
 800c976:	3b30      	subs	r3, #48	@ 0x30
 800c978:	220a      	movs	r2, #10
 800c97a:	4630      	mov	r0, r6
 800c97c:	f7ff ff8c 	bl	800c898 <__multadd>
 800c980:	45a0      	cmp	r8, r4
 800c982:	d1f5      	bne.n	800c970 <__s2b+0x4c>
 800c984:	f1a5 0408 	sub.w	r4, r5, #8
 800c988:	444c      	add	r4, r9
 800c98a:	1b2d      	subs	r5, r5, r4
 800c98c:	1963      	adds	r3, r4, r5
 800c98e:	42bb      	cmp	r3, r7
 800c990:	db04      	blt.n	800c99c <__s2b+0x78>
 800c992:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c996:	340a      	adds	r4, #10
 800c998:	2509      	movs	r5, #9
 800c99a:	e7f6      	b.n	800c98a <__s2b+0x66>
 800c99c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800c9a0:	4601      	mov	r1, r0
 800c9a2:	3b30      	subs	r3, #48	@ 0x30
 800c9a4:	220a      	movs	r2, #10
 800c9a6:	4630      	mov	r0, r6
 800c9a8:	f7ff ff76 	bl	800c898 <__multadd>
 800c9ac:	e7ee      	b.n	800c98c <__s2b+0x68>
 800c9ae:	bf00      	nop
 800c9b0:	0800f089 	.word	0x0800f089
 800c9b4:	0800f09a 	.word	0x0800f09a

0800c9b8 <__hi0bits>:
 800c9b8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800c9bc:	4603      	mov	r3, r0
 800c9be:	bf36      	itet	cc
 800c9c0:	0403      	lslcc	r3, r0, #16
 800c9c2:	2000      	movcs	r0, #0
 800c9c4:	2010      	movcc	r0, #16
 800c9c6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c9ca:	bf3c      	itt	cc
 800c9cc:	021b      	lslcc	r3, r3, #8
 800c9ce:	3008      	addcc	r0, #8
 800c9d0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c9d4:	bf3c      	itt	cc
 800c9d6:	011b      	lslcc	r3, r3, #4
 800c9d8:	3004      	addcc	r0, #4
 800c9da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c9de:	bf3c      	itt	cc
 800c9e0:	009b      	lslcc	r3, r3, #2
 800c9e2:	3002      	addcc	r0, #2
 800c9e4:	2b00      	cmp	r3, #0
 800c9e6:	db05      	blt.n	800c9f4 <__hi0bits+0x3c>
 800c9e8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800c9ec:	f100 0001 	add.w	r0, r0, #1
 800c9f0:	bf08      	it	eq
 800c9f2:	2020      	moveq	r0, #32
 800c9f4:	4770      	bx	lr

0800c9f6 <__lo0bits>:
 800c9f6:	6803      	ldr	r3, [r0, #0]
 800c9f8:	4602      	mov	r2, r0
 800c9fa:	f013 0007 	ands.w	r0, r3, #7
 800c9fe:	d00b      	beq.n	800ca18 <__lo0bits+0x22>
 800ca00:	07d9      	lsls	r1, r3, #31
 800ca02:	d421      	bmi.n	800ca48 <__lo0bits+0x52>
 800ca04:	0798      	lsls	r0, r3, #30
 800ca06:	bf49      	itett	mi
 800ca08:	085b      	lsrmi	r3, r3, #1
 800ca0a:	089b      	lsrpl	r3, r3, #2
 800ca0c:	2001      	movmi	r0, #1
 800ca0e:	6013      	strmi	r3, [r2, #0]
 800ca10:	bf5c      	itt	pl
 800ca12:	6013      	strpl	r3, [r2, #0]
 800ca14:	2002      	movpl	r0, #2
 800ca16:	4770      	bx	lr
 800ca18:	b299      	uxth	r1, r3
 800ca1a:	b909      	cbnz	r1, 800ca20 <__lo0bits+0x2a>
 800ca1c:	0c1b      	lsrs	r3, r3, #16
 800ca1e:	2010      	movs	r0, #16
 800ca20:	b2d9      	uxtb	r1, r3
 800ca22:	b909      	cbnz	r1, 800ca28 <__lo0bits+0x32>
 800ca24:	3008      	adds	r0, #8
 800ca26:	0a1b      	lsrs	r3, r3, #8
 800ca28:	0719      	lsls	r1, r3, #28
 800ca2a:	bf04      	itt	eq
 800ca2c:	091b      	lsreq	r3, r3, #4
 800ca2e:	3004      	addeq	r0, #4
 800ca30:	0799      	lsls	r1, r3, #30
 800ca32:	bf04      	itt	eq
 800ca34:	089b      	lsreq	r3, r3, #2
 800ca36:	3002      	addeq	r0, #2
 800ca38:	07d9      	lsls	r1, r3, #31
 800ca3a:	d403      	bmi.n	800ca44 <__lo0bits+0x4e>
 800ca3c:	085b      	lsrs	r3, r3, #1
 800ca3e:	f100 0001 	add.w	r0, r0, #1
 800ca42:	d003      	beq.n	800ca4c <__lo0bits+0x56>
 800ca44:	6013      	str	r3, [r2, #0]
 800ca46:	4770      	bx	lr
 800ca48:	2000      	movs	r0, #0
 800ca4a:	4770      	bx	lr
 800ca4c:	2020      	movs	r0, #32
 800ca4e:	4770      	bx	lr

0800ca50 <__i2b>:
 800ca50:	b510      	push	{r4, lr}
 800ca52:	460c      	mov	r4, r1
 800ca54:	2101      	movs	r1, #1
 800ca56:	f7ff febd 	bl	800c7d4 <_Balloc>
 800ca5a:	4602      	mov	r2, r0
 800ca5c:	b928      	cbnz	r0, 800ca6a <__i2b+0x1a>
 800ca5e:	4b05      	ldr	r3, [pc, #20]	@ (800ca74 <__i2b+0x24>)
 800ca60:	4805      	ldr	r0, [pc, #20]	@ (800ca78 <__i2b+0x28>)
 800ca62:	f240 1145 	movw	r1, #325	@ 0x145
 800ca66:	f001 fdf3 	bl	800e650 <__assert_func>
 800ca6a:	2301      	movs	r3, #1
 800ca6c:	6144      	str	r4, [r0, #20]
 800ca6e:	6103      	str	r3, [r0, #16]
 800ca70:	bd10      	pop	{r4, pc}
 800ca72:	bf00      	nop
 800ca74:	0800f089 	.word	0x0800f089
 800ca78:	0800f09a 	.word	0x0800f09a

0800ca7c <__multiply>:
 800ca7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca80:	4617      	mov	r7, r2
 800ca82:	690a      	ldr	r2, [r1, #16]
 800ca84:	693b      	ldr	r3, [r7, #16]
 800ca86:	429a      	cmp	r2, r3
 800ca88:	bfa8      	it	ge
 800ca8a:	463b      	movge	r3, r7
 800ca8c:	4689      	mov	r9, r1
 800ca8e:	bfa4      	itt	ge
 800ca90:	460f      	movge	r7, r1
 800ca92:	4699      	movge	r9, r3
 800ca94:	693d      	ldr	r5, [r7, #16]
 800ca96:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800ca9a:	68bb      	ldr	r3, [r7, #8]
 800ca9c:	6879      	ldr	r1, [r7, #4]
 800ca9e:	eb05 060a 	add.w	r6, r5, sl
 800caa2:	42b3      	cmp	r3, r6
 800caa4:	b085      	sub	sp, #20
 800caa6:	bfb8      	it	lt
 800caa8:	3101      	addlt	r1, #1
 800caaa:	f7ff fe93 	bl	800c7d4 <_Balloc>
 800caae:	b930      	cbnz	r0, 800cabe <__multiply+0x42>
 800cab0:	4602      	mov	r2, r0
 800cab2:	4b41      	ldr	r3, [pc, #260]	@ (800cbb8 <__multiply+0x13c>)
 800cab4:	4841      	ldr	r0, [pc, #260]	@ (800cbbc <__multiply+0x140>)
 800cab6:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800caba:	f001 fdc9 	bl	800e650 <__assert_func>
 800cabe:	f100 0414 	add.w	r4, r0, #20
 800cac2:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800cac6:	4623      	mov	r3, r4
 800cac8:	2200      	movs	r2, #0
 800caca:	4573      	cmp	r3, lr
 800cacc:	d320      	bcc.n	800cb10 <__multiply+0x94>
 800cace:	f107 0814 	add.w	r8, r7, #20
 800cad2:	f109 0114 	add.w	r1, r9, #20
 800cad6:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800cada:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800cade:	9302      	str	r3, [sp, #8]
 800cae0:	1beb      	subs	r3, r5, r7
 800cae2:	3b15      	subs	r3, #21
 800cae4:	f023 0303 	bic.w	r3, r3, #3
 800cae8:	3304      	adds	r3, #4
 800caea:	3715      	adds	r7, #21
 800caec:	42bd      	cmp	r5, r7
 800caee:	bf38      	it	cc
 800caf0:	2304      	movcc	r3, #4
 800caf2:	9301      	str	r3, [sp, #4]
 800caf4:	9b02      	ldr	r3, [sp, #8]
 800caf6:	9103      	str	r1, [sp, #12]
 800caf8:	428b      	cmp	r3, r1
 800cafa:	d80c      	bhi.n	800cb16 <__multiply+0x9a>
 800cafc:	2e00      	cmp	r6, #0
 800cafe:	dd03      	ble.n	800cb08 <__multiply+0x8c>
 800cb00:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800cb04:	2b00      	cmp	r3, #0
 800cb06:	d055      	beq.n	800cbb4 <__multiply+0x138>
 800cb08:	6106      	str	r6, [r0, #16]
 800cb0a:	b005      	add	sp, #20
 800cb0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb10:	f843 2b04 	str.w	r2, [r3], #4
 800cb14:	e7d9      	b.n	800caca <__multiply+0x4e>
 800cb16:	f8b1 a000 	ldrh.w	sl, [r1]
 800cb1a:	f1ba 0f00 	cmp.w	sl, #0
 800cb1e:	d01f      	beq.n	800cb60 <__multiply+0xe4>
 800cb20:	46c4      	mov	ip, r8
 800cb22:	46a1      	mov	r9, r4
 800cb24:	2700      	movs	r7, #0
 800cb26:	f85c 2b04 	ldr.w	r2, [ip], #4
 800cb2a:	f8d9 3000 	ldr.w	r3, [r9]
 800cb2e:	fa1f fb82 	uxth.w	fp, r2
 800cb32:	b29b      	uxth	r3, r3
 800cb34:	fb0a 330b 	mla	r3, sl, fp, r3
 800cb38:	443b      	add	r3, r7
 800cb3a:	f8d9 7000 	ldr.w	r7, [r9]
 800cb3e:	0c12      	lsrs	r2, r2, #16
 800cb40:	0c3f      	lsrs	r7, r7, #16
 800cb42:	fb0a 7202 	mla	r2, sl, r2, r7
 800cb46:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800cb4a:	b29b      	uxth	r3, r3
 800cb4c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800cb50:	4565      	cmp	r5, ip
 800cb52:	f849 3b04 	str.w	r3, [r9], #4
 800cb56:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800cb5a:	d8e4      	bhi.n	800cb26 <__multiply+0xaa>
 800cb5c:	9b01      	ldr	r3, [sp, #4]
 800cb5e:	50e7      	str	r7, [r4, r3]
 800cb60:	9b03      	ldr	r3, [sp, #12]
 800cb62:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800cb66:	3104      	adds	r1, #4
 800cb68:	f1b9 0f00 	cmp.w	r9, #0
 800cb6c:	d020      	beq.n	800cbb0 <__multiply+0x134>
 800cb6e:	6823      	ldr	r3, [r4, #0]
 800cb70:	4647      	mov	r7, r8
 800cb72:	46a4      	mov	ip, r4
 800cb74:	f04f 0a00 	mov.w	sl, #0
 800cb78:	f8b7 b000 	ldrh.w	fp, [r7]
 800cb7c:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800cb80:	fb09 220b 	mla	r2, r9, fp, r2
 800cb84:	4452      	add	r2, sl
 800cb86:	b29b      	uxth	r3, r3
 800cb88:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800cb8c:	f84c 3b04 	str.w	r3, [ip], #4
 800cb90:	f857 3b04 	ldr.w	r3, [r7], #4
 800cb94:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800cb98:	f8bc 3000 	ldrh.w	r3, [ip]
 800cb9c:	fb09 330a 	mla	r3, r9, sl, r3
 800cba0:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800cba4:	42bd      	cmp	r5, r7
 800cba6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800cbaa:	d8e5      	bhi.n	800cb78 <__multiply+0xfc>
 800cbac:	9a01      	ldr	r2, [sp, #4]
 800cbae:	50a3      	str	r3, [r4, r2]
 800cbb0:	3404      	adds	r4, #4
 800cbb2:	e79f      	b.n	800caf4 <__multiply+0x78>
 800cbb4:	3e01      	subs	r6, #1
 800cbb6:	e7a1      	b.n	800cafc <__multiply+0x80>
 800cbb8:	0800f089 	.word	0x0800f089
 800cbbc:	0800f09a 	.word	0x0800f09a

0800cbc0 <__pow5mult>:
 800cbc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cbc4:	4615      	mov	r5, r2
 800cbc6:	f012 0203 	ands.w	r2, r2, #3
 800cbca:	4607      	mov	r7, r0
 800cbcc:	460e      	mov	r6, r1
 800cbce:	d007      	beq.n	800cbe0 <__pow5mult+0x20>
 800cbd0:	4c25      	ldr	r4, [pc, #148]	@ (800cc68 <__pow5mult+0xa8>)
 800cbd2:	3a01      	subs	r2, #1
 800cbd4:	2300      	movs	r3, #0
 800cbd6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800cbda:	f7ff fe5d 	bl	800c898 <__multadd>
 800cbde:	4606      	mov	r6, r0
 800cbe0:	10ad      	asrs	r5, r5, #2
 800cbe2:	d03d      	beq.n	800cc60 <__pow5mult+0xa0>
 800cbe4:	69fc      	ldr	r4, [r7, #28]
 800cbe6:	b97c      	cbnz	r4, 800cc08 <__pow5mult+0x48>
 800cbe8:	2010      	movs	r0, #16
 800cbea:	f7fd fd6b 	bl	800a6c4 <malloc>
 800cbee:	4602      	mov	r2, r0
 800cbf0:	61f8      	str	r0, [r7, #28]
 800cbf2:	b928      	cbnz	r0, 800cc00 <__pow5mult+0x40>
 800cbf4:	4b1d      	ldr	r3, [pc, #116]	@ (800cc6c <__pow5mult+0xac>)
 800cbf6:	481e      	ldr	r0, [pc, #120]	@ (800cc70 <__pow5mult+0xb0>)
 800cbf8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800cbfc:	f001 fd28 	bl	800e650 <__assert_func>
 800cc00:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800cc04:	6004      	str	r4, [r0, #0]
 800cc06:	60c4      	str	r4, [r0, #12]
 800cc08:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800cc0c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800cc10:	b94c      	cbnz	r4, 800cc26 <__pow5mult+0x66>
 800cc12:	f240 2171 	movw	r1, #625	@ 0x271
 800cc16:	4638      	mov	r0, r7
 800cc18:	f7ff ff1a 	bl	800ca50 <__i2b>
 800cc1c:	2300      	movs	r3, #0
 800cc1e:	f8c8 0008 	str.w	r0, [r8, #8]
 800cc22:	4604      	mov	r4, r0
 800cc24:	6003      	str	r3, [r0, #0]
 800cc26:	f04f 0900 	mov.w	r9, #0
 800cc2a:	07eb      	lsls	r3, r5, #31
 800cc2c:	d50a      	bpl.n	800cc44 <__pow5mult+0x84>
 800cc2e:	4631      	mov	r1, r6
 800cc30:	4622      	mov	r2, r4
 800cc32:	4638      	mov	r0, r7
 800cc34:	f7ff ff22 	bl	800ca7c <__multiply>
 800cc38:	4631      	mov	r1, r6
 800cc3a:	4680      	mov	r8, r0
 800cc3c:	4638      	mov	r0, r7
 800cc3e:	f7ff fe09 	bl	800c854 <_Bfree>
 800cc42:	4646      	mov	r6, r8
 800cc44:	106d      	asrs	r5, r5, #1
 800cc46:	d00b      	beq.n	800cc60 <__pow5mult+0xa0>
 800cc48:	6820      	ldr	r0, [r4, #0]
 800cc4a:	b938      	cbnz	r0, 800cc5c <__pow5mult+0x9c>
 800cc4c:	4622      	mov	r2, r4
 800cc4e:	4621      	mov	r1, r4
 800cc50:	4638      	mov	r0, r7
 800cc52:	f7ff ff13 	bl	800ca7c <__multiply>
 800cc56:	6020      	str	r0, [r4, #0]
 800cc58:	f8c0 9000 	str.w	r9, [r0]
 800cc5c:	4604      	mov	r4, r0
 800cc5e:	e7e4      	b.n	800cc2a <__pow5mult+0x6a>
 800cc60:	4630      	mov	r0, r6
 800cc62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cc66:	bf00      	nop
 800cc68:	0800f1ac 	.word	0x0800f1ac
 800cc6c:	0800f01a 	.word	0x0800f01a
 800cc70:	0800f09a 	.word	0x0800f09a

0800cc74 <__lshift>:
 800cc74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cc78:	460c      	mov	r4, r1
 800cc7a:	6849      	ldr	r1, [r1, #4]
 800cc7c:	6923      	ldr	r3, [r4, #16]
 800cc7e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800cc82:	68a3      	ldr	r3, [r4, #8]
 800cc84:	4607      	mov	r7, r0
 800cc86:	4691      	mov	r9, r2
 800cc88:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800cc8c:	f108 0601 	add.w	r6, r8, #1
 800cc90:	42b3      	cmp	r3, r6
 800cc92:	db0b      	blt.n	800ccac <__lshift+0x38>
 800cc94:	4638      	mov	r0, r7
 800cc96:	f7ff fd9d 	bl	800c7d4 <_Balloc>
 800cc9a:	4605      	mov	r5, r0
 800cc9c:	b948      	cbnz	r0, 800ccb2 <__lshift+0x3e>
 800cc9e:	4602      	mov	r2, r0
 800cca0:	4b28      	ldr	r3, [pc, #160]	@ (800cd44 <__lshift+0xd0>)
 800cca2:	4829      	ldr	r0, [pc, #164]	@ (800cd48 <__lshift+0xd4>)
 800cca4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800cca8:	f001 fcd2 	bl	800e650 <__assert_func>
 800ccac:	3101      	adds	r1, #1
 800ccae:	005b      	lsls	r3, r3, #1
 800ccb0:	e7ee      	b.n	800cc90 <__lshift+0x1c>
 800ccb2:	2300      	movs	r3, #0
 800ccb4:	f100 0114 	add.w	r1, r0, #20
 800ccb8:	f100 0210 	add.w	r2, r0, #16
 800ccbc:	4618      	mov	r0, r3
 800ccbe:	4553      	cmp	r3, sl
 800ccc0:	db33      	blt.n	800cd2a <__lshift+0xb6>
 800ccc2:	6920      	ldr	r0, [r4, #16]
 800ccc4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ccc8:	f104 0314 	add.w	r3, r4, #20
 800cccc:	f019 091f 	ands.w	r9, r9, #31
 800ccd0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ccd4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ccd8:	d02b      	beq.n	800cd32 <__lshift+0xbe>
 800ccda:	f1c9 0e20 	rsb	lr, r9, #32
 800ccde:	468a      	mov	sl, r1
 800cce0:	2200      	movs	r2, #0
 800cce2:	6818      	ldr	r0, [r3, #0]
 800cce4:	fa00 f009 	lsl.w	r0, r0, r9
 800cce8:	4310      	orrs	r0, r2
 800ccea:	f84a 0b04 	str.w	r0, [sl], #4
 800ccee:	f853 2b04 	ldr.w	r2, [r3], #4
 800ccf2:	459c      	cmp	ip, r3
 800ccf4:	fa22 f20e 	lsr.w	r2, r2, lr
 800ccf8:	d8f3      	bhi.n	800cce2 <__lshift+0x6e>
 800ccfa:	ebac 0304 	sub.w	r3, ip, r4
 800ccfe:	3b15      	subs	r3, #21
 800cd00:	f023 0303 	bic.w	r3, r3, #3
 800cd04:	3304      	adds	r3, #4
 800cd06:	f104 0015 	add.w	r0, r4, #21
 800cd0a:	4560      	cmp	r0, ip
 800cd0c:	bf88      	it	hi
 800cd0e:	2304      	movhi	r3, #4
 800cd10:	50ca      	str	r2, [r1, r3]
 800cd12:	b10a      	cbz	r2, 800cd18 <__lshift+0xa4>
 800cd14:	f108 0602 	add.w	r6, r8, #2
 800cd18:	3e01      	subs	r6, #1
 800cd1a:	4638      	mov	r0, r7
 800cd1c:	612e      	str	r6, [r5, #16]
 800cd1e:	4621      	mov	r1, r4
 800cd20:	f7ff fd98 	bl	800c854 <_Bfree>
 800cd24:	4628      	mov	r0, r5
 800cd26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cd2a:	f842 0f04 	str.w	r0, [r2, #4]!
 800cd2e:	3301      	adds	r3, #1
 800cd30:	e7c5      	b.n	800ccbe <__lshift+0x4a>
 800cd32:	3904      	subs	r1, #4
 800cd34:	f853 2b04 	ldr.w	r2, [r3], #4
 800cd38:	f841 2f04 	str.w	r2, [r1, #4]!
 800cd3c:	459c      	cmp	ip, r3
 800cd3e:	d8f9      	bhi.n	800cd34 <__lshift+0xc0>
 800cd40:	e7ea      	b.n	800cd18 <__lshift+0xa4>
 800cd42:	bf00      	nop
 800cd44:	0800f089 	.word	0x0800f089
 800cd48:	0800f09a 	.word	0x0800f09a

0800cd4c <__mcmp>:
 800cd4c:	690a      	ldr	r2, [r1, #16]
 800cd4e:	4603      	mov	r3, r0
 800cd50:	6900      	ldr	r0, [r0, #16]
 800cd52:	1a80      	subs	r0, r0, r2
 800cd54:	b530      	push	{r4, r5, lr}
 800cd56:	d10e      	bne.n	800cd76 <__mcmp+0x2a>
 800cd58:	3314      	adds	r3, #20
 800cd5a:	3114      	adds	r1, #20
 800cd5c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800cd60:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800cd64:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800cd68:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800cd6c:	4295      	cmp	r5, r2
 800cd6e:	d003      	beq.n	800cd78 <__mcmp+0x2c>
 800cd70:	d205      	bcs.n	800cd7e <__mcmp+0x32>
 800cd72:	f04f 30ff 	mov.w	r0, #4294967295
 800cd76:	bd30      	pop	{r4, r5, pc}
 800cd78:	42a3      	cmp	r3, r4
 800cd7a:	d3f3      	bcc.n	800cd64 <__mcmp+0x18>
 800cd7c:	e7fb      	b.n	800cd76 <__mcmp+0x2a>
 800cd7e:	2001      	movs	r0, #1
 800cd80:	e7f9      	b.n	800cd76 <__mcmp+0x2a>
	...

0800cd84 <__mdiff>:
 800cd84:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd88:	4689      	mov	r9, r1
 800cd8a:	4606      	mov	r6, r0
 800cd8c:	4611      	mov	r1, r2
 800cd8e:	4648      	mov	r0, r9
 800cd90:	4614      	mov	r4, r2
 800cd92:	f7ff ffdb 	bl	800cd4c <__mcmp>
 800cd96:	1e05      	subs	r5, r0, #0
 800cd98:	d112      	bne.n	800cdc0 <__mdiff+0x3c>
 800cd9a:	4629      	mov	r1, r5
 800cd9c:	4630      	mov	r0, r6
 800cd9e:	f7ff fd19 	bl	800c7d4 <_Balloc>
 800cda2:	4602      	mov	r2, r0
 800cda4:	b928      	cbnz	r0, 800cdb2 <__mdiff+0x2e>
 800cda6:	4b3f      	ldr	r3, [pc, #252]	@ (800cea4 <__mdiff+0x120>)
 800cda8:	f240 2137 	movw	r1, #567	@ 0x237
 800cdac:	483e      	ldr	r0, [pc, #248]	@ (800cea8 <__mdiff+0x124>)
 800cdae:	f001 fc4f 	bl	800e650 <__assert_func>
 800cdb2:	2301      	movs	r3, #1
 800cdb4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800cdb8:	4610      	mov	r0, r2
 800cdba:	b003      	add	sp, #12
 800cdbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cdc0:	bfbc      	itt	lt
 800cdc2:	464b      	movlt	r3, r9
 800cdc4:	46a1      	movlt	r9, r4
 800cdc6:	4630      	mov	r0, r6
 800cdc8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800cdcc:	bfba      	itte	lt
 800cdce:	461c      	movlt	r4, r3
 800cdd0:	2501      	movlt	r5, #1
 800cdd2:	2500      	movge	r5, #0
 800cdd4:	f7ff fcfe 	bl	800c7d4 <_Balloc>
 800cdd8:	4602      	mov	r2, r0
 800cdda:	b918      	cbnz	r0, 800cde4 <__mdiff+0x60>
 800cddc:	4b31      	ldr	r3, [pc, #196]	@ (800cea4 <__mdiff+0x120>)
 800cdde:	f240 2145 	movw	r1, #581	@ 0x245
 800cde2:	e7e3      	b.n	800cdac <__mdiff+0x28>
 800cde4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800cde8:	6926      	ldr	r6, [r4, #16]
 800cdea:	60c5      	str	r5, [r0, #12]
 800cdec:	f109 0310 	add.w	r3, r9, #16
 800cdf0:	f109 0514 	add.w	r5, r9, #20
 800cdf4:	f104 0e14 	add.w	lr, r4, #20
 800cdf8:	f100 0b14 	add.w	fp, r0, #20
 800cdfc:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800ce00:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800ce04:	9301      	str	r3, [sp, #4]
 800ce06:	46d9      	mov	r9, fp
 800ce08:	f04f 0c00 	mov.w	ip, #0
 800ce0c:	9b01      	ldr	r3, [sp, #4]
 800ce0e:	f85e 0b04 	ldr.w	r0, [lr], #4
 800ce12:	f853 af04 	ldr.w	sl, [r3, #4]!
 800ce16:	9301      	str	r3, [sp, #4]
 800ce18:	fa1f f38a 	uxth.w	r3, sl
 800ce1c:	4619      	mov	r1, r3
 800ce1e:	b283      	uxth	r3, r0
 800ce20:	1acb      	subs	r3, r1, r3
 800ce22:	0c00      	lsrs	r0, r0, #16
 800ce24:	4463      	add	r3, ip
 800ce26:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800ce2a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800ce2e:	b29b      	uxth	r3, r3
 800ce30:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800ce34:	4576      	cmp	r6, lr
 800ce36:	f849 3b04 	str.w	r3, [r9], #4
 800ce3a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800ce3e:	d8e5      	bhi.n	800ce0c <__mdiff+0x88>
 800ce40:	1b33      	subs	r3, r6, r4
 800ce42:	3b15      	subs	r3, #21
 800ce44:	f023 0303 	bic.w	r3, r3, #3
 800ce48:	3415      	adds	r4, #21
 800ce4a:	3304      	adds	r3, #4
 800ce4c:	42a6      	cmp	r6, r4
 800ce4e:	bf38      	it	cc
 800ce50:	2304      	movcc	r3, #4
 800ce52:	441d      	add	r5, r3
 800ce54:	445b      	add	r3, fp
 800ce56:	461e      	mov	r6, r3
 800ce58:	462c      	mov	r4, r5
 800ce5a:	4544      	cmp	r4, r8
 800ce5c:	d30e      	bcc.n	800ce7c <__mdiff+0xf8>
 800ce5e:	f108 0103 	add.w	r1, r8, #3
 800ce62:	1b49      	subs	r1, r1, r5
 800ce64:	f021 0103 	bic.w	r1, r1, #3
 800ce68:	3d03      	subs	r5, #3
 800ce6a:	45a8      	cmp	r8, r5
 800ce6c:	bf38      	it	cc
 800ce6e:	2100      	movcc	r1, #0
 800ce70:	440b      	add	r3, r1
 800ce72:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ce76:	b191      	cbz	r1, 800ce9e <__mdiff+0x11a>
 800ce78:	6117      	str	r7, [r2, #16]
 800ce7a:	e79d      	b.n	800cdb8 <__mdiff+0x34>
 800ce7c:	f854 1b04 	ldr.w	r1, [r4], #4
 800ce80:	46e6      	mov	lr, ip
 800ce82:	0c08      	lsrs	r0, r1, #16
 800ce84:	fa1c fc81 	uxtah	ip, ip, r1
 800ce88:	4471      	add	r1, lr
 800ce8a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800ce8e:	b289      	uxth	r1, r1
 800ce90:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800ce94:	f846 1b04 	str.w	r1, [r6], #4
 800ce98:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800ce9c:	e7dd      	b.n	800ce5a <__mdiff+0xd6>
 800ce9e:	3f01      	subs	r7, #1
 800cea0:	e7e7      	b.n	800ce72 <__mdiff+0xee>
 800cea2:	bf00      	nop
 800cea4:	0800f089 	.word	0x0800f089
 800cea8:	0800f09a 	.word	0x0800f09a

0800ceac <__ulp>:
 800ceac:	b082      	sub	sp, #8
 800ceae:	ed8d 0b00 	vstr	d0, [sp]
 800ceb2:	9a01      	ldr	r2, [sp, #4]
 800ceb4:	4b0f      	ldr	r3, [pc, #60]	@ (800cef4 <__ulp+0x48>)
 800ceb6:	4013      	ands	r3, r2
 800ceb8:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800cebc:	2b00      	cmp	r3, #0
 800cebe:	dc08      	bgt.n	800ced2 <__ulp+0x26>
 800cec0:	425b      	negs	r3, r3
 800cec2:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800cec6:	ea4f 5223 	mov.w	r2, r3, asr #20
 800ceca:	da04      	bge.n	800ced6 <__ulp+0x2a>
 800cecc:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800ced0:	4113      	asrs	r3, r2
 800ced2:	2200      	movs	r2, #0
 800ced4:	e008      	b.n	800cee8 <__ulp+0x3c>
 800ced6:	f1a2 0314 	sub.w	r3, r2, #20
 800ceda:	2b1e      	cmp	r3, #30
 800cedc:	bfda      	itte	le
 800cede:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800cee2:	40da      	lsrle	r2, r3
 800cee4:	2201      	movgt	r2, #1
 800cee6:	2300      	movs	r3, #0
 800cee8:	4619      	mov	r1, r3
 800ceea:	4610      	mov	r0, r2
 800ceec:	ec41 0b10 	vmov	d0, r0, r1
 800cef0:	b002      	add	sp, #8
 800cef2:	4770      	bx	lr
 800cef4:	7ff00000 	.word	0x7ff00000

0800cef8 <__b2d>:
 800cef8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cefc:	6906      	ldr	r6, [r0, #16]
 800cefe:	f100 0814 	add.w	r8, r0, #20
 800cf02:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800cf06:	1f37      	subs	r7, r6, #4
 800cf08:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800cf0c:	4610      	mov	r0, r2
 800cf0e:	f7ff fd53 	bl	800c9b8 <__hi0bits>
 800cf12:	f1c0 0320 	rsb	r3, r0, #32
 800cf16:	280a      	cmp	r0, #10
 800cf18:	600b      	str	r3, [r1, #0]
 800cf1a:	491b      	ldr	r1, [pc, #108]	@ (800cf88 <__b2d+0x90>)
 800cf1c:	dc15      	bgt.n	800cf4a <__b2d+0x52>
 800cf1e:	f1c0 0c0b 	rsb	ip, r0, #11
 800cf22:	fa22 f30c 	lsr.w	r3, r2, ip
 800cf26:	45b8      	cmp	r8, r7
 800cf28:	ea43 0501 	orr.w	r5, r3, r1
 800cf2c:	bf34      	ite	cc
 800cf2e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800cf32:	2300      	movcs	r3, #0
 800cf34:	3015      	adds	r0, #21
 800cf36:	fa02 f000 	lsl.w	r0, r2, r0
 800cf3a:	fa23 f30c 	lsr.w	r3, r3, ip
 800cf3e:	4303      	orrs	r3, r0
 800cf40:	461c      	mov	r4, r3
 800cf42:	ec45 4b10 	vmov	d0, r4, r5
 800cf46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cf4a:	45b8      	cmp	r8, r7
 800cf4c:	bf3a      	itte	cc
 800cf4e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800cf52:	f1a6 0708 	subcc.w	r7, r6, #8
 800cf56:	2300      	movcs	r3, #0
 800cf58:	380b      	subs	r0, #11
 800cf5a:	d012      	beq.n	800cf82 <__b2d+0x8a>
 800cf5c:	f1c0 0120 	rsb	r1, r0, #32
 800cf60:	fa23 f401 	lsr.w	r4, r3, r1
 800cf64:	4082      	lsls	r2, r0
 800cf66:	4322      	orrs	r2, r4
 800cf68:	4547      	cmp	r7, r8
 800cf6a:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800cf6e:	bf8c      	ite	hi
 800cf70:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800cf74:	2200      	movls	r2, #0
 800cf76:	4083      	lsls	r3, r0
 800cf78:	40ca      	lsrs	r2, r1
 800cf7a:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800cf7e:	4313      	orrs	r3, r2
 800cf80:	e7de      	b.n	800cf40 <__b2d+0x48>
 800cf82:	ea42 0501 	orr.w	r5, r2, r1
 800cf86:	e7db      	b.n	800cf40 <__b2d+0x48>
 800cf88:	3ff00000 	.word	0x3ff00000

0800cf8c <__d2b>:
 800cf8c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800cf90:	460f      	mov	r7, r1
 800cf92:	2101      	movs	r1, #1
 800cf94:	ec59 8b10 	vmov	r8, r9, d0
 800cf98:	4616      	mov	r6, r2
 800cf9a:	f7ff fc1b 	bl	800c7d4 <_Balloc>
 800cf9e:	4604      	mov	r4, r0
 800cfa0:	b930      	cbnz	r0, 800cfb0 <__d2b+0x24>
 800cfa2:	4602      	mov	r2, r0
 800cfa4:	4b23      	ldr	r3, [pc, #140]	@ (800d034 <__d2b+0xa8>)
 800cfa6:	4824      	ldr	r0, [pc, #144]	@ (800d038 <__d2b+0xac>)
 800cfa8:	f240 310f 	movw	r1, #783	@ 0x30f
 800cfac:	f001 fb50 	bl	800e650 <__assert_func>
 800cfb0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800cfb4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800cfb8:	b10d      	cbz	r5, 800cfbe <__d2b+0x32>
 800cfba:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800cfbe:	9301      	str	r3, [sp, #4]
 800cfc0:	f1b8 0300 	subs.w	r3, r8, #0
 800cfc4:	d023      	beq.n	800d00e <__d2b+0x82>
 800cfc6:	4668      	mov	r0, sp
 800cfc8:	9300      	str	r3, [sp, #0]
 800cfca:	f7ff fd14 	bl	800c9f6 <__lo0bits>
 800cfce:	e9dd 1200 	ldrd	r1, r2, [sp]
 800cfd2:	b1d0      	cbz	r0, 800d00a <__d2b+0x7e>
 800cfd4:	f1c0 0320 	rsb	r3, r0, #32
 800cfd8:	fa02 f303 	lsl.w	r3, r2, r3
 800cfdc:	430b      	orrs	r3, r1
 800cfde:	40c2      	lsrs	r2, r0
 800cfe0:	6163      	str	r3, [r4, #20]
 800cfe2:	9201      	str	r2, [sp, #4]
 800cfe4:	9b01      	ldr	r3, [sp, #4]
 800cfe6:	61a3      	str	r3, [r4, #24]
 800cfe8:	2b00      	cmp	r3, #0
 800cfea:	bf0c      	ite	eq
 800cfec:	2201      	moveq	r2, #1
 800cfee:	2202      	movne	r2, #2
 800cff0:	6122      	str	r2, [r4, #16]
 800cff2:	b1a5      	cbz	r5, 800d01e <__d2b+0x92>
 800cff4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800cff8:	4405      	add	r5, r0
 800cffa:	603d      	str	r5, [r7, #0]
 800cffc:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800d000:	6030      	str	r0, [r6, #0]
 800d002:	4620      	mov	r0, r4
 800d004:	b003      	add	sp, #12
 800d006:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d00a:	6161      	str	r1, [r4, #20]
 800d00c:	e7ea      	b.n	800cfe4 <__d2b+0x58>
 800d00e:	a801      	add	r0, sp, #4
 800d010:	f7ff fcf1 	bl	800c9f6 <__lo0bits>
 800d014:	9b01      	ldr	r3, [sp, #4]
 800d016:	6163      	str	r3, [r4, #20]
 800d018:	3020      	adds	r0, #32
 800d01a:	2201      	movs	r2, #1
 800d01c:	e7e8      	b.n	800cff0 <__d2b+0x64>
 800d01e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d022:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800d026:	6038      	str	r0, [r7, #0]
 800d028:	6918      	ldr	r0, [r3, #16]
 800d02a:	f7ff fcc5 	bl	800c9b8 <__hi0bits>
 800d02e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d032:	e7e5      	b.n	800d000 <__d2b+0x74>
 800d034:	0800f089 	.word	0x0800f089
 800d038:	0800f09a 	.word	0x0800f09a

0800d03c <__ratio>:
 800d03c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d040:	b085      	sub	sp, #20
 800d042:	e9cd 1000 	strd	r1, r0, [sp]
 800d046:	a902      	add	r1, sp, #8
 800d048:	f7ff ff56 	bl	800cef8 <__b2d>
 800d04c:	9800      	ldr	r0, [sp, #0]
 800d04e:	a903      	add	r1, sp, #12
 800d050:	ec55 4b10 	vmov	r4, r5, d0
 800d054:	f7ff ff50 	bl	800cef8 <__b2d>
 800d058:	9b01      	ldr	r3, [sp, #4]
 800d05a:	6919      	ldr	r1, [r3, #16]
 800d05c:	9b00      	ldr	r3, [sp, #0]
 800d05e:	691b      	ldr	r3, [r3, #16]
 800d060:	1ac9      	subs	r1, r1, r3
 800d062:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800d066:	1a9b      	subs	r3, r3, r2
 800d068:	ec5b ab10 	vmov	sl, fp, d0
 800d06c:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800d070:	2b00      	cmp	r3, #0
 800d072:	bfce      	itee	gt
 800d074:	462a      	movgt	r2, r5
 800d076:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800d07a:	465a      	movle	r2, fp
 800d07c:	462f      	mov	r7, r5
 800d07e:	46d9      	mov	r9, fp
 800d080:	bfcc      	ite	gt
 800d082:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800d086:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800d08a:	464b      	mov	r3, r9
 800d08c:	4652      	mov	r2, sl
 800d08e:	4620      	mov	r0, r4
 800d090:	4639      	mov	r1, r7
 800d092:	f7f3 fbdb 	bl	800084c <__aeabi_ddiv>
 800d096:	ec41 0b10 	vmov	d0, r0, r1
 800d09a:	b005      	add	sp, #20
 800d09c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d0a0 <__copybits>:
 800d0a0:	3901      	subs	r1, #1
 800d0a2:	b570      	push	{r4, r5, r6, lr}
 800d0a4:	1149      	asrs	r1, r1, #5
 800d0a6:	6914      	ldr	r4, [r2, #16]
 800d0a8:	3101      	adds	r1, #1
 800d0aa:	f102 0314 	add.w	r3, r2, #20
 800d0ae:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800d0b2:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800d0b6:	1f05      	subs	r5, r0, #4
 800d0b8:	42a3      	cmp	r3, r4
 800d0ba:	d30c      	bcc.n	800d0d6 <__copybits+0x36>
 800d0bc:	1aa3      	subs	r3, r4, r2
 800d0be:	3b11      	subs	r3, #17
 800d0c0:	f023 0303 	bic.w	r3, r3, #3
 800d0c4:	3211      	adds	r2, #17
 800d0c6:	42a2      	cmp	r2, r4
 800d0c8:	bf88      	it	hi
 800d0ca:	2300      	movhi	r3, #0
 800d0cc:	4418      	add	r0, r3
 800d0ce:	2300      	movs	r3, #0
 800d0d0:	4288      	cmp	r0, r1
 800d0d2:	d305      	bcc.n	800d0e0 <__copybits+0x40>
 800d0d4:	bd70      	pop	{r4, r5, r6, pc}
 800d0d6:	f853 6b04 	ldr.w	r6, [r3], #4
 800d0da:	f845 6f04 	str.w	r6, [r5, #4]!
 800d0de:	e7eb      	b.n	800d0b8 <__copybits+0x18>
 800d0e0:	f840 3b04 	str.w	r3, [r0], #4
 800d0e4:	e7f4      	b.n	800d0d0 <__copybits+0x30>

0800d0e6 <__any_on>:
 800d0e6:	f100 0214 	add.w	r2, r0, #20
 800d0ea:	6900      	ldr	r0, [r0, #16]
 800d0ec:	114b      	asrs	r3, r1, #5
 800d0ee:	4298      	cmp	r0, r3
 800d0f0:	b510      	push	{r4, lr}
 800d0f2:	db11      	blt.n	800d118 <__any_on+0x32>
 800d0f4:	dd0a      	ble.n	800d10c <__any_on+0x26>
 800d0f6:	f011 011f 	ands.w	r1, r1, #31
 800d0fa:	d007      	beq.n	800d10c <__any_on+0x26>
 800d0fc:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800d100:	fa24 f001 	lsr.w	r0, r4, r1
 800d104:	fa00 f101 	lsl.w	r1, r0, r1
 800d108:	428c      	cmp	r4, r1
 800d10a:	d10b      	bne.n	800d124 <__any_on+0x3e>
 800d10c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d110:	4293      	cmp	r3, r2
 800d112:	d803      	bhi.n	800d11c <__any_on+0x36>
 800d114:	2000      	movs	r0, #0
 800d116:	bd10      	pop	{r4, pc}
 800d118:	4603      	mov	r3, r0
 800d11a:	e7f7      	b.n	800d10c <__any_on+0x26>
 800d11c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d120:	2900      	cmp	r1, #0
 800d122:	d0f5      	beq.n	800d110 <__any_on+0x2a>
 800d124:	2001      	movs	r0, #1
 800d126:	e7f6      	b.n	800d116 <__any_on+0x30>

0800d128 <sulp>:
 800d128:	b570      	push	{r4, r5, r6, lr}
 800d12a:	4604      	mov	r4, r0
 800d12c:	460d      	mov	r5, r1
 800d12e:	ec45 4b10 	vmov	d0, r4, r5
 800d132:	4616      	mov	r6, r2
 800d134:	f7ff feba 	bl	800ceac <__ulp>
 800d138:	ec51 0b10 	vmov	r0, r1, d0
 800d13c:	b17e      	cbz	r6, 800d15e <sulp+0x36>
 800d13e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800d142:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800d146:	2b00      	cmp	r3, #0
 800d148:	dd09      	ble.n	800d15e <sulp+0x36>
 800d14a:	051b      	lsls	r3, r3, #20
 800d14c:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800d150:	2400      	movs	r4, #0
 800d152:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800d156:	4622      	mov	r2, r4
 800d158:	462b      	mov	r3, r5
 800d15a:	f7f3 fa4d 	bl	80005f8 <__aeabi_dmul>
 800d15e:	ec41 0b10 	vmov	d0, r0, r1
 800d162:	bd70      	pop	{r4, r5, r6, pc}
 800d164:	0000      	movs	r0, r0
	...

0800d168 <_strtod_l>:
 800d168:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d16c:	b09f      	sub	sp, #124	@ 0x7c
 800d16e:	460c      	mov	r4, r1
 800d170:	9217      	str	r2, [sp, #92]	@ 0x5c
 800d172:	2200      	movs	r2, #0
 800d174:	921a      	str	r2, [sp, #104]	@ 0x68
 800d176:	9005      	str	r0, [sp, #20]
 800d178:	f04f 0a00 	mov.w	sl, #0
 800d17c:	f04f 0b00 	mov.w	fp, #0
 800d180:	460a      	mov	r2, r1
 800d182:	9219      	str	r2, [sp, #100]	@ 0x64
 800d184:	7811      	ldrb	r1, [r2, #0]
 800d186:	292b      	cmp	r1, #43	@ 0x2b
 800d188:	d04a      	beq.n	800d220 <_strtod_l+0xb8>
 800d18a:	d838      	bhi.n	800d1fe <_strtod_l+0x96>
 800d18c:	290d      	cmp	r1, #13
 800d18e:	d832      	bhi.n	800d1f6 <_strtod_l+0x8e>
 800d190:	2908      	cmp	r1, #8
 800d192:	d832      	bhi.n	800d1fa <_strtod_l+0x92>
 800d194:	2900      	cmp	r1, #0
 800d196:	d03b      	beq.n	800d210 <_strtod_l+0xa8>
 800d198:	2200      	movs	r2, #0
 800d19a:	920e      	str	r2, [sp, #56]	@ 0x38
 800d19c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800d19e:	782a      	ldrb	r2, [r5, #0]
 800d1a0:	2a30      	cmp	r2, #48	@ 0x30
 800d1a2:	f040 80b2 	bne.w	800d30a <_strtod_l+0x1a2>
 800d1a6:	786a      	ldrb	r2, [r5, #1]
 800d1a8:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800d1ac:	2a58      	cmp	r2, #88	@ 0x58
 800d1ae:	d16e      	bne.n	800d28e <_strtod_l+0x126>
 800d1b0:	9302      	str	r3, [sp, #8]
 800d1b2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d1b4:	9301      	str	r3, [sp, #4]
 800d1b6:	ab1a      	add	r3, sp, #104	@ 0x68
 800d1b8:	9300      	str	r3, [sp, #0]
 800d1ba:	4a8f      	ldr	r2, [pc, #572]	@ (800d3f8 <_strtod_l+0x290>)
 800d1bc:	9805      	ldr	r0, [sp, #20]
 800d1be:	ab1b      	add	r3, sp, #108	@ 0x6c
 800d1c0:	a919      	add	r1, sp, #100	@ 0x64
 800d1c2:	f001 fadf 	bl	800e784 <__gethex>
 800d1c6:	f010 060f 	ands.w	r6, r0, #15
 800d1ca:	4604      	mov	r4, r0
 800d1cc:	d005      	beq.n	800d1da <_strtod_l+0x72>
 800d1ce:	2e06      	cmp	r6, #6
 800d1d0:	d128      	bne.n	800d224 <_strtod_l+0xbc>
 800d1d2:	3501      	adds	r5, #1
 800d1d4:	2300      	movs	r3, #0
 800d1d6:	9519      	str	r5, [sp, #100]	@ 0x64
 800d1d8:	930e      	str	r3, [sp, #56]	@ 0x38
 800d1da:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800d1dc:	2b00      	cmp	r3, #0
 800d1de:	f040 858e 	bne.w	800dcfe <_strtod_l+0xb96>
 800d1e2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d1e4:	b1cb      	cbz	r3, 800d21a <_strtod_l+0xb2>
 800d1e6:	4652      	mov	r2, sl
 800d1e8:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800d1ec:	ec43 2b10 	vmov	d0, r2, r3
 800d1f0:	b01f      	add	sp, #124	@ 0x7c
 800d1f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d1f6:	2920      	cmp	r1, #32
 800d1f8:	d1ce      	bne.n	800d198 <_strtod_l+0x30>
 800d1fa:	3201      	adds	r2, #1
 800d1fc:	e7c1      	b.n	800d182 <_strtod_l+0x1a>
 800d1fe:	292d      	cmp	r1, #45	@ 0x2d
 800d200:	d1ca      	bne.n	800d198 <_strtod_l+0x30>
 800d202:	2101      	movs	r1, #1
 800d204:	910e      	str	r1, [sp, #56]	@ 0x38
 800d206:	1c51      	adds	r1, r2, #1
 800d208:	9119      	str	r1, [sp, #100]	@ 0x64
 800d20a:	7852      	ldrb	r2, [r2, #1]
 800d20c:	2a00      	cmp	r2, #0
 800d20e:	d1c5      	bne.n	800d19c <_strtod_l+0x34>
 800d210:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800d212:	9419      	str	r4, [sp, #100]	@ 0x64
 800d214:	2b00      	cmp	r3, #0
 800d216:	f040 8570 	bne.w	800dcfa <_strtod_l+0xb92>
 800d21a:	4652      	mov	r2, sl
 800d21c:	465b      	mov	r3, fp
 800d21e:	e7e5      	b.n	800d1ec <_strtod_l+0x84>
 800d220:	2100      	movs	r1, #0
 800d222:	e7ef      	b.n	800d204 <_strtod_l+0x9c>
 800d224:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800d226:	b13a      	cbz	r2, 800d238 <_strtod_l+0xd0>
 800d228:	2135      	movs	r1, #53	@ 0x35
 800d22a:	a81c      	add	r0, sp, #112	@ 0x70
 800d22c:	f7ff ff38 	bl	800d0a0 <__copybits>
 800d230:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d232:	9805      	ldr	r0, [sp, #20]
 800d234:	f7ff fb0e 	bl	800c854 <_Bfree>
 800d238:	3e01      	subs	r6, #1
 800d23a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800d23c:	2e04      	cmp	r6, #4
 800d23e:	d806      	bhi.n	800d24e <_strtod_l+0xe6>
 800d240:	e8df f006 	tbb	[pc, r6]
 800d244:	201d0314 	.word	0x201d0314
 800d248:	14          	.byte	0x14
 800d249:	00          	.byte	0x00
 800d24a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800d24e:	05e1      	lsls	r1, r4, #23
 800d250:	bf48      	it	mi
 800d252:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800d256:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d25a:	0d1b      	lsrs	r3, r3, #20
 800d25c:	051b      	lsls	r3, r3, #20
 800d25e:	2b00      	cmp	r3, #0
 800d260:	d1bb      	bne.n	800d1da <_strtod_l+0x72>
 800d262:	f7fe fbdf 	bl	800ba24 <__errno>
 800d266:	2322      	movs	r3, #34	@ 0x22
 800d268:	6003      	str	r3, [r0, #0]
 800d26a:	e7b6      	b.n	800d1da <_strtod_l+0x72>
 800d26c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800d270:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800d274:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800d278:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800d27c:	e7e7      	b.n	800d24e <_strtod_l+0xe6>
 800d27e:	f8df b180 	ldr.w	fp, [pc, #384]	@ 800d400 <_strtod_l+0x298>
 800d282:	e7e4      	b.n	800d24e <_strtod_l+0xe6>
 800d284:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800d288:	f04f 3aff 	mov.w	sl, #4294967295
 800d28c:	e7df      	b.n	800d24e <_strtod_l+0xe6>
 800d28e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d290:	1c5a      	adds	r2, r3, #1
 800d292:	9219      	str	r2, [sp, #100]	@ 0x64
 800d294:	785b      	ldrb	r3, [r3, #1]
 800d296:	2b30      	cmp	r3, #48	@ 0x30
 800d298:	d0f9      	beq.n	800d28e <_strtod_l+0x126>
 800d29a:	2b00      	cmp	r3, #0
 800d29c:	d09d      	beq.n	800d1da <_strtod_l+0x72>
 800d29e:	2301      	movs	r3, #1
 800d2a0:	2700      	movs	r7, #0
 800d2a2:	9308      	str	r3, [sp, #32]
 800d2a4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d2a6:	930c      	str	r3, [sp, #48]	@ 0x30
 800d2a8:	970b      	str	r7, [sp, #44]	@ 0x2c
 800d2aa:	46b9      	mov	r9, r7
 800d2ac:	220a      	movs	r2, #10
 800d2ae:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800d2b0:	7805      	ldrb	r5, [r0, #0]
 800d2b2:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800d2b6:	b2d9      	uxtb	r1, r3
 800d2b8:	2909      	cmp	r1, #9
 800d2ba:	d928      	bls.n	800d30e <_strtod_l+0x1a6>
 800d2bc:	494f      	ldr	r1, [pc, #316]	@ (800d3fc <_strtod_l+0x294>)
 800d2be:	2201      	movs	r2, #1
 800d2c0:	f001 f97a 	bl	800e5b8 <strncmp>
 800d2c4:	2800      	cmp	r0, #0
 800d2c6:	d032      	beq.n	800d32e <_strtod_l+0x1c6>
 800d2c8:	2000      	movs	r0, #0
 800d2ca:	462a      	mov	r2, r5
 800d2cc:	900a      	str	r0, [sp, #40]	@ 0x28
 800d2ce:	464d      	mov	r5, r9
 800d2d0:	4603      	mov	r3, r0
 800d2d2:	2a65      	cmp	r2, #101	@ 0x65
 800d2d4:	d001      	beq.n	800d2da <_strtod_l+0x172>
 800d2d6:	2a45      	cmp	r2, #69	@ 0x45
 800d2d8:	d114      	bne.n	800d304 <_strtod_l+0x19c>
 800d2da:	b91d      	cbnz	r5, 800d2e4 <_strtod_l+0x17c>
 800d2dc:	9a08      	ldr	r2, [sp, #32]
 800d2de:	4302      	orrs	r2, r0
 800d2e0:	d096      	beq.n	800d210 <_strtod_l+0xa8>
 800d2e2:	2500      	movs	r5, #0
 800d2e4:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800d2e6:	1c62      	adds	r2, r4, #1
 800d2e8:	9219      	str	r2, [sp, #100]	@ 0x64
 800d2ea:	7862      	ldrb	r2, [r4, #1]
 800d2ec:	2a2b      	cmp	r2, #43	@ 0x2b
 800d2ee:	d07a      	beq.n	800d3e6 <_strtod_l+0x27e>
 800d2f0:	2a2d      	cmp	r2, #45	@ 0x2d
 800d2f2:	d07e      	beq.n	800d3f2 <_strtod_l+0x28a>
 800d2f4:	f04f 0c00 	mov.w	ip, #0
 800d2f8:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800d2fc:	2909      	cmp	r1, #9
 800d2fe:	f240 8085 	bls.w	800d40c <_strtod_l+0x2a4>
 800d302:	9419      	str	r4, [sp, #100]	@ 0x64
 800d304:	f04f 0800 	mov.w	r8, #0
 800d308:	e0a5      	b.n	800d456 <_strtod_l+0x2ee>
 800d30a:	2300      	movs	r3, #0
 800d30c:	e7c8      	b.n	800d2a0 <_strtod_l+0x138>
 800d30e:	f1b9 0f08 	cmp.w	r9, #8
 800d312:	bfd8      	it	le
 800d314:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 800d316:	f100 0001 	add.w	r0, r0, #1
 800d31a:	bfda      	itte	le
 800d31c:	fb02 3301 	mlale	r3, r2, r1, r3
 800d320:	930b      	strle	r3, [sp, #44]	@ 0x2c
 800d322:	fb02 3707 	mlagt	r7, r2, r7, r3
 800d326:	f109 0901 	add.w	r9, r9, #1
 800d32a:	9019      	str	r0, [sp, #100]	@ 0x64
 800d32c:	e7bf      	b.n	800d2ae <_strtod_l+0x146>
 800d32e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d330:	1c5a      	adds	r2, r3, #1
 800d332:	9219      	str	r2, [sp, #100]	@ 0x64
 800d334:	785a      	ldrb	r2, [r3, #1]
 800d336:	f1b9 0f00 	cmp.w	r9, #0
 800d33a:	d03b      	beq.n	800d3b4 <_strtod_l+0x24c>
 800d33c:	900a      	str	r0, [sp, #40]	@ 0x28
 800d33e:	464d      	mov	r5, r9
 800d340:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800d344:	2b09      	cmp	r3, #9
 800d346:	d912      	bls.n	800d36e <_strtod_l+0x206>
 800d348:	2301      	movs	r3, #1
 800d34a:	e7c2      	b.n	800d2d2 <_strtod_l+0x16a>
 800d34c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d34e:	1c5a      	adds	r2, r3, #1
 800d350:	9219      	str	r2, [sp, #100]	@ 0x64
 800d352:	785a      	ldrb	r2, [r3, #1]
 800d354:	3001      	adds	r0, #1
 800d356:	2a30      	cmp	r2, #48	@ 0x30
 800d358:	d0f8      	beq.n	800d34c <_strtod_l+0x1e4>
 800d35a:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800d35e:	2b08      	cmp	r3, #8
 800d360:	f200 84d2 	bhi.w	800dd08 <_strtod_l+0xba0>
 800d364:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d366:	900a      	str	r0, [sp, #40]	@ 0x28
 800d368:	2000      	movs	r0, #0
 800d36a:	930c      	str	r3, [sp, #48]	@ 0x30
 800d36c:	4605      	mov	r5, r0
 800d36e:	3a30      	subs	r2, #48	@ 0x30
 800d370:	f100 0301 	add.w	r3, r0, #1
 800d374:	d018      	beq.n	800d3a8 <_strtod_l+0x240>
 800d376:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d378:	4419      	add	r1, r3
 800d37a:	910a      	str	r1, [sp, #40]	@ 0x28
 800d37c:	462e      	mov	r6, r5
 800d37e:	f04f 0e0a 	mov.w	lr, #10
 800d382:	1c71      	adds	r1, r6, #1
 800d384:	eba1 0c05 	sub.w	ip, r1, r5
 800d388:	4563      	cmp	r3, ip
 800d38a:	dc15      	bgt.n	800d3b8 <_strtod_l+0x250>
 800d38c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 800d390:	182b      	adds	r3, r5, r0
 800d392:	2b08      	cmp	r3, #8
 800d394:	f105 0501 	add.w	r5, r5, #1
 800d398:	4405      	add	r5, r0
 800d39a:	dc1a      	bgt.n	800d3d2 <_strtod_l+0x26a>
 800d39c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800d39e:	230a      	movs	r3, #10
 800d3a0:	fb03 2301 	mla	r3, r3, r1, r2
 800d3a4:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d3a6:	2300      	movs	r3, #0
 800d3a8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800d3aa:	1c51      	adds	r1, r2, #1
 800d3ac:	9119      	str	r1, [sp, #100]	@ 0x64
 800d3ae:	7852      	ldrb	r2, [r2, #1]
 800d3b0:	4618      	mov	r0, r3
 800d3b2:	e7c5      	b.n	800d340 <_strtod_l+0x1d8>
 800d3b4:	4648      	mov	r0, r9
 800d3b6:	e7ce      	b.n	800d356 <_strtod_l+0x1ee>
 800d3b8:	2e08      	cmp	r6, #8
 800d3ba:	dc05      	bgt.n	800d3c8 <_strtod_l+0x260>
 800d3bc:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800d3be:	fb0e f606 	mul.w	r6, lr, r6
 800d3c2:	960b      	str	r6, [sp, #44]	@ 0x2c
 800d3c4:	460e      	mov	r6, r1
 800d3c6:	e7dc      	b.n	800d382 <_strtod_l+0x21a>
 800d3c8:	2910      	cmp	r1, #16
 800d3ca:	bfd8      	it	le
 800d3cc:	fb0e f707 	mulle.w	r7, lr, r7
 800d3d0:	e7f8      	b.n	800d3c4 <_strtod_l+0x25c>
 800d3d2:	2b0f      	cmp	r3, #15
 800d3d4:	bfdc      	itt	le
 800d3d6:	230a      	movle	r3, #10
 800d3d8:	fb03 2707 	mlale	r7, r3, r7, r2
 800d3dc:	e7e3      	b.n	800d3a6 <_strtod_l+0x23e>
 800d3de:	2300      	movs	r3, #0
 800d3e0:	930a      	str	r3, [sp, #40]	@ 0x28
 800d3e2:	2301      	movs	r3, #1
 800d3e4:	e77a      	b.n	800d2dc <_strtod_l+0x174>
 800d3e6:	f04f 0c00 	mov.w	ip, #0
 800d3ea:	1ca2      	adds	r2, r4, #2
 800d3ec:	9219      	str	r2, [sp, #100]	@ 0x64
 800d3ee:	78a2      	ldrb	r2, [r4, #2]
 800d3f0:	e782      	b.n	800d2f8 <_strtod_l+0x190>
 800d3f2:	f04f 0c01 	mov.w	ip, #1
 800d3f6:	e7f8      	b.n	800d3ea <_strtod_l+0x282>
 800d3f8:	0800f2bc 	.word	0x0800f2bc
 800d3fc:	0800f0f3 	.word	0x0800f0f3
 800d400:	7ff00000 	.word	0x7ff00000
 800d404:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800d406:	1c51      	adds	r1, r2, #1
 800d408:	9119      	str	r1, [sp, #100]	@ 0x64
 800d40a:	7852      	ldrb	r2, [r2, #1]
 800d40c:	2a30      	cmp	r2, #48	@ 0x30
 800d40e:	d0f9      	beq.n	800d404 <_strtod_l+0x29c>
 800d410:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800d414:	2908      	cmp	r1, #8
 800d416:	f63f af75 	bhi.w	800d304 <_strtod_l+0x19c>
 800d41a:	3a30      	subs	r2, #48	@ 0x30
 800d41c:	9209      	str	r2, [sp, #36]	@ 0x24
 800d41e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800d420:	920f      	str	r2, [sp, #60]	@ 0x3c
 800d422:	f04f 080a 	mov.w	r8, #10
 800d426:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800d428:	1c56      	adds	r6, r2, #1
 800d42a:	9619      	str	r6, [sp, #100]	@ 0x64
 800d42c:	7852      	ldrb	r2, [r2, #1]
 800d42e:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800d432:	f1be 0f09 	cmp.w	lr, #9
 800d436:	d939      	bls.n	800d4ac <_strtod_l+0x344>
 800d438:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800d43a:	1a76      	subs	r6, r6, r1
 800d43c:	2e08      	cmp	r6, #8
 800d43e:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800d442:	dc03      	bgt.n	800d44c <_strtod_l+0x2e4>
 800d444:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800d446:	4588      	cmp	r8, r1
 800d448:	bfa8      	it	ge
 800d44a:	4688      	movge	r8, r1
 800d44c:	f1bc 0f00 	cmp.w	ip, #0
 800d450:	d001      	beq.n	800d456 <_strtod_l+0x2ee>
 800d452:	f1c8 0800 	rsb	r8, r8, #0
 800d456:	2d00      	cmp	r5, #0
 800d458:	d14e      	bne.n	800d4f8 <_strtod_l+0x390>
 800d45a:	9908      	ldr	r1, [sp, #32]
 800d45c:	4308      	orrs	r0, r1
 800d45e:	f47f aebc 	bne.w	800d1da <_strtod_l+0x72>
 800d462:	2b00      	cmp	r3, #0
 800d464:	f47f aed4 	bne.w	800d210 <_strtod_l+0xa8>
 800d468:	2a69      	cmp	r2, #105	@ 0x69
 800d46a:	d028      	beq.n	800d4be <_strtod_l+0x356>
 800d46c:	dc25      	bgt.n	800d4ba <_strtod_l+0x352>
 800d46e:	2a49      	cmp	r2, #73	@ 0x49
 800d470:	d025      	beq.n	800d4be <_strtod_l+0x356>
 800d472:	2a4e      	cmp	r2, #78	@ 0x4e
 800d474:	f47f aecc 	bne.w	800d210 <_strtod_l+0xa8>
 800d478:	499a      	ldr	r1, [pc, #616]	@ (800d6e4 <_strtod_l+0x57c>)
 800d47a:	a819      	add	r0, sp, #100	@ 0x64
 800d47c:	f001 fba4 	bl	800ebc8 <__match>
 800d480:	2800      	cmp	r0, #0
 800d482:	f43f aec5 	beq.w	800d210 <_strtod_l+0xa8>
 800d486:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d488:	781b      	ldrb	r3, [r3, #0]
 800d48a:	2b28      	cmp	r3, #40	@ 0x28
 800d48c:	d12e      	bne.n	800d4ec <_strtod_l+0x384>
 800d48e:	4996      	ldr	r1, [pc, #600]	@ (800d6e8 <_strtod_l+0x580>)
 800d490:	aa1c      	add	r2, sp, #112	@ 0x70
 800d492:	a819      	add	r0, sp, #100	@ 0x64
 800d494:	f001 fbac 	bl	800ebf0 <__hexnan>
 800d498:	2805      	cmp	r0, #5
 800d49a:	d127      	bne.n	800d4ec <_strtod_l+0x384>
 800d49c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800d49e:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800d4a2:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800d4a6:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800d4aa:	e696      	b.n	800d1da <_strtod_l+0x72>
 800d4ac:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800d4ae:	fb08 2101 	mla	r1, r8, r1, r2
 800d4b2:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800d4b6:	9209      	str	r2, [sp, #36]	@ 0x24
 800d4b8:	e7b5      	b.n	800d426 <_strtod_l+0x2be>
 800d4ba:	2a6e      	cmp	r2, #110	@ 0x6e
 800d4bc:	e7da      	b.n	800d474 <_strtod_l+0x30c>
 800d4be:	498b      	ldr	r1, [pc, #556]	@ (800d6ec <_strtod_l+0x584>)
 800d4c0:	a819      	add	r0, sp, #100	@ 0x64
 800d4c2:	f001 fb81 	bl	800ebc8 <__match>
 800d4c6:	2800      	cmp	r0, #0
 800d4c8:	f43f aea2 	beq.w	800d210 <_strtod_l+0xa8>
 800d4cc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d4ce:	4988      	ldr	r1, [pc, #544]	@ (800d6f0 <_strtod_l+0x588>)
 800d4d0:	3b01      	subs	r3, #1
 800d4d2:	a819      	add	r0, sp, #100	@ 0x64
 800d4d4:	9319      	str	r3, [sp, #100]	@ 0x64
 800d4d6:	f001 fb77 	bl	800ebc8 <__match>
 800d4da:	b910      	cbnz	r0, 800d4e2 <_strtod_l+0x37a>
 800d4dc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d4de:	3301      	adds	r3, #1
 800d4e0:	9319      	str	r3, [sp, #100]	@ 0x64
 800d4e2:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 800d700 <_strtod_l+0x598>
 800d4e6:	f04f 0a00 	mov.w	sl, #0
 800d4ea:	e676      	b.n	800d1da <_strtod_l+0x72>
 800d4ec:	4881      	ldr	r0, [pc, #516]	@ (800d6f4 <_strtod_l+0x58c>)
 800d4ee:	f001 f8a7 	bl	800e640 <nan>
 800d4f2:	ec5b ab10 	vmov	sl, fp, d0
 800d4f6:	e670      	b.n	800d1da <_strtod_l+0x72>
 800d4f8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d4fa:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800d4fc:	eba8 0303 	sub.w	r3, r8, r3
 800d500:	f1b9 0f00 	cmp.w	r9, #0
 800d504:	bf08      	it	eq
 800d506:	46a9      	moveq	r9, r5
 800d508:	2d10      	cmp	r5, #16
 800d50a:	9309      	str	r3, [sp, #36]	@ 0x24
 800d50c:	462c      	mov	r4, r5
 800d50e:	bfa8      	it	ge
 800d510:	2410      	movge	r4, #16
 800d512:	f7f2 fff7 	bl	8000504 <__aeabi_ui2d>
 800d516:	2d09      	cmp	r5, #9
 800d518:	4682      	mov	sl, r0
 800d51a:	468b      	mov	fp, r1
 800d51c:	dc13      	bgt.n	800d546 <_strtod_l+0x3de>
 800d51e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d520:	2b00      	cmp	r3, #0
 800d522:	f43f ae5a 	beq.w	800d1da <_strtod_l+0x72>
 800d526:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d528:	dd78      	ble.n	800d61c <_strtod_l+0x4b4>
 800d52a:	2b16      	cmp	r3, #22
 800d52c:	dc5f      	bgt.n	800d5ee <_strtod_l+0x486>
 800d52e:	4972      	ldr	r1, [pc, #456]	@ (800d6f8 <_strtod_l+0x590>)
 800d530:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800d534:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d538:	4652      	mov	r2, sl
 800d53a:	465b      	mov	r3, fp
 800d53c:	f7f3 f85c 	bl	80005f8 <__aeabi_dmul>
 800d540:	4682      	mov	sl, r0
 800d542:	468b      	mov	fp, r1
 800d544:	e649      	b.n	800d1da <_strtod_l+0x72>
 800d546:	4b6c      	ldr	r3, [pc, #432]	@ (800d6f8 <_strtod_l+0x590>)
 800d548:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d54c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800d550:	f7f3 f852 	bl	80005f8 <__aeabi_dmul>
 800d554:	4682      	mov	sl, r0
 800d556:	4638      	mov	r0, r7
 800d558:	468b      	mov	fp, r1
 800d55a:	f7f2 ffd3 	bl	8000504 <__aeabi_ui2d>
 800d55e:	4602      	mov	r2, r0
 800d560:	460b      	mov	r3, r1
 800d562:	4650      	mov	r0, sl
 800d564:	4659      	mov	r1, fp
 800d566:	f7f2 fe91 	bl	800028c <__adddf3>
 800d56a:	2d0f      	cmp	r5, #15
 800d56c:	4682      	mov	sl, r0
 800d56e:	468b      	mov	fp, r1
 800d570:	ddd5      	ble.n	800d51e <_strtod_l+0x3b6>
 800d572:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d574:	1b2c      	subs	r4, r5, r4
 800d576:	441c      	add	r4, r3
 800d578:	2c00      	cmp	r4, #0
 800d57a:	f340 8093 	ble.w	800d6a4 <_strtod_l+0x53c>
 800d57e:	f014 030f 	ands.w	r3, r4, #15
 800d582:	d00a      	beq.n	800d59a <_strtod_l+0x432>
 800d584:	495c      	ldr	r1, [pc, #368]	@ (800d6f8 <_strtod_l+0x590>)
 800d586:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800d58a:	4652      	mov	r2, sl
 800d58c:	465b      	mov	r3, fp
 800d58e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d592:	f7f3 f831 	bl	80005f8 <__aeabi_dmul>
 800d596:	4682      	mov	sl, r0
 800d598:	468b      	mov	fp, r1
 800d59a:	f034 040f 	bics.w	r4, r4, #15
 800d59e:	d073      	beq.n	800d688 <_strtod_l+0x520>
 800d5a0:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800d5a4:	dd49      	ble.n	800d63a <_strtod_l+0x4d2>
 800d5a6:	2400      	movs	r4, #0
 800d5a8:	46a0      	mov	r8, r4
 800d5aa:	940b      	str	r4, [sp, #44]	@ 0x2c
 800d5ac:	46a1      	mov	r9, r4
 800d5ae:	9a05      	ldr	r2, [sp, #20]
 800d5b0:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 800d700 <_strtod_l+0x598>
 800d5b4:	2322      	movs	r3, #34	@ 0x22
 800d5b6:	6013      	str	r3, [r2, #0]
 800d5b8:	f04f 0a00 	mov.w	sl, #0
 800d5bc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d5be:	2b00      	cmp	r3, #0
 800d5c0:	f43f ae0b 	beq.w	800d1da <_strtod_l+0x72>
 800d5c4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d5c6:	9805      	ldr	r0, [sp, #20]
 800d5c8:	f7ff f944 	bl	800c854 <_Bfree>
 800d5cc:	9805      	ldr	r0, [sp, #20]
 800d5ce:	4649      	mov	r1, r9
 800d5d0:	f7ff f940 	bl	800c854 <_Bfree>
 800d5d4:	9805      	ldr	r0, [sp, #20]
 800d5d6:	4641      	mov	r1, r8
 800d5d8:	f7ff f93c 	bl	800c854 <_Bfree>
 800d5dc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800d5de:	9805      	ldr	r0, [sp, #20]
 800d5e0:	f7ff f938 	bl	800c854 <_Bfree>
 800d5e4:	9805      	ldr	r0, [sp, #20]
 800d5e6:	4621      	mov	r1, r4
 800d5e8:	f7ff f934 	bl	800c854 <_Bfree>
 800d5ec:	e5f5      	b.n	800d1da <_strtod_l+0x72>
 800d5ee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d5f0:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800d5f4:	4293      	cmp	r3, r2
 800d5f6:	dbbc      	blt.n	800d572 <_strtod_l+0x40a>
 800d5f8:	4c3f      	ldr	r4, [pc, #252]	@ (800d6f8 <_strtod_l+0x590>)
 800d5fa:	f1c5 050f 	rsb	r5, r5, #15
 800d5fe:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800d602:	4652      	mov	r2, sl
 800d604:	465b      	mov	r3, fp
 800d606:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d60a:	f7f2 fff5 	bl	80005f8 <__aeabi_dmul>
 800d60e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d610:	1b5d      	subs	r5, r3, r5
 800d612:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800d616:	e9d4 2300 	ldrd	r2, r3, [r4]
 800d61a:	e78f      	b.n	800d53c <_strtod_l+0x3d4>
 800d61c:	3316      	adds	r3, #22
 800d61e:	dba8      	blt.n	800d572 <_strtod_l+0x40a>
 800d620:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d622:	eba3 0808 	sub.w	r8, r3, r8
 800d626:	4b34      	ldr	r3, [pc, #208]	@ (800d6f8 <_strtod_l+0x590>)
 800d628:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800d62c:	e9d8 2300 	ldrd	r2, r3, [r8]
 800d630:	4650      	mov	r0, sl
 800d632:	4659      	mov	r1, fp
 800d634:	f7f3 f90a 	bl	800084c <__aeabi_ddiv>
 800d638:	e782      	b.n	800d540 <_strtod_l+0x3d8>
 800d63a:	2300      	movs	r3, #0
 800d63c:	4f2f      	ldr	r7, [pc, #188]	@ (800d6fc <_strtod_l+0x594>)
 800d63e:	1124      	asrs	r4, r4, #4
 800d640:	4650      	mov	r0, sl
 800d642:	4659      	mov	r1, fp
 800d644:	461e      	mov	r6, r3
 800d646:	2c01      	cmp	r4, #1
 800d648:	dc21      	bgt.n	800d68e <_strtod_l+0x526>
 800d64a:	b10b      	cbz	r3, 800d650 <_strtod_l+0x4e8>
 800d64c:	4682      	mov	sl, r0
 800d64e:	468b      	mov	fp, r1
 800d650:	492a      	ldr	r1, [pc, #168]	@ (800d6fc <_strtod_l+0x594>)
 800d652:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800d656:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800d65a:	4652      	mov	r2, sl
 800d65c:	465b      	mov	r3, fp
 800d65e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d662:	f7f2 ffc9 	bl	80005f8 <__aeabi_dmul>
 800d666:	4b26      	ldr	r3, [pc, #152]	@ (800d700 <_strtod_l+0x598>)
 800d668:	460a      	mov	r2, r1
 800d66a:	400b      	ands	r3, r1
 800d66c:	4925      	ldr	r1, [pc, #148]	@ (800d704 <_strtod_l+0x59c>)
 800d66e:	428b      	cmp	r3, r1
 800d670:	4682      	mov	sl, r0
 800d672:	d898      	bhi.n	800d5a6 <_strtod_l+0x43e>
 800d674:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800d678:	428b      	cmp	r3, r1
 800d67a:	bf86      	itte	hi
 800d67c:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 800d708 <_strtod_l+0x5a0>
 800d680:	f04f 3aff 	movhi.w	sl, #4294967295
 800d684:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800d688:	2300      	movs	r3, #0
 800d68a:	9308      	str	r3, [sp, #32]
 800d68c:	e076      	b.n	800d77c <_strtod_l+0x614>
 800d68e:	07e2      	lsls	r2, r4, #31
 800d690:	d504      	bpl.n	800d69c <_strtod_l+0x534>
 800d692:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d696:	f7f2 ffaf 	bl	80005f8 <__aeabi_dmul>
 800d69a:	2301      	movs	r3, #1
 800d69c:	3601      	adds	r6, #1
 800d69e:	1064      	asrs	r4, r4, #1
 800d6a0:	3708      	adds	r7, #8
 800d6a2:	e7d0      	b.n	800d646 <_strtod_l+0x4de>
 800d6a4:	d0f0      	beq.n	800d688 <_strtod_l+0x520>
 800d6a6:	4264      	negs	r4, r4
 800d6a8:	f014 020f 	ands.w	r2, r4, #15
 800d6ac:	d00a      	beq.n	800d6c4 <_strtod_l+0x55c>
 800d6ae:	4b12      	ldr	r3, [pc, #72]	@ (800d6f8 <_strtod_l+0x590>)
 800d6b0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d6b4:	4650      	mov	r0, sl
 800d6b6:	4659      	mov	r1, fp
 800d6b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6bc:	f7f3 f8c6 	bl	800084c <__aeabi_ddiv>
 800d6c0:	4682      	mov	sl, r0
 800d6c2:	468b      	mov	fp, r1
 800d6c4:	1124      	asrs	r4, r4, #4
 800d6c6:	d0df      	beq.n	800d688 <_strtod_l+0x520>
 800d6c8:	2c1f      	cmp	r4, #31
 800d6ca:	dd1f      	ble.n	800d70c <_strtod_l+0x5a4>
 800d6cc:	2400      	movs	r4, #0
 800d6ce:	46a0      	mov	r8, r4
 800d6d0:	940b      	str	r4, [sp, #44]	@ 0x2c
 800d6d2:	46a1      	mov	r9, r4
 800d6d4:	9a05      	ldr	r2, [sp, #20]
 800d6d6:	2322      	movs	r3, #34	@ 0x22
 800d6d8:	f04f 0a00 	mov.w	sl, #0
 800d6dc:	f04f 0b00 	mov.w	fp, #0
 800d6e0:	6013      	str	r3, [r2, #0]
 800d6e2:	e76b      	b.n	800d5bc <_strtod_l+0x454>
 800d6e4:	0800efe1 	.word	0x0800efe1
 800d6e8:	0800f2a8 	.word	0x0800f2a8
 800d6ec:	0800efd9 	.word	0x0800efd9
 800d6f0:	0800f010 	.word	0x0800f010
 800d6f4:	0800f149 	.word	0x0800f149
 800d6f8:	0800f1e0 	.word	0x0800f1e0
 800d6fc:	0800f1b8 	.word	0x0800f1b8
 800d700:	7ff00000 	.word	0x7ff00000
 800d704:	7ca00000 	.word	0x7ca00000
 800d708:	7fefffff 	.word	0x7fefffff
 800d70c:	f014 0310 	ands.w	r3, r4, #16
 800d710:	bf18      	it	ne
 800d712:	236a      	movne	r3, #106	@ 0x6a
 800d714:	4ea9      	ldr	r6, [pc, #676]	@ (800d9bc <_strtod_l+0x854>)
 800d716:	9308      	str	r3, [sp, #32]
 800d718:	4650      	mov	r0, sl
 800d71a:	4659      	mov	r1, fp
 800d71c:	2300      	movs	r3, #0
 800d71e:	07e7      	lsls	r7, r4, #31
 800d720:	d504      	bpl.n	800d72c <_strtod_l+0x5c4>
 800d722:	e9d6 2300 	ldrd	r2, r3, [r6]
 800d726:	f7f2 ff67 	bl	80005f8 <__aeabi_dmul>
 800d72a:	2301      	movs	r3, #1
 800d72c:	1064      	asrs	r4, r4, #1
 800d72e:	f106 0608 	add.w	r6, r6, #8
 800d732:	d1f4      	bne.n	800d71e <_strtod_l+0x5b6>
 800d734:	b10b      	cbz	r3, 800d73a <_strtod_l+0x5d2>
 800d736:	4682      	mov	sl, r0
 800d738:	468b      	mov	fp, r1
 800d73a:	9b08      	ldr	r3, [sp, #32]
 800d73c:	b1b3      	cbz	r3, 800d76c <_strtod_l+0x604>
 800d73e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800d742:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800d746:	2b00      	cmp	r3, #0
 800d748:	4659      	mov	r1, fp
 800d74a:	dd0f      	ble.n	800d76c <_strtod_l+0x604>
 800d74c:	2b1f      	cmp	r3, #31
 800d74e:	dd56      	ble.n	800d7fe <_strtod_l+0x696>
 800d750:	2b34      	cmp	r3, #52	@ 0x34
 800d752:	bfde      	ittt	le
 800d754:	f04f 33ff 	movle.w	r3, #4294967295
 800d758:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800d75c:	4093      	lslle	r3, r2
 800d75e:	f04f 0a00 	mov.w	sl, #0
 800d762:	bfcc      	ite	gt
 800d764:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800d768:	ea03 0b01 	andle.w	fp, r3, r1
 800d76c:	2200      	movs	r2, #0
 800d76e:	2300      	movs	r3, #0
 800d770:	4650      	mov	r0, sl
 800d772:	4659      	mov	r1, fp
 800d774:	f7f3 f9a8 	bl	8000ac8 <__aeabi_dcmpeq>
 800d778:	2800      	cmp	r0, #0
 800d77a:	d1a7      	bne.n	800d6cc <_strtod_l+0x564>
 800d77c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d77e:	9300      	str	r3, [sp, #0]
 800d780:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800d782:	9805      	ldr	r0, [sp, #20]
 800d784:	462b      	mov	r3, r5
 800d786:	464a      	mov	r2, r9
 800d788:	f7ff f8cc 	bl	800c924 <__s2b>
 800d78c:	900b      	str	r0, [sp, #44]	@ 0x2c
 800d78e:	2800      	cmp	r0, #0
 800d790:	f43f af09 	beq.w	800d5a6 <_strtod_l+0x43e>
 800d794:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d796:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d798:	2a00      	cmp	r2, #0
 800d79a:	eba3 0308 	sub.w	r3, r3, r8
 800d79e:	bfa8      	it	ge
 800d7a0:	2300      	movge	r3, #0
 800d7a2:	9312      	str	r3, [sp, #72]	@ 0x48
 800d7a4:	2400      	movs	r4, #0
 800d7a6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800d7aa:	9316      	str	r3, [sp, #88]	@ 0x58
 800d7ac:	46a0      	mov	r8, r4
 800d7ae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d7b0:	9805      	ldr	r0, [sp, #20]
 800d7b2:	6859      	ldr	r1, [r3, #4]
 800d7b4:	f7ff f80e 	bl	800c7d4 <_Balloc>
 800d7b8:	4681      	mov	r9, r0
 800d7ba:	2800      	cmp	r0, #0
 800d7bc:	f43f aef7 	beq.w	800d5ae <_strtod_l+0x446>
 800d7c0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d7c2:	691a      	ldr	r2, [r3, #16]
 800d7c4:	3202      	adds	r2, #2
 800d7c6:	f103 010c 	add.w	r1, r3, #12
 800d7ca:	0092      	lsls	r2, r2, #2
 800d7cc:	300c      	adds	r0, #12
 800d7ce:	f000 ff27 	bl	800e620 <memcpy>
 800d7d2:	ec4b ab10 	vmov	d0, sl, fp
 800d7d6:	9805      	ldr	r0, [sp, #20]
 800d7d8:	aa1c      	add	r2, sp, #112	@ 0x70
 800d7da:	a91b      	add	r1, sp, #108	@ 0x6c
 800d7dc:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800d7e0:	f7ff fbd4 	bl	800cf8c <__d2b>
 800d7e4:	901a      	str	r0, [sp, #104]	@ 0x68
 800d7e6:	2800      	cmp	r0, #0
 800d7e8:	f43f aee1 	beq.w	800d5ae <_strtod_l+0x446>
 800d7ec:	9805      	ldr	r0, [sp, #20]
 800d7ee:	2101      	movs	r1, #1
 800d7f0:	f7ff f92e 	bl	800ca50 <__i2b>
 800d7f4:	4680      	mov	r8, r0
 800d7f6:	b948      	cbnz	r0, 800d80c <_strtod_l+0x6a4>
 800d7f8:	f04f 0800 	mov.w	r8, #0
 800d7fc:	e6d7      	b.n	800d5ae <_strtod_l+0x446>
 800d7fe:	f04f 32ff 	mov.w	r2, #4294967295
 800d802:	fa02 f303 	lsl.w	r3, r2, r3
 800d806:	ea03 0a0a 	and.w	sl, r3, sl
 800d80a:	e7af      	b.n	800d76c <_strtod_l+0x604>
 800d80c:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800d80e:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800d810:	2d00      	cmp	r5, #0
 800d812:	bfab      	itete	ge
 800d814:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800d816:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800d818:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800d81a:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800d81c:	bfac      	ite	ge
 800d81e:	18ef      	addge	r7, r5, r3
 800d820:	1b5e      	sublt	r6, r3, r5
 800d822:	9b08      	ldr	r3, [sp, #32]
 800d824:	1aed      	subs	r5, r5, r3
 800d826:	4415      	add	r5, r2
 800d828:	4b65      	ldr	r3, [pc, #404]	@ (800d9c0 <_strtod_l+0x858>)
 800d82a:	3d01      	subs	r5, #1
 800d82c:	429d      	cmp	r5, r3
 800d82e:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800d832:	da50      	bge.n	800d8d6 <_strtod_l+0x76e>
 800d834:	1b5b      	subs	r3, r3, r5
 800d836:	2b1f      	cmp	r3, #31
 800d838:	eba2 0203 	sub.w	r2, r2, r3
 800d83c:	f04f 0101 	mov.w	r1, #1
 800d840:	dc3d      	bgt.n	800d8be <_strtod_l+0x756>
 800d842:	fa01 f303 	lsl.w	r3, r1, r3
 800d846:	9313      	str	r3, [sp, #76]	@ 0x4c
 800d848:	2300      	movs	r3, #0
 800d84a:	9310      	str	r3, [sp, #64]	@ 0x40
 800d84c:	18bd      	adds	r5, r7, r2
 800d84e:	9b08      	ldr	r3, [sp, #32]
 800d850:	42af      	cmp	r7, r5
 800d852:	4416      	add	r6, r2
 800d854:	441e      	add	r6, r3
 800d856:	463b      	mov	r3, r7
 800d858:	bfa8      	it	ge
 800d85a:	462b      	movge	r3, r5
 800d85c:	42b3      	cmp	r3, r6
 800d85e:	bfa8      	it	ge
 800d860:	4633      	movge	r3, r6
 800d862:	2b00      	cmp	r3, #0
 800d864:	bfc2      	ittt	gt
 800d866:	1aed      	subgt	r5, r5, r3
 800d868:	1af6      	subgt	r6, r6, r3
 800d86a:	1aff      	subgt	r7, r7, r3
 800d86c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800d86e:	2b00      	cmp	r3, #0
 800d870:	dd16      	ble.n	800d8a0 <_strtod_l+0x738>
 800d872:	4641      	mov	r1, r8
 800d874:	9805      	ldr	r0, [sp, #20]
 800d876:	461a      	mov	r2, r3
 800d878:	f7ff f9a2 	bl	800cbc0 <__pow5mult>
 800d87c:	4680      	mov	r8, r0
 800d87e:	2800      	cmp	r0, #0
 800d880:	d0ba      	beq.n	800d7f8 <_strtod_l+0x690>
 800d882:	4601      	mov	r1, r0
 800d884:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800d886:	9805      	ldr	r0, [sp, #20]
 800d888:	f7ff f8f8 	bl	800ca7c <__multiply>
 800d88c:	900a      	str	r0, [sp, #40]	@ 0x28
 800d88e:	2800      	cmp	r0, #0
 800d890:	f43f ae8d 	beq.w	800d5ae <_strtod_l+0x446>
 800d894:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d896:	9805      	ldr	r0, [sp, #20]
 800d898:	f7fe ffdc 	bl	800c854 <_Bfree>
 800d89c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d89e:	931a      	str	r3, [sp, #104]	@ 0x68
 800d8a0:	2d00      	cmp	r5, #0
 800d8a2:	dc1d      	bgt.n	800d8e0 <_strtod_l+0x778>
 800d8a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d8a6:	2b00      	cmp	r3, #0
 800d8a8:	dd23      	ble.n	800d8f2 <_strtod_l+0x78a>
 800d8aa:	4649      	mov	r1, r9
 800d8ac:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800d8ae:	9805      	ldr	r0, [sp, #20]
 800d8b0:	f7ff f986 	bl	800cbc0 <__pow5mult>
 800d8b4:	4681      	mov	r9, r0
 800d8b6:	b9e0      	cbnz	r0, 800d8f2 <_strtod_l+0x78a>
 800d8b8:	f04f 0900 	mov.w	r9, #0
 800d8bc:	e677      	b.n	800d5ae <_strtod_l+0x446>
 800d8be:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800d8c2:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800d8c6:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800d8ca:	35e2      	adds	r5, #226	@ 0xe2
 800d8cc:	fa01 f305 	lsl.w	r3, r1, r5
 800d8d0:	9310      	str	r3, [sp, #64]	@ 0x40
 800d8d2:	9113      	str	r1, [sp, #76]	@ 0x4c
 800d8d4:	e7ba      	b.n	800d84c <_strtod_l+0x6e4>
 800d8d6:	2300      	movs	r3, #0
 800d8d8:	9310      	str	r3, [sp, #64]	@ 0x40
 800d8da:	2301      	movs	r3, #1
 800d8dc:	9313      	str	r3, [sp, #76]	@ 0x4c
 800d8de:	e7b5      	b.n	800d84c <_strtod_l+0x6e4>
 800d8e0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d8e2:	9805      	ldr	r0, [sp, #20]
 800d8e4:	462a      	mov	r2, r5
 800d8e6:	f7ff f9c5 	bl	800cc74 <__lshift>
 800d8ea:	901a      	str	r0, [sp, #104]	@ 0x68
 800d8ec:	2800      	cmp	r0, #0
 800d8ee:	d1d9      	bne.n	800d8a4 <_strtod_l+0x73c>
 800d8f0:	e65d      	b.n	800d5ae <_strtod_l+0x446>
 800d8f2:	2e00      	cmp	r6, #0
 800d8f4:	dd07      	ble.n	800d906 <_strtod_l+0x79e>
 800d8f6:	4649      	mov	r1, r9
 800d8f8:	9805      	ldr	r0, [sp, #20]
 800d8fa:	4632      	mov	r2, r6
 800d8fc:	f7ff f9ba 	bl	800cc74 <__lshift>
 800d900:	4681      	mov	r9, r0
 800d902:	2800      	cmp	r0, #0
 800d904:	d0d8      	beq.n	800d8b8 <_strtod_l+0x750>
 800d906:	2f00      	cmp	r7, #0
 800d908:	dd08      	ble.n	800d91c <_strtod_l+0x7b4>
 800d90a:	4641      	mov	r1, r8
 800d90c:	9805      	ldr	r0, [sp, #20]
 800d90e:	463a      	mov	r2, r7
 800d910:	f7ff f9b0 	bl	800cc74 <__lshift>
 800d914:	4680      	mov	r8, r0
 800d916:	2800      	cmp	r0, #0
 800d918:	f43f ae49 	beq.w	800d5ae <_strtod_l+0x446>
 800d91c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d91e:	9805      	ldr	r0, [sp, #20]
 800d920:	464a      	mov	r2, r9
 800d922:	f7ff fa2f 	bl	800cd84 <__mdiff>
 800d926:	4604      	mov	r4, r0
 800d928:	2800      	cmp	r0, #0
 800d92a:	f43f ae40 	beq.w	800d5ae <_strtod_l+0x446>
 800d92e:	68c3      	ldr	r3, [r0, #12]
 800d930:	930f      	str	r3, [sp, #60]	@ 0x3c
 800d932:	2300      	movs	r3, #0
 800d934:	60c3      	str	r3, [r0, #12]
 800d936:	4641      	mov	r1, r8
 800d938:	f7ff fa08 	bl	800cd4c <__mcmp>
 800d93c:	2800      	cmp	r0, #0
 800d93e:	da45      	bge.n	800d9cc <_strtod_l+0x864>
 800d940:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d942:	ea53 030a 	orrs.w	r3, r3, sl
 800d946:	d16b      	bne.n	800da20 <_strtod_l+0x8b8>
 800d948:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d94c:	2b00      	cmp	r3, #0
 800d94e:	d167      	bne.n	800da20 <_strtod_l+0x8b8>
 800d950:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d954:	0d1b      	lsrs	r3, r3, #20
 800d956:	051b      	lsls	r3, r3, #20
 800d958:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800d95c:	d960      	bls.n	800da20 <_strtod_l+0x8b8>
 800d95e:	6963      	ldr	r3, [r4, #20]
 800d960:	b913      	cbnz	r3, 800d968 <_strtod_l+0x800>
 800d962:	6923      	ldr	r3, [r4, #16]
 800d964:	2b01      	cmp	r3, #1
 800d966:	dd5b      	ble.n	800da20 <_strtod_l+0x8b8>
 800d968:	4621      	mov	r1, r4
 800d96a:	2201      	movs	r2, #1
 800d96c:	9805      	ldr	r0, [sp, #20]
 800d96e:	f7ff f981 	bl	800cc74 <__lshift>
 800d972:	4641      	mov	r1, r8
 800d974:	4604      	mov	r4, r0
 800d976:	f7ff f9e9 	bl	800cd4c <__mcmp>
 800d97a:	2800      	cmp	r0, #0
 800d97c:	dd50      	ble.n	800da20 <_strtod_l+0x8b8>
 800d97e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d982:	9a08      	ldr	r2, [sp, #32]
 800d984:	0d1b      	lsrs	r3, r3, #20
 800d986:	051b      	lsls	r3, r3, #20
 800d988:	2a00      	cmp	r2, #0
 800d98a:	d06a      	beq.n	800da62 <_strtod_l+0x8fa>
 800d98c:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800d990:	d867      	bhi.n	800da62 <_strtod_l+0x8fa>
 800d992:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800d996:	f67f ae9d 	bls.w	800d6d4 <_strtod_l+0x56c>
 800d99a:	4b0a      	ldr	r3, [pc, #40]	@ (800d9c4 <_strtod_l+0x85c>)
 800d99c:	4650      	mov	r0, sl
 800d99e:	4659      	mov	r1, fp
 800d9a0:	2200      	movs	r2, #0
 800d9a2:	f7f2 fe29 	bl	80005f8 <__aeabi_dmul>
 800d9a6:	4b08      	ldr	r3, [pc, #32]	@ (800d9c8 <_strtod_l+0x860>)
 800d9a8:	400b      	ands	r3, r1
 800d9aa:	4682      	mov	sl, r0
 800d9ac:	468b      	mov	fp, r1
 800d9ae:	2b00      	cmp	r3, #0
 800d9b0:	f47f ae08 	bne.w	800d5c4 <_strtod_l+0x45c>
 800d9b4:	9a05      	ldr	r2, [sp, #20]
 800d9b6:	2322      	movs	r3, #34	@ 0x22
 800d9b8:	6013      	str	r3, [r2, #0]
 800d9ba:	e603      	b.n	800d5c4 <_strtod_l+0x45c>
 800d9bc:	0800f2d0 	.word	0x0800f2d0
 800d9c0:	fffffc02 	.word	0xfffffc02
 800d9c4:	39500000 	.word	0x39500000
 800d9c8:	7ff00000 	.word	0x7ff00000
 800d9cc:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800d9d0:	d165      	bne.n	800da9e <_strtod_l+0x936>
 800d9d2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800d9d4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d9d8:	b35a      	cbz	r2, 800da32 <_strtod_l+0x8ca>
 800d9da:	4a9f      	ldr	r2, [pc, #636]	@ (800dc58 <_strtod_l+0xaf0>)
 800d9dc:	4293      	cmp	r3, r2
 800d9de:	d12b      	bne.n	800da38 <_strtod_l+0x8d0>
 800d9e0:	9b08      	ldr	r3, [sp, #32]
 800d9e2:	4651      	mov	r1, sl
 800d9e4:	b303      	cbz	r3, 800da28 <_strtod_l+0x8c0>
 800d9e6:	4b9d      	ldr	r3, [pc, #628]	@ (800dc5c <_strtod_l+0xaf4>)
 800d9e8:	465a      	mov	r2, fp
 800d9ea:	4013      	ands	r3, r2
 800d9ec:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800d9f0:	f04f 32ff 	mov.w	r2, #4294967295
 800d9f4:	d81b      	bhi.n	800da2e <_strtod_l+0x8c6>
 800d9f6:	0d1b      	lsrs	r3, r3, #20
 800d9f8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800d9fc:	fa02 f303 	lsl.w	r3, r2, r3
 800da00:	4299      	cmp	r1, r3
 800da02:	d119      	bne.n	800da38 <_strtod_l+0x8d0>
 800da04:	4b96      	ldr	r3, [pc, #600]	@ (800dc60 <_strtod_l+0xaf8>)
 800da06:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800da08:	429a      	cmp	r2, r3
 800da0a:	d102      	bne.n	800da12 <_strtod_l+0x8aa>
 800da0c:	3101      	adds	r1, #1
 800da0e:	f43f adce 	beq.w	800d5ae <_strtod_l+0x446>
 800da12:	4b92      	ldr	r3, [pc, #584]	@ (800dc5c <_strtod_l+0xaf4>)
 800da14:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800da16:	401a      	ands	r2, r3
 800da18:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800da1c:	f04f 0a00 	mov.w	sl, #0
 800da20:	9b08      	ldr	r3, [sp, #32]
 800da22:	2b00      	cmp	r3, #0
 800da24:	d1b9      	bne.n	800d99a <_strtod_l+0x832>
 800da26:	e5cd      	b.n	800d5c4 <_strtod_l+0x45c>
 800da28:	f04f 33ff 	mov.w	r3, #4294967295
 800da2c:	e7e8      	b.n	800da00 <_strtod_l+0x898>
 800da2e:	4613      	mov	r3, r2
 800da30:	e7e6      	b.n	800da00 <_strtod_l+0x898>
 800da32:	ea53 030a 	orrs.w	r3, r3, sl
 800da36:	d0a2      	beq.n	800d97e <_strtod_l+0x816>
 800da38:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800da3a:	b1db      	cbz	r3, 800da74 <_strtod_l+0x90c>
 800da3c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800da3e:	4213      	tst	r3, r2
 800da40:	d0ee      	beq.n	800da20 <_strtod_l+0x8b8>
 800da42:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800da44:	9a08      	ldr	r2, [sp, #32]
 800da46:	4650      	mov	r0, sl
 800da48:	4659      	mov	r1, fp
 800da4a:	b1bb      	cbz	r3, 800da7c <_strtod_l+0x914>
 800da4c:	f7ff fb6c 	bl	800d128 <sulp>
 800da50:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800da54:	ec53 2b10 	vmov	r2, r3, d0
 800da58:	f7f2 fc18 	bl	800028c <__adddf3>
 800da5c:	4682      	mov	sl, r0
 800da5e:	468b      	mov	fp, r1
 800da60:	e7de      	b.n	800da20 <_strtod_l+0x8b8>
 800da62:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800da66:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800da6a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800da6e:	f04f 3aff 	mov.w	sl, #4294967295
 800da72:	e7d5      	b.n	800da20 <_strtod_l+0x8b8>
 800da74:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800da76:	ea13 0f0a 	tst.w	r3, sl
 800da7a:	e7e1      	b.n	800da40 <_strtod_l+0x8d8>
 800da7c:	f7ff fb54 	bl	800d128 <sulp>
 800da80:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800da84:	ec53 2b10 	vmov	r2, r3, d0
 800da88:	f7f2 fbfe 	bl	8000288 <__aeabi_dsub>
 800da8c:	2200      	movs	r2, #0
 800da8e:	2300      	movs	r3, #0
 800da90:	4682      	mov	sl, r0
 800da92:	468b      	mov	fp, r1
 800da94:	f7f3 f818 	bl	8000ac8 <__aeabi_dcmpeq>
 800da98:	2800      	cmp	r0, #0
 800da9a:	d0c1      	beq.n	800da20 <_strtod_l+0x8b8>
 800da9c:	e61a      	b.n	800d6d4 <_strtod_l+0x56c>
 800da9e:	4641      	mov	r1, r8
 800daa0:	4620      	mov	r0, r4
 800daa2:	f7ff facb 	bl	800d03c <__ratio>
 800daa6:	ec57 6b10 	vmov	r6, r7, d0
 800daaa:	2200      	movs	r2, #0
 800daac:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800dab0:	4630      	mov	r0, r6
 800dab2:	4639      	mov	r1, r7
 800dab4:	f7f3 f81c 	bl	8000af0 <__aeabi_dcmple>
 800dab8:	2800      	cmp	r0, #0
 800daba:	d06f      	beq.n	800db9c <_strtod_l+0xa34>
 800dabc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800dabe:	2b00      	cmp	r3, #0
 800dac0:	d17a      	bne.n	800dbb8 <_strtod_l+0xa50>
 800dac2:	f1ba 0f00 	cmp.w	sl, #0
 800dac6:	d158      	bne.n	800db7a <_strtod_l+0xa12>
 800dac8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800daca:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800dace:	2b00      	cmp	r3, #0
 800dad0:	d15a      	bne.n	800db88 <_strtod_l+0xa20>
 800dad2:	4b64      	ldr	r3, [pc, #400]	@ (800dc64 <_strtod_l+0xafc>)
 800dad4:	2200      	movs	r2, #0
 800dad6:	4630      	mov	r0, r6
 800dad8:	4639      	mov	r1, r7
 800dada:	f7f2 ffff 	bl	8000adc <__aeabi_dcmplt>
 800dade:	2800      	cmp	r0, #0
 800dae0:	d159      	bne.n	800db96 <_strtod_l+0xa2e>
 800dae2:	4630      	mov	r0, r6
 800dae4:	4639      	mov	r1, r7
 800dae6:	4b60      	ldr	r3, [pc, #384]	@ (800dc68 <_strtod_l+0xb00>)
 800dae8:	2200      	movs	r2, #0
 800daea:	f7f2 fd85 	bl	80005f8 <__aeabi_dmul>
 800daee:	4606      	mov	r6, r0
 800daf0:	460f      	mov	r7, r1
 800daf2:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800daf6:	9606      	str	r6, [sp, #24]
 800daf8:	9307      	str	r3, [sp, #28]
 800dafa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800dafe:	4d57      	ldr	r5, [pc, #348]	@ (800dc5c <_strtod_l+0xaf4>)
 800db00:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800db04:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800db06:	401d      	ands	r5, r3
 800db08:	4b58      	ldr	r3, [pc, #352]	@ (800dc6c <_strtod_l+0xb04>)
 800db0a:	429d      	cmp	r5, r3
 800db0c:	f040 80b2 	bne.w	800dc74 <_strtod_l+0xb0c>
 800db10:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800db12:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800db16:	ec4b ab10 	vmov	d0, sl, fp
 800db1a:	f7ff f9c7 	bl	800ceac <__ulp>
 800db1e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800db22:	ec51 0b10 	vmov	r0, r1, d0
 800db26:	f7f2 fd67 	bl	80005f8 <__aeabi_dmul>
 800db2a:	4652      	mov	r2, sl
 800db2c:	465b      	mov	r3, fp
 800db2e:	f7f2 fbad 	bl	800028c <__adddf3>
 800db32:	460b      	mov	r3, r1
 800db34:	4949      	ldr	r1, [pc, #292]	@ (800dc5c <_strtod_l+0xaf4>)
 800db36:	4a4e      	ldr	r2, [pc, #312]	@ (800dc70 <_strtod_l+0xb08>)
 800db38:	4019      	ands	r1, r3
 800db3a:	4291      	cmp	r1, r2
 800db3c:	4682      	mov	sl, r0
 800db3e:	d942      	bls.n	800dbc6 <_strtod_l+0xa5e>
 800db40:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800db42:	4b47      	ldr	r3, [pc, #284]	@ (800dc60 <_strtod_l+0xaf8>)
 800db44:	429a      	cmp	r2, r3
 800db46:	d103      	bne.n	800db50 <_strtod_l+0x9e8>
 800db48:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800db4a:	3301      	adds	r3, #1
 800db4c:	f43f ad2f 	beq.w	800d5ae <_strtod_l+0x446>
 800db50:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800dc60 <_strtod_l+0xaf8>
 800db54:	f04f 3aff 	mov.w	sl, #4294967295
 800db58:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800db5a:	9805      	ldr	r0, [sp, #20]
 800db5c:	f7fe fe7a 	bl	800c854 <_Bfree>
 800db60:	9805      	ldr	r0, [sp, #20]
 800db62:	4649      	mov	r1, r9
 800db64:	f7fe fe76 	bl	800c854 <_Bfree>
 800db68:	9805      	ldr	r0, [sp, #20]
 800db6a:	4641      	mov	r1, r8
 800db6c:	f7fe fe72 	bl	800c854 <_Bfree>
 800db70:	9805      	ldr	r0, [sp, #20]
 800db72:	4621      	mov	r1, r4
 800db74:	f7fe fe6e 	bl	800c854 <_Bfree>
 800db78:	e619      	b.n	800d7ae <_strtod_l+0x646>
 800db7a:	f1ba 0f01 	cmp.w	sl, #1
 800db7e:	d103      	bne.n	800db88 <_strtod_l+0xa20>
 800db80:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800db82:	2b00      	cmp	r3, #0
 800db84:	f43f ada6 	beq.w	800d6d4 <_strtod_l+0x56c>
 800db88:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800dc38 <_strtod_l+0xad0>
 800db8c:	4f35      	ldr	r7, [pc, #212]	@ (800dc64 <_strtod_l+0xafc>)
 800db8e:	ed8d 7b06 	vstr	d7, [sp, #24]
 800db92:	2600      	movs	r6, #0
 800db94:	e7b1      	b.n	800dafa <_strtod_l+0x992>
 800db96:	4f34      	ldr	r7, [pc, #208]	@ (800dc68 <_strtod_l+0xb00>)
 800db98:	2600      	movs	r6, #0
 800db9a:	e7aa      	b.n	800daf2 <_strtod_l+0x98a>
 800db9c:	4b32      	ldr	r3, [pc, #200]	@ (800dc68 <_strtod_l+0xb00>)
 800db9e:	4630      	mov	r0, r6
 800dba0:	4639      	mov	r1, r7
 800dba2:	2200      	movs	r2, #0
 800dba4:	f7f2 fd28 	bl	80005f8 <__aeabi_dmul>
 800dba8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800dbaa:	4606      	mov	r6, r0
 800dbac:	460f      	mov	r7, r1
 800dbae:	2b00      	cmp	r3, #0
 800dbb0:	d09f      	beq.n	800daf2 <_strtod_l+0x98a>
 800dbb2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800dbb6:	e7a0      	b.n	800dafa <_strtod_l+0x992>
 800dbb8:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800dc40 <_strtod_l+0xad8>
 800dbbc:	ed8d 7b06 	vstr	d7, [sp, #24]
 800dbc0:	ec57 6b17 	vmov	r6, r7, d7
 800dbc4:	e799      	b.n	800dafa <_strtod_l+0x992>
 800dbc6:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800dbca:	9b08      	ldr	r3, [sp, #32]
 800dbcc:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800dbd0:	2b00      	cmp	r3, #0
 800dbd2:	d1c1      	bne.n	800db58 <_strtod_l+0x9f0>
 800dbd4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800dbd8:	0d1b      	lsrs	r3, r3, #20
 800dbda:	051b      	lsls	r3, r3, #20
 800dbdc:	429d      	cmp	r5, r3
 800dbde:	d1bb      	bne.n	800db58 <_strtod_l+0x9f0>
 800dbe0:	4630      	mov	r0, r6
 800dbe2:	4639      	mov	r1, r7
 800dbe4:	f7f3 f868 	bl	8000cb8 <__aeabi_d2lz>
 800dbe8:	f7f2 fcd8 	bl	800059c <__aeabi_l2d>
 800dbec:	4602      	mov	r2, r0
 800dbee:	460b      	mov	r3, r1
 800dbf0:	4630      	mov	r0, r6
 800dbf2:	4639      	mov	r1, r7
 800dbf4:	f7f2 fb48 	bl	8000288 <__aeabi_dsub>
 800dbf8:	460b      	mov	r3, r1
 800dbfa:	4602      	mov	r2, r0
 800dbfc:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800dc00:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800dc04:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800dc06:	ea46 060a 	orr.w	r6, r6, sl
 800dc0a:	431e      	orrs	r6, r3
 800dc0c:	d06f      	beq.n	800dcee <_strtod_l+0xb86>
 800dc0e:	a30e      	add	r3, pc, #56	@ (adr r3, 800dc48 <_strtod_l+0xae0>)
 800dc10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc14:	f7f2 ff62 	bl	8000adc <__aeabi_dcmplt>
 800dc18:	2800      	cmp	r0, #0
 800dc1a:	f47f acd3 	bne.w	800d5c4 <_strtod_l+0x45c>
 800dc1e:	a30c      	add	r3, pc, #48	@ (adr r3, 800dc50 <_strtod_l+0xae8>)
 800dc20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc24:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800dc28:	f7f2 ff76 	bl	8000b18 <__aeabi_dcmpgt>
 800dc2c:	2800      	cmp	r0, #0
 800dc2e:	d093      	beq.n	800db58 <_strtod_l+0x9f0>
 800dc30:	e4c8      	b.n	800d5c4 <_strtod_l+0x45c>
 800dc32:	bf00      	nop
 800dc34:	f3af 8000 	nop.w
 800dc38:	00000000 	.word	0x00000000
 800dc3c:	bff00000 	.word	0xbff00000
 800dc40:	00000000 	.word	0x00000000
 800dc44:	3ff00000 	.word	0x3ff00000
 800dc48:	94a03595 	.word	0x94a03595
 800dc4c:	3fdfffff 	.word	0x3fdfffff
 800dc50:	35afe535 	.word	0x35afe535
 800dc54:	3fe00000 	.word	0x3fe00000
 800dc58:	000fffff 	.word	0x000fffff
 800dc5c:	7ff00000 	.word	0x7ff00000
 800dc60:	7fefffff 	.word	0x7fefffff
 800dc64:	3ff00000 	.word	0x3ff00000
 800dc68:	3fe00000 	.word	0x3fe00000
 800dc6c:	7fe00000 	.word	0x7fe00000
 800dc70:	7c9fffff 	.word	0x7c9fffff
 800dc74:	9b08      	ldr	r3, [sp, #32]
 800dc76:	b323      	cbz	r3, 800dcc2 <_strtod_l+0xb5a>
 800dc78:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800dc7c:	d821      	bhi.n	800dcc2 <_strtod_l+0xb5a>
 800dc7e:	a328      	add	r3, pc, #160	@ (adr r3, 800dd20 <_strtod_l+0xbb8>)
 800dc80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc84:	4630      	mov	r0, r6
 800dc86:	4639      	mov	r1, r7
 800dc88:	f7f2 ff32 	bl	8000af0 <__aeabi_dcmple>
 800dc8c:	b1a0      	cbz	r0, 800dcb8 <_strtod_l+0xb50>
 800dc8e:	4639      	mov	r1, r7
 800dc90:	4630      	mov	r0, r6
 800dc92:	f7f2 ff89 	bl	8000ba8 <__aeabi_d2uiz>
 800dc96:	2801      	cmp	r0, #1
 800dc98:	bf38      	it	cc
 800dc9a:	2001      	movcc	r0, #1
 800dc9c:	f7f2 fc32 	bl	8000504 <__aeabi_ui2d>
 800dca0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800dca2:	4606      	mov	r6, r0
 800dca4:	460f      	mov	r7, r1
 800dca6:	b9fb      	cbnz	r3, 800dce8 <_strtod_l+0xb80>
 800dca8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800dcac:	9014      	str	r0, [sp, #80]	@ 0x50
 800dcae:	9315      	str	r3, [sp, #84]	@ 0x54
 800dcb0:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800dcb4:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800dcb8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800dcba:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800dcbe:	1b5b      	subs	r3, r3, r5
 800dcc0:	9311      	str	r3, [sp, #68]	@ 0x44
 800dcc2:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800dcc6:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800dcca:	f7ff f8ef 	bl	800ceac <__ulp>
 800dcce:	4650      	mov	r0, sl
 800dcd0:	ec53 2b10 	vmov	r2, r3, d0
 800dcd4:	4659      	mov	r1, fp
 800dcd6:	f7f2 fc8f 	bl	80005f8 <__aeabi_dmul>
 800dcda:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800dcde:	f7f2 fad5 	bl	800028c <__adddf3>
 800dce2:	4682      	mov	sl, r0
 800dce4:	468b      	mov	fp, r1
 800dce6:	e770      	b.n	800dbca <_strtod_l+0xa62>
 800dce8:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800dcec:	e7e0      	b.n	800dcb0 <_strtod_l+0xb48>
 800dcee:	a30e      	add	r3, pc, #56	@ (adr r3, 800dd28 <_strtod_l+0xbc0>)
 800dcf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dcf4:	f7f2 fef2 	bl	8000adc <__aeabi_dcmplt>
 800dcf8:	e798      	b.n	800dc2c <_strtod_l+0xac4>
 800dcfa:	2300      	movs	r3, #0
 800dcfc:	930e      	str	r3, [sp, #56]	@ 0x38
 800dcfe:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800dd00:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800dd02:	6013      	str	r3, [r2, #0]
 800dd04:	f7ff ba6d 	b.w	800d1e2 <_strtod_l+0x7a>
 800dd08:	2a65      	cmp	r2, #101	@ 0x65
 800dd0a:	f43f ab68 	beq.w	800d3de <_strtod_l+0x276>
 800dd0e:	2a45      	cmp	r2, #69	@ 0x45
 800dd10:	f43f ab65 	beq.w	800d3de <_strtod_l+0x276>
 800dd14:	2301      	movs	r3, #1
 800dd16:	f7ff bba0 	b.w	800d45a <_strtod_l+0x2f2>
 800dd1a:	bf00      	nop
 800dd1c:	f3af 8000 	nop.w
 800dd20:	ffc00000 	.word	0xffc00000
 800dd24:	41dfffff 	.word	0x41dfffff
 800dd28:	94a03595 	.word	0x94a03595
 800dd2c:	3fcfffff 	.word	0x3fcfffff

0800dd30 <_strtod_r>:
 800dd30:	4b01      	ldr	r3, [pc, #4]	@ (800dd38 <_strtod_r+0x8>)
 800dd32:	f7ff ba19 	b.w	800d168 <_strtod_l>
 800dd36:	bf00      	nop
 800dd38:	2000026c 	.word	0x2000026c

0800dd3c <_strtol_l.isra.0>:
 800dd3c:	2b24      	cmp	r3, #36	@ 0x24
 800dd3e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dd42:	4686      	mov	lr, r0
 800dd44:	4690      	mov	r8, r2
 800dd46:	d801      	bhi.n	800dd4c <_strtol_l.isra.0+0x10>
 800dd48:	2b01      	cmp	r3, #1
 800dd4a:	d106      	bne.n	800dd5a <_strtol_l.isra.0+0x1e>
 800dd4c:	f7fd fe6a 	bl	800ba24 <__errno>
 800dd50:	2316      	movs	r3, #22
 800dd52:	6003      	str	r3, [r0, #0]
 800dd54:	2000      	movs	r0, #0
 800dd56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dd5a:	4834      	ldr	r0, [pc, #208]	@ (800de2c <_strtol_l.isra.0+0xf0>)
 800dd5c:	460d      	mov	r5, r1
 800dd5e:	462a      	mov	r2, r5
 800dd60:	f815 4b01 	ldrb.w	r4, [r5], #1
 800dd64:	5d06      	ldrb	r6, [r0, r4]
 800dd66:	f016 0608 	ands.w	r6, r6, #8
 800dd6a:	d1f8      	bne.n	800dd5e <_strtol_l.isra.0+0x22>
 800dd6c:	2c2d      	cmp	r4, #45	@ 0x2d
 800dd6e:	d110      	bne.n	800dd92 <_strtol_l.isra.0+0x56>
 800dd70:	782c      	ldrb	r4, [r5, #0]
 800dd72:	2601      	movs	r6, #1
 800dd74:	1c95      	adds	r5, r2, #2
 800dd76:	f033 0210 	bics.w	r2, r3, #16
 800dd7a:	d115      	bne.n	800dda8 <_strtol_l.isra.0+0x6c>
 800dd7c:	2c30      	cmp	r4, #48	@ 0x30
 800dd7e:	d10d      	bne.n	800dd9c <_strtol_l.isra.0+0x60>
 800dd80:	782a      	ldrb	r2, [r5, #0]
 800dd82:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800dd86:	2a58      	cmp	r2, #88	@ 0x58
 800dd88:	d108      	bne.n	800dd9c <_strtol_l.isra.0+0x60>
 800dd8a:	786c      	ldrb	r4, [r5, #1]
 800dd8c:	3502      	adds	r5, #2
 800dd8e:	2310      	movs	r3, #16
 800dd90:	e00a      	b.n	800dda8 <_strtol_l.isra.0+0x6c>
 800dd92:	2c2b      	cmp	r4, #43	@ 0x2b
 800dd94:	bf04      	itt	eq
 800dd96:	782c      	ldrbeq	r4, [r5, #0]
 800dd98:	1c95      	addeq	r5, r2, #2
 800dd9a:	e7ec      	b.n	800dd76 <_strtol_l.isra.0+0x3a>
 800dd9c:	2b00      	cmp	r3, #0
 800dd9e:	d1f6      	bne.n	800dd8e <_strtol_l.isra.0+0x52>
 800dda0:	2c30      	cmp	r4, #48	@ 0x30
 800dda2:	bf14      	ite	ne
 800dda4:	230a      	movne	r3, #10
 800dda6:	2308      	moveq	r3, #8
 800dda8:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800ddac:	f10c 3cff 	add.w	ip, ip, #4294967295
 800ddb0:	2200      	movs	r2, #0
 800ddb2:	fbbc f9f3 	udiv	r9, ip, r3
 800ddb6:	4610      	mov	r0, r2
 800ddb8:	fb03 ca19 	mls	sl, r3, r9, ip
 800ddbc:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800ddc0:	2f09      	cmp	r7, #9
 800ddc2:	d80f      	bhi.n	800dde4 <_strtol_l.isra.0+0xa8>
 800ddc4:	463c      	mov	r4, r7
 800ddc6:	42a3      	cmp	r3, r4
 800ddc8:	dd1b      	ble.n	800de02 <_strtol_l.isra.0+0xc6>
 800ddca:	1c57      	adds	r7, r2, #1
 800ddcc:	d007      	beq.n	800ddde <_strtol_l.isra.0+0xa2>
 800ddce:	4581      	cmp	r9, r0
 800ddd0:	d314      	bcc.n	800ddfc <_strtol_l.isra.0+0xc0>
 800ddd2:	d101      	bne.n	800ddd8 <_strtol_l.isra.0+0x9c>
 800ddd4:	45a2      	cmp	sl, r4
 800ddd6:	db11      	blt.n	800ddfc <_strtol_l.isra.0+0xc0>
 800ddd8:	fb00 4003 	mla	r0, r0, r3, r4
 800dddc:	2201      	movs	r2, #1
 800ddde:	f815 4b01 	ldrb.w	r4, [r5], #1
 800dde2:	e7eb      	b.n	800ddbc <_strtol_l.isra.0+0x80>
 800dde4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800dde8:	2f19      	cmp	r7, #25
 800ddea:	d801      	bhi.n	800ddf0 <_strtol_l.isra.0+0xb4>
 800ddec:	3c37      	subs	r4, #55	@ 0x37
 800ddee:	e7ea      	b.n	800ddc6 <_strtol_l.isra.0+0x8a>
 800ddf0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800ddf4:	2f19      	cmp	r7, #25
 800ddf6:	d804      	bhi.n	800de02 <_strtol_l.isra.0+0xc6>
 800ddf8:	3c57      	subs	r4, #87	@ 0x57
 800ddfa:	e7e4      	b.n	800ddc6 <_strtol_l.isra.0+0x8a>
 800ddfc:	f04f 32ff 	mov.w	r2, #4294967295
 800de00:	e7ed      	b.n	800ddde <_strtol_l.isra.0+0xa2>
 800de02:	1c53      	adds	r3, r2, #1
 800de04:	d108      	bne.n	800de18 <_strtol_l.isra.0+0xdc>
 800de06:	2322      	movs	r3, #34	@ 0x22
 800de08:	f8ce 3000 	str.w	r3, [lr]
 800de0c:	4660      	mov	r0, ip
 800de0e:	f1b8 0f00 	cmp.w	r8, #0
 800de12:	d0a0      	beq.n	800dd56 <_strtol_l.isra.0+0x1a>
 800de14:	1e69      	subs	r1, r5, #1
 800de16:	e006      	b.n	800de26 <_strtol_l.isra.0+0xea>
 800de18:	b106      	cbz	r6, 800de1c <_strtol_l.isra.0+0xe0>
 800de1a:	4240      	negs	r0, r0
 800de1c:	f1b8 0f00 	cmp.w	r8, #0
 800de20:	d099      	beq.n	800dd56 <_strtol_l.isra.0+0x1a>
 800de22:	2a00      	cmp	r2, #0
 800de24:	d1f6      	bne.n	800de14 <_strtol_l.isra.0+0xd8>
 800de26:	f8c8 1000 	str.w	r1, [r8]
 800de2a:	e794      	b.n	800dd56 <_strtol_l.isra.0+0x1a>
 800de2c:	0800f2f9 	.word	0x0800f2f9

0800de30 <_strtol_r>:
 800de30:	f7ff bf84 	b.w	800dd3c <_strtol_l.isra.0>

0800de34 <__ssputs_r>:
 800de34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800de38:	688e      	ldr	r6, [r1, #8]
 800de3a:	461f      	mov	r7, r3
 800de3c:	42be      	cmp	r6, r7
 800de3e:	680b      	ldr	r3, [r1, #0]
 800de40:	4682      	mov	sl, r0
 800de42:	460c      	mov	r4, r1
 800de44:	4690      	mov	r8, r2
 800de46:	d82d      	bhi.n	800dea4 <__ssputs_r+0x70>
 800de48:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800de4c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800de50:	d026      	beq.n	800dea0 <__ssputs_r+0x6c>
 800de52:	6965      	ldr	r5, [r4, #20]
 800de54:	6909      	ldr	r1, [r1, #16]
 800de56:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800de5a:	eba3 0901 	sub.w	r9, r3, r1
 800de5e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800de62:	1c7b      	adds	r3, r7, #1
 800de64:	444b      	add	r3, r9
 800de66:	106d      	asrs	r5, r5, #1
 800de68:	429d      	cmp	r5, r3
 800de6a:	bf38      	it	cc
 800de6c:	461d      	movcc	r5, r3
 800de6e:	0553      	lsls	r3, r2, #21
 800de70:	d527      	bpl.n	800dec2 <__ssputs_r+0x8e>
 800de72:	4629      	mov	r1, r5
 800de74:	f7fc fc58 	bl	800a728 <_malloc_r>
 800de78:	4606      	mov	r6, r0
 800de7a:	b360      	cbz	r0, 800ded6 <__ssputs_r+0xa2>
 800de7c:	6921      	ldr	r1, [r4, #16]
 800de7e:	464a      	mov	r2, r9
 800de80:	f000 fbce 	bl	800e620 <memcpy>
 800de84:	89a3      	ldrh	r3, [r4, #12]
 800de86:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800de8a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800de8e:	81a3      	strh	r3, [r4, #12]
 800de90:	6126      	str	r6, [r4, #16]
 800de92:	6165      	str	r5, [r4, #20]
 800de94:	444e      	add	r6, r9
 800de96:	eba5 0509 	sub.w	r5, r5, r9
 800de9a:	6026      	str	r6, [r4, #0]
 800de9c:	60a5      	str	r5, [r4, #8]
 800de9e:	463e      	mov	r6, r7
 800dea0:	42be      	cmp	r6, r7
 800dea2:	d900      	bls.n	800dea6 <__ssputs_r+0x72>
 800dea4:	463e      	mov	r6, r7
 800dea6:	6820      	ldr	r0, [r4, #0]
 800dea8:	4632      	mov	r2, r6
 800deaa:	4641      	mov	r1, r8
 800deac:	f000 fb6a 	bl	800e584 <memmove>
 800deb0:	68a3      	ldr	r3, [r4, #8]
 800deb2:	1b9b      	subs	r3, r3, r6
 800deb4:	60a3      	str	r3, [r4, #8]
 800deb6:	6823      	ldr	r3, [r4, #0]
 800deb8:	4433      	add	r3, r6
 800deba:	6023      	str	r3, [r4, #0]
 800debc:	2000      	movs	r0, #0
 800debe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dec2:	462a      	mov	r2, r5
 800dec4:	f000 ff41 	bl	800ed4a <_realloc_r>
 800dec8:	4606      	mov	r6, r0
 800deca:	2800      	cmp	r0, #0
 800decc:	d1e0      	bne.n	800de90 <__ssputs_r+0x5c>
 800dece:	6921      	ldr	r1, [r4, #16]
 800ded0:	4650      	mov	r0, sl
 800ded2:	f7fe fc35 	bl	800c740 <_free_r>
 800ded6:	230c      	movs	r3, #12
 800ded8:	f8ca 3000 	str.w	r3, [sl]
 800dedc:	89a3      	ldrh	r3, [r4, #12]
 800dede:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800dee2:	81a3      	strh	r3, [r4, #12]
 800dee4:	f04f 30ff 	mov.w	r0, #4294967295
 800dee8:	e7e9      	b.n	800debe <__ssputs_r+0x8a>
	...

0800deec <_svfiprintf_r>:
 800deec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800def0:	4698      	mov	r8, r3
 800def2:	898b      	ldrh	r3, [r1, #12]
 800def4:	061b      	lsls	r3, r3, #24
 800def6:	b09d      	sub	sp, #116	@ 0x74
 800def8:	4607      	mov	r7, r0
 800defa:	460d      	mov	r5, r1
 800defc:	4614      	mov	r4, r2
 800defe:	d510      	bpl.n	800df22 <_svfiprintf_r+0x36>
 800df00:	690b      	ldr	r3, [r1, #16]
 800df02:	b973      	cbnz	r3, 800df22 <_svfiprintf_r+0x36>
 800df04:	2140      	movs	r1, #64	@ 0x40
 800df06:	f7fc fc0f 	bl	800a728 <_malloc_r>
 800df0a:	6028      	str	r0, [r5, #0]
 800df0c:	6128      	str	r0, [r5, #16]
 800df0e:	b930      	cbnz	r0, 800df1e <_svfiprintf_r+0x32>
 800df10:	230c      	movs	r3, #12
 800df12:	603b      	str	r3, [r7, #0]
 800df14:	f04f 30ff 	mov.w	r0, #4294967295
 800df18:	b01d      	add	sp, #116	@ 0x74
 800df1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df1e:	2340      	movs	r3, #64	@ 0x40
 800df20:	616b      	str	r3, [r5, #20]
 800df22:	2300      	movs	r3, #0
 800df24:	9309      	str	r3, [sp, #36]	@ 0x24
 800df26:	2320      	movs	r3, #32
 800df28:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800df2c:	f8cd 800c 	str.w	r8, [sp, #12]
 800df30:	2330      	movs	r3, #48	@ 0x30
 800df32:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800e0d0 <_svfiprintf_r+0x1e4>
 800df36:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800df3a:	f04f 0901 	mov.w	r9, #1
 800df3e:	4623      	mov	r3, r4
 800df40:	469a      	mov	sl, r3
 800df42:	f813 2b01 	ldrb.w	r2, [r3], #1
 800df46:	b10a      	cbz	r2, 800df4c <_svfiprintf_r+0x60>
 800df48:	2a25      	cmp	r2, #37	@ 0x25
 800df4a:	d1f9      	bne.n	800df40 <_svfiprintf_r+0x54>
 800df4c:	ebba 0b04 	subs.w	fp, sl, r4
 800df50:	d00b      	beq.n	800df6a <_svfiprintf_r+0x7e>
 800df52:	465b      	mov	r3, fp
 800df54:	4622      	mov	r2, r4
 800df56:	4629      	mov	r1, r5
 800df58:	4638      	mov	r0, r7
 800df5a:	f7ff ff6b 	bl	800de34 <__ssputs_r>
 800df5e:	3001      	adds	r0, #1
 800df60:	f000 80a7 	beq.w	800e0b2 <_svfiprintf_r+0x1c6>
 800df64:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800df66:	445a      	add	r2, fp
 800df68:	9209      	str	r2, [sp, #36]	@ 0x24
 800df6a:	f89a 3000 	ldrb.w	r3, [sl]
 800df6e:	2b00      	cmp	r3, #0
 800df70:	f000 809f 	beq.w	800e0b2 <_svfiprintf_r+0x1c6>
 800df74:	2300      	movs	r3, #0
 800df76:	f04f 32ff 	mov.w	r2, #4294967295
 800df7a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800df7e:	f10a 0a01 	add.w	sl, sl, #1
 800df82:	9304      	str	r3, [sp, #16]
 800df84:	9307      	str	r3, [sp, #28]
 800df86:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800df8a:	931a      	str	r3, [sp, #104]	@ 0x68
 800df8c:	4654      	mov	r4, sl
 800df8e:	2205      	movs	r2, #5
 800df90:	f814 1b01 	ldrb.w	r1, [r4], #1
 800df94:	484e      	ldr	r0, [pc, #312]	@ (800e0d0 <_svfiprintf_r+0x1e4>)
 800df96:	f7f2 f91b 	bl	80001d0 <memchr>
 800df9a:	9a04      	ldr	r2, [sp, #16]
 800df9c:	b9d8      	cbnz	r0, 800dfd6 <_svfiprintf_r+0xea>
 800df9e:	06d0      	lsls	r0, r2, #27
 800dfa0:	bf44      	itt	mi
 800dfa2:	2320      	movmi	r3, #32
 800dfa4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800dfa8:	0711      	lsls	r1, r2, #28
 800dfaa:	bf44      	itt	mi
 800dfac:	232b      	movmi	r3, #43	@ 0x2b
 800dfae:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800dfb2:	f89a 3000 	ldrb.w	r3, [sl]
 800dfb6:	2b2a      	cmp	r3, #42	@ 0x2a
 800dfb8:	d015      	beq.n	800dfe6 <_svfiprintf_r+0xfa>
 800dfba:	9a07      	ldr	r2, [sp, #28]
 800dfbc:	4654      	mov	r4, sl
 800dfbe:	2000      	movs	r0, #0
 800dfc0:	f04f 0c0a 	mov.w	ip, #10
 800dfc4:	4621      	mov	r1, r4
 800dfc6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800dfca:	3b30      	subs	r3, #48	@ 0x30
 800dfcc:	2b09      	cmp	r3, #9
 800dfce:	d94b      	bls.n	800e068 <_svfiprintf_r+0x17c>
 800dfd0:	b1b0      	cbz	r0, 800e000 <_svfiprintf_r+0x114>
 800dfd2:	9207      	str	r2, [sp, #28]
 800dfd4:	e014      	b.n	800e000 <_svfiprintf_r+0x114>
 800dfd6:	eba0 0308 	sub.w	r3, r0, r8
 800dfda:	fa09 f303 	lsl.w	r3, r9, r3
 800dfde:	4313      	orrs	r3, r2
 800dfe0:	9304      	str	r3, [sp, #16]
 800dfe2:	46a2      	mov	sl, r4
 800dfe4:	e7d2      	b.n	800df8c <_svfiprintf_r+0xa0>
 800dfe6:	9b03      	ldr	r3, [sp, #12]
 800dfe8:	1d19      	adds	r1, r3, #4
 800dfea:	681b      	ldr	r3, [r3, #0]
 800dfec:	9103      	str	r1, [sp, #12]
 800dfee:	2b00      	cmp	r3, #0
 800dff0:	bfbb      	ittet	lt
 800dff2:	425b      	neglt	r3, r3
 800dff4:	f042 0202 	orrlt.w	r2, r2, #2
 800dff8:	9307      	strge	r3, [sp, #28]
 800dffa:	9307      	strlt	r3, [sp, #28]
 800dffc:	bfb8      	it	lt
 800dffe:	9204      	strlt	r2, [sp, #16]
 800e000:	7823      	ldrb	r3, [r4, #0]
 800e002:	2b2e      	cmp	r3, #46	@ 0x2e
 800e004:	d10a      	bne.n	800e01c <_svfiprintf_r+0x130>
 800e006:	7863      	ldrb	r3, [r4, #1]
 800e008:	2b2a      	cmp	r3, #42	@ 0x2a
 800e00a:	d132      	bne.n	800e072 <_svfiprintf_r+0x186>
 800e00c:	9b03      	ldr	r3, [sp, #12]
 800e00e:	1d1a      	adds	r2, r3, #4
 800e010:	681b      	ldr	r3, [r3, #0]
 800e012:	9203      	str	r2, [sp, #12]
 800e014:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e018:	3402      	adds	r4, #2
 800e01a:	9305      	str	r3, [sp, #20]
 800e01c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800e0e0 <_svfiprintf_r+0x1f4>
 800e020:	7821      	ldrb	r1, [r4, #0]
 800e022:	2203      	movs	r2, #3
 800e024:	4650      	mov	r0, sl
 800e026:	f7f2 f8d3 	bl	80001d0 <memchr>
 800e02a:	b138      	cbz	r0, 800e03c <_svfiprintf_r+0x150>
 800e02c:	9b04      	ldr	r3, [sp, #16]
 800e02e:	eba0 000a 	sub.w	r0, r0, sl
 800e032:	2240      	movs	r2, #64	@ 0x40
 800e034:	4082      	lsls	r2, r0
 800e036:	4313      	orrs	r3, r2
 800e038:	3401      	adds	r4, #1
 800e03a:	9304      	str	r3, [sp, #16]
 800e03c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e040:	4824      	ldr	r0, [pc, #144]	@ (800e0d4 <_svfiprintf_r+0x1e8>)
 800e042:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e046:	2206      	movs	r2, #6
 800e048:	f7f2 f8c2 	bl	80001d0 <memchr>
 800e04c:	2800      	cmp	r0, #0
 800e04e:	d036      	beq.n	800e0be <_svfiprintf_r+0x1d2>
 800e050:	4b21      	ldr	r3, [pc, #132]	@ (800e0d8 <_svfiprintf_r+0x1ec>)
 800e052:	bb1b      	cbnz	r3, 800e09c <_svfiprintf_r+0x1b0>
 800e054:	9b03      	ldr	r3, [sp, #12]
 800e056:	3307      	adds	r3, #7
 800e058:	f023 0307 	bic.w	r3, r3, #7
 800e05c:	3308      	adds	r3, #8
 800e05e:	9303      	str	r3, [sp, #12]
 800e060:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e062:	4433      	add	r3, r6
 800e064:	9309      	str	r3, [sp, #36]	@ 0x24
 800e066:	e76a      	b.n	800df3e <_svfiprintf_r+0x52>
 800e068:	fb0c 3202 	mla	r2, ip, r2, r3
 800e06c:	460c      	mov	r4, r1
 800e06e:	2001      	movs	r0, #1
 800e070:	e7a8      	b.n	800dfc4 <_svfiprintf_r+0xd8>
 800e072:	2300      	movs	r3, #0
 800e074:	3401      	adds	r4, #1
 800e076:	9305      	str	r3, [sp, #20]
 800e078:	4619      	mov	r1, r3
 800e07a:	f04f 0c0a 	mov.w	ip, #10
 800e07e:	4620      	mov	r0, r4
 800e080:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e084:	3a30      	subs	r2, #48	@ 0x30
 800e086:	2a09      	cmp	r2, #9
 800e088:	d903      	bls.n	800e092 <_svfiprintf_r+0x1a6>
 800e08a:	2b00      	cmp	r3, #0
 800e08c:	d0c6      	beq.n	800e01c <_svfiprintf_r+0x130>
 800e08e:	9105      	str	r1, [sp, #20]
 800e090:	e7c4      	b.n	800e01c <_svfiprintf_r+0x130>
 800e092:	fb0c 2101 	mla	r1, ip, r1, r2
 800e096:	4604      	mov	r4, r0
 800e098:	2301      	movs	r3, #1
 800e09a:	e7f0      	b.n	800e07e <_svfiprintf_r+0x192>
 800e09c:	ab03      	add	r3, sp, #12
 800e09e:	9300      	str	r3, [sp, #0]
 800e0a0:	462a      	mov	r2, r5
 800e0a2:	4b0e      	ldr	r3, [pc, #56]	@ (800e0dc <_svfiprintf_r+0x1f0>)
 800e0a4:	a904      	add	r1, sp, #16
 800e0a6:	4638      	mov	r0, r7
 800e0a8:	f7fc fc6a 	bl	800a980 <_printf_float>
 800e0ac:	1c42      	adds	r2, r0, #1
 800e0ae:	4606      	mov	r6, r0
 800e0b0:	d1d6      	bne.n	800e060 <_svfiprintf_r+0x174>
 800e0b2:	89ab      	ldrh	r3, [r5, #12]
 800e0b4:	065b      	lsls	r3, r3, #25
 800e0b6:	f53f af2d 	bmi.w	800df14 <_svfiprintf_r+0x28>
 800e0ba:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e0bc:	e72c      	b.n	800df18 <_svfiprintf_r+0x2c>
 800e0be:	ab03      	add	r3, sp, #12
 800e0c0:	9300      	str	r3, [sp, #0]
 800e0c2:	462a      	mov	r2, r5
 800e0c4:	4b05      	ldr	r3, [pc, #20]	@ (800e0dc <_svfiprintf_r+0x1f0>)
 800e0c6:	a904      	add	r1, sp, #16
 800e0c8:	4638      	mov	r0, r7
 800e0ca:	f7fc fef1 	bl	800aeb0 <_printf_i>
 800e0ce:	e7ed      	b.n	800e0ac <_svfiprintf_r+0x1c0>
 800e0d0:	0800f0f5 	.word	0x0800f0f5
 800e0d4:	0800f0ff 	.word	0x0800f0ff
 800e0d8:	0800a981 	.word	0x0800a981
 800e0dc:	0800de35 	.word	0x0800de35
 800e0e0:	0800f0fb 	.word	0x0800f0fb

0800e0e4 <__sfputc_r>:
 800e0e4:	6893      	ldr	r3, [r2, #8]
 800e0e6:	3b01      	subs	r3, #1
 800e0e8:	2b00      	cmp	r3, #0
 800e0ea:	b410      	push	{r4}
 800e0ec:	6093      	str	r3, [r2, #8]
 800e0ee:	da08      	bge.n	800e102 <__sfputc_r+0x1e>
 800e0f0:	6994      	ldr	r4, [r2, #24]
 800e0f2:	42a3      	cmp	r3, r4
 800e0f4:	db01      	blt.n	800e0fa <__sfputc_r+0x16>
 800e0f6:	290a      	cmp	r1, #10
 800e0f8:	d103      	bne.n	800e102 <__sfputc_r+0x1e>
 800e0fa:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e0fe:	f7fd bb9a 	b.w	800b836 <__swbuf_r>
 800e102:	6813      	ldr	r3, [r2, #0]
 800e104:	1c58      	adds	r0, r3, #1
 800e106:	6010      	str	r0, [r2, #0]
 800e108:	7019      	strb	r1, [r3, #0]
 800e10a:	4608      	mov	r0, r1
 800e10c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e110:	4770      	bx	lr

0800e112 <__sfputs_r>:
 800e112:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e114:	4606      	mov	r6, r0
 800e116:	460f      	mov	r7, r1
 800e118:	4614      	mov	r4, r2
 800e11a:	18d5      	adds	r5, r2, r3
 800e11c:	42ac      	cmp	r4, r5
 800e11e:	d101      	bne.n	800e124 <__sfputs_r+0x12>
 800e120:	2000      	movs	r0, #0
 800e122:	e007      	b.n	800e134 <__sfputs_r+0x22>
 800e124:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e128:	463a      	mov	r2, r7
 800e12a:	4630      	mov	r0, r6
 800e12c:	f7ff ffda 	bl	800e0e4 <__sfputc_r>
 800e130:	1c43      	adds	r3, r0, #1
 800e132:	d1f3      	bne.n	800e11c <__sfputs_r+0xa>
 800e134:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e138 <_vfiprintf_r>:
 800e138:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e13c:	460d      	mov	r5, r1
 800e13e:	b09d      	sub	sp, #116	@ 0x74
 800e140:	4614      	mov	r4, r2
 800e142:	4698      	mov	r8, r3
 800e144:	4606      	mov	r6, r0
 800e146:	b118      	cbz	r0, 800e150 <_vfiprintf_r+0x18>
 800e148:	6a03      	ldr	r3, [r0, #32]
 800e14a:	b90b      	cbnz	r3, 800e150 <_vfiprintf_r+0x18>
 800e14c:	f7fd fa68 	bl	800b620 <__sinit>
 800e150:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e152:	07d9      	lsls	r1, r3, #31
 800e154:	d405      	bmi.n	800e162 <_vfiprintf_r+0x2a>
 800e156:	89ab      	ldrh	r3, [r5, #12]
 800e158:	059a      	lsls	r2, r3, #22
 800e15a:	d402      	bmi.n	800e162 <_vfiprintf_r+0x2a>
 800e15c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e15e:	f7fd fc8c 	bl	800ba7a <__retarget_lock_acquire_recursive>
 800e162:	89ab      	ldrh	r3, [r5, #12]
 800e164:	071b      	lsls	r3, r3, #28
 800e166:	d501      	bpl.n	800e16c <_vfiprintf_r+0x34>
 800e168:	692b      	ldr	r3, [r5, #16]
 800e16a:	b99b      	cbnz	r3, 800e194 <_vfiprintf_r+0x5c>
 800e16c:	4629      	mov	r1, r5
 800e16e:	4630      	mov	r0, r6
 800e170:	f7fd fba0 	bl	800b8b4 <__swsetup_r>
 800e174:	b170      	cbz	r0, 800e194 <_vfiprintf_r+0x5c>
 800e176:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e178:	07dc      	lsls	r4, r3, #31
 800e17a:	d504      	bpl.n	800e186 <_vfiprintf_r+0x4e>
 800e17c:	f04f 30ff 	mov.w	r0, #4294967295
 800e180:	b01d      	add	sp, #116	@ 0x74
 800e182:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e186:	89ab      	ldrh	r3, [r5, #12]
 800e188:	0598      	lsls	r0, r3, #22
 800e18a:	d4f7      	bmi.n	800e17c <_vfiprintf_r+0x44>
 800e18c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e18e:	f7fd fc75 	bl	800ba7c <__retarget_lock_release_recursive>
 800e192:	e7f3      	b.n	800e17c <_vfiprintf_r+0x44>
 800e194:	2300      	movs	r3, #0
 800e196:	9309      	str	r3, [sp, #36]	@ 0x24
 800e198:	2320      	movs	r3, #32
 800e19a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e19e:	f8cd 800c 	str.w	r8, [sp, #12]
 800e1a2:	2330      	movs	r3, #48	@ 0x30
 800e1a4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800e354 <_vfiprintf_r+0x21c>
 800e1a8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e1ac:	f04f 0901 	mov.w	r9, #1
 800e1b0:	4623      	mov	r3, r4
 800e1b2:	469a      	mov	sl, r3
 800e1b4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e1b8:	b10a      	cbz	r2, 800e1be <_vfiprintf_r+0x86>
 800e1ba:	2a25      	cmp	r2, #37	@ 0x25
 800e1bc:	d1f9      	bne.n	800e1b2 <_vfiprintf_r+0x7a>
 800e1be:	ebba 0b04 	subs.w	fp, sl, r4
 800e1c2:	d00b      	beq.n	800e1dc <_vfiprintf_r+0xa4>
 800e1c4:	465b      	mov	r3, fp
 800e1c6:	4622      	mov	r2, r4
 800e1c8:	4629      	mov	r1, r5
 800e1ca:	4630      	mov	r0, r6
 800e1cc:	f7ff ffa1 	bl	800e112 <__sfputs_r>
 800e1d0:	3001      	adds	r0, #1
 800e1d2:	f000 80a7 	beq.w	800e324 <_vfiprintf_r+0x1ec>
 800e1d6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e1d8:	445a      	add	r2, fp
 800e1da:	9209      	str	r2, [sp, #36]	@ 0x24
 800e1dc:	f89a 3000 	ldrb.w	r3, [sl]
 800e1e0:	2b00      	cmp	r3, #0
 800e1e2:	f000 809f 	beq.w	800e324 <_vfiprintf_r+0x1ec>
 800e1e6:	2300      	movs	r3, #0
 800e1e8:	f04f 32ff 	mov.w	r2, #4294967295
 800e1ec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e1f0:	f10a 0a01 	add.w	sl, sl, #1
 800e1f4:	9304      	str	r3, [sp, #16]
 800e1f6:	9307      	str	r3, [sp, #28]
 800e1f8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e1fc:	931a      	str	r3, [sp, #104]	@ 0x68
 800e1fe:	4654      	mov	r4, sl
 800e200:	2205      	movs	r2, #5
 800e202:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e206:	4853      	ldr	r0, [pc, #332]	@ (800e354 <_vfiprintf_r+0x21c>)
 800e208:	f7f1 ffe2 	bl	80001d0 <memchr>
 800e20c:	9a04      	ldr	r2, [sp, #16]
 800e20e:	b9d8      	cbnz	r0, 800e248 <_vfiprintf_r+0x110>
 800e210:	06d1      	lsls	r1, r2, #27
 800e212:	bf44      	itt	mi
 800e214:	2320      	movmi	r3, #32
 800e216:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e21a:	0713      	lsls	r3, r2, #28
 800e21c:	bf44      	itt	mi
 800e21e:	232b      	movmi	r3, #43	@ 0x2b
 800e220:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e224:	f89a 3000 	ldrb.w	r3, [sl]
 800e228:	2b2a      	cmp	r3, #42	@ 0x2a
 800e22a:	d015      	beq.n	800e258 <_vfiprintf_r+0x120>
 800e22c:	9a07      	ldr	r2, [sp, #28]
 800e22e:	4654      	mov	r4, sl
 800e230:	2000      	movs	r0, #0
 800e232:	f04f 0c0a 	mov.w	ip, #10
 800e236:	4621      	mov	r1, r4
 800e238:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e23c:	3b30      	subs	r3, #48	@ 0x30
 800e23e:	2b09      	cmp	r3, #9
 800e240:	d94b      	bls.n	800e2da <_vfiprintf_r+0x1a2>
 800e242:	b1b0      	cbz	r0, 800e272 <_vfiprintf_r+0x13a>
 800e244:	9207      	str	r2, [sp, #28]
 800e246:	e014      	b.n	800e272 <_vfiprintf_r+0x13a>
 800e248:	eba0 0308 	sub.w	r3, r0, r8
 800e24c:	fa09 f303 	lsl.w	r3, r9, r3
 800e250:	4313      	orrs	r3, r2
 800e252:	9304      	str	r3, [sp, #16]
 800e254:	46a2      	mov	sl, r4
 800e256:	e7d2      	b.n	800e1fe <_vfiprintf_r+0xc6>
 800e258:	9b03      	ldr	r3, [sp, #12]
 800e25a:	1d19      	adds	r1, r3, #4
 800e25c:	681b      	ldr	r3, [r3, #0]
 800e25e:	9103      	str	r1, [sp, #12]
 800e260:	2b00      	cmp	r3, #0
 800e262:	bfbb      	ittet	lt
 800e264:	425b      	neglt	r3, r3
 800e266:	f042 0202 	orrlt.w	r2, r2, #2
 800e26a:	9307      	strge	r3, [sp, #28]
 800e26c:	9307      	strlt	r3, [sp, #28]
 800e26e:	bfb8      	it	lt
 800e270:	9204      	strlt	r2, [sp, #16]
 800e272:	7823      	ldrb	r3, [r4, #0]
 800e274:	2b2e      	cmp	r3, #46	@ 0x2e
 800e276:	d10a      	bne.n	800e28e <_vfiprintf_r+0x156>
 800e278:	7863      	ldrb	r3, [r4, #1]
 800e27a:	2b2a      	cmp	r3, #42	@ 0x2a
 800e27c:	d132      	bne.n	800e2e4 <_vfiprintf_r+0x1ac>
 800e27e:	9b03      	ldr	r3, [sp, #12]
 800e280:	1d1a      	adds	r2, r3, #4
 800e282:	681b      	ldr	r3, [r3, #0]
 800e284:	9203      	str	r2, [sp, #12]
 800e286:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e28a:	3402      	adds	r4, #2
 800e28c:	9305      	str	r3, [sp, #20]
 800e28e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800e364 <_vfiprintf_r+0x22c>
 800e292:	7821      	ldrb	r1, [r4, #0]
 800e294:	2203      	movs	r2, #3
 800e296:	4650      	mov	r0, sl
 800e298:	f7f1 ff9a 	bl	80001d0 <memchr>
 800e29c:	b138      	cbz	r0, 800e2ae <_vfiprintf_r+0x176>
 800e29e:	9b04      	ldr	r3, [sp, #16]
 800e2a0:	eba0 000a 	sub.w	r0, r0, sl
 800e2a4:	2240      	movs	r2, #64	@ 0x40
 800e2a6:	4082      	lsls	r2, r0
 800e2a8:	4313      	orrs	r3, r2
 800e2aa:	3401      	adds	r4, #1
 800e2ac:	9304      	str	r3, [sp, #16]
 800e2ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e2b2:	4829      	ldr	r0, [pc, #164]	@ (800e358 <_vfiprintf_r+0x220>)
 800e2b4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e2b8:	2206      	movs	r2, #6
 800e2ba:	f7f1 ff89 	bl	80001d0 <memchr>
 800e2be:	2800      	cmp	r0, #0
 800e2c0:	d03f      	beq.n	800e342 <_vfiprintf_r+0x20a>
 800e2c2:	4b26      	ldr	r3, [pc, #152]	@ (800e35c <_vfiprintf_r+0x224>)
 800e2c4:	bb1b      	cbnz	r3, 800e30e <_vfiprintf_r+0x1d6>
 800e2c6:	9b03      	ldr	r3, [sp, #12]
 800e2c8:	3307      	adds	r3, #7
 800e2ca:	f023 0307 	bic.w	r3, r3, #7
 800e2ce:	3308      	adds	r3, #8
 800e2d0:	9303      	str	r3, [sp, #12]
 800e2d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e2d4:	443b      	add	r3, r7
 800e2d6:	9309      	str	r3, [sp, #36]	@ 0x24
 800e2d8:	e76a      	b.n	800e1b0 <_vfiprintf_r+0x78>
 800e2da:	fb0c 3202 	mla	r2, ip, r2, r3
 800e2de:	460c      	mov	r4, r1
 800e2e0:	2001      	movs	r0, #1
 800e2e2:	e7a8      	b.n	800e236 <_vfiprintf_r+0xfe>
 800e2e4:	2300      	movs	r3, #0
 800e2e6:	3401      	adds	r4, #1
 800e2e8:	9305      	str	r3, [sp, #20]
 800e2ea:	4619      	mov	r1, r3
 800e2ec:	f04f 0c0a 	mov.w	ip, #10
 800e2f0:	4620      	mov	r0, r4
 800e2f2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e2f6:	3a30      	subs	r2, #48	@ 0x30
 800e2f8:	2a09      	cmp	r2, #9
 800e2fa:	d903      	bls.n	800e304 <_vfiprintf_r+0x1cc>
 800e2fc:	2b00      	cmp	r3, #0
 800e2fe:	d0c6      	beq.n	800e28e <_vfiprintf_r+0x156>
 800e300:	9105      	str	r1, [sp, #20]
 800e302:	e7c4      	b.n	800e28e <_vfiprintf_r+0x156>
 800e304:	fb0c 2101 	mla	r1, ip, r1, r2
 800e308:	4604      	mov	r4, r0
 800e30a:	2301      	movs	r3, #1
 800e30c:	e7f0      	b.n	800e2f0 <_vfiprintf_r+0x1b8>
 800e30e:	ab03      	add	r3, sp, #12
 800e310:	9300      	str	r3, [sp, #0]
 800e312:	462a      	mov	r2, r5
 800e314:	4b12      	ldr	r3, [pc, #72]	@ (800e360 <_vfiprintf_r+0x228>)
 800e316:	a904      	add	r1, sp, #16
 800e318:	4630      	mov	r0, r6
 800e31a:	f7fc fb31 	bl	800a980 <_printf_float>
 800e31e:	4607      	mov	r7, r0
 800e320:	1c78      	adds	r0, r7, #1
 800e322:	d1d6      	bne.n	800e2d2 <_vfiprintf_r+0x19a>
 800e324:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e326:	07d9      	lsls	r1, r3, #31
 800e328:	d405      	bmi.n	800e336 <_vfiprintf_r+0x1fe>
 800e32a:	89ab      	ldrh	r3, [r5, #12]
 800e32c:	059a      	lsls	r2, r3, #22
 800e32e:	d402      	bmi.n	800e336 <_vfiprintf_r+0x1fe>
 800e330:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e332:	f7fd fba3 	bl	800ba7c <__retarget_lock_release_recursive>
 800e336:	89ab      	ldrh	r3, [r5, #12]
 800e338:	065b      	lsls	r3, r3, #25
 800e33a:	f53f af1f 	bmi.w	800e17c <_vfiprintf_r+0x44>
 800e33e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e340:	e71e      	b.n	800e180 <_vfiprintf_r+0x48>
 800e342:	ab03      	add	r3, sp, #12
 800e344:	9300      	str	r3, [sp, #0]
 800e346:	462a      	mov	r2, r5
 800e348:	4b05      	ldr	r3, [pc, #20]	@ (800e360 <_vfiprintf_r+0x228>)
 800e34a:	a904      	add	r1, sp, #16
 800e34c:	4630      	mov	r0, r6
 800e34e:	f7fc fdaf 	bl	800aeb0 <_printf_i>
 800e352:	e7e4      	b.n	800e31e <_vfiprintf_r+0x1e6>
 800e354:	0800f0f5 	.word	0x0800f0f5
 800e358:	0800f0ff 	.word	0x0800f0ff
 800e35c:	0800a981 	.word	0x0800a981
 800e360:	0800e113 	.word	0x0800e113
 800e364:	0800f0fb 	.word	0x0800f0fb

0800e368 <__sflush_r>:
 800e368:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e36c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e370:	0716      	lsls	r6, r2, #28
 800e372:	4605      	mov	r5, r0
 800e374:	460c      	mov	r4, r1
 800e376:	d454      	bmi.n	800e422 <__sflush_r+0xba>
 800e378:	684b      	ldr	r3, [r1, #4]
 800e37a:	2b00      	cmp	r3, #0
 800e37c:	dc02      	bgt.n	800e384 <__sflush_r+0x1c>
 800e37e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800e380:	2b00      	cmp	r3, #0
 800e382:	dd48      	ble.n	800e416 <__sflush_r+0xae>
 800e384:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e386:	2e00      	cmp	r6, #0
 800e388:	d045      	beq.n	800e416 <__sflush_r+0xae>
 800e38a:	2300      	movs	r3, #0
 800e38c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800e390:	682f      	ldr	r7, [r5, #0]
 800e392:	6a21      	ldr	r1, [r4, #32]
 800e394:	602b      	str	r3, [r5, #0]
 800e396:	d030      	beq.n	800e3fa <__sflush_r+0x92>
 800e398:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800e39a:	89a3      	ldrh	r3, [r4, #12]
 800e39c:	0759      	lsls	r1, r3, #29
 800e39e:	d505      	bpl.n	800e3ac <__sflush_r+0x44>
 800e3a0:	6863      	ldr	r3, [r4, #4]
 800e3a2:	1ad2      	subs	r2, r2, r3
 800e3a4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800e3a6:	b10b      	cbz	r3, 800e3ac <__sflush_r+0x44>
 800e3a8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800e3aa:	1ad2      	subs	r2, r2, r3
 800e3ac:	2300      	movs	r3, #0
 800e3ae:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e3b0:	6a21      	ldr	r1, [r4, #32]
 800e3b2:	4628      	mov	r0, r5
 800e3b4:	47b0      	blx	r6
 800e3b6:	1c43      	adds	r3, r0, #1
 800e3b8:	89a3      	ldrh	r3, [r4, #12]
 800e3ba:	d106      	bne.n	800e3ca <__sflush_r+0x62>
 800e3bc:	6829      	ldr	r1, [r5, #0]
 800e3be:	291d      	cmp	r1, #29
 800e3c0:	d82b      	bhi.n	800e41a <__sflush_r+0xb2>
 800e3c2:	4a2a      	ldr	r2, [pc, #168]	@ (800e46c <__sflush_r+0x104>)
 800e3c4:	40ca      	lsrs	r2, r1
 800e3c6:	07d6      	lsls	r6, r2, #31
 800e3c8:	d527      	bpl.n	800e41a <__sflush_r+0xb2>
 800e3ca:	2200      	movs	r2, #0
 800e3cc:	6062      	str	r2, [r4, #4]
 800e3ce:	04d9      	lsls	r1, r3, #19
 800e3d0:	6922      	ldr	r2, [r4, #16]
 800e3d2:	6022      	str	r2, [r4, #0]
 800e3d4:	d504      	bpl.n	800e3e0 <__sflush_r+0x78>
 800e3d6:	1c42      	adds	r2, r0, #1
 800e3d8:	d101      	bne.n	800e3de <__sflush_r+0x76>
 800e3da:	682b      	ldr	r3, [r5, #0]
 800e3dc:	b903      	cbnz	r3, 800e3e0 <__sflush_r+0x78>
 800e3de:	6560      	str	r0, [r4, #84]	@ 0x54
 800e3e0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e3e2:	602f      	str	r7, [r5, #0]
 800e3e4:	b1b9      	cbz	r1, 800e416 <__sflush_r+0xae>
 800e3e6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e3ea:	4299      	cmp	r1, r3
 800e3ec:	d002      	beq.n	800e3f4 <__sflush_r+0x8c>
 800e3ee:	4628      	mov	r0, r5
 800e3f0:	f7fe f9a6 	bl	800c740 <_free_r>
 800e3f4:	2300      	movs	r3, #0
 800e3f6:	6363      	str	r3, [r4, #52]	@ 0x34
 800e3f8:	e00d      	b.n	800e416 <__sflush_r+0xae>
 800e3fa:	2301      	movs	r3, #1
 800e3fc:	4628      	mov	r0, r5
 800e3fe:	47b0      	blx	r6
 800e400:	4602      	mov	r2, r0
 800e402:	1c50      	adds	r0, r2, #1
 800e404:	d1c9      	bne.n	800e39a <__sflush_r+0x32>
 800e406:	682b      	ldr	r3, [r5, #0]
 800e408:	2b00      	cmp	r3, #0
 800e40a:	d0c6      	beq.n	800e39a <__sflush_r+0x32>
 800e40c:	2b1d      	cmp	r3, #29
 800e40e:	d001      	beq.n	800e414 <__sflush_r+0xac>
 800e410:	2b16      	cmp	r3, #22
 800e412:	d11e      	bne.n	800e452 <__sflush_r+0xea>
 800e414:	602f      	str	r7, [r5, #0]
 800e416:	2000      	movs	r0, #0
 800e418:	e022      	b.n	800e460 <__sflush_r+0xf8>
 800e41a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e41e:	b21b      	sxth	r3, r3
 800e420:	e01b      	b.n	800e45a <__sflush_r+0xf2>
 800e422:	690f      	ldr	r7, [r1, #16]
 800e424:	2f00      	cmp	r7, #0
 800e426:	d0f6      	beq.n	800e416 <__sflush_r+0xae>
 800e428:	0793      	lsls	r3, r2, #30
 800e42a:	680e      	ldr	r6, [r1, #0]
 800e42c:	bf08      	it	eq
 800e42e:	694b      	ldreq	r3, [r1, #20]
 800e430:	600f      	str	r7, [r1, #0]
 800e432:	bf18      	it	ne
 800e434:	2300      	movne	r3, #0
 800e436:	eba6 0807 	sub.w	r8, r6, r7
 800e43a:	608b      	str	r3, [r1, #8]
 800e43c:	f1b8 0f00 	cmp.w	r8, #0
 800e440:	dde9      	ble.n	800e416 <__sflush_r+0xae>
 800e442:	6a21      	ldr	r1, [r4, #32]
 800e444:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800e446:	4643      	mov	r3, r8
 800e448:	463a      	mov	r2, r7
 800e44a:	4628      	mov	r0, r5
 800e44c:	47b0      	blx	r6
 800e44e:	2800      	cmp	r0, #0
 800e450:	dc08      	bgt.n	800e464 <__sflush_r+0xfc>
 800e452:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e456:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e45a:	81a3      	strh	r3, [r4, #12]
 800e45c:	f04f 30ff 	mov.w	r0, #4294967295
 800e460:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e464:	4407      	add	r7, r0
 800e466:	eba8 0800 	sub.w	r8, r8, r0
 800e46a:	e7e7      	b.n	800e43c <__sflush_r+0xd4>
 800e46c:	20400001 	.word	0x20400001

0800e470 <_fflush_r>:
 800e470:	b538      	push	{r3, r4, r5, lr}
 800e472:	690b      	ldr	r3, [r1, #16]
 800e474:	4605      	mov	r5, r0
 800e476:	460c      	mov	r4, r1
 800e478:	b913      	cbnz	r3, 800e480 <_fflush_r+0x10>
 800e47a:	2500      	movs	r5, #0
 800e47c:	4628      	mov	r0, r5
 800e47e:	bd38      	pop	{r3, r4, r5, pc}
 800e480:	b118      	cbz	r0, 800e48a <_fflush_r+0x1a>
 800e482:	6a03      	ldr	r3, [r0, #32]
 800e484:	b90b      	cbnz	r3, 800e48a <_fflush_r+0x1a>
 800e486:	f7fd f8cb 	bl	800b620 <__sinit>
 800e48a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e48e:	2b00      	cmp	r3, #0
 800e490:	d0f3      	beq.n	800e47a <_fflush_r+0xa>
 800e492:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800e494:	07d0      	lsls	r0, r2, #31
 800e496:	d404      	bmi.n	800e4a2 <_fflush_r+0x32>
 800e498:	0599      	lsls	r1, r3, #22
 800e49a:	d402      	bmi.n	800e4a2 <_fflush_r+0x32>
 800e49c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e49e:	f7fd faec 	bl	800ba7a <__retarget_lock_acquire_recursive>
 800e4a2:	4628      	mov	r0, r5
 800e4a4:	4621      	mov	r1, r4
 800e4a6:	f7ff ff5f 	bl	800e368 <__sflush_r>
 800e4aa:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e4ac:	07da      	lsls	r2, r3, #31
 800e4ae:	4605      	mov	r5, r0
 800e4b0:	d4e4      	bmi.n	800e47c <_fflush_r+0xc>
 800e4b2:	89a3      	ldrh	r3, [r4, #12]
 800e4b4:	059b      	lsls	r3, r3, #22
 800e4b6:	d4e1      	bmi.n	800e47c <_fflush_r+0xc>
 800e4b8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e4ba:	f7fd fadf 	bl	800ba7c <__retarget_lock_release_recursive>
 800e4be:	e7dd      	b.n	800e47c <_fflush_r+0xc>

0800e4c0 <__swhatbuf_r>:
 800e4c0:	b570      	push	{r4, r5, r6, lr}
 800e4c2:	460c      	mov	r4, r1
 800e4c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e4c8:	2900      	cmp	r1, #0
 800e4ca:	b096      	sub	sp, #88	@ 0x58
 800e4cc:	4615      	mov	r5, r2
 800e4ce:	461e      	mov	r6, r3
 800e4d0:	da0d      	bge.n	800e4ee <__swhatbuf_r+0x2e>
 800e4d2:	89a3      	ldrh	r3, [r4, #12]
 800e4d4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800e4d8:	f04f 0100 	mov.w	r1, #0
 800e4dc:	bf14      	ite	ne
 800e4de:	2340      	movne	r3, #64	@ 0x40
 800e4e0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800e4e4:	2000      	movs	r0, #0
 800e4e6:	6031      	str	r1, [r6, #0]
 800e4e8:	602b      	str	r3, [r5, #0]
 800e4ea:	b016      	add	sp, #88	@ 0x58
 800e4ec:	bd70      	pop	{r4, r5, r6, pc}
 800e4ee:	466a      	mov	r2, sp
 800e4f0:	f000 f874 	bl	800e5dc <_fstat_r>
 800e4f4:	2800      	cmp	r0, #0
 800e4f6:	dbec      	blt.n	800e4d2 <__swhatbuf_r+0x12>
 800e4f8:	9901      	ldr	r1, [sp, #4]
 800e4fa:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800e4fe:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800e502:	4259      	negs	r1, r3
 800e504:	4159      	adcs	r1, r3
 800e506:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e50a:	e7eb      	b.n	800e4e4 <__swhatbuf_r+0x24>

0800e50c <__smakebuf_r>:
 800e50c:	898b      	ldrh	r3, [r1, #12]
 800e50e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e510:	079d      	lsls	r5, r3, #30
 800e512:	4606      	mov	r6, r0
 800e514:	460c      	mov	r4, r1
 800e516:	d507      	bpl.n	800e528 <__smakebuf_r+0x1c>
 800e518:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800e51c:	6023      	str	r3, [r4, #0]
 800e51e:	6123      	str	r3, [r4, #16]
 800e520:	2301      	movs	r3, #1
 800e522:	6163      	str	r3, [r4, #20]
 800e524:	b003      	add	sp, #12
 800e526:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e528:	ab01      	add	r3, sp, #4
 800e52a:	466a      	mov	r2, sp
 800e52c:	f7ff ffc8 	bl	800e4c0 <__swhatbuf_r>
 800e530:	9f00      	ldr	r7, [sp, #0]
 800e532:	4605      	mov	r5, r0
 800e534:	4639      	mov	r1, r7
 800e536:	4630      	mov	r0, r6
 800e538:	f7fc f8f6 	bl	800a728 <_malloc_r>
 800e53c:	b948      	cbnz	r0, 800e552 <__smakebuf_r+0x46>
 800e53e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e542:	059a      	lsls	r2, r3, #22
 800e544:	d4ee      	bmi.n	800e524 <__smakebuf_r+0x18>
 800e546:	f023 0303 	bic.w	r3, r3, #3
 800e54a:	f043 0302 	orr.w	r3, r3, #2
 800e54e:	81a3      	strh	r3, [r4, #12]
 800e550:	e7e2      	b.n	800e518 <__smakebuf_r+0xc>
 800e552:	89a3      	ldrh	r3, [r4, #12]
 800e554:	6020      	str	r0, [r4, #0]
 800e556:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e55a:	81a3      	strh	r3, [r4, #12]
 800e55c:	9b01      	ldr	r3, [sp, #4]
 800e55e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800e562:	b15b      	cbz	r3, 800e57c <__smakebuf_r+0x70>
 800e564:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e568:	4630      	mov	r0, r6
 800e56a:	f000 f849 	bl	800e600 <_isatty_r>
 800e56e:	b128      	cbz	r0, 800e57c <__smakebuf_r+0x70>
 800e570:	89a3      	ldrh	r3, [r4, #12]
 800e572:	f023 0303 	bic.w	r3, r3, #3
 800e576:	f043 0301 	orr.w	r3, r3, #1
 800e57a:	81a3      	strh	r3, [r4, #12]
 800e57c:	89a3      	ldrh	r3, [r4, #12]
 800e57e:	431d      	orrs	r5, r3
 800e580:	81a5      	strh	r5, [r4, #12]
 800e582:	e7cf      	b.n	800e524 <__smakebuf_r+0x18>

0800e584 <memmove>:
 800e584:	4288      	cmp	r0, r1
 800e586:	b510      	push	{r4, lr}
 800e588:	eb01 0402 	add.w	r4, r1, r2
 800e58c:	d902      	bls.n	800e594 <memmove+0x10>
 800e58e:	4284      	cmp	r4, r0
 800e590:	4623      	mov	r3, r4
 800e592:	d807      	bhi.n	800e5a4 <memmove+0x20>
 800e594:	1e43      	subs	r3, r0, #1
 800e596:	42a1      	cmp	r1, r4
 800e598:	d008      	beq.n	800e5ac <memmove+0x28>
 800e59a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e59e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e5a2:	e7f8      	b.n	800e596 <memmove+0x12>
 800e5a4:	4402      	add	r2, r0
 800e5a6:	4601      	mov	r1, r0
 800e5a8:	428a      	cmp	r2, r1
 800e5aa:	d100      	bne.n	800e5ae <memmove+0x2a>
 800e5ac:	bd10      	pop	{r4, pc}
 800e5ae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e5b2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e5b6:	e7f7      	b.n	800e5a8 <memmove+0x24>

0800e5b8 <strncmp>:
 800e5b8:	b510      	push	{r4, lr}
 800e5ba:	b16a      	cbz	r2, 800e5d8 <strncmp+0x20>
 800e5bc:	3901      	subs	r1, #1
 800e5be:	1884      	adds	r4, r0, r2
 800e5c0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e5c4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800e5c8:	429a      	cmp	r2, r3
 800e5ca:	d103      	bne.n	800e5d4 <strncmp+0x1c>
 800e5cc:	42a0      	cmp	r0, r4
 800e5ce:	d001      	beq.n	800e5d4 <strncmp+0x1c>
 800e5d0:	2a00      	cmp	r2, #0
 800e5d2:	d1f5      	bne.n	800e5c0 <strncmp+0x8>
 800e5d4:	1ad0      	subs	r0, r2, r3
 800e5d6:	bd10      	pop	{r4, pc}
 800e5d8:	4610      	mov	r0, r2
 800e5da:	e7fc      	b.n	800e5d6 <strncmp+0x1e>

0800e5dc <_fstat_r>:
 800e5dc:	b538      	push	{r3, r4, r5, lr}
 800e5de:	4d07      	ldr	r5, [pc, #28]	@ (800e5fc <_fstat_r+0x20>)
 800e5e0:	2300      	movs	r3, #0
 800e5e2:	4604      	mov	r4, r0
 800e5e4:	4608      	mov	r0, r1
 800e5e6:	4611      	mov	r1, r2
 800e5e8:	602b      	str	r3, [r5, #0]
 800e5ea:	f7f3 f9fb 	bl	80019e4 <_fstat>
 800e5ee:	1c43      	adds	r3, r0, #1
 800e5f0:	d102      	bne.n	800e5f8 <_fstat_r+0x1c>
 800e5f2:	682b      	ldr	r3, [r5, #0]
 800e5f4:	b103      	cbz	r3, 800e5f8 <_fstat_r+0x1c>
 800e5f6:	6023      	str	r3, [r4, #0]
 800e5f8:	bd38      	pop	{r3, r4, r5, pc}
 800e5fa:	bf00      	nop
 800e5fc:	20001034 	.word	0x20001034

0800e600 <_isatty_r>:
 800e600:	b538      	push	{r3, r4, r5, lr}
 800e602:	4d06      	ldr	r5, [pc, #24]	@ (800e61c <_isatty_r+0x1c>)
 800e604:	2300      	movs	r3, #0
 800e606:	4604      	mov	r4, r0
 800e608:	4608      	mov	r0, r1
 800e60a:	602b      	str	r3, [r5, #0]
 800e60c:	f7f3 f9fa 	bl	8001a04 <_isatty>
 800e610:	1c43      	adds	r3, r0, #1
 800e612:	d102      	bne.n	800e61a <_isatty_r+0x1a>
 800e614:	682b      	ldr	r3, [r5, #0]
 800e616:	b103      	cbz	r3, 800e61a <_isatty_r+0x1a>
 800e618:	6023      	str	r3, [r4, #0]
 800e61a:	bd38      	pop	{r3, r4, r5, pc}
 800e61c:	20001034 	.word	0x20001034

0800e620 <memcpy>:
 800e620:	440a      	add	r2, r1
 800e622:	4291      	cmp	r1, r2
 800e624:	f100 33ff 	add.w	r3, r0, #4294967295
 800e628:	d100      	bne.n	800e62c <memcpy+0xc>
 800e62a:	4770      	bx	lr
 800e62c:	b510      	push	{r4, lr}
 800e62e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e632:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e636:	4291      	cmp	r1, r2
 800e638:	d1f9      	bne.n	800e62e <memcpy+0xe>
 800e63a:	bd10      	pop	{r4, pc}
 800e63c:	0000      	movs	r0, r0
	...

0800e640 <nan>:
 800e640:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800e648 <nan+0x8>
 800e644:	4770      	bx	lr
 800e646:	bf00      	nop
 800e648:	00000000 	.word	0x00000000
 800e64c:	7ff80000 	.word	0x7ff80000

0800e650 <__assert_func>:
 800e650:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e652:	4614      	mov	r4, r2
 800e654:	461a      	mov	r2, r3
 800e656:	4b09      	ldr	r3, [pc, #36]	@ (800e67c <__assert_func+0x2c>)
 800e658:	681b      	ldr	r3, [r3, #0]
 800e65a:	4605      	mov	r5, r0
 800e65c:	68d8      	ldr	r0, [r3, #12]
 800e65e:	b14c      	cbz	r4, 800e674 <__assert_func+0x24>
 800e660:	4b07      	ldr	r3, [pc, #28]	@ (800e680 <__assert_func+0x30>)
 800e662:	9100      	str	r1, [sp, #0]
 800e664:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e668:	4906      	ldr	r1, [pc, #24]	@ (800e684 <__assert_func+0x34>)
 800e66a:	462b      	mov	r3, r5
 800e66c:	f000 fba8 	bl	800edc0 <fiprintf>
 800e670:	f000 fbb8 	bl	800ede4 <abort>
 800e674:	4b04      	ldr	r3, [pc, #16]	@ (800e688 <__assert_func+0x38>)
 800e676:	461c      	mov	r4, r3
 800e678:	e7f3      	b.n	800e662 <__assert_func+0x12>
 800e67a:	bf00      	nop
 800e67c:	2000021c 	.word	0x2000021c
 800e680:	0800f10e 	.word	0x0800f10e
 800e684:	0800f11b 	.word	0x0800f11b
 800e688:	0800f149 	.word	0x0800f149

0800e68c <_calloc_r>:
 800e68c:	b570      	push	{r4, r5, r6, lr}
 800e68e:	fba1 5402 	umull	r5, r4, r1, r2
 800e692:	b934      	cbnz	r4, 800e6a2 <_calloc_r+0x16>
 800e694:	4629      	mov	r1, r5
 800e696:	f7fc f847 	bl	800a728 <_malloc_r>
 800e69a:	4606      	mov	r6, r0
 800e69c:	b928      	cbnz	r0, 800e6aa <_calloc_r+0x1e>
 800e69e:	4630      	mov	r0, r6
 800e6a0:	bd70      	pop	{r4, r5, r6, pc}
 800e6a2:	220c      	movs	r2, #12
 800e6a4:	6002      	str	r2, [r0, #0]
 800e6a6:	2600      	movs	r6, #0
 800e6a8:	e7f9      	b.n	800e69e <_calloc_r+0x12>
 800e6aa:	462a      	mov	r2, r5
 800e6ac:	4621      	mov	r1, r4
 800e6ae:	f7fd f957 	bl	800b960 <memset>
 800e6b2:	e7f4      	b.n	800e69e <_calloc_r+0x12>

0800e6b4 <rshift>:
 800e6b4:	6903      	ldr	r3, [r0, #16]
 800e6b6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800e6ba:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e6be:	ea4f 1261 	mov.w	r2, r1, asr #5
 800e6c2:	f100 0414 	add.w	r4, r0, #20
 800e6c6:	dd45      	ble.n	800e754 <rshift+0xa0>
 800e6c8:	f011 011f 	ands.w	r1, r1, #31
 800e6cc:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800e6d0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800e6d4:	d10c      	bne.n	800e6f0 <rshift+0x3c>
 800e6d6:	f100 0710 	add.w	r7, r0, #16
 800e6da:	4629      	mov	r1, r5
 800e6dc:	42b1      	cmp	r1, r6
 800e6de:	d334      	bcc.n	800e74a <rshift+0x96>
 800e6e0:	1a9b      	subs	r3, r3, r2
 800e6e2:	009b      	lsls	r3, r3, #2
 800e6e4:	1eea      	subs	r2, r5, #3
 800e6e6:	4296      	cmp	r6, r2
 800e6e8:	bf38      	it	cc
 800e6ea:	2300      	movcc	r3, #0
 800e6ec:	4423      	add	r3, r4
 800e6ee:	e015      	b.n	800e71c <rshift+0x68>
 800e6f0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800e6f4:	f1c1 0820 	rsb	r8, r1, #32
 800e6f8:	40cf      	lsrs	r7, r1
 800e6fa:	f105 0e04 	add.w	lr, r5, #4
 800e6fe:	46a1      	mov	r9, r4
 800e700:	4576      	cmp	r6, lr
 800e702:	46f4      	mov	ip, lr
 800e704:	d815      	bhi.n	800e732 <rshift+0x7e>
 800e706:	1a9a      	subs	r2, r3, r2
 800e708:	0092      	lsls	r2, r2, #2
 800e70a:	3a04      	subs	r2, #4
 800e70c:	3501      	adds	r5, #1
 800e70e:	42ae      	cmp	r6, r5
 800e710:	bf38      	it	cc
 800e712:	2200      	movcc	r2, #0
 800e714:	18a3      	adds	r3, r4, r2
 800e716:	50a7      	str	r7, [r4, r2]
 800e718:	b107      	cbz	r7, 800e71c <rshift+0x68>
 800e71a:	3304      	adds	r3, #4
 800e71c:	1b1a      	subs	r2, r3, r4
 800e71e:	42a3      	cmp	r3, r4
 800e720:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800e724:	bf08      	it	eq
 800e726:	2300      	moveq	r3, #0
 800e728:	6102      	str	r2, [r0, #16]
 800e72a:	bf08      	it	eq
 800e72c:	6143      	streq	r3, [r0, #20]
 800e72e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e732:	f8dc c000 	ldr.w	ip, [ip]
 800e736:	fa0c fc08 	lsl.w	ip, ip, r8
 800e73a:	ea4c 0707 	orr.w	r7, ip, r7
 800e73e:	f849 7b04 	str.w	r7, [r9], #4
 800e742:	f85e 7b04 	ldr.w	r7, [lr], #4
 800e746:	40cf      	lsrs	r7, r1
 800e748:	e7da      	b.n	800e700 <rshift+0x4c>
 800e74a:	f851 cb04 	ldr.w	ip, [r1], #4
 800e74e:	f847 cf04 	str.w	ip, [r7, #4]!
 800e752:	e7c3      	b.n	800e6dc <rshift+0x28>
 800e754:	4623      	mov	r3, r4
 800e756:	e7e1      	b.n	800e71c <rshift+0x68>

0800e758 <__hexdig_fun>:
 800e758:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800e75c:	2b09      	cmp	r3, #9
 800e75e:	d802      	bhi.n	800e766 <__hexdig_fun+0xe>
 800e760:	3820      	subs	r0, #32
 800e762:	b2c0      	uxtb	r0, r0
 800e764:	4770      	bx	lr
 800e766:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800e76a:	2b05      	cmp	r3, #5
 800e76c:	d801      	bhi.n	800e772 <__hexdig_fun+0x1a>
 800e76e:	3847      	subs	r0, #71	@ 0x47
 800e770:	e7f7      	b.n	800e762 <__hexdig_fun+0xa>
 800e772:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800e776:	2b05      	cmp	r3, #5
 800e778:	d801      	bhi.n	800e77e <__hexdig_fun+0x26>
 800e77a:	3827      	subs	r0, #39	@ 0x27
 800e77c:	e7f1      	b.n	800e762 <__hexdig_fun+0xa>
 800e77e:	2000      	movs	r0, #0
 800e780:	4770      	bx	lr
	...

0800e784 <__gethex>:
 800e784:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e788:	b085      	sub	sp, #20
 800e78a:	468a      	mov	sl, r1
 800e78c:	9302      	str	r3, [sp, #8]
 800e78e:	680b      	ldr	r3, [r1, #0]
 800e790:	9001      	str	r0, [sp, #4]
 800e792:	4690      	mov	r8, r2
 800e794:	1c9c      	adds	r4, r3, #2
 800e796:	46a1      	mov	r9, r4
 800e798:	f814 0b01 	ldrb.w	r0, [r4], #1
 800e79c:	2830      	cmp	r0, #48	@ 0x30
 800e79e:	d0fa      	beq.n	800e796 <__gethex+0x12>
 800e7a0:	eba9 0303 	sub.w	r3, r9, r3
 800e7a4:	f1a3 0b02 	sub.w	fp, r3, #2
 800e7a8:	f7ff ffd6 	bl	800e758 <__hexdig_fun>
 800e7ac:	4605      	mov	r5, r0
 800e7ae:	2800      	cmp	r0, #0
 800e7b0:	d168      	bne.n	800e884 <__gethex+0x100>
 800e7b2:	49a0      	ldr	r1, [pc, #640]	@ (800ea34 <__gethex+0x2b0>)
 800e7b4:	2201      	movs	r2, #1
 800e7b6:	4648      	mov	r0, r9
 800e7b8:	f7ff fefe 	bl	800e5b8 <strncmp>
 800e7bc:	4607      	mov	r7, r0
 800e7be:	2800      	cmp	r0, #0
 800e7c0:	d167      	bne.n	800e892 <__gethex+0x10e>
 800e7c2:	f899 0001 	ldrb.w	r0, [r9, #1]
 800e7c6:	4626      	mov	r6, r4
 800e7c8:	f7ff ffc6 	bl	800e758 <__hexdig_fun>
 800e7cc:	2800      	cmp	r0, #0
 800e7ce:	d062      	beq.n	800e896 <__gethex+0x112>
 800e7d0:	4623      	mov	r3, r4
 800e7d2:	7818      	ldrb	r0, [r3, #0]
 800e7d4:	2830      	cmp	r0, #48	@ 0x30
 800e7d6:	4699      	mov	r9, r3
 800e7d8:	f103 0301 	add.w	r3, r3, #1
 800e7dc:	d0f9      	beq.n	800e7d2 <__gethex+0x4e>
 800e7de:	f7ff ffbb 	bl	800e758 <__hexdig_fun>
 800e7e2:	fab0 f580 	clz	r5, r0
 800e7e6:	096d      	lsrs	r5, r5, #5
 800e7e8:	f04f 0b01 	mov.w	fp, #1
 800e7ec:	464a      	mov	r2, r9
 800e7ee:	4616      	mov	r6, r2
 800e7f0:	3201      	adds	r2, #1
 800e7f2:	7830      	ldrb	r0, [r6, #0]
 800e7f4:	f7ff ffb0 	bl	800e758 <__hexdig_fun>
 800e7f8:	2800      	cmp	r0, #0
 800e7fa:	d1f8      	bne.n	800e7ee <__gethex+0x6a>
 800e7fc:	498d      	ldr	r1, [pc, #564]	@ (800ea34 <__gethex+0x2b0>)
 800e7fe:	2201      	movs	r2, #1
 800e800:	4630      	mov	r0, r6
 800e802:	f7ff fed9 	bl	800e5b8 <strncmp>
 800e806:	2800      	cmp	r0, #0
 800e808:	d13f      	bne.n	800e88a <__gethex+0x106>
 800e80a:	b944      	cbnz	r4, 800e81e <__gethex+0x9a>
 800e80c:	1c74      	adds	r4, r6, #1
 800e80e:	4622      	mov	r2, r4
 800e810:	4616      	mov	r6, r2
 800e812:	3201      	adds	r2, #1
 800e814:	7830      	ldrb	r0, [r6, #0]
 800e816:	f7ff ff9f 	bl	800e758 <__hexdig_fun>
 800e81a:	2800      	cmp	r0, #0
 800e81c:	d1f8      	bne.n	800e810 <__gethex+0x8c>
 800e81e:	1ba4      	subs	r4, r4, r6
 800e820:	00a7      	lsls	r7, r4, #2
 800e822:	7833      	ldrb	r3, [r6, #0]
 800e824:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800e828:	2b50      	cmp	r3, #80	@ 0x50
 800e82a:	d13e      	bne.n	800e8aa <__gethex+0x126>
 800e82c:	7873      	ldrb	r3, [r6, #1]
 800e82e:	2b2b      	cmp	r3, #43	@ 0x2b
 800e830:	d033      	beq.n	800e89a <__gethex+0x116>
 800e832:	2b2d      	cmp	r3, #45	@ 0x2d
 800e834:	d034      	beq.n	800e8a0 <__gethex+0x11c>
 800e836:	1c71      	adds	r1, r6, #1
 800e838:	2400      	movs	r4, #0
 800e83a:	7808      	ldrb	r0, [r1, #0]
 800e83c:	f7ff ff8c 	bl	800e758 <__hexdig_fun>
 800e840:	1e43      	subs	r3, r0, #1
 800e842:	b2db      	uxtb	r3, r3
 800e844:	2b18      	cmp	r3, #24
 800e846:	d830      	bhi.n	800e8aa <__gethex+0x126>
 800e848:	f1a0 0210 	sub.w	r2, r0, #16
 800e84c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800e850:	f7ff ff82 	bl	800e758 <__hexdig_fun>
 800e854:	f100 3cff 	add.w	ip, r0, #4294967295
 800e858:	fa5f fc8c 	uxtb.w	ip, ip
 800e85c:	f1bc 0f18 	cmp.w	ip, #24
 800e860:	f04f 030a 	mov.w	r3, #10
 800e864:	d91e      	bls.n	800e8a4 <__gethex+0x120>
 800e866:	b104      	cbz	r4, 800e86a <__gethex+0xe6>
 800e868:	4252      	negs	r2, r2
 800e86a:	4417      	add	r7, r2
 800e86c:	f8ca 1000 	str.w	r1, [sl]
 800e870:	b1ed      	cbz	r5, 800e8ae <__gethex+0x12a>
 800e872:	f1bb 0f00 	cmp.w	fp, #0
 800e876:	bf0c      	ite	eq
 800e878:	2506      	moveq	r5, #6
 800e87a:	2500      	movne	r5, #0
 800e87c:	4628      	mov	r0, r5
 800e87e:	b005      	add	sp, #20
 800e880:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e884:	2500      	movs	r5, #0
 800e886:	462c      	mov	r4, r5
 800e888:	e7b0      	b.n	800e7ec <__gethex+0x68>
 800e88a:	2c00      	cmp	r4, #0
 800e88c:	d1c7      	bne.n	800e81e <__gethex+0x9a>
 800e88e:	4627      	mov	r7, r4
 800e890:	e7c7      	b.n	800e822 <__gethex+0x9e>
 800e892:	464e      	mov	r6, r9
 800e894:	462f      	mov	r7, r5
 800e896:	2501      	movs	r5, #1
 800e898:	e7c3      	b.n	800e822 <__gethex+0x9e>
 800e89a:	2400      	movs	r4, #0
 800e89c:	1cb1      	adds	r1, r6, #2
 800e89e:	e7cc      	b.n	800e83a <__gethex+0xb6>
 800e8a0:	2401      	movs	r4, #1
 800e8a2:	e7fb      	b.n	800e89c <__gethex+0x118>
 800e8a4:	fb03 0002 	mla	r0, r3, r2, r0
 800e8a8:	e7ce      	b.n	800e848 <__gethex+0xc4>
 800e8aa:	4631      	mov	r1, r6
 800e8ac:	e7de      	b.n	800e86c <__gethex+0xe8>
 800e8ae:	eba6 0309 	sub.w	r3, r6, r9
 800e8b2:	3b01      	subs	r3, #1
 800e8b4:	4629      	mov	r1, r5
 800e8b6:	2b07      	cmp	r3, #7
 800e8b8:	dc0a      	bgt.n	800e8d0 <__gethex+0x14c>
 800e8ba:	9801      	ldr	r0, [sp, #4]
 800e8bc:	f7fd ff8a 	bl	800c7d4 <_Balloc>
 800e8c0:	4604      	mov	r4, r0
 800e8c2:	b940      	cbnz	r0, 800e8d6 <__gethex+0x152>
 800e8c4:	4b5c      	ldr	r3, [pc, #368]	@ (800ea38 <__gethex+0x2b4>)
 800e8c6:	4602      	mov	r2, r0
 800e8c8:	21e4      	movs	r1, #228	@ 0xe4
 800e8ca:	485c      	ldr	r0, [pc, #368]	@ (800ea3c <__gethex+0x2b8>)
 800e8cc:	f7ff fec0 	bl	800e650 <__assert_func>
 800e8d0:	3101      	adds	r1, #1
 800e8d2:	105b      	asrs	r3, r3, #1
 800e8d4:	e7ef      	b.n	800e8b6 <__gethex+0x132>
 800e8d6:	f100 0a14 	add.w	sl, r0, #20
 800e8da:	2300      	movs	r3, #0
 800e8dc:	4655      	mov	r5, sl
 800e8de:	469b      	mov	fp, r3
 800e8e0:	45b1      	cmp	r9, r6
 800e8e2:	d337      	bcc.n	800e954 <__gethex+0x1d0>
 800e8e4:	f845 bb04 	str.w	fp, [r5], #4
 800e8e8:	eba5 050a 	sub.w	r5, r5, sl
 800e8ec:	10ad      	asrs	r5, r5, #2
 800e8ee:	6125      	str	r5, [r4, #16]
 800e8f0:	4658      	mov	r0, fp
 800e8f2:	f7fe f861 	bl	800c9b8 <__hi0bits>
 800e8f6:	016d      	lsls	r5, r5, #5
 800e8f8:	f8d8 6000 	ldr.w	r6, [r8]
 800e8fc:	1a2d      	subs	r5, r5, r0
 800e8fe:	42b5      	cmp	r5, r6
 800e900:	dd54      	ble.n	800e9ac <__gethex+0x228>
 800e902:	1bad      	subs	r5, r5, r6
 800e904:	4629      	mov	r1, r5
 800e906:	4620      	mov	r0, r4
 800e908:	f7fe fbed 	bl	800d0e6 <__any_on>
 800e90c:	4681      	mov	r9, r0
 800e90e:	b178      	cbz	r0, 800e930 <__gethex+0x1ac>
 800e910:	1e6b      	subs	r3, r5, #1
 800e912:	1159      	asrs	r1, r3, #5
 800e914:	f003 021f 	and.w	r2, r3, #31
 800e918:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800e91c:	f04f 0901 	mov.w	r9, #1
 800e920:	fa09 f202 	lsl.w	r2, r9, r2
 800e924:	420a      	tst	r2, r1
 800e926:	d003      	beq.n	800e930 <__gethex+0x1ac>
 800e928:	454b      	cmp	r3, r9
 800e92a:	dc36      	bgt.n	800e99a <__gethex+0x216>
 800e92c:	f04f 0902 	mov.w	r9, #2
 800e930:	4629      	mov	r1, r5
 800e932:	4620      	mov	r0, r4
 800e934:	f7ff febe 	bl	800e6b4 <rshift>
 800e938:	442f      	add	r7, r5
 800e93a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e93e:	42bb      	cmp	r3, r7
 800e940:	da42      	bge.n	800e9c8 <__gethex+0x244>
 800e942:	9801      	ldr	r0, [sp, #4]
 800e944:	4621      	mov	r1, r4
 800e946:	f7fd ff85 	bl	800c854 <_Bfree>
 800e94a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e94c:	2300      	movs	r3, #0
 800e94e:	6013      	str	r3, [r2, #0]
 800e950:	25a3      	movs	r5, #163	@ 0xa3
 800e952:	e793      	b.n	800e87c <__gethex+0xf8>
 800e954:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800e958:	2a2e      	cmp	r2, #46	@ 0x2e
 800e95a:	d012      	beq.n	800e982 <__gethex+0x1fe>
 800e95c:	2b20      	cmp	r3, #32
 800e95e:	d104      	bne.n	800e96a <__gethex+0x1e6>
 800e960:	f845 bb04 	str.w	fp, [r5], #4
 800e964:	f04f 0b00 	mov.w	fp, #0
 800e968:	465b      	mov	r3, fp
 800e96a:	7830      	ldrb	r0, [r6, #0]
 800e96c:	9303      	str	r3, [sp, #12]
 800e96e:	f7ff fef3 	bl	800e758 <__hexdig_fun>
 800e972:	9b03      	ldr	r3, [sp, #12]
 800e974:	f000 000f 	and.w	r0, r0, #15
 800e978:	4098      	lsls	r0, r3
 800e97a:	ea4b 0b00 	orr.w	fp, fp, r0
 800e97e:	3304      	adds	r3, #4
 800e980:	e7ae      	b.n	800e8e0 <__gethex+0x15c>
 800e982:	45b1      	cmp	r9, r6
 800e984:	d8ea      	bhi.n	800e95c <__gethex+0x1d8>
 800e986:	492b      	ldr	r1, [pc, #172]	@ (800ea34 <__gethex+0x2b0>)
 800e988:	9303      	str	r3, [sp, #12]
 800e98a:	2201      	movs	r2, #1
 800e98c:	4630      	mov	r0, r6
 800e98e:	f7ff fe13 	bl	800e5b8 <strncmp>
 800e992:	9b03      	ldr	r3, [sp, #12]
 800e994:	2800      	cmp	r0, #0
 800e996:	d1e1      	bne.n	800e95c <__gethex+0x1d8>
 800e998:	e7a2      	b.n	800e8e0 <__gethex+0x15c>
 800e99a:	1ea9      	subs	r1, r5, #2
 800e99c:	4620      	mov	r0, r4
 800e99e:	f7fe fba2 	bl	800d0e6 <__any_on>
 800e9a2:	2800      	cmp	r0, #0
 800e9a4:	d0c2      	beq.n	800e92c <__gethex+0x1a8>
 800e9a6:	f04f 0903 	mov.w	r9, #3
 800e9aa:	e7c1      	b.n	800e930 <__gethex+0x1ac>
 800e9ac:	da09      	bge.n	800e9c2 <__gethex+0x23e>
 800e9ae:	1b75      	subs	r5, r6, r5
 800e9b0:	4621      	mov	r1, r4
 800e9b2:	9801      	ldr	r0, [sp, #4]
 800e9b4:	462a      	mov	r2, r5
 800e9b6:	f7fe f95d 	bl	800cc74 <__lshift>
 800e9ba:	1b7f      	subs	r7, r7, r5
 800e9bc:	4604      	mov	r4, r0
 800e9be:	f100 0a14 	add.w	sl, r0, #20
 800e9c2:	f04f 0900 	mov.w	r9, #0
 800e9c6:	e7b8      	b.n	800e93a <__gethex+0x1b6>
 800e9c8:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800e9cc:	42bd      	cmp	r5, r7
 800e9ce:	dd6f      	ble.n	800eab0 <__gethex+0x32c>
 800e9d0:	1bed      	subs	r5, r5, r7
 800e9d2:	42ae      	cmp	r6, r5
 800e9d4:	dc34      	bgt.n	800ea40 <__gethex+0x2bc>
 800e9d6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800e9da:	2b02      	cmp	r3, #2
 800e9dc:	d022      	beq.n	800ea24 <__gethex+0x2a0>
 800e9de:	2b03      	cmp	r3, #3
 800e9e0:	d024      	beq.n	800ea2c <__gethex+0x2a8>
 800e9e2:	2b01      	cmp	r3, #1
 800e9e4:	d115      	bne.n	800ea12 <__gethex+0x28e>
 800e9e6:	42ae      	cmp	r6, r5
 800e9e8:	d113      	bne.n	800ea12 <__gethex+0x28e>
 800e9ea:	2e01      	cmp	r6, #1
 800e9ec:	d10b      	bne.n	800ea06 <__gethex+0x282>
 800e9ee:	9a02      	ldr	r2, [sp, #8]
 800e9f0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800e9f4:	6013      	str	r3, [r2, #0]
 800e9f6:	2301      	movs	r3, #1
 800e9f8:	6123      	str	r3, [r4, #16]
 800e9fa:	f8ca 3000 	str.w	r3, [sl]
 800e9fe:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ea00:	2562      	movs	r5, #98	@ 0x62
 800ea02:	601c      	str	r4, [r3, #0]
 800ea04:	e73a      	b.n	800e87c <__gethex+0xf8>
 800ea06:	1e71      	subs	r1, r6, #1
 800ea08:	4620      	mov	r0, r4
 800ea0a:	f7fe fb6c 	bl	800d0e6 <__any_on>
 800ea0e:	2800      	cmp	r0, #0
 800ea10:	d1ed      	bne.n	800e9ee <__gethex+0x26a>
 800ea12:	9801      	ldr	r0, [sp, #4]
 800ea14:	4621      	mov	r1, r4
 800ea16:	f7fd ff1d 	bl	800c854 <_Bfree>
 800ea1a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ea1c:	2300      	movs	r3, #0
 800ea1e:	6013      	str	r3, [r2, #0]
 800ea20:	2550      	movs	r5, #80	@ 0x50
 800ea22:	e72b      	b.n	800e87c <__gethex+0xf8>
 800ea24:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ea26:	2b00      	cmp	r3, #0
 800ea28:	d1f3      	bne.n	800ea12 <__gethex+0x28e>
 800ea2a:	e7e0      	b.n	800e9ee <__gethex+0x26a>
 800ea2c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ea2e:	2b00      	cmp	r3, #0
 800ea30:	d1dd      	bne.n	800e9ee <__gethex+0x26a>
 800ea32:	e7ee      	b.n	800ea12 <__gethex+0x28e>
 800ea34:	0800f0f3 	.word	0x0800f0f3
 800ea38:	0800f089 	.word	0x0800f089
 800ea3c:	0800f14a 	.word	0x0800f14a
 800ea40:	1e6f      	subs	r7, r5, #1
 800ea42:	f1b9 0f00 	cmp.w	r9, #0
 800ea46:	d130      	bne.n	800eaaa <__gethex+0x326>
 800ea48:	b127      	cbz	r7, 800ea54 <__gethex+0x2d0>
 800ea4a:	4639      	mov	r1, r7
 800ea4c:	4620      	mov	r0, r4
 800ea4e:	f7fe fb4a 	bl	800d0e6 <__any_on>
 800ea52:	4681      	mov	r9, r0
 800ea54:	117a      	asrs	r2, r7, #5
 800ea56:	2301      	movs	r3, #1
 800ea58:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800ea5c:	f007 071f 	and.w	r7, r7, #31
 800ea60:	40bb      	lsls	r3, r7
 800ea62:	4213      	tst	r3, r2
 800ea64:	4629      	mov	r1, r5
 800ea66:	4620      	mov	r0, r4
 800ea68:	bf18      	it	ne
 800ea6a:	f049 0902 	orrne.w	r9, r9, #2
 800ea6e:	f7ff fe21 	bl	800e6b4 <rshift>
 800ea72:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800ea76:	1b76      	subs	r6, r6, r5
 800ea78:	2502      	movs	r5, #2
 800ea7a:	f1b9 0f00 	cmp.w	r9, #0
 800ea7e:	d047      	beq.n	800eb10 <__gethex+0x38c>
 800ea80:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ea84:	2b02      	cmp	r3, #2
 800ea86:	d015      	beq.n	800eab4 <__gethex+0x330>
 800ea88:	2b03      	cmp	r3, #3
 800ea8a:	d017      	beq.n	800eabc <__gethex+0x338>
 800ea8c:	2b01      	cmp	r3, #1
 800ea8e:	d109      	bne.n	800eaa4 <__gethex+0x320>
 800ea90:	f019 0f02 	tst.w	r9, #2
 800ea94:	d006      	beq.n	800eaa4 <__gethex+0x320>
 800ea96:	f8da 3000 	ldr.w	r3, [sl]
 800ea9a:	ea49 0903 	orr.w	r9, r9, r3
 800ea9e:	f019 0f01 	tst.w	r9, #1
 800eaa2:	d10e      	bne.n	800eac2 <__gethex+0x33e>
 800eaa4:	f045 0510 	orr.w	r5, r5, #16
 800eaa8:	e032      	b.n	800eb10 <__gethex+0x38c>
 800eaaa:	f04f 0901 	mov.w	r9, #1
 800eaae:	e7d1      	b.n	800ea54 <__gethex+0x2d0>
 800eab0:	2501      	movs	r5, #1
 800eab2:	e7e2      	b.n	800ea7a <__gethex+0x2f6>
 800eab4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800eab6:	f1c3 0301 	rsb	r3, r3, #1
 800eaba:	930f      	str	r3, [sp, #60]	@ 0x3c
 800eabc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800eabe:	2b00      	cmp	r3, #0
 800eac0:	d0f0      	beq.n	800eaa4 <__gethex+0x320>
 800eac2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800eac6:	f104 0314 	add.w	r3, r4, #20
 800eaca:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800eace:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800ead2:	f04f 0c00 	mov.w	ip, #0
 800ead6:	4618      	mov	r0, r3
 800ead8:	f853 2b04 	ldr.w	r2, [r3], #4
 800eadc:	f1b2 3fff 	cmp.w	r2, #4294967295
 800eae0:	d01b      	beq.n	800eb1a <__gethex+0x396>
 800eae2:	3201      	adds	r2, #1
 800eae4:	6002      	str	r2, [r0, #0]
 800eae6:	2d02      	cmp	r5, #2
 800eae8:	f104 0314 	add.w	r3, r4, #20
 800eaec:	d13c      	bne.n	800eb68 <__gethex+0x3e4>
 800eaee:	f8d8 2000 	ldr.w	r2, [r8]
 800eaf2:	3a01      	subs	r2, #1
 800eaf4:	42b2      	cmp	r2, r6
 800eaf6:	d109      	bne.n	800eb0c <__gethex+0x388>
 800eaf8:	1171      	asrs	r1, r6, #5
 800eafa:	2201      	movs	r2, #1
 800eafc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800eb00:	f006 061f 	and.w	r6, r6, #31
 800eb04:	fa02 f606 	lsl.w	r6, r2, r6
 800eb08:	421e      	tst	r6, r3
 800eb0a:	d13a      	bne.n	800eb82 <__gethex+0x3fe>
 800eb0c:	f045 0520 	orr.w	r5, r5, #32
 800eb10:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800eb12:	601c      	str	r4, [r3, #0]
 800eb14:	9b02      	ldr	r3, [sp, #8]
 800eb16:	601f      	str	r7, [r3, #0]
 800eb18:	e6b0      	b.n	800e87c <__gethex+0xf8>
 800eb1a:	4299      	cmp	r1, r3
 800eb1c:	f843 cc04 	str.w	ip, [r3, #-4]
 800eb20:	d8d9      	bhi.n	800ead6 <__gethex+0x352>
 800eb22:	68a3      	ldr	r3, [r4, #8]
 800eb24:	459b      	cmp	fp, r3
 800eb26:	db17      	blt.n	800eb58 <__gethex+0x3d4>
 800eb28:	6861      	ldr	r1, [r4, #4]
 800eb2a:	9801      	ldr	r0, [sp, #4]
 800eb2c:	3101      	adds	r1, #1
 800eb2e:	f7fd fe51 	bl	800c7d4 <_Balloc>
 800eb32:	4681      	mov	r9, r0
 800eb34:	b918      	cbnz	r0, 800eb3e <__gethex+0x3ba>
 800eb36:	4b1a      	ldr	r3, [pc, #104]	@ (800eba0 <__gethex+0x41c>)
 800eb38:	4602      	mov	r2, r0
 800eb3a:	2184      	movs	r1, #132	@ 0x84
 800eb3c:	e6c5      	b.n	800e8ca <__gethex+0x146>
 800eb3e:	6922      	ldr	r2, [r4, #16]
 800eb40:	3202      	adds	r2, #2
 800eb42:	f104 010c 	add.w	r1, r4, #12
 800eb46:	0092      	lsls	r2, r2, #2
 800eb48:	300c      	adds	r0, #12
 800eb4a:	f7ff fd69 	bl	800e620 <memcpy>
 800eb4e:	4621      	mov	r1, r4
 800eb50:	9801      	ldr	r0, [sp, #4]
 800eb52:	f7fd fe7f 	bl	800c854 <_Bfree>
 800eb56:	464c      	mov	r4, r9
 800eb58:	6923      	ldr	r3, [r4, #16]
 800eb5a:	1c5a      	adds	r2, r3, #1
 800eb5c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800eb60:	6122      	str	r2, [r4, #16]
 800eb62:	2201      	movs	r2, #1
 800eb64:	615a      	str	r2, [r3, #20]
 800eb66:	e7be      	b.n	800eae6 <__gethex+0x362>
 800eb68:	6922      	ldr	r2, [r4, #16]
 800eb6a:	455a      	cmp	r2, fp
 800eb6c:	dd0b      	ble.n	800eb86 <__gethex+0x402>
 800eb6e:	2101      	movs	r1, #1
 800eb70:	4620      	mov	r0, r4
 800eb72:	f7ff fd9f 	bl	800e6b4 <rshift>
 800eb76:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800eb7a:	3701      	adds	r7, #1
 800eb7c:	42bb      	cmp	r3, r7
 800eb7e:	f6ff aee0 	blt.w	800e942 <__gethex+0x1be>
 800eb82:	2501      	movs	r5, #1
 800eb84:	e7c2      	b.n	800eb0c <__gethex+0x388>
 800eb86:	f016 061f 	ands.w	r6, r6, #31
 800eb8a:	d0fa      	beq.n	800eb82 <__gethex+0x3fe>
 800eb8c:	4453      	add	r3, sl
 800eb8e:	f1c6 0620 	rsb	r6, r6, #32
 800eb92:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800eb96:	f7fd ff0f 	bl	800c9b8 <__hi0bits>
 800eb9a:	42b0      	cmp	r0, r6
 800eb9c:	dbe7      	blt.n	800eb6e <__gethex+0x3ea>
 800eb9e:	e7f0      	b.n	800eb82 <__gethex+0x3fe>
 800eba0:	0800f089 	.word	0x0800f089

0800eba4 <L_shift>:
 800eba4:	f1c2 0208 	rsb	r2, r2, #8
 800eba8:	0092      	lsls	r2, r2, #2
 800ebaa:	b570      	push	{r4, r5, r6, lr}
 800ebac:	f1c2 0620 	rsb	r6, r2, #32
 800ebb0:	6843      	ldr	r3, [r0, #4]
 800ebb2:	6804      	ldr	r4, [r0, #0]
 800ebb4:	fa03 f506 	lsl.w	r5, r3, r6
 800ebb8:	432c      	orrs	r4, r5
 800ebba:	40d3      	lsrs	r3, r2
 800ebbc:	6004      	str	r4, [r0, #0]
 800ebbe:	f840 3f04 	str.w	r3, [r0, #4]!
 800ebc2:	4288      	cmp	r0, r1
 800ebc4:	d3f4      	bcc.n	800ebb0 <L_shift+0xc>
 800ebc6:	bd70      	pop	{r4, r5, r6, pc}

0800ebc8 <__match>:
 800ebc8:	b530      	push	{r4, r5, lr}
 800ebca:	6803      	ldr	r3, [r0, #0]
 800ebcc:	3301      	adds	r3, #1
 800ebce:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ebd2:	b914      	cbnz	r4, 800ebda <__match+0x12>
 800ebd4:	6003      	str	r3, [r0, #0]
 800ebd6:	2001      	movs	r0, #1
 800ebd8:	bd30      	pop	{r4, r5, pc}
 800ebda:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ebde:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800ebe2:	2d19      	cmp	r5, #25
 800ebe4:	bf98      	it	ls
 800ebe6:	3220      	addls	r2, #32
 800ebe8:	42a2      	cmp	r2, r4
 800ebea:	d0f0      	beq.n	800ebce <__match+0x6>
 800ebec:	2000      	movs	r0, #0
 800ebee:	e7f3      	b.n	800ebd8 <__match+0x10>

0800ebf0 <__hexnan>:
 800ebf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ebf4:	680b      	ldr	r3, [r1, #0]
 800ebf6:	6801      	ldr	r1, [r0, #0]
 800ebf8:	115e      	asrs	r6, r3, #5
 800ebfa:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800ebfe:	f013 031f 	ands.w	r3, r3, #31
 800ec02:	b087      	sub	sp, #28
 800ec04:	bf18      	it	ne
 800ec06:	3604      	addne	r6, #4
 800ec08:	2500      	movs	r5, #0
 800ec0a:	1f37      	subs	r7, r6, #4
 800ec0c:	4682      	mov	sl, r0
 800ec0e:	4690      	mov	r8, r2
 800ec10:	9301      	str	r3, [sp, #4]
 800ec12:	f846 5c04 	str.w	r5, [r6, #-4]
 800ec16:	46b9      	mov	r9, r7
 800ec18:	463c      	mov	r4, r7
 800ec1a:	9502      	str	r5, [sp, #8]
 800ec1c:	46ab      	mov	fp, r5
 800ec1e:	784a      	ldrb	r2, [r1, #1]
 800ec20:	1c4b      	adds	r3, r1, #1
 800ec22:	9303      	str	r3, [sp, #12]
 800ec24:	b342      	cbz	r2, 800ec78 <__hexnan+0x88>
 800ec26:	4610      	mov	r0, r2
 800ec28:	9105      	str	r1, [sp, #20]
 800ec2a:	9204      	str	r2, [sp, #16]
 800ec2c:	f7ff fd94 	bl	800e758 <__hexdig_fun>
 800ec30:	2800      	cmp	r0, #0
 800ec32:	d151      	bne.n	800ecd8 <__hexnan+0xe8>
 800ec34:	9a04      	ldr	r2, [sp, #16]
 800ec36:	9905      	ldr	r1, [sp, #20]
 800ec38:	2a20      	cmp	r2, #32
 800ec3a:	d818      	bhi.n	800ec6e <__hexnan+0x7e>
 800ec3c:	9b02      	ldr	r3, [sp, #8]
 800ec3e:	459b      	cmp	fp, r3
 800ec40:	dd13      	ble.n	800ec6a <__hexnan+0x7a>
 800ec42:	454c      	cmp	r4, r9
 800ec44:	d206      	bcs.n	800ec54 <__hexnan+0x64>
 800ec46:	2d07      	cmp	r5, #7
 800ec48:	dc04      	bgt.n	800ec54 <__hexnan+0x64>
 800ec4a:	462a      	mov	r2, r5
 800ec4c:	4649      	mov	r1, r9
 800ec4e:	4620      	mov	r0, r4
 800ec50:	f7ff ffa8 	bl	800eba4 <L_shift>
 800ec54:	4544      	cmp	r4, r8
 800ec56:	d952      	bls.n	800ecfe <__hexnan+0x10e>
 800ec58:	2300      	movs	r3, #0
 800ec5a:	f1a4 0904 	sub.w	r9, r4, #4
 800ec5e:	f844 3c04 	str.w	r3, [r4, #-4]
 800ec62:	f8cd b008 	str.w	fp, [sp, #8]
 800ec66:	464c      	mov	r4, r9
 800ec68:	461d      	mov	r5, r3
 800ec6a:	9903      	ldr	r1, [sp, #12]
 800ec6c:	e7d7      	b.n	800ec1e <__hexnan+0x2e>
 800ec6e:	2a29      	cmp	r2, #41	@ 0x29
 800ec70:	d157      	bne.n	800ed22 <__hexnan+0x132>
 800ec72:	3102      	adds	r1, #2
 800ec74:	f8ca 1000 	str.w	r1, [sl]
 800ec78:	f1bb 0f00 	cmp.w	fp, #0
 800ec7c:	d051      	beq.n	800ed22 <__hexnan+0x132>
 800ec7e:	454c      	cmp	r4, r9
 800ec80:	d206      	bcs.n	800ec90 <__hexnan+0xa0>
 800ec82:	2d07      	cmp	r5, #7
 800ec84:	dc04      	bgt.n	800ec90 <__hexnan+0xa0>
 800ec86:	462a      	mov	r2, r5
 800ec88:	4649      	mov	r1, r9
 800ec8a:	4620      	mov	r0, r4
 800ec8c:	f7ff ff8a 	bl	800eba4 <L_shift>
 800ec90:	4544      	cmp	r4, r8
 800ec92:	d936      	bls.n	800ed02 <__hexnan+0x112>
 800ec94:	f1a8 0204 	sub.w	r2, r8, #4
 800ec98:	4623      	mov	r3, r4
 800ec9a:	f853 1b04 	ldr.w	r1, [r3], #4
 800ec9e:	f842 1f04 	str.w	r1, [r2, #4]!
 800eca2:	429f      	cmp	r7, r3
 800eca4:	d2f9      	bcs.n	800ec9a <__hexnan+0xaa>
 800eca6:	1b3b      	subs	r3, r7, r4
 800eca8:	f023 0303 	bic.w	r3, r3, #3
 800ecac:	3304      	adds	r3, #4
 800ecae:	3401      	adds	r4, #1
 800ecb0:	3e03      	subs	r6, #3
 800ecb2:	42b4      	cmp	r4, r6
 800ecb4:	bf88      	it	hi
 800ecb6:	2304      	movhi	r3, #4
 800ecb8:	4443      	add	r3, r8
 800ecba:	2200      	movs	r2, #0
 800ecbc:	f843 2b04 	str.w	r2, [r3], #4
 800ecc0:	429f      	cmp	r7, r3
 800ecc2:	d2fb      	bcs.n	800ecbc <__hexnan+0xcc>
 800ecc4:	683b      	ldr	r3, [r7, #0]
 800ecc6:	b91b      	cbnz	r3, 800ecd0 <__hexnan+0xe0>
 800ecc8:	4547      	cmp	r7, r8
 800ecca:	d128      	bne.n	800ed1e <__hexnan+0x12e>
 800eccc:	2301      	movs	r3, #1
 800ecce:	603b      	str	r3, [r7, #0]
 800ecd0:	2005      	movs	r0, #5
 800ecd2:	b007      	add	sp, #28
 800ecd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ecd8:	3501      	adds	r5, #1
 800ecda:	2d08      	cmp	r5, #8
 800ecdc:	f10b 0b01 	add.w	fp, fp, #1
 800ece0:	dd06      	ble.n	800ecf0 <__hexnan+0x100>
 800ece2:	4544      	cmp	r4, r8
 800ece4:	d9c1      	bls.n	800ec6a <__hexnan+0x7a>
 800ece6:	2300      	movs	r3, #0
 800ece8:	f844 3c04 	str.w	r3, [r4, #-4]
 800ecec:	2501      	movs	r5, #1
 800ecee:	3c04      	subs	r4, #4
 800ecf0:	6822      	ldr	r2, [r4, #0]
 800ecf2:	f000 000f 	and.w	r0, r0, #15
 800ecf6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800ecfa:	6020      	str	r0, [r4, #0]
 800ecfc:	e7b5      	b.n	800ec6a <__hexnan+0x7a>
 800ecfe:	2508      	movs	r5, #8
 800ed00:	e7b3      	b.n	800ec6a <__hexnan+0x7a>
 800ed02:	9b01      	ldr	r3, [sp, #4]
 800ed04:	2b00      	cmp	r3, #0
 800ed06:	d0dd      	beq.n	800ecc4 <__hexnan+0xd4>
 800ed08:	f1c3 0320 	rsb	r3, r3, #32
 800ed0c:	f04f 32ff 	mov.w	r2, #4294967295
 800ed10:	40da      	lsrs	r2, r3
 800ed12:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800ed16:	4013      	ands	r3, r2
 800ed18:	f846 3c04 	str.w	r3, [r6, #-4]
 800ed1c:	e7d2      	b.n	800ecc4 <__hexnan+0xd4>
 800ed1e:	3f04      	subs	r7, #4
 800ed20:	e7d0      	b.n	800ecc4 <__hexnan+0xd4>
 800ed22:	2004      	movs	r0, #4
 800ed24:	e7d5      	b.n	800ecd2 <__hexnan+0xe2>

0800ed26 <__ascii_mbtowc>:
 800ed26:	b082      	sub	sp, #8
 800ed28:	b901      	cbnz	r1, 800ed2c <__ascii_mbtowc+0x6>
 800ed2a:	a901      	add	r1, sp, #4
 800ed2c:	b142      	cbz	r2, 800ed40 <__ascii_mbtowc+0x1a>
 800ed2e:	b14b      	cbz	r3, 800ed44 <__ascii_mbtowc+0x1e>
 800ed30:	7813      	ldrb	r3, [r2, #0]
 800ed32:	600b      	str	r3, [r1, #0]
 800ed34:	7812      	ldrb	r2, [r2, #0]
 800ed36:	1e10      	subs	r0, r2, #0
 800ed38:	bf18      	it	ne
 800ed3a:	2001      	movne	r0, #1
 800ed3c:	b002      	add	sp, #8
 800ed3e:	4770      	bx	lr
 800ed40:	4610      	mov	r0, r2
 800ed42:	e7fb      	b.n	800ed3c <__ascii_mbtowc+0x16>
 800ed44:	f06f 0001 	mvn.w	r0, #1
 800ed48:	e7f8      	b.n	800ed3c <__ascii_mbtowc+0x16>

0800ed4a <_realloc_r>:
 800ed4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ed4e:	4607      	mov	r7, r0
 800ed50:	4614      	mov	r4, r2
 800ed52:	460d      	mov	r5, r1
 800ed54:	b921      	cbnz	r1, 800ed60 <_realloc_r+0x16>
 800ed56:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ed5a:	4611      	mov	r1, r2
 800ed5c:	f7fb bce4 	b.w	800a728 <_malloc_r>
 800ed60:	b92a      	cbnz	r2, 800ed6e <_realloc_r+0x24>
 800ed62:	f7fd fced 	bl	800c740 <_free_r>
 800ed66:	4625      	mov	r5, r4
 800ed68:	4628      	mov	r0, r5
 800ed6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ed6e:	f000 f840 	bl	800edf2 <_malloc_usable_size_r>
 800ed72:	4284      	cmp	r4, r0
 800ed74:	4606      	mov	r6, r0
 800ed76:	d802      	bhi.n	800ed7e <_realloc_r+0x34>
 800ed78:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ed7c:	d8f4      	bhi.n	800ed68 <_realloc_r+0x1e>
 800ed7e:	4621      	mov	r1, r4
 800ed80:	4638      	mov	r0, r7
 800ed82:	f7fb fcd1 	bl	800a728 <_malloc_r>
 800ed86:	4680      	mov	r8, r0
 800ed88:	b908      	cbnz	r0, 800ed8e <_realloc_r+0x44>
 800ed8a:	4645      	mov	r5, r8
 800ed8c:	e7ec      	b.n	800ed68 <_realloc_r+0x1e>
 800ed8e:	42b4      	cmp	r4, r6
 800ed90:	4622      	mov	r2, r4
 800ed92:	4629      	mov	r1, r5
 800ed94:	bf28      	it	cs
 800ed96:	4632      	movcs	r2, r6
 800ed98:	f7ff fc42 	bl	800e620 <memcpy>
 800ed9c:	4629      	mov	r1, r5
 800ed9e:	4638      	mov	r0, r7
 800eda0:	f7fd fcce 	bl	800c740 <_free_r>
 800eda4:	e7f1      	b.n	800ed8a <_realloc_r+0x40>

0800eda6 <__ascii_wctomb>:
 800eda6:	4603      	mov	r3, r0
 800eda8:	4608      	mov	r0, r1
 800edaa:	b141      	cbz	r1, 800edbe <__ascii_wctomb+0x18>
 800edac:	2aff      	cmp	r2, #255	@ 0xff
 800edae:	d904      	bls.n	800edba <__ascii_wctomb+0x14>
 800edb0:	228a      	movs	r2, #138	@ 0x8a
 800edb2:	601a      	str	r2, [r3, #0]
 800edb4:	f04f 30ff 	mov.w	r0, #4294967295
 800edb8:	4770      	bx	lr
 800edba:	700a      	strb	r2, [r1, #0]
 800edbc:	2001      	movs	r0, #1
 800edbe:	4770      	bx	lr

0800edc0 <fiprintf>:
 800edc0:	b40e      	push	{r1, r2, r3}
 800edc2:	b503      	push	{r0, r1, lr}
 800edc4:	4601      	mov	r1, r0
 800edc6:	ab03      	add	r3, sp, #12
 800edc8:	4805      	ldr	r0, [pc, #20]	@ (800ede0 <fiprintf+0x20>)
 800edca:	f853 2b04 	ldr.w	r2, [r3], #4
 800edce:	6800      	ldr	r0, [r0, #0]
 800edd0:	9301      	str	r3, [sp, #4]
 800edd2:	f7ff f9b1 	bl	800e138 <_vfiprintf_r>
 800edd6:	b002      	add	sp, #8
 800edd8:	f85d eb04 	ldr.w	lr, [sp], #4
 800eddc:	b003      	add	sp, #12
 800edde:	4770      	bx	lr
 800ede0:	2000021c 	.word	0x2000021c

0800ede4 <abort>:
 800ede4:	b508      	push	{r3, lr}
 800ede6:	2006      	movs	r0, #6
 800ede8:	f000 f834 	bl	800ee54 <raise>
 800edec:	2001      	movs	r0, #1
 800edee:	f7f2 fdc5 	bl	800197c <_exit>

0800edf2 <_malloc_usable_size_r>:
 800edf2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800edf6:	1f18      	subs	r0, r3, #4
 800edf8:	2b00      	cmp	r3, #0
 800edfa:	bfbc      	itt	lt
 800edfc:	580b      	ldrlt	r3, [r1, r0]
 800edfe:	18c0      	addlt	r0, r0, r3
 800ee00:	4770      	bx	lr

0800ee02 <_raise_r>:
 800ee02:	291f      	cmp	r1, #31
 800ee04:	b538      	push	{r3, r4, r5, lr}
 800ee06:	4605      	mov	r5, r0
 800ee08:	460c      	mov	r4, r1
 800ee0a:	d904      	bls.n	800ee16 <_raise_r+0x14>
 800ee0c:	2316      	movs	r3, #22
 800ee0e:	6003      	str	r3, [r0, #0]
 800ee10:	f04f 30ff 	mov.w	r0, #4294967295
 800ee14:	bd38      	pop	{r3, r4, r5, pc}
 800ee16:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800ee18:	b112      	cbz	r2, 800ee20 <_raise_r+0x1e>
 800ee1a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ee1e:	b94b      	cbnz	r3, 800ee34 <_raise_r+0x32>
 800ee20:	4628      	mov	r0, r5
 800ee22:	f000 f831 	bl	800ee88 <_getpid_r>
 800ee26:	4622      	mov	r2, r4
 800ee28:	4601      	mov	r1, r0
 800ee2a:	4628      	mov	r0, r5
 800ee2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ee30:	f000 b818 	b.w	800ee64 <_kill_r>
 800ee34:	2b01      	cmp	r3, #1
 800ee36:	d00a      	beq.n	800ee4e <_raise_r+0x4c>
 800ee38:	1c59      	adds	r1, r3, #1
 800ee3a:	d103      	bne.n	800ee44 <_raise_r+0x42>
 800ee3c:	2316      	movs	r3, #22
 800ee3e:	6003      	str	r3, [r0, #0]
 800ee40:	2001      	movs	r0, #1
 800ee42:	e7e7      	b.n	800ee14 <_raise_r+0x12>
 800ee44:	2100      	movs	r1, #0
 800ee46:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800ee4a:	4620      	mov	r0, r4
 800ee4c:	4798      	blx	r3
 800ee4e:	2000      	movs	r0, #0
 800ee50:	e7e0      	b.n	800ee14 <_raise_r+0x12>
	...

0800ee54 <raise>:
 800ee54:	4b02      	ldr	r3, [pc, #8]	@ (800ee60 <raise+0xc>)
 800ee56:	4601      	mov	r1, r0
 800ee58:	6818      	ldr	r0, [r3, #0]
 800ee5a:	f7ff bfd2 	b.w	800ee02 <_raise_r>
 800ee5e:	bf00      	nop
 800ee60:	2000021c 	.word	0x2000021c

0800ee64 <_kill_r>:
 800ee64:	b538      	push	{r3, r4, r5, lr}
 800ee66:	4d07      	ldr	r5, [pc, #28]	@ (800ee84 <_kill_r+0x20>)
 800ee68:	2300      	movs	r3, #0
 800ee6a:	4604      	mov	r4, r0
 800ee6c:	4608      	mov	r0, r1
 800ee6e:	4611      	mov	r1, r2
 800ee70:	602b      	str	r3, [r5, #0]
 800ee72:	f7f2 fd73 	bl	800195c <_kill>
 800ee76:	1c43      	adds	r3, r0, #1
 800ee78:	d102      	bne.n	800ee80 <_kill_r+0x1c>
 800ee7a:	682b      	ldr	r3, [r5, #0]
 800ee7c:	b103      	cbz	r3, 800ee80 <_kill_r+0x1c>
 800ee7e:	6023      	str	r3, [r4, #0]
 800ee80:	bd38      	pop	{r3, r4, r5, pc}
 800ee82:	bf00      	nop
 800ee84:	20001034 	.word	0x20001034

0800ee88 <_getpid_r>:
 800ee88:	f7f2 bd60 	b.w	800194c <_getpid>

0800ee8c <_init>:
 800ee8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ee8e:	bf00      	nop
 800ee90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ee92:	bc08      	pop	{r3}
 800ee94:	469e      	mov	lr, r3
 800ee96:	4770      	bx	lr

0800ee98 <_fini>:
 800ee98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ee9a:	bf00      	nop
 800ee9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ee9e:	bc08      	pop	{r3}
 800eea0:	469e      	mov	lr, r3
 800eea2:	4770      	bx	lr
