
SR_Mycha.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c828  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000046c  0800c9b8  0800c9b8  0000d9b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ce24  0800ce24  0000e3dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800ce24  0800ce24  0000de24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ce2c  0800ce2c  0000e3dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ce2c  0800ce2c  0000de2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ce30  0800ce30  0000de30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000003dc  20000000  0800ce34  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000c20  200003dc  0800d210  0000e3dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000ffc  0800d210  0000effc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e3dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001cc4c  00000000  00000000  0000e40c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005287  00000000  00000000  0002b058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001cb0  00000000  00000000  000302e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000015b5  00000000  00000000  00031f90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002e28e  00000000  00000000  00033545  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00024ecc  00000000  00000000  000617d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00101910  00000000  00000000  0008669f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00187faf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008594  00000000  00000000  00187ff4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  00190588  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200003dc 	.word	0x200003dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c9a0 	.word	0x0800c9a0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200003e0 	.word	0x200003e0
 80001cc:	0800c9a0 	.word	0x0800c9a0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b988 	b.w	8000ed0 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	468e      	mov	lr, r1
 8000be0:	4604      	mov	r4, r0
 8000be2:	4688      	mov	r8, r1
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d14a      	bne.n	8000c7e <__udivmoddi4+0xa6>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4617      	mov	r7, r2
 8000bec:	d962      	bls.n	8000cb4 <__udivmoddi4+0xdc>
 8000bee:	fab2 f682 	clz	r6, r2
 8000bf2:	b14e      	cbz	r6, 8000c08 <__udivmoddi4+0x30>
 8000bf4:	f1c6 0320 	rsb	r3, r6, #32
 8000bf8:	fa01 f806 	lsl.w	r8, r1, r6
 8000bfc:	fa20 f303 	lsr.w	r3, r0, r3
 8000c00:	40b7      	lsls	r7, r6
 8000c02:	ea43 0808 	orr.w	r8, r3, r8
 8000c06:	40b4      	lsls	r4, r6
 8000c08:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c0c:	fa1f fc87 	uxth.w	ip, r7
 8000c10:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c14:	0c23      	lsrs	r3, r4, #16
 8000c16:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c1a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c1e:	fb01 f20c 	mul.w	r2, r1, ip
 8000c22:	429a      	cmp	r2, r3
 8000c24:	d909      	bls.n	8000c3a <__udivmoddi4+0x62>
 8000c26:	18fb      	adds	r3, r7, r3
 8000c28:	f101 30ff 	add.w	r0, r1, #4294967295
 8000c2c:	f080 80ea 	bcs.w	8000e04 <__udivmoddi4+0x22c>
 8000c30:	429a      	cmp	r2, r3
 8000c32:	f240 80e7 	bls.w	8000e04 <__udivmoddi4+0x22c>
 8000c36:	3902      	subs	r1, #2
 8000c38:	443b      	add	r3, r7
 8000c3a:	1a9a      	subs	r2, r3, r2
 8000c3c:	b2a3      	uxth	r3, r4
 8000c3e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c42:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c46:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c4a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c4e:	459c      	cmp	ip, r3
 8000c50:	d909      	bls.n	8000c66 <__udivmoddi4+0x8e>
 8000c52:	18fb      	adds	r3, r7, r3
 8000c54:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c58:	f080 80d6 	bcs.w	8000e08 <__udivmoddi4+0x230>
 8000c5c:	459c      	cmp	ip, r3
 8000c5e:	f240 80d3 	bls.w	8000e08 <__udivmoddi4+0x230>
 8000c62:	443b      	add	r3, r7
 8000c64:	3802      	subs	r0, #2
 8000c66:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c6a:	eba3 030c 	sub.w	r3, r3, ip
 8000c6e:	2100      	movs	r1, #0
 8000c70:	b11d      	cbz	r5, 8000c7a <__udivmoddi4+0xa2>
 8000c72:	40f3      	lsrs	r3, r6
 8000c74:	2200      	movs	r2, #0
 8000c76:	e9c5 3200 	strd	r3, r2, [r5]
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	428b      	cmp	r3, r1
 8000c80:	d905      	bls.n	8000c8e <__udivmoddi4+0xb6>
 8000c82:	b10d      	cbz	r5, 8000c88 <__udivmoddi4+0xb0>
 8000c84:	e9c5 0100 	strd	r0, r1, [r5]
 8000c88:	2100      	movs	r1, #0
 8000c8a:	4608      	mov	r0, r1
 8000c8c:	e7f5      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000c8e:	fab3 f183 	clz	r1, r3
 8000c92:	2900      	cmp	r1, #0
 8000c94:	d146      	bne.n	8000d24 <__udivmoddi4+0x14c>
 8000c96:	4573      	cmp	r3, lr
 8000c98:	d302      	bcc.n	8000ca0 <__udivmoddi4+0xc8>
 8000c9a:	4282      	cmp	r2, r0
 8000c9c:	f200 8105 	bhi.w	8000eaa <__udivmoddi4+0x2d2>
 8000ca0:	1a84      	subs	r4, r0, r2
 8000ca2:	eb6e 0203 	sbc.w	r2, lr, r3
 8000ca6:	2001      	movs	r0, #1
 8000ca8:	4690      	mov	r8, r2
 8000caa:	2d00      	cmp	r5, #0
 8000cac:	d0e5      	beq.n	8000c7a <__udivmoddi4+0xa2>
 8000cae:	e9c5 4800 	strd	r4, r8, [r5]
 8000cb2:	e7e2      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000cb4:	2a00      	cmp	r2, #0
 8000cb6:	f000 8090 	beq.w	8000dda <__udivmoddi4+0x202>
 8000cba:	fab2 f682 	clz	r6, r2
 8000cbe:	2e00      	cmp	r6, #0
 8000cc0:	f040 80a4 	bne.w	8000e0c <__udivmoddi4+0x234>
 8000cc4:	1a8a      	subs	r2, r1, r2
 8000cc6:	0c03      	lsrs	r3, r0, #16
 8000cc8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ccc:	b280      	uxth	r0, r0
 8000cce:	b2bc      	uxth	r4, r7
 8000cd0:	2101      	movs	r1, #1
 8000cd2:	fbb2 fcfe 	udiv	ip, r2, lr
 8000cd6:	fb0e 221c 	mls	r2, lr, ip, r2
 8000cda:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cde:	fb04 f20c 	mul.w	r2, r4, ip
 8000ce2:	429a      	cmp	r2, r3
 8000ce4:	d907      	bls.n	8000cf6 <__udivmoddi4+0x11e>
 8000ce6:	18fb      	adds	r3, r7, r3
 8000ce8:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000cec:	d202      	bcs.n	8000cf4 <__udivmoddi4+0x11c>
 8000cee:	429a      	cmp	r2, r3
 8000cf0:	f200 80e0 	bhi.w	8000eb4 <__udivmoddi4+0x2dc>
 8000cf4:	46c4      	mov	ip, r8
 8000cf6:	1a9b      	subs	r3, r3, r2
 8000cf8:	fbb3 f2fe 	udiv	r2, r3, lr
 8000cfc:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d00:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d04:	fb02 f404 	mul.w	r4, r2, r4
 8000d08:	429c      	cmp	r4, r3
 8000d0a:	d907      	bls.n	8000d1c <__udivmoddi4+0x144>
 8000d0c:	18fb      	adds	r3, r7, r3
 8000d0e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000d12:	d202      	bcs.n	8000d1a <__udivmoddi4+0x142>
 8000d14:	429c      	cmp	r4, r3
 8000d16:	f200 80ca 	bhi.w	8000eae <__udivmoddi4+0x2d6>
 8000d1a:	4602      	mov	r2, r0
 8000d1c:	1b1b      	subs	r3, r3, r4
 8000d1e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d22:	e7a5      	b.n	8000c70 <__udivmoddi4+0x98>
 8000d24:	f1c1 0620 	rsb	r6, r1, #32
 8000d28:	408b      	lsls	r3, r1
 8000d2a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d2e:	431f      	orrs	r7, r3
 8000d30:	fa0e f401 	lsl.w	r4, lr, r1
 8000d34:	fa20 f306 	lsr.w	r3, r0, r6
 8000d38:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d3c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d40:	4323      	orrs	r3, r4
 8000d42:	fa00 f801 	lsl.w	r8, r0, r1
 8000d46:	fa1f fc87 	uxth.w	ip, r7
 8000d4a:	fbbe f0f9 	udiv	r0, lr, r9
 8000d4e:	0c1c      	lsrs	r4, r3, #16
 8000d50:	fb09 ee10 	mls	lr, r9, r0, lr
 8000d54:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000d58:	fb00 fe0c 	mul.w	lr, r0, ip
 8000d5c:	45a6      	cmp	lr, r4
 8000d5e:	fa02 f201 	lsl.w	r2, r2, r1
 8000d62:	d909      	bls.n	8000d78 <__udivmoddi4+0x1a0>
 8000d64:	193c      	adds	r4, r7, r4
 8000d66:	f100 3aff 	add.w	sl, r0, #4294967295
 8000d6a:	f080 809c 	bcs.w	8000ea6 <__udivmoddi4+0x2ce>
 8000d6e:	45a6      	cmp	lr, r4
 8000d70:	f240 8099 	bls.w	8000ea6 <__udivmoddi4+0x2ce>
 8000d74:	3802      	subs	r0, #2
 8000d76:	443c      	add	r4, r7
 8000d78:	eba4 040e 	sub.w	r4, r4, lr
 8000d7c:	fa1f fe83 	uxth.w	lr, r3
 8000d80:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d84:	fb09 4413 	mls	r4, r9, r3, r4
 8000d88:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000d8c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d90:	45a4      	cmp	ip, r4
 8000d92:	d908      	bls.n	8000da6 <__udivmoddi4+0x1ce>
 8000d94:	193c      	adds	r4, r7, r4
 8000d96:	f103 3eff 	add.w	lr, r3, #4294967295
 8000d9a:	f080 8082 	bcs.w	8000ea2 <__udivmoddi4+0x2ca>
 8000d9e:	45a4      	cmp	ip, r4
 8000da0:	d97f      	bls.n	8000ea2 <__udivmoddi4+0x2ca>
 8000da2:	3b02      	subs	r3, #2
 8000da4:	443c      	add	r4, r7
 8000da6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000daa:	eba4 040c 	sub.w	r4, r4, ip
 8000dae:	fba0 ec02 	umull	lr, ip, r0, r2
 8000db2:	4564      	cmp	r4, ip
 8000db4:	4673      	mov	r3, lr
 8000db6:	46e1      	mov	r9, ip
 8000db8:	d362      	bcc.n	8000e80 <__udivmoddi4+0x2a8>
 8000dba:	d05f      	beq.n	8000e7c <__udivmoddi4+0x2a4>
 8000dbc:	b15d      	cbz	r5, 8000dd6 <__udivmoddi4+0x1fe>
 8000dbe:	ebb8 0203 	subs.w	r2, r8, r3
 8000dc2:	eb64 0409 	sbc.w	r4, r4, r9
 8000dc6:	fa04 f606 	lsl.w	r6, r4, r6
 8000dca:	fa22 f301 	lsr.w	r3, r2, r1
 8000dce:	431e      	orrs	r6, r3
 8000dd0:	40cc      	lsrs	r4, r1
 8000dd2:	e9c5 6400 	strd	r6, r4, [r5]
 8000dd6:	2100      	movs	r1, #0
 8000dd8:	e74f      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000dda:	fbb1 fcf2 	udiv	ip, r1, r2
 8000dde:	0c01      	lsrs	r1, r0, #16
 8000de0:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000de4:	b280      	uxth	r0, r0
 8000de6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000dea:	463b      	mov	r3, r7
 8000dec:	4638      	mov	r0, r7
 8000dee:	463c      	mov	r4, r7
 8000df0:	46b8      	mov	r8, r7
 8000df2:	46be      	mov	lr, r7
 8000df4:	2620      	movs	r6, #32
 8000df6:	fbb1 f1f7 	udiv	r1, r1, r7
 8000dfa:	eba2 0208 	sub.w	r2, r2, r8
 8000dfe:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e02:	e766      	b.n	8000cd2 <__udivmoddi4+0xfa>
 8000e04:	4601      	mov	r1, r0
 8000e06:	e718      	b.n	8000c3a <__udivmoddi4+0x62>
 8000e08:	4610      	mov	r0, r2
 8000e0a:	e72c      	b.n	8000c66 <__udivmoddi4+0x8e>
 8000e0c:	f1c6 0220 	rsb	r2, r6, #32
 8000e10:	fa2e f302 	lsr.w	r3, lr, r2
 8000e14:	40b7      	lsls	r7, r6
 8000e16:	40b1      	lsls	r1, r6
 8000e18:	fa20 f202 	lsr.w	r2, r0, r2
 8000e1c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e20:	430a      	orrs	r2, r1
 8000e22:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e26:	b2bc      	uxth	r4, r7
 8000e28:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e2c:	0c11      	lsrs	r1, r2, #16
 8000e2e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e32:	fb08 f904 	mul.w	r9, r8, r4
 8000e36:	40b0      	lsls	r0, r6
 8000e38:	4589      	cmp	r9, r1
 8000e3a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e3e:	b280      	uxth	r0, r0
 8000e40:	d93e      	bls.n	8000ec0 <__udivmoddi4+0x2e8>
 8000e42:	1879      	adds	r1, r7, r1
 8000e44:	f108 3cff 	add.w	ip, r8, #4294967295
 8000e48:	d201      	bcs.n	8000e4e <__udivmoddi4+0x276>
 8000e4a:	4589      	cmp	r9, r1
 8000e4c:	d81f      	bhi.n	8000e8e <__udivmoddi4+0x2b6>
 8000e4e:	eba1 0109 	sub.w	r1, r1, r9
 8000e52:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e56:	fb09 f804 	mul.w	r8, r9, r4
 8000e5a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e5e:	b292      	uxth	r2, r2
 8000e60:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e64:	4542      	cmp	r2, r8
 8000e66:	d229      	bcs.n	8000ebc <__udivmoddi4+0x2e4>
 8000e68:	18ba      	adds	r2, r7, r2
 8000e6a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000e6e:	d2c4      	bcs.n	8000dfa <__udivmoddi4+0x222>
 8000e70:	4542      	cmp	r2, r8
 8000e72:	d2c2      	bcs.n	8000dfa <__udivmoddi4+0x222>
 8000e74:	f1a9 0102 	sub.w	r1, r9, #2
 8000e78:	443a      	add	r2, r7
 8000e7a:	e7be      	b.n	8000dfa <__udivmoddi4+0x222>
 8000e7c:	45f0      	cmp	r8, lr
 8000e7e:	d29d      	bcs.n	8000dbc <__udivmoddi4+0x1e4>
 8000e80:	ebbe 0302 	subs.w	r3, lr, r2
 8000e84:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000e88:	3801      	subs	r0, #1
 8000e8a:	46e1      	mov	r9, ip
 8000e8c:	e796      	b.n	8000dbc <__udivmoddi4+0x1e4>
 8000e8e:	eba7 0909 	sub.w	r9, r7, r9
 8000e92:	4449      	add	r1, r9
 8000e94:	f1a8 0c02 	sub.w	ip, r8, #2
 8000e98:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e9c:	fb09 f804 	mul.w	r8, r9, r4
 8000ea0:	e7db      	b.n	8000e5a <__udivmoddi4+0x282>
 8000ea2:	4673      	mov	r3, lr
 8000ea4:	e77f      	b.n	8000da6 <__udivmoddi4+0x1ce>
 8000ea6:	4650      	mov	r0, sl
 8000ea8:	e766      	b.n	8000d78 <__udivmoddi4+0x1a0>
 8000eaa:	4608      	mov	r0, r1
 8000eac:	e6fd      	b.n	8000caa <__udivmoddi4+0xd2>
 8000eae:	443b      	add	r3, r7
 8000eb0:	3a02      	subs	r2, #2
 8000eb2:	e733      	b.n	8000d1c <__udivmoddi4+0x144>
 8000eb4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000eb8:	443b      	add	r3, r7
 8000eba:	e71c      	b.n	8000cf6 <__udivmoddi4+0x11e>
 8000ebc:	4649      	mov	r1, r9
 8000ebe:	e79c      	b.n	8000dfa <__udivmoddi4+0x222>
 8000ec0:	eba1 0109 	sub.w	r1, r1, r9
 8000ec4:	46c4      	mov	ip, r8
 8000ec6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eca:	fb09 f804 	mul.w	r8, r9, r4
 8000ece:	e7c4      	b.n	8000e5a <__udivmoddi4+0x282>

08000ed0 <__aeabi_idiv0>:
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop

08000ed4 <accInit>:
 * Sprawdza, czy czujnik LSM303C jest podłączony i działa:
 *  1) odczytuje ID akcelerometru i porównuje z oczekiwanym,
 *  2) wywołuje BSP_COMPASS_Init() do inicjalizacji sensora.
 * Zwraca 0 przy sukcesie lub kod błędu (1 = niepoprawne ID, 2 = błąd init).
 */
uint8_t accInit(){
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b082      	sub	sp, #8
 8000ed8:	af00      	add	r7, sp, #0
	uint8_t idAcc = LSM303C_AccReadID();
 8000eda:	f001 f96b 	bl	80021b4 <LSM303C_AccReadID>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	71fb      	strb	r3, [r7, #7]
	if(idAcc != LMS303C_ACC_ID){
 8000ee2:	79fb      	ldrb	r3, [r7, #7]
 8000ee4:	2b41      	cmp	r3, #65	@ 0x41
 8000ee6:	d006      	beq.n	8000ef6 <accInit+0x22>
		printf("ERR, acc id: 0x%X\r\n",idAcc);
 8000ee8:	79fb      	ldrb	r3, [r7, #7]
 8000eea:	4619      	mov	r1, r3
 8000eec:	480a      	ldr	r0, [pc, #40]	@ (8000f18 <accInit+0x44>)
 8000eee:	f009 fe31 	bl	800ab54 <iprintf>
		return 1;
 8000ef2:	2301      	movs	r3, #1
 8000ef4:	e00c      	b.n	8000f10 <accInit+0x3c>
	}

	COMPASS_StatusTypeDef stanAcc = BSP_COMPASS_Init();
 8000ef6:	f001 fe89 	bl	8002c0c <BSP_COMPASS_Init>
 8000efa:	4603      	mov	r3, r0
 8000efc:	71bb      	strb	r3, [r7, #6]
	if(stanAcc == COMPASS_ERROR){
 8000efe:	79bb      	ldrb	r3, [r7, #6]
 8000f00:	2b01      	cmp	r3, #1
 8000f02:	d104      	bne.n	8000f0e <accInit+0x3a>
		printf("ERR acc init\r\n");
 8000f04:	4805      	ldr	r0, [pc, #20]	@ (8000f1c <accInit+0x48>)
 8000f06:	f009 fe8d 	bl	800ac24 <puts>
		return 2;
 8000f0a:	2302      	movs	r3, #2
 8000f0c:	e000      	b.n	8000f10 <accInit+0x3c>
	}
	return 0;
 8000f0e:	2300      	movs	r3, #0
}
 8000f10:	4618      	mov	r0, r3
 8000f12:	3708      	adds	r7, #8
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd80      	pop	{r7, pc}
 8000f18:	0800c9b8 	.word	0x0800c9b8
 8000f1c:	0800c9cc 	.word	0x0800c9cc

08000f20 <accel_calibrate>:
 *  - zapisuje wynik do bufora offset_cb[] i do wewnętrznego acc_offset[].
 * Parametry:
 *   offset_cb[3] – tablica, do której zwracane są zmierzone offsety,
 *   samples      – liczba próbek użytych do obliczenia średniej.
 */
void accel_calibrate(int16_t offset_cb[3], uint16_t samples){
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b088      	sub	sp, #32
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
 8000f28:	460b      	mov	r3, r1
 8000f2a:	807b      	strh	r3, [r7, #2]
    int32_t sum[3] = {0,0,0};
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	613b      	str	r3, [r7, #16]
 8000f30:	2300      	movs	r3, #0
 8000f32:	617b      	str	r3, [r7, #20]
 8000f34:	2300      	movs	r3, #0
 8000f36:	61bb      	str	r3, [r7, #24]
    int16_t buf[3];
    for(uint16_t i = 0; i < samples; ++i){
 8000f38:	2300      	movs	r3, #0
 8000f3a:	83fb      	strh	r3, [r7, #30]
 8000f3c:	e019      	b.n	8000f72 <accel_calibrate+0x52>
        LSM303C_AccReadXYZ(buf);
 8000f3e:	f107 0308 	add.w	r3, r7, #8
 8000f42:	4618      	mov	r0, r3
 8000f44:	f001 f979 	bl	800223a <LSM303C_AccReadXYZ>
        sum[0] += buf[0];
 8000f48:	693b      	ldr	r3, [r7, #16]
 8000f4a:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8000f4e:	4413      	add	r3, r2
 8000f50:	613b      	str	r3, [r7, #16]
        sum[1] += buf[1];
 8000f52:	697b      	ldr	r3, [r7, #20]
 8000f54:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8000f58:	4413      	add	r3, r2
 8000f5a:	617b      	str	r3, [r7, #20]
        sum[2] += buf[2];
 8000f5c:	69bb      	ldr	r3, [r7, #24]
 8000f5e:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000f62:	4413      	add	r3, r2
 8000f64:	61bb      	str	r3, [r7, #24]
        HAL_Delay(1);
 8000f66:	2001      	movs	r0, #1
 8000f68:	f001 ffb0 	bl	8002ecc <HAL_Delay>
    for(uint16_t i = 0; i < samples; ++i){
 8000f6c:	8bfb      	ldrh	r3, [r7, #30]
 8000f6e:	3301      	adds	r3, #1
 8000f70:	83fb      	strh	r3, [r7, #30]
 8000f72:	8bfa      	ldrh	r2, [r7, #30]
 8000f74:	887b      	ldrh	r3, [r7, #2]
 8000f76:	429a      	cmp	r2, r3
 8000f78:	d3e1      	bcc.n	8000f3e <accel_calibrate+0x1e>
    }
    // średnia jako offset
    offset_cb[0] = (int16_t)(sum[0] / samples);
 8000f7a:	693a      	ldr	r2, [r7, #16]
 8000f7c:	887b      	ldrh	r3, [r7, #2]
 8000f7e:	fb92 f3f3 	sdiv	r3, r2, r3
 8000f82:	b21a      	sxth	r2, r3
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	801a      	strh	r2, [r3, #0]
    offset_cb[1] = (int16_t)(sum[1] / samples);
 8000f88:	697a      	ldr	r2, [r7, #20]
 8000f8a:	887b      	ldrh	r3, [r7, #2]
 8000f8c:	fb92 f2f3 	sdiv	r2, r2, r3
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	3302      	adds	r3, #2
 8000f94:	b212      	sxth	r2, r2
 8000f96:	801a      	strh	r2, [r3, #0]
    offset_cb[2] = (int16_t)(sum[2] / samples);
 8000f98:	69ba      	ldr	r2, [r7, #24]
 8000f9a:	887b      	ldrh	r3, [r7, #2]
 8000f9c:	fb92 f2f3 	sdiv	r2, r2, r3
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	3304      	adds	r3, #4
 8000fa4:	b212      	sxth	r2, r2
 8000fa6:	801a      	strh	r2, [r3, #0]
    // zmienna lokalna:
    acc_offset[0] = offset_cb[0];
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000fae:	4b08      	ldr	r3, [pc, #32]	@ (8000fd0 <accel_calibrate+0xb0>)
 8000fb0:	801a      	strh	r2, [r3, #0]
    acc_offset[1] = offset_cb[1];
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8000fb8:	4b05      	ldr	r3, [pc, #20]	@ (8000fd0 <accel_calibrate+0xb0>)
 8000fba:	805a      	strh	r2, [r3, #2]
    acc_offset[2] = offset_cb[2];
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8000fc2:	4b03      	ldr	r3, [pc, #12]	@ (8000fd0 <accel_calibrate+0xb0>)
 8000fc4:	809a      	strh	r2, [r3, #4]
}
 8000fc6:	bf00      	nop
 8000fc8:	3720      	adds	r7, #32
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	20000400 	.word	0x20000400

08000fd4 <accel_lpf_int>:
 *   in    – bieżąca surowa, już wycentrowana wartość,
 *   prev  – wskaźnik na poprzednią wartość filtra (i miejsce przechowywania wyniku),
 *   alpha – współczynnik filtra w skali 0–256.
 * Zwraca przefiltrowaną wartość.
 */
int16_t accel_lpf_int(int16_t in, int16_t *prev, uint8_t alpha){
 8000fd4:	b480      	push	{r7}
 8000fd6:	b085      	sub	sp, #20
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	4603      	mov	r3, r0
 8000fdc:	6039      	str	r1, [r7, #0]
 8000fde:	80fb      	strh	r3, [r7, #6]
 8000fe0:	4613      	mov	r3, r2
 8000fe2:	717b      	strb	r3, [r7, #5]
    // y[n] = y[n-1] + alpha*(x[n] - y[n-1]) ; alpha w [0..256]
    int32_t diff = (int32_t)in - *prev;
 8000fe4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000fe8:	683a      	ldr	r2, [r7, #0]
 8000fea:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000fee:	1a9b      	subs	r3, r3, r2
 8000ff0:	60fb      	str	r3, [r7, #12]
    int32_t delta = (diff * alpha) >> 8;  // podziel przez 256
 8000ff2:	797b      	ldrb	r3, [r7, #5]
 8000ff4:	68fa      	ldr	r2, [r7, #12]
 8000ff6:	fb02 f303 	mul.w	r3, r2, r3
 8000ffa:	121b      	asrs	r3, r3, #8
 8000ffc:	60bb      	str	r3, [r7, #8]
    *prev = (int16_t)((int32_t)*prev + delta);
 8000ffe:	683b      	ldr	r3, [r7, #0]
 8001000:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001004:	b29a      	uxth	r2, r3
 8001006:	68bb      	ldr	r3, [r7, #8]
 8001008:	b29b      	uxth	r3, r3
 800100a:	4413      	add	r3, r2
 800100c:	b29b      	uxth	r3, r3
 800100e:	b21a      	sxth	r2, r3
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	801a      	strh	r2, [r3, #0]
    return *prev;
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	f9b3 3000 	ldrsh.w	r3, [r3]
}
 800101a:	4618      	mov	r0, r3
 800101c:	3714      	adds	r7, #20
 800101e:	46bd      	mov	sp, r7
 8001020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001024:	4770      	bx	lr
	...

08001028 <accGetData>:
 * -----------
 * Pobiera surowe pomiary X/Y/Z z akcelerometru, usuwa offset (kalibrację),
 * a następnie przepuszcza każdą oś przez integer-owy LPF.
 * Wynikiem są trzy wartości całkowite w out[3], gotowe do dalszej obróbki.
 */
void accGetData(int16_t out[3]){
 8001028:	b590      	push	{r4, r7, lr}
 800102a:	b087      	sub	sp, #28
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
    int16_t raw[3];
    LSM303C_AccReadXYZ(raw);
 8001030:	f107 030c 	add.w	r3, r7, #12
 8001034:	4618      	mov	r0, r3
 8001036:	f001 f900 	bl	800223a <LSM303C_AccReadXYZ>
    for(int i = 0; i < 3; ++i){
 800103a:	2300      	movs	r3, #0
 800103c:	617b      	str	r3, [r7, #20]
 800103e:	e021      	b.n	8001084 <accGetData+0x5c>
        int16_t centered = raw[i] - acc_offset[i];
 8001040:	697b      	ldr	r3, [r7, #20]
 8001042:	005b      	lsls	r3, r3, #1
 8001044:	3318      	adds	r3, #24
 8001046:	443b      	add	r3, r7
 8001048:	f933 3c0c 	ldrsh.w	r3, [r3, #-12]
 800104c:	b29a      	uxth	r2, r3
 800104e:	4911      	ldr	r1, [pc, #68]	@ (8001094 <accGetData+0x6c>)
 8001050:	697b      	ldr	r3, [r7, #20]
 8001052:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 8001056:	b29b      	uxth	r3, r3
 8001058:	1ad3      	subs	r3, r2, r3
 800105a:	b29b      	uxth	r3, r3
 800105c:	827b      	strh	r3, [r7, #18]
        out[i] = accel_lpf_int(centered, &acc_prev[i], LPF_ALPHA_I);
 800105e:	697b      	ldr	r3, [r7, #20]
 8001060:	005b      	lsls	r3, r3, #1
 8001062:	4a0d      	ldr	r2, [pc, #52]	@ (8001098 <accGetData+0x70>)
 8001064:	1899      	adds	r1, r3, r2
 8001066:	697b      	ldr	r3, [r7, #20]
 8001068:	005b      	lsls	r3, r3, #1
 800106a:	687a      	ldr	r2, [r7, #4]
 800106c:	18d4      	adds	r4, r2, r3
 800106e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001072:	227a      	movs	r2, #122	@ 0x7a
 8001074:	4618      	mov	r0, r3
 8001076:	f7ff ffad 	bl	8000fd4 <accel_lpf_int>
 800107a:	4603      	mov	r3, r0
 800107c:	8023      	strh	r3, [r4, #0]
    for(int i = 0; i < 3; ++i){
 800107e:	697b      	ldr	r3, [r7, #20]
 8001080:	3301      	adds	r3, #1
 8001082:	617b      	str	r3, [r7, #20]
 8001084:	697b      	ldr	r3, [r7, #20]
 8001086:	2b02      	cmp	r3, #2
 8001088:	ddda      	ble.n	8001040 <accGetData+0x18>
    }
}
 800108a:	bf00      	nop
 800108c:	bf00      	nop
 800108e:	371c      	adds	r7, #28
 8001090:	46bd      	mov	sp, r7
 8001092:	bd90      	pop	{r4, r7, pc}
 8001094:	20000400 	.word	0x20000400
 8001098:	200003f8 	.word	0x200003f8

0800109c <buttons_getState>:
 *   3) Jeśli przez DEBOUNCE_DELAY ms raw pozostaje niezmieniony,
 *      to aktualizowany jest stableState,
 *   4) Zwracany jest stableState.
 */
uint8_t buttons_getState()
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b082      	sub	sp, #8
 80010a0:	af00      	add	r7, sp, #0
    // 1) Odczyt surowy: 1 = wciśnięty, 0 = puszczony
    uint8_t raw = 0;
 80010a2:	2300      	movs	r3, #0
 80010a4:	71fb      	strb	r3, [r7, #7]
    if (HAL_GPIO_ReadPin(BTN_GPIO_PORT, BTN_LEFT_PIN)  == GPIO_PIN_SET) raw |= 1 << 1;
 80010a6:	2102      	movs	r1, #2
 80010a8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80010ac:	f002 f9ee 	bl	800348c <HAL_GPIO_ReadPin>
 80010b0:	4603      	mov	r3, r0
 80010b2:	2b01      	cmp	r3, #1
 80010b4:	d103      	bne.n	80010be <buttons_getState+0x22>
 80010b6:	79fb      	ldrb	r3, [r7, #7]
 80010b8:	f043 0302 	orr.w	r3, r3, #2
 80010bc:	71fb      	strb	r3, [r7, #7]
    if (HAL_GPIO_ReadPin(BTN_GPIO_PORT, BTN_RIGHT_PIN) == GPIO_PIN_SET) raw |= 1 << 0;
 80010be:	2104      	movs	r1, #4
 80010c0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80010c4:	f002 f9e2 	bl	800348c <HAL_GPIO_ReadPin>
 80010c8:	4603      	mov	r3, r0
 80010ca:	2b01      	cmp	r3, #1
 80010cc:	d103      	bne.n	80010d6 <buttons_getState+0x3a>
 80010ce:	79fb      	ldrb	r3, [r7, #7]
 80010d0:	f043 0301 	orr.w	r3, r3, #1
 80010d4:	71fb      	strb	r3, [r7, #7]

    // 2) Jeśli zmiana stanu surowego – resetujemy timer
    if (raw != lastRawState) {
 80010d6:	4b0f      	ldr	r3, [pc, #60]	@ (8001114 <buttons_getState+0x78>)
 80010d8:	781b      	ldrb	r3, [r3, #0]
 80010da:	79fa      	ldrb	r2, [r7, #7]
 80010dc:	429a      	cmp	r2, r3
 80010de:	d008      	beq.n	80010f2 <buttons_getState+0x56>
        lastRawState   = raw;
 80010e0:	4a0c      	ldr	r2, [pc, #48]	@ (8001114 <buttons_getState+0x78>)
 80010e2:	79fb      	ldrb	r3, [r7, #7]
 80010e4:	7013      	strb	r3, [r2, #0]
        lastChangeTick = HAL_GetTick();
 80010e6:	f001 fee5 	bl	8002eb4 <HAL_GetTick>
 80010ea:	4603      	mov	r3, r0
 80010ec:	4a0a      	ldr	r2, [pc, #40]	@ (8001118 <buttons_getState+0x7c>)
 80010ee:	6013      	str	r3, [r2, #0]
 80010f0:	e00a      	b.n	8001108 <buttons_getState+0x6c>
    }
    // 3) Po upływie DEBOUNCE_DELAY aktualizujemy stan stabilny
    else if ((HAL_GetTick() - lastChangeTick) >= DEBOUNCE_DELAY) {
 80010f2:	f001 fedf 	bl	8002eb4 <HAL_GetTick>
 80010f6:	4602      	mov	r2, r0
 80010f8:	4b07      	ldr	r3, [pc, #28]	@ (8001118 <buttons_getState+0x7c>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	1ad3      	subs	r3, r2, r3
 80010fe:	2b31      	cmp	r3, #49	@ 0x31
 8001100:	d902      	bls.n	8001108 <buttons_getState+0x6c>
        stableState = raw;
 8001102:	4a06      	ldr	r2, [pc, #24]	@ (800111c <buttons_getState+0x80>)
 8001104:	79fb      	ldrb	r3, [r7, #7]
 8001106:	7013      	strb	r3, [r2, #0]
    }

    // 4) Zwracamy oddebouncowany stan (bit-maskę)
    return stableState;
 8001108:	4b04      	ldr	r3, [pc, #16]	@ (800111c <buttons_getState+0x80>)
 800110a:	781b      	ldrb	r3, [r3, #0]
}
 800110c:	4618      	mov	r0, r3
 800110e:	3708      	adds	r7, #8
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}
 8001114:	20000406 	.word	0x20000406
 8001118:	20000408 	.word	0x20000408
 800111c:	2000040c 	.word	0x2000040c

08001120 <buttons_changeDPI>:

int8_t buttons_changeDPI(int8_t* DPI_state)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b084      	sub	sp, #16
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
    static uint32_t lastDownPressTime = 0;

    static uint8_t prevUpState = 1;
    static uint8_t prevDownState = 1;

    uint32_t currentTime = HAL_GetTick();
 8001128:	f001 fec4 	bl	8002eb4 <HAL_GetTick>
 800112c:	60f8      	str	r0, [r7, #12]

    // Czytanie obecnych stanów przycisków
    uint8_t currentUpState = HAL_GPIO_ReadPin(BTN_GPIO_PORT, BTN_UP_PIN);
 800112e:	2108      	movs	r1, #8
 8001130:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001134:	f002 f9aa 	bl	800348c <HAL_GPIO_ReadPin>
 8001138:	4603      	mov	r3, r0
 800113a:	72fb      	strb	r3, [r7, #11]
    uint8_t currentDownState = HAL_GPIO_ReadPin(BTN_GPIO_PORT, BTN_DOWN_PIN);
 800113c:	2120      	movs	r1, #32
 800113e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001142:	f002 f9a3 	bl	800348c <HAL_GPIO_ReadPin>
 8001146:	4603      	mov	r3, r0
 8001148:	72bb      	strb	r3, [r7, #10]

    // Obsługa przycisku zwiekszającego DPI (joystick up)
    if (prevUpState == 1 && currentUpState == 0) // zbocze opadające
 800114a:	4b27      	ldr	r3, [pc, #156]	@ (80011e8 <buttons_changeDPI+0xc8>)
 800114c:	781b      	ldrb	r3, [r3, #0]
 800114e:	2b01      	cmp	r3, #1
 8001150:	d11c      	bne.n	800118c <buttons_changeDPI+0x6c>
 8001152:	7afb      	ldrb	r3, [r7, #11]
 8001154:	2b00      	cmp	r3, #0
 8001156:	d119      	bne.n	800118c <buttons_changeDPI+0x6c>
    {
        if ((currentTime - lastUpPressTime) > DEBOUNCE_DELAY)
 8001158:	4b24      	ldr	r3, [pc, #144]	@ (80011ec <buttons_changeDPI+0xcc>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	68fa      	ldr	r2, [r7, #12]
 800115e:	1ad3      	subs	r3, r2, r3
 8001160:	2b32      	cmp	r3, #50	@ 0x32
 8001162:	d913      	bls.n	800118c <buttons_changeDPI+0x6c>
        {
        	(*DPI_state)++;
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	f993 3000 	ldrsb.w	r3, [r3]
 800116a:	b2db      	uxtb	r3, r3
 800116c:	3301      	adds	r3, #1
 800116e:	b2db      	uxtb	r3, r3
 8001170:	b25a      	sxtb	r2, r3
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	701a      	strb	r2, [r3, #0]
        	if(*DPI_state>5) *DPI_state = 5;	//jesli przekroczono zakres 1-5
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	f993 3000 	ldrsb.w	r3, [r3]
 800117c:	2b05      	cmp	r3, #5
 800117e:	dd02      	ble.n	8001186 <buttons_changeDPI+0x66>
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	2205      	movs	r2, #5
 8001184:	701a      	strb	r2, [r3, #0]
            lastUpPressTime = currentTime;
 8001186:	4a19      	ldr	r2, [pc, #100]	@ (80011ec <buttons_changeDPI+0xcc>)
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	6013      	str	r3, [r2, #0]
        }
    }

    // Obsługa przycisku zmniejszającego DPI (joystick down)
    if (prevDownState == 1 && currentDownState == 0) // zbocze opadające
 800118c:	4b18      	ldr	r3, [pc, #96]	@ (80011f0 <buttons_changeDPI+0xd0>)
 800118e:	781b      	ldrb	r3, [r3, #0]
 8001190:	2b01      	cmp	r3, #1
 8001192:	d11c      	bne.n	80011ce <buttons_changeDPI+0xae>
 8001194:	7abb      	ldrb	r3, [r7, #10]
 8001196:	2b00      	cmp	r3, #0
 8001198:	d119      	bne.n	80011ce <buttons_changeDPI+0xae>
    {
        if ((currentTime - lastDownPressTime) > DEBOUNCE_DELAY)
 800119a:	4b16      	ldr	r3, [pc, #88]	@ (80011f4 <buttons_changeDPI+0xd4>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	68fa      	ldr	r2, [r7, #12]
 80011a0:	1ad3      	subs	r3, r2, r3
 80011a2:	2b32      	cmp	r3, #50	@ 0x32
 80011a4:	d913      	bls.n	80011ce <buttons_changeDPI+0xae>
        {
        	(*DPI_state)--;
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	f993 3000 	ldrsb.w	r3, [r3]
 80011ac:	b2db      	uxtb	r3, r3
 80011ae:	3b01      	subs	r3, #1
 80011b0:	b2db      	uxtb	r3, r3
 80011b2:	b25a      	sxtb	r2, r3
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	701a      	strb	r2, [r3, #0]
        	if(*DPI_state<1) *DPI_state = 1;	//jesli przekroczono zakres 1-5
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	f993 3000 	ldrsb.w	r3, [r3]
 80011be:	2b00      	cmp	r3, #0
 80011c0:	dc02      	bgt.n	80011c8 <buttons_changeDPI+0xa8>
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	2201      	movs	r2, #1
 80011c6:	701a      	strb	r2, [r3, #0]
            lastDownPressTime = currentTime;
 80011c8:	4a0a      	ldr	r2, [pc, #40]	@ (80011f4 <buttons_changeDPI+0xd4>)
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	6013      	str	r3, [r2, #0]
        }
    }

    // Aktualizacja poprzednich stanów
    prevUpState = currentUpState;
 80011ce:	4a06      	ldr	r2, [pc, #24]	@ (80011e8 <buttons_changeDPI+0xc8>)
 80011d0:	7afb      	ldrb	r3, [r7, #11]
 80011d2:	7013      	strb	r3, [r2, #0]
    prevDownState = currentDownState;
 80011d4:	4a06      	ldr	r2, [pc, #24]	@ (80011f0 <buttons_changeDPI+0xd0>)
 80011d6:	7abb      	ldrb	r3, [r7, #10]
 80011d8:	7013      	strb	r3, [r2, #0]

    return *DPI_state;
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	f993 3000 	ldrsb.w	r3, [r3]
}
 80011e0:	4618      	mov	r0, r3
 80011e2:	3710      	adds	r7, #16
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	20000000 	.word	0x20000000
 80011ec:	20000410 	.word	0x20000410
 80011f0:	20000001 	.word	0x20000001
 80011f4:	20000414 	.word	0x20000414

080011f8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b08c      	sub	sp, #48	@ 0x30
 80011fc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011fe:	f107 031c 	add.w	r3, r7, #28
 8001202:	2200      	movs	r2, #0
 8001204:	601a      	str	r2, [r3, #0]
 8001206:	605a      	str	r2, [r3, #4]
 8001208:	609a      	str	r2, [r3, #8]
 800120a:	60da      	str	r2, [r3, #12]
 800120c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800120e:	4b82      	ldr	r3, [pc, #520]	@ (8001418 <MX_GPIO_Init+0x220>)
 8001210:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001212:	4a81      	ldr	r2, [pc, #516]	@ (8001418 <MX_GPIO_Init+0x220>)
 8001214:	f043 0304 	orr.w	r3, r3, #4
 8001218:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800121a:	4b7f      	ldr	r3, [pc, #508]	@ (8001418 <MX_GPIO_Init+0x220>)
 800121c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800121e:	f003 0304 	and.w	r3, r3, #4
 8001222:	61bb      	str	r3, [r7, #24]
 8001224:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001226:	4b7c      	ldr	r3, [pc, #496]	@ (8001418 <MX_GPIO_Init+0x220>)
 8001228:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800122a:	4a7b      	ldr	r2, [pc, #492]	@ (8001418 <MX_GPIO_Init+0x220>)
 800122c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001230:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001232:	4b79      	ldr	r3, [pc, #484]	@ (8001418 <MX_GPIO_Init+0x220>)
 8001234:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001236:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800123a:	617b      	str	r3, [r7, #20]
 800123c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800123e:	4b76      	ldr	r3, [pc, #472]	@ (8001418 <MX_GPIO_Init+0x220>)
 8001240:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001242:	4a75      	ldr	r2, [pc, #468]	@ (8001418 <MX_GPIO_Init+0x220>)
 8001244:	f043 0301 	orr.w	r3, r3, #1
 8001248:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800124a:	4b73      	ldr	r3, [pc, #460]	@ (8001418 <MX_GPIO_Init+0x220>)
 800124c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800124e:	f003 0301 	and.w	r3, r3, #1
 8001252:	613b      	str	r3, [r7, #16]
 8001254:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001256:	4b70      	ldr	r3, [pc, #448]	@ (8001418 <MX_GPIO_Init+0x220>)
 8001258:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800125a:	4a6f      	ldr	r2, [pc, #444]	@ (8001418 <MX_GPIO_Init+0x220>)
 800125c:	f043 0302 	orr.w	r3, r3, #2
 8001260:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001262:	4b6d      	ldr	r3, [pc, #436]	@ (8001418 <MX_GPIO_Init+0x220>)
 8001264:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001266:	f003 0302 	and.w	r3, r3, #2
 800126a:	60fb      	str	r3, [r7, #12]
 800126c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800126e:	4b6a      	ldr	r3, [pc, #424]	@ (8001418 <MX_GPIO_Init+0x220>)
 8001270:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001272:	4a69      	ldr	r2, [pc, #420]	@ (8001418 <MX_GPIO_Init+0x220>)
 8001274:	f043 0310 	orr.w	r3, r3, #16
 8001278:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800127a:	4b67      	ldr	r3, [pc, #412]	@ (8001418 <MX_GPIO_Init+0x220>)
 800127c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800127e:	f003 0310 	and.w	r3, r3, #16
 8001282:	60bb      	str	r3, [r7, #8]
 8001284:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001286:	4b64      	ldr	r3, [pc, #400]	@ (8001418 <MX_GPIO_Init+0x220>)
 8001288:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800128a:	4a63      	ldr	r2, [pc, #396]	@ (8001418 <MX_GPIO_Init+0x220>)
 800128c:	f043 0308 	orr.w	r3, r3, #8
 8001290:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001292:	4b61      	ldr	r3, [pc, #388]	@ (8001418 <MX_GPIO_Init+0x220>)
 8001294:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001296:	f003 0308 	and.w	r3, r3, #8
 800129a:	607b      	str	r3, [r7, #4]
 800129c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, MAG_CS_Pin|OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800129e:	2201      	movs	r2, #1
 80012a0:	f240 2101 	movw	r1, #513	@ 0x201
 80012a4:	485d      	ldr	r0, [pc, #372]	@ (800141c <MX_GPIO_Init+0x224>)
 80012a6:	f002 f909 	bl	80034bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD_R_Pin|M3V3_REG_ON_Pin, GPIO_PIN_RESET);
 80012aa:	2200      	movs	r2, #0
 80012ac:	210c      	movs	r1, #12
 80012ae:	485c      	ldr	r0, [pc, #368]	@ (8001420 <MX_GPIO_Init+0x228>)
 80012b0:	f002 f904 	bl	80034bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LD_G_Pin|XL_CS_Pin, GPIO_PIN_RESET);
 80012b4:	2200      	movs	r2, #0
 80012b6:	f240 1101 	movw	r1, #257	@ 0x101
 80012ba:	485a      	ldr	r0, [pc, #360]	@ (8001424 <MX_GPIO_Init+0x22c>)
 80012bc:	f002 f8fe 	bl	80034bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GYRO_CS_GPIO_Port, GYRO_CS_Pin, GPIO_PIN_SET);
 80012c0:	2201      	movs	r2, #1
 80012c2:	2180      	movs	r1, #128	@ 0x80
 80012c4:	4858      	ldr	r0, [pc, #352]	@ (8001428 <MX_GPIO_Init+0x230>)
 80012c6:	f002 f8f9 	bl	80034bc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = MAG_CS_Pin|OTG_FS_PowerSwitchOn_Pin;
 80012ca:	f240 2301 	movw	r3, #513	@ 0x201
 80012ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012d0:	2301      	movs	r3, #1
 80012d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d4:	2300      	movs	r3, #0
 80012d6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012d8:	2300      	movs	r3, #0
 80012da:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012dc:	f107 031c 	add.w	r3, r7, #28
 80012e0:	4619      	mov	r1, r3
 80012e2:	484e      	ldr	r0, [pc, #312]	@ (800141c <MX_GPIO_Init+0x224>)
 80012e4:	f001 ff28 	bl	8003138 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin */
  GPIO_InitStruct.Pin = JOY_CENTER_Pin|JOY_LEFT_Pin|JOY_RIGHT_Pin|JOY_UP_Pin
 80012e8:	232f      	movs	r3, #47	@ 0x2f
 80012ea:	61fb      	str	r3, [r7, #28]
                          |JOY_DOWN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012ec:	2300      	movs	r3, #0
 80012ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80012f0:	2302      	movs	r3, #2
 80012f2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012f4:	f107 031c 	add.w	r3, r7, #28
 80012f8:	4619      	mov	r1, r3
 80012fa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80012fe:	f001 ff1b 	bl	8003138 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MFX_WAKEUP_Pin;
 8001302:	2310      	movs	r3, #16
 8001304:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001306:	4b49      	ldr	r3, [pc, #292]	@ (800142c <MX_GPIO_Init+0x234>)
 8001308:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800130a:	2300      	movs	r3, #0
 800130c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MFX_WAKEUP_GPIO_Port, &GPIO_InitStruct);
 800130e:	f107 031c 	add.w	r3, r7, #28
 8001312:	4619      	mov	r1, r3
 8001314:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001318:	f001 ff0e 	bl	8003138 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD_R_Pin;
 800131c:	2304      	movs	r3, #4
 800131e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001320:	2301      	movs	r3, #1
 8001322:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001324:	2301      	movs	r3, #1
 8001326:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001328:	2303      	movs	r3, #3
 800132a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LD_R_GPIO_Port, &GPIO_InitStruct);
 800132c:	f107 031c 	add.w	r3, r7, #28
 8001330:	4619      	mov	r1, r3
 8001332:	483b      	ldr	r0, [pc, #236]	@ (8001420 <MX_GPIO_Init+0x228>)
 8001334:	f001 ff00 	bl	8003138 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD_G_Pin;
 8001338:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800133c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800133e:	2301      	movs	r3, #1
 8001340:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001342:	2301      	movs	r3, #1
 8001344:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001346:	2303      	movs	r3, #3
 8001348:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LD_G_GPIO_Port, &GPIO_InitStruct);
 800134a:	f107 031c 	add.w	r3, r7, #28
 800134e:	4619      	mov	r1, r3
 8001350:	4834      	ldr	r0, [pc, #208]	@ (8001424 <MX_GPIO_Init+0x22c>)
 8001352:	f001 fef1 	bl	8003138 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001356:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800135a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800135c:	4b33      	ldr	r3, [pc, #204]	@ (800142c <MX_GPIO_Init+0x234>)
 800135e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001360:	2300      	movs	r3, #0
 8001362:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001364:	f107 031c 	add.w	r3, r7, #28
 8001368:	4619      	mov	r1, r3
 800136a:	482c      	ldr	r0, [pc, #176]	@ (800141c <MX_GPIO_Init+0x224>)
 800136c:	f001 fee4 	bl	8003138 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = EXT_RST_Pin|GYRO_INT1_Pin;
 8001370:	2305      	movs	r3, #5
 8001372:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001374:	4b2d      	ldr	r3, [pc, #180]	@ (800142c <MX_GPIO_Init+0x234>)
 8001376:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001378:	2300      	movs	r3, #0
 800137a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800137c:	f107 031c 	add.w	r3, r7, #28
 8001380:	4619      	mov	r1, r3
 8001382:	4829      	ldr	r0, [pc, #164]	@ (8001428 <MX_GPIO_Init+0x230>)
 8001384:	f001 fed8 	bl	8003138 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = GYRO_CS_Pin;
 8001388:	2380      	movs	r3, #128	@ 0x80
 800138a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800138c:	2301      	movs	r3, #1
 800138e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001390:	2300      	movs	r3, #0
 8001392:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001394:	2303      	movs	r3, #3
 8001396:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GYRO_CS_GPIO_Port, &GPIO_InitStruct);
 8001398:	f107 031c 	add.w	r3, r7, #28
 800139c:	4619      	mov	r1, r3
 800139e:	4822      	ldr	r0, [pc, #136]	@ (8001428 <MX_GPIO_Init+0x230>)
 80013a0:	f001 feca 	bl	8003138 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = M3V3_REG_ON_Pin;
 80013a4:	2308      	movs	r3, #8
 80013a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013a8:	2301      	movs	r3, #1
 80013aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ac:	2300      	movs	r3, #0
 80013ae:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013b0:	2300      	movs	r3, #0
 80013b2:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(M3V3_REG_ON_GPIO_Port, &GPIO_InitStruct);
 80013b4:	f107 031c 	add.w	r3, r7, #28
 80013b8:	4619      	mov	r1, r3
 80013ba:	4819      	ldr	r0, [pc, #100]	@ (8001420 <MX_GPIO_Init+0x228>)
 80013bc:	f001 febc 	bl	8003138 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = GYRO_INT2_Pin;
 80013c0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80013c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80013c6:	4b19      	ldr	r3, [pc, #100]	@ (800142c <MX_GPIO_Init+0x234>)
 80013c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ca:	2300      	movs	r3, #0
 80013cc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GYRO_INT2_GPIO_Port, &GPIO_InitStruct);
 80013ce:	f107 031c 	add.w	r3, r7, #28
 80013d2:	4619      	mov	r1, r3
 80013d4:	4812      	ldr	r0, [pc, #72]	@ (8001420 <MX_GPIO_Init+0x228>)
 80013d6:	f001 feaf 	bl	8003138 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = XL_CS_Pin;
 80013da:	2301      	movs	r3, #1
 80013dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013de:	2301      	movs	r3, #1
 80013e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e2:	2300      	movs	r3, #0
 80013e4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013e6:	2300      	movs	r3, #0
 80013e8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(XL_CS_GPIO_Port, &GPIO_InitStruct);
 80013ea:	f107 031c 	add.w	r3, r7, #28
 80013ee:	4619      	mov	r1, r3
 80013f0:	480c      	ldr	r0, [pc, #48]	@ (8001424 <MX_GPIO_Init+0x22c>)
 80013f2:	f001 fea1 	bl	8003138 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = XL_INT_Pin;
 80013f6:	2302      	movs	r3, #2
 80013f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80013fa:	4b0c      	ldr	r3, [pc, #48]	@ (800142c <MX_GPIO_Init+0x234>)
 80013fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013fe:	2300      	movs	r3, #0
 8001400:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(XL_INT_GPIO_Port, &GPIO_InitStruct);
 8001402:	f107 031c 	add.w	r3, r7, #28
 8001406:	4619      	mov	r1, r3
 8001408:	4806      	ldr	r0, [pc, #24]	@ (8001424 <MX_GPIO_Init+0x22c>)
 800140a:	f001 fe95 	bl	8003138 <HAL_GPIO_Init>

}
 800140e:	bf00      	nop
 8001410:	3730      	adds	r7, #48	@ 0x30
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	40021000 	.word	0x40021000
 800141c:	48000800 	.word	0x48000800
 8001420:	48000400 	.word	0x48000400
 8001424:	48001000 	.word	0x48001000
 8001428:	48000c00 	.word	0x48000c00
 800142c:	10120000 	.word	0x10120000

08001430 <gyroInit>:
#include "gyroscope.h"

#define LPF_ALPHA 0.1f

uint8_t gyroInit(){
 8001430:	b580      	push	{r7, lr}
 8001432:	b082      	sub	sp, #8
 8001434:	af00      	add	r7, sp, #0
	uint8_t idGyro = L3GD20_ReadID();
 8001436:	f000 fcd0 	bl	8001dda <L3GD20_ReadID>
 800143a:	4603      	mov	r3, r0
 800143c:	71fb      	strb	r3, [r7, #7]
	if(idGyro != I_AM_L3GD20){
 800143e:	79fb      	ldrb	r3, [r7, #7]
 8001440:	2bd4      	cmp	r3, #212	@ 0xd4
 8001442:	d006      	beq.n	8001452 <gyroInit+0x22>
		printf("ERR, gyro id: 0x%X\r\n",idGyro);
 8001444:	79fb      	ldrb	r3, [r7, #7]
 8001446:	4619      	mov	r1, r3
 8001448:	480a      	ldr	r0, [pc, #40]	@ (8001474 <gyroInit+0x44>)
 800144a:	f009 fb83 	bl	800ab54 <iprintf>
		return 1;
 800144e:	2301      	movs	r3, #1
 8001450:	e00c      	b.n	800146c <gyroInit+0x3c>
	}

	uint8_t stanGyro = BSP_GYRO_Init();
 8001452:	f001 fc57 	bl	8002d04 <BSP_GYRO_Init>
 8001456:	4603      	mov	r3, r0
 8001458:	71bb      	strb	r3, [r7, #6]
//	uint16_t gyroInit = 0b0001000000001111;
//	L3GD20_Init(gyroInit);
	if(stanGyro == GYRO_ERROR){
 800145a:	79bb      	ldrb	r3, [r7, #6]
 800145c:	2b01      	cmp	r3, #1
 800145e:	d104      	bne.n	800146a <gyroInit+0x3a>
		printf("ERR gyro init\r\n");
 8001460:	4805      	ldr	r0, [pc, #20]	@ (8001478 <gyroInit+0x48>)
 8001462:	f009 fbdf 	bl	800ac24 <puts>
		return 2;
 8001466:	2302      	movs	r3, #2
 8001468:	e000      	b.n	800146c <gyroInit+0x3c>
	}
	return 0;
 800146a:	2300      	movs	r3, #0
}
 800146c:	4618      	mov	r0, r3
 800146e:	3708      	adds	r7, #8
 8001470:	46bd      	mov	sp, r7
 8001472:	bd80      	pop	{r7, pc}
 8001474:	0800c9dc 	.word	0x0800c9dc
 8001478:	0800c9f4 	.word	0x0800c9f4

0800147c <_write>:

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */

int _write(int file, char *ptr, int len) {
 800147c:	b580      	push	{r7, lr}
 800147e:	b084      	sub	sp, #16
 8001480:	af00      	add	r7, sp, #0
 8001482:	60f8      	str	r0, [r7, #12]
 8001484:	60b9      	str	r1, [r7, #8]
 8001486:	607a      	str	r2, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t*) ptr, len, 100);
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	b29a      	uxth	r2, r3
 800148c:	2364      	movs	r3, #100	@ 0x64
 800148e:	68b9      	ldr	r1, [r7, #8]
 8001490:	4803      	ldr	r0, [pc, #12]	@ (80014a0 <_write+0x24>)
 8001492:	f004 fe83 	bl	800619c <HAL_UART_Transmit>
    return len;
 8001496:	687b      	ldr	r3, [r7, #4]
}
 8001498:	4618      	mov	r0, r3
 800149a:	3710      	adds	r7, #16
 800149c:	46bd      	mov	sp, r7
 800149e:	bd80      	pop	{r7, pc}
 80014a0:	200004e0 	.word	0x200004e0

080014a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014a8:	f001 fc94 	bl	8002dd4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014ac:	f000 f83c 	bl	8001528 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014b0:	f7ff fea2 	bl	80011f8 <MX_GPIO_Init>
  MX_SPI2_Init();
 80014b4:	f000 f8e2 	bl	800167c <MX_SPI2_Init>
  MX_USART2_UART_Init();
 80014b8:	f000 faf8 	bl	8001aac <MX_USART2_UART_Init>
  MX_TIM6_Init();
 80014bc:	f000 faa0 	bl	8001a00 <MX_TIM6_Init>
  MX_USB_DEVICE_Init();
 80014c0:	f008 f83e 	bl	8009540 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

  if(!gyroInit()){Error_Handler();}
 80014c4:	f7ff ffb4 	bl	8001430 <gyroInit>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d101      	bne.n	80014d2 <main+0x2e>
 80014ce:	f000 f8c7 	bl	8001660 <Error_Handler>
  if(!accInit()){Error_Handler();}
 80014d2:	f7ff fcff 	bl	8000ed4 <accInit>
 80014d6:	4603      	mov	r3, r0
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d101      	bne.n	80014e0 <main+0x3c>
 80014dc:	f000 f8c0 	bl	8001660 <Error_Handler>

  accel_calibrate(offset, 100);
 80014e0:	2164      	movs	r1, #100	@ 0x64
 80014e2:	480c      	ldr	r0, [pc, #48]	@ (8001514 <main+0x70>)
 80014e4:	f7ff fd1c 	bl	8000f20 <accel_calibrate>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	 // gyroGetData(filteredGyro);
	  accGetData(filteredAcc);
 80014e8:	480b      	ldr	r0, [pc, #44]	@ (8001518 <main+0x74>)
 80014ea:	f7ff fd9d 	bl	8001028 <accGetData>
	  AccToMouse_Process(mousehid,filteredAcc,&dpi);
 80014ee:	4b0b      	ldr	r3, [pc, #44]	@ (800151c <main+0x78>)
 80014f0:	4a0b      	ldr	r2, [pc, #44]	@ (8001520 <main+0x7c>)
 80014f2:	4909      	ldr	r1, [pc, #36]	@ (8001518 <main+0x74>)
 80014f4:	6818      	ldr	r0, [r3, #0]
 80014f6:	f000 fb4d 	bl	8001b94 <AccToMouse_Process>

//	  if(DPI_level != 3)
	  printf("DPI: %d\n",dpi);
 80014fa:	4b09      	ldr	r3, [pc, #36]	@ (8001520 <main+0x7c>)
 80014fc:	f993 3000 	ldrsb.w	r3, [r3]
 8001500:	4619      	mov	r1, r3
 8001502:	4808      	ldr	r0, [pc, #32]	@ (8001524 <main+0x80>)
 8001504:	f009 fb26 	bl	800ab54 <iprintf>

	  HAL_Delay(20);
 8001508:	2014      	movs	r0, #20
 800150a:	f001 fcdf 	bl	8002ecc <HAL_Delay>
	  accGetData(filteredAcc);
 800150e:	bf00      	nop
 8001510:	e7ea      	b.n	80014e8 <main+0x44>
 8001512:	bf00      	nop
 8001514:	20000420 	.word	0x20000420
 8001518:	20000418 	.word	0x20000418
 800151c:	20000428 	.word	0x20000428
 8001520:	20000002 	.word	0x20000002
 8001524:	0800ca24 	.word	0x0800ca24

08001528 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b0b8      	sub	sp, #224	@ 0xe0
 800152c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800152e:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001532:	2244      	movs	r2, #68	@ 0x44
 8001534:	2100      	movs	r1, #0
 8001536:	4618      	mov	r0, r3
 8001538:	f009 fc54 	bl	800ade4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800153c:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8001540:	2200      	movs	r2, #0
 8001542:	601a      	str	r2, [r3, #0]
 8001544:	605a      	str	r2, [r3, #4]
 8001546:	609a      	str	r2, [r3, #8]
 8001548:	60da      	str	r2, [r3, #12]
 800154a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800154c:	463b      	mov	r3, r7
 800154e:	2288      	movs	r2, #136	@ 0x88
 8001550:	2100      	movs	r1, #0
 8001552:	4618      	mov	r0, r3
 8001554:	f009 fc46 	bl	800ade4 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001558:	f003 f86a 	bl	8004630 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800155c:	4b3f      	ldr	r3, [pc, #252]	@ (800165c <SystemClock_Config+0x134>)
 800155e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001562:	4a3e      	ldr	r2, [pc, #248]	@ (800165c <SystemClock_Config+0x134>)
 8001564:	f023 0318 	bic.w	r3, r3, #24
 8001568:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 800156c:	2314      	movs	r3, #20
 800156e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001572:	2301      	movs	r3, #1
 8001574:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001578:	2301      	movs	r3, #1
 800157a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800157e:	2300      	movs	r3, #0
 8001580:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001584:	2360      	movs	r3, #96	@ 0x60
 8001586:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800158a:	2302      	movs	r3, #2
 800158c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001590:	2301      	movs	r3, #1
 8001592:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001596:	2301      	movs	r3, #1
 8001598:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
  RCC_OscInitStruct.PLL.PLLN = 40;
 800159c:	2328      	movs	r3, #40	@ 0x28
 800159e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80015a2:	2307      	movs	r3, #7
 80015a4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80015a8:	2302      	movs	r3, #2
 80015aa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80015ae:	2302      	movs	r3, #2
 80015b0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015b4:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80015b8:	4618      	mov	r0, r3
 80015ba:	f003 f8bd 	bl	8004738 <HAL_RCC_OscConfig>
 80015be:	4603      	mov	r3, r0
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d001      	beq.n	80015c8 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 80015c4:	f000 f84c 	bl	8001660 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015c8:	230f      	movs	r3, #15
 80015ca:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015ce:	2303      	movs	r3, #3
 80015d0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015d4:	2300      	movs	r3, #0
 80015d6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80015da:	2300      	movs	r3, #0
 80015dc:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015e0:	2300      	movs	r3, #0
 80015e2:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80015e6:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 80015ea:	2104      	movs	r1, #4
 80015ec:	4618      	mov	r0, r3
 80015ee:	f003 fc8b 	bl	8004f08 <HAL_RCC_ClockConfig>
 80015f2:	4603      	mov	r3, r0
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d001      	beq.n	80015fc <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80015f8:	f000 f832 	bl	8001660 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_USB;
 80015fc:	f242 0302 	movw	r3, #8194	@ 0x2002
 8001600:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001602:	2300      	movs	r3, #0
 8001604:	63fb      	str	r3, [r7, #60]	@ 0x3c
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8001606:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800160a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 800160c:	2301      	movs	r3, #1
 800160e:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001610:	2301      	movs	r3, #1
 8001612:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8001614:	2318      	movs	r3, #24
 8001616:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001618:	2307      	movs	r3, #7
 800161a:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800161c:	2302      	movs	r3, #2
 800161e:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001620:	2302      	movs	r3, #2
 8001622:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 8001624:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001628:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800162a:	463b      	mov	r3, r7
 800162c:	4618      	mov	r0, r3
 800162e:	f003 fe71 	bl	8005314 <HAL_RCCEx_PeriphCLKConfig>
 8001632:	4603      	mov	r3, r0
 8001634:	2b00      	cmp	r3, #0
 8001636:	d001      	beq.n	800163c <SystemClock_Config+0x114>
  {
    Error_Handler();
 8001638:	f000 f812 	bl	8001660 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800163c:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001640:	f003 f814 	bl	800466c <HAL_PWREx_ControlVoltageScaling>
 8001644:	4603      	mov	r3, r0
 8001646:	2b00      	cmp	r3, #0
 8001648:	d001      	beq.n	800164e <SystemClock_Config+0x126>
  {
    Error_Handler();
 800164a:	f000 f809 	bl	8001660 <Error_Handler>
  }
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 800164e:	f004 f94b 	bl	80058e8 <HAL_RCCEx_EnableMSIPLLMode>
}
 8001652:	bf00      	nop
 8001654:	37e0      	adds	r7, #224	@ 0xe0
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop
 800165c:	40021000 	.word	0x40021000

08001660 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_2);
 8001664:	2104      	movs	r1, #4
 8001666:	4804      	ldr	r0, [pc, #16]	@ (8001678 <Error_Handler+0x18>)
 8001668:	f001 ff40 	bl	80034ec <HAL_GPIO_TogglePin>
	HAL_Delay(500);
 800166c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001670:	f001 fc2c 	bl	8002ecc <HAL_Delay>

  /* USER CODE END Error_Handler_Debug */
}
 8001674:	bf00      	nop
 8001676:	bd80      	pop	{r7, pc}
 8001678:	48000400 	.word	0x48000400

0800167c <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	af00      	add	r7, sp, #0

  hspi2.Instance = SPI2;
 8001680:	4b1b      	ldr	r3, [pc, #108]	@ (80016f0 <MX_SPI2_Init+0x74>)
 8001682:	4a1c      	ldr	r2, [pc, #112]	@ (80016f4 <MX_SPI2_Init+0x78>)
 8001684:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001686:	4b1a      	ldr	r3, [pc, #104]	@ (80016f0 <MX_SPI2_Init+0x74>)
 8001688:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800168c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800168e:	4b18      	ldr	r3, [pc, #96]	@ (80016f0 <MX_SPI2_Init+0x74>)
 8001690:	2200      	movs	r2, #0
 8001692:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001694:	4b16      	ldr	r3, [pc, #88]	@ (80016f0 <MX_SPI2_Init+0x74>)
 8001696:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800169a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800169c:	4b14      	ldr	r3, [pc, #80]	@ (80016f0 <MX_SPI2_Init+0x74>)
 800169e:	2200      	movs	r2, #0
 80016a0:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80016a2:	4b13      	ldr	r3, [pc, #76]	@ (80016f0 <MX_SPI2_Init+0x74>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80016a8:	4b11      	ldr	r3, [pc, #68]	@ (80016f0 <MX_SPI2_Init+0x74>)
 80016aa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80016ae:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80016b0:	4b0f      	ldr	r3, [pc, #60]	@ (80016f0 <MX_SPI2_Init+0x74>)
 80016b2:	2220      	movs	r2, #32
 80016b4:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80016b6:	4b0e      	ldr	r3, [pc, #56]	@ (80016f0 <MX_SPI2_Init+0x74>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80016bc:	4b0c      	ldr	r3, [pc, #48]	@ (80016f0 <MX_SPI2_Init+0x74>)
 80016be:	2200      	movs	r2, #0
 80016c0:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80016c2:	4b0b      	ldr	r3, [pc, #44]	@ (80016f0 <MX_SPI2_Init+0x74>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 80016c8:	4b09      	ldr	r3, [pc, #36]	@ (80016f0 <MX_SPI2_Init+0x74>)
 80016ca:	2207      	movs	r2, #7
 80016cc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80016ce:	4b08      	ldr	r3, [pc, #32]	@ (80016f0 <MX_SPI2_Init+0x74>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80016d4:	4b06      	ldr	r3, [pc, #24]	@ (80016f0 <MX_SPI2_Init+0x74>)
 80016d6:	2208      	movs	r2, #8
 80016d8:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80016da:	4805      	ldr	r0, [pc, #20]	@ (80016f0 <MX_SPI2_Init+0x74>)
 80016dc:	f004 fae6 	bl	8005cac <HAL_SPI_Init>
 80016e0:	4603      	mov	r3, r0
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d001      	beq.n	80016ea <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80016e6:	f7ff ffbb 	bl	8001660 <Error_Handler>
  }

}
 80016ea:	bf00      	nop
 80016ec:	bd80      	pop	{r7, pc}
 80016ee:	bf00      	nop
 80016f0:	2000042c 	.word	0x2000042c
 80016f4:	40003800 	.word	0x40003800

080016f8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b08a      	sub	sp, #40	@ 0x28
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001700:	f107 0314 	add.w	r3, r7, #20
 8001704:	2200      	movs	r2, #0
 8001706:	601a      	str	r2, [r3, #0]
 8001708:	605a      	str	r2, [r3, #4]
 800170a:	609a      	str	r2, [r3, #8]
 800170c:	60da      	str	r2, [r3, #12]
 800170e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	4a17      	ldr	r2, [pc, #92]	@ (8001774 <HAL_SPI_MspInit+0x7c>)
 8001716:	4293      	cmp	r3, r2
 8001718:	d127      	bne.n	800176a <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800171a:	4b17      	ldr	r3, [pc, #92]	@ (8001778 <HAL_SPI_MspInit+0x80>)
 800171c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800171e:	4a16      	ldr	r2, [pc, #88]	@ (8001778 <HAL_SPI_MspInit+0x80>)
 8001720:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001724:	6593      	str	r3, [r2, #88]	@ 0x58
 8001726:	4b14      	ldr	r3, [pc, #80]	@ (8001778 <HAL_SPI_MspInit+0x80>)
 8001728:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800172a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800172e:	613b      	str	r3, [r7, #16]
 8001730:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001732:	4b11      	ldr	r3, [pc, #68]	@ (8001778 <HAL_SPI_MspInit+0x80>)
 8001734:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001736:	4a10      	ldr	r2, [pc, #64]	@ (8001778 <HAL_SPI_MspInit+0x80>)
 8001738:	f043 0308 	orr.w	r3, r3, #8
 800173c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800173e:	4b0e      	ldr	r3, [pc, #56]	@ (8001778 <HAL_SPI_MspInit+0x80>)
 8001740:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001742:	f003 0308 	and.w	r3, r3, #8
 8001746:	60fb      	str	r3, [r7, #12]
 8001748:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PD1     ------> SPI2_SCK
    PD3     ------> SPI2_MISO
    PD4     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = MEMS_SCK_Pin|MEMS_MISO_Pin|MEMS_MOSI_Pin;
 800174a:	231a      	movs	r3, #26
 800174c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800174e:	2302      	movs	r3, #2
 8001750:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001752:	2300      	movs	r3, #0
 8001754:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001756:	2303      	movs	r3, #3
 8001758:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800175a:	2305      	movs	r3, #5
 800175c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800175e:	f107 0314 	add.w	r3, r7, #20
 8001762:	4619      	mov	r1, r3
 8001764:	4805      	ldr	r0, [pc, #20]	@ (800177c <HAL_SPI_MspInit+0x84>)
 8001766:	f001 fce7 	bl	8003138 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 800176a:	bf00      	nop
 800176c:	3728      	adds	r7, #40	@ 0x28
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}
 8001772:	bf00      	nop
 8001774:	40003800 	.word	0x40003800
 8001778:	40021000 	.word	0x40021000
 800177c:	48000c00 	.word	0x48000c00

08001780 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001780:	b480      	push	{r7}
 8001782:	b083      	sub	sp, #12
 8001784:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001786:	4b0f      	ldr	r3, [pc, #60]	@ (80017c4 <HAL_MspInit+0x44>)
 8001788:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800178a:	4a0e      	ldr	r2, [pc, #56]	@ (80017c4 <HAL_MspInit+0x44>)
 800178c:	f043 0301 	orr.w	r3, r3, #1
 8001790:	6613      	str	r3, [r2, #96]	@ 0x60
 8001792:	4b0c      	ldr	r3, [pc, #48]	@ (80017c4 <HAL_MspInit+0x44>)
 8001794:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001796:	f003 0301 	and.w	r3, r3, #1
 800179a:	607b      	str	r3, [r7, #4]
 800179c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800179e:	4b09      	ldr	r3, [pc, #36]	@ (80017c4 <HAL_MspInit+0x44>)
 80017a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017a2:	4a08      	ldr	r2, [pc, #32]	@ (80017c4 <HAL_MspInit+0x44>)
 80017a4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80017a8:	6593      	str	r3, [r2, #88]	@ 0x58
 80017aa:	4b06      	ldr	r3, [pc, #24]	@ (80017c4 <HAL_MspInit+0x44>)
 80017ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017b2:	603b      	str	r3, [r7, #0]
 80017b4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017b6:	bf00      	nop
 80017b8:	370c      	adds	r7, #12
 80017ba:	46bd      	mov	sp, r7
 80017bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c0:	4770      	bx	lr
 80017c2:	bf00      	nop
 80017c4:	40021000 	.word	0x40021000

080017c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017c8:	b480      	push	{r7}
 80017ca:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80017cc:	bf00      	nop
 80017ce:	46bd      	mov	sp, r7
 80017d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d4:	4770      	bx	lr

080017d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017d6:	b480      	push	{r7}
 80017d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017da:	bf00      	nop
 80017dc:	e7fd      	b.n	80017da <HardFault_Handler+0x4>

080017de <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017de:	b480      	push	{r7}
 80017e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017e2:	bf00      	nop
 80017e4:	e7fd      	b.n	80017e2 <MemManage_Handler+0x4>

080017e6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017e6:	b480      	push	{r7}
 80017e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017ea:	bf00      	nop
 80017ec:	e7fd      	b.n	80017ea <BusFault_Handler+0x4>

080017ee <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017ee:	b480      	push	{r7}
 80017f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017f2:	bf00      	nop
 80017f4:	e7fd      	b.n	80017f2 <UsageFault_Handler+0x4>

080017f6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017f6:	b480      	push	{r7}
 80017f8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017fa:	bf00      	nop
 80017fc:	46bd      	mov	sp, r7
 80017fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001802:	4770      	bx	lr

08001804 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001804:	b480      	push	{r7}
 8001806:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001808:	bf00      	nop
 800180a:	46bd      	mov	sp, r7
 800180c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001810:	4770      	bx	lr

08001812 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001812:	b480      	push	{r7}
 8001814:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001816:	bf00      	nop
 8001818:	46bd      	mov	sp, r7
 800181a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181e:	4770      	bx	lr

08001820 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001824:	f001 fb32 	bl	8002e8c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001828:	bf00      	nop
 800182a:	bd80      	pop	{r7, pc}

0800182c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001830:	4802      	ldr	r0, [pc, #8]	@ (800183c <OTG_FS_IRQHandler+0x10>)
 8001832:	f001 ffc8 	bl	80037c6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001836:	bf00      	nop
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	20000aa8 	.word	0x20000aa8

08001840 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001840:	b480      	push	{r7}
 8001842:	af00      	add	r7, sp, #0
	return 1;
 8001844:	2301      	movs	r3, #1
}
 8001846:	4618      	mov	r0, r3
 8001848:	46bd      	mov	sp, r7
 800184a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184e:	4770      	bx	lr

08001850 <_kill>:

int _kill(int pid, int sig)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b082      	sub	sp, #8
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
 8001858:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800185a:	f009 fb25 	bl	800aea8 <__errno>
 800185e:	4603      	mov	r3, r0
 8001860:	2216      	movs	r2, #22
 8001862:	601a      	str	r2, [r3, #0]
	return -1;
 8001864:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001868:	4618      	mov	r0, r3
 800186a:	3708      	adds	r7, #8
 800186c:	46bd      	mov	sp, r7
 800186e:	bd80      	pop	{r7, pc}

08001870 <_exit>:

void _exit (int status)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b082      	sub	sp, #8
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001878:	f04f 31ff 	mov.w	r1, #4294967295
 800187c:	6878      	ldr	r0, [r7, #4]
 800187e:	f7ff ffe7 	bl	8001850 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001882:	bf00      	nop
 8001884:	e7fd      	b.n	8001882 <_exit+0x12>

08001886 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001886:	b580      	push	{r7, lr}
 8001888:	b086      	sub	sp, #24
 800188a:	af00      	add	r7, sp, #0
 800188c:	60f8      	str	r0, [r7, #12]
 800188e:	60b9      	str	r1, [r7, #8]
 8001890:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001892:	2300      	movs	r3, #0
 8001894:	617b      	str	r3, [r7, #20]
 8001896:	e00a      	b.n	80018ae <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001898:	f3af 8000 	nop.w
 800189c:	4601      	mov	r1, r0
 800189e:	68bb      	ldr	r3, [r7, #8]
 80018a0:	1c5a      	adds	r2, r3, #1
 80018a2:	60ba      	str	r2, [r7, #8]
 80018a4:	b2ca      	uxtb	r2, r1
 80018a6:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018a8:	697b      	ldr	r3, [r7, #20]
 80018aa:	3301      	adds	r3, #1
 80018ac:	617b      	str	r3, [r7, #20]
 80018ae:	697a      	ldr	r2, [r7, #20]
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	429a      	cmp	r2, r3
 80018b4:	dbf0      	blt.n	8001898 <_read+0x12>
	}

return len;
 80018b6:	687b      	ldr	r3, [r7, #4]
}
 80018b8:	4618      	mov	r0, r3
 80018ba:	3718      	adds	r7, #24
 80018bc:	46bd      	mov	sp, r7
 80018be:	bd80      	pop	{r7, pc}

080018c0 <_close>:
	}
	return len;
}

int _close(int file)
{
 80018c0:	b480      	push	{r7}
 80018c2:	b083      	sub	sp, #12
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
	return -1;
 80018c8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018cc:	4618      	mov	r0, r3
 80018ce:	370c      	adds	r7, #12
 80018d0:	46bd      	mov	sp, r7
 80018d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d6:	4770      	bx	lr

080018d8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80018d8:	b480      	push	{r7}
 80018da:	b083      	sub	sp, #12
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
 80018e0:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80018e8:	605a      	str	r2, [r3, #4]
	return 0;
 80018ea:	2300      	movs	r3, #0
}
 80018ec:	4618      	mov	r0, r3
 80018ee:	370c      	adds	r7, #12
 80018f0:	46bd      	mov	sp, r7
 80018f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f6:	4770      	bx	lr

080018f8 <_isatty>:

int _isatty(int file)
{
 80018f8:	b480      	push	{r7}
 80018fa:	b083      	sub	sp, #12
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
	return 1;
 8001900:	2301      	movs	r3, #1
}
 8001902:	4618      	mov	r0, r3
 8001904:	370c      	adds	r7, #12
 8001906:	46bd      	mov	sp, r7
 8001908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190c:	4770      	bx	lr

0800190e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800190e:	b480      	push	{r7}
 8001910:	b085      	sub	sp, #20
 8001912:	af00      	add	r7, sp, #0
 8001914:	60f8      	str	r0, [r7, #12]
 8001916:	60b9      	str	r1, [r7, #8]
 8001918:	607a      	str	r2, [r7, #4]
	return 0;
 800191a:	2300      	movs	r3, #0
}
 800191c:	4618      	mov	r0, r3
 800191e:	3714      	adds	r7, #20
 8001920:	46bd      	mov	sp, r7
 8001922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001926:	4770      	bx	lr

08001928 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b086      	sub	sp, #24
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001930:	4a14      	ldr	r2, [pc, #80]	@ (8001984 <_sbrk+0x5c>)
 8001932:	4b15      	ldr	r3, [pc, #84]	@ (8001988 <_sbrk+0x60>)
 8001934:	1ad3      	subs	r3, r2, r3
 8001936:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001938:	697b      	ldr	r3, [r7, #20]
 800193a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800193c:	4b13      	ldr	r3, [pc, #76]	@ (800198c <_sbrk+0x64>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	2b00      	cmp	r3, #0
 8001942:	d102      	bne.n	800194a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001944:	4b11      	ldr	r3, [pc, #68]	@ (800198c <_sbrk+0x64>)
 8001946:	4a12      	ldr	r2, [pc, #72]	@ (8001990 <_sbrk+0x68>)
 8001948:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800194a:	4b10      	ldr	r3, [pc, #64]	@ (800198c <_sbrk+0x64>)
 800194c:	681a      	ldr	r2, [r3, #0]
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	4413      	add	r3, r2
 8001952:	693a      	ldr	r2, [r7, #16]
 8001954:	429a      	cmp	r2, r3
 8001956:	d207      	bcs.n	8001968 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001958:	f009 faa6 	bl	800aea8 <__errno>
 800195c:	4603      	mov	r3, r0
 800195e:	220c      	movs	r2, #12
 8001960:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001962:	f04f 33ff 	mov.w	r3, #4294967295
 8001966:	e009      	b.n	800197c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001968:	4b08      	ldr	r3, [pc, #32]	@ (800198c <_sbrk+0x64>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800196e:	4b07      	ldr	r3, [pc, #28]	@ (800198c <_sbrk+0x64>)
 8001970:	681a      	ldr	r2, [r3, #0]
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	4413      	add	r3, r2
 8001976:	4a05      	ldr	r2, [pc, #20]	@ (800198c <_sbrk+0x64>)
 8001978:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800197a:	68fb      	ldr	r3, [r7, #12]
}
 800197c:	4618      	mov	r0, r3
 800197e:	3718      	adds	r7, #24
 8001980:	46bd      	mov	sp, r7
 8001982:	bd80      	pop	{r7, pc}
 8001984:	20018000 	.word	0x20018000
 8001988:	00000400 	.word	0x00000400
 800198c:	20000490 	.word	0x20000490
 8001990:	20001000 	.word	0x20001000

08001994 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001994:	b480      	push	{r7}
 8001996:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001998:	4b17      	ldr	r3, [pc, #92]	@ (80019f8 <SystemInit+0x64>)
 800199a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800199e:	4a16      	ldr	r2, [pc, #88]	@ (80019f8 <SystemInit+0x64>)
 80019a0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80019a4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80019a8:	4b14      	ldr	r3, [pc, #80]	@ (80019fc <SystemInit+0x68>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4a13      	ldr	r2, [pc, #76]	@ (80019fc <SystemInit+0x68>)
 80019ae:	f043 0301 	orr.w	r3, r3, #1
 80019b2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80019b4:	4b11      	ldr	r3, [pc, #68]	@ (80019fc <SystemInit+0x68>)
 80019b6:	2200      	movs	r2, #0
 80019b8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80019ba:	4b10      	ldr	r3, [pc, #64]	@ (80019fc <SystemInit+0x68>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	4a0f      	ldr	r2, [pc, #60]	@ (80019fc <SystemInit+0x68>)
 80019c0:	f023 53a8 	bic.w	r3, r3, #352321536	@ 0x15000000
 80019c4:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 80019c8:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80019ca:	4b0c      	ldr	r3, [pc, #48]	@ (80019fc <SystemInit+0x68>)
 80019cc:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80019d0:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80019d2:	4b0a      	ldr	r3, [pc, #40]	@ (80019fc <SystemInit+0x68>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	4a09      	ldr	r2, [pc, #36]	@ (80019fc <SystemInit+0x68>)
 80019d8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80019dc:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80019de:	4b07      	ldr	r3, [pc, #28]	@ (80019fc <SystemInit+0x68>)
 80019e0:	2200      	movs	r2, #0
 80019e2:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80019e4:	4b04      	ldr	r3, [pc, #16]	@ (80019f8 <SystemInit+0x64>)
 80019e6:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80019ea:	609a      	str	r2, [r3, #8]
#endif
}
 80019ec:	bf00      	nop
 80019ee:	46bd      	mov	sp, r7
 80019f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f4:	4770      	bx	lr
 80019f6:	bf00      	nop
 80019f8:	e000ed00 	.word	0xe000ed00
 80019fc:	40021000 	.word	0x40021000

08001a00 <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b084      	sub	sp, #16
 8001a04:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a06:	1d3b      	adds	r3, r7, #4
 8001a08:	2200      	movs	r2, #0
 8001a0a:	601a      	str	r2, [r3, #0]
 8001a0c:	605a      	str	r2, [r3, #4]
 8001a0e:	609a      	str	r2, [r3, #8]

  htim6.Instance = TIM6;
 8001a10:	4b14      	ldr	r3, [pc, #80]	@ (8001a64 <MX_TIM6_Init+0x64>)
 8001a12:	4a15      	ldr	r2, [pc, #84]	@ (8001a68 <MX_TIM6_Init+0x68>)
 8001a14:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8001a16:	4b13      	ldr	r3, [pc, #76]	@ (8001a64 <MX_TIM6_Init+0x64>)
 8001a18:	2200      	movs	r2, #0
 8001a1a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a1c:	4b11      	ldr	r3, [pc, #68]	@ (8001a64 <MX_TIM6_Init+0x64>)
 8001a1e:	2200      	movs	r2, #0
 8001a20:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8001a22:	4b10      	ldr	r3, [pc, #64]	@ (8001a64 <MX_TIM6_Init+0x64>)
 8001a24:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001a28:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a2a:	4b0e      	ldr	r3, [pc, #56]	@ (8001a64 <MX_TIM6_Init+0x64>)
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001a30:	480c      	ldr	r0, [pc, #48]	@ (8001a64 <MX_TIM6_Init+0x64>)
 8001a32:	f004 f9ec 	bl	8005e0e <HAL_TIM_Base_Init>
 8001a36:	4603      	mov	r3, r0
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d001      	beq.n	8001a40 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001a3c:	f7ff fe10 	bl	8001660 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a40:	2300      	movs	r3, #0
 8001a42:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a44:	2300      	movs	r3, #0
 8001a46:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001a48:	1d3b      	adds	r3, r7, #4
 8001a4a:	4619      	mov	r1, r3
 8001a4c:	4805      	ldr	r0, [pc, #20]	@ (8001a64 <MX_TIM6_Init+0x64>)
 8001a4e:	f004 facf 	bl	8005ff0 <HAL_TIMEx_MasterConfigSynchronization>
 8001a52:	4603      	mov	r3, r0
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d001      	beq.n	8001a5c <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001a58:	f7ff fe02 	bl	8001660 <Error_Handler>
  }

}
 8001a5c:	bf00      	nop
 8001a5e:	3710      	adds	r7, #16
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bd80      	pop	{r7, pc}
 8001a64:	20000494 	.word	0x20000494
 8001a68:	40001000 	.word	0x40001000

08001a6c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	b085      	sub	sp, #20
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	4a0a      	ldr	r2, [pc, #40]	@ (8001aa4 <HAL_TIM_Base_MspInit+0x38>)
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	d10b      	bne.n	8001a96 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001a7e:	4b0a      	ldr	r3, [pc, #40]	@ (8001aa8 <HAL_TIM_Base_MspInit+0x3c>)
 8001a80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a82:	4a09      	ldr	r2, [pc, #36]	@ (8001aa8 <HAL_TIM_Base_MspInit+0x3c>)
 8001a84:	f043 0310 	orr.w	r3, r3, #16
 8001a88:	6593      	str	r3, [r2, #88]	@ 0x58
 8001a8a:	4b07      	ldr	r3, [pc, #28]	@ (8001aa8 <HAL_TIM_Base_MspInit+0x3c>)
 8001a8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a8e:	f003 0310 	and.w	r3, r3, #16
 8001a92:	60fb      	str	r3, [r7, #12]
 8001a94:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8001a96:	bf00      	nop
 8001a98:	3714      	adds	r7, #20
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa0:	4770      	bx	lr
 8001aa2:	bf00      	nop
 8001aa4:	40001000 	.word	0x40001000
 8001aa8:	40021000 	.word	0x40021000

08001aac <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8001ab0:	4b14      	ldr	r3, [pc, #80]	@ (8001b04 <MX_USART2_UART_Init+0x58>)
 8001ab2:	4a15      	ldr	r2, [pc, #84]	@ (8001b08 <MX_USART2_UART_Init+0x5c>)
 8001ab4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001ab6:	4b13      	ldr	r3, [pc, #76]	@ (8001b04 <MX_USART2_UART_Init+0x58>)
 8001ab8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001abc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001abe:	4b11      	ldr	r3, [pc, #68]	@ (8001b04 <MX_USART2_UART_Init+0x58>)
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001ac4:	4b0f      	ldr	r3, [pc, #60]	@ (8001b04 <MX_USART2_UART_Init+0x58>)
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001aca:	4b0e      	ldr	r3, [pc, #56]	@ (8001b04 <MX_USART2_UART_Init+0x58>)
 8001acc:	2200      	movs	r2, #0
 8001ace:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001ad0:	4b0c      	ldr	r3, [pc, #48]	@ (8001b04 <MX_USART2_UART_Init+0x58>)
 8001ad2:	220c      	movs	r2, #12
 8001ad4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ad6:	4b0b      	ldr	r3, [pc, #44]	@ (8001b04 <MX_USART2_UART_Init+0x58>)
 8001ad8:	2200      	movs	r2, #0
 8001ada:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001adc:	4b09      	ldr	r3, [pc, #36]	@ (8001b04 <MX_USART2_UART_Init+0x58>)
 8001ade:	2200      	movs	r2, #0
 8001ae0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001ae2:	4b08      	ldr	r3, [pc, #32]	@ (8001b04 <MX_USART2_UART_Init+0x58>)
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001ae8:	4b06      	ldr	r3, [pc, #24]	@ (8001b04 <MX_USART2_UART_Init+0x58>)
 8001aea:	2200      	movs	r2, #0
 8001aec:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001aee:	4805      	ldr	r0, [pc, #20]	@ (8001b04 <MX_USART2_UART_Init+0x58>)
 8001af0:	f004 fb06 	bl	8006100 <HAL_UART_Init>
 8001af4:	4603      	mov	r3, r0
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d001      	beq.n	8001afe <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001afa:	f7ff fdb1 	bl	8001660 <Error_Handler>
  }

}
 8001afe:	bf00      	nop
 8001b00:	bd80      	pop	{r7, pc}
 8001b02:	bf00      	nop
 8001b04:	200004e0 	.word	0x200004e0
 8001b08:	40004400 	.word	0x40004400

08001b0c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b08a      	sub	sp, #40	@ 0x28
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b14:	f107 0314 	add.w	r3, r7, #20
 8001b18:	2200      	movs	r2, #0
 8001b1a:	601a      	str	r2, [r3, #0]
 8001b1c:	605a      	str	r2, [r3, #4]
 8001b1e:	609a      	str	r2, [r3, #8]
 8001b20:	60da      	str	r2, [r3, #12]
 8001b22:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4a17      	ldr	r2, [pc, #92]	@ (8001b88 <HAL_UART_MspInit+0x7c>)
 8001b2a:	4293      	cmp	r3, r2
 8001b2c:	d127      	bne.n	8001b7e <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001b2e:	4b17      	ldr	r3, [pc, #92]	@ (8001b8c <HAL_UART_MspInit+0x80>)
 8001b30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b32:	4a16      	ldr	r2, [pc, #88]	@ (8001b8c <HAL_UART_MspInit+0x80>)
 8001b34:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b38:	6593      	str	r3, [r2, #88]	@ 0x58
 8001b3a:	4b14      	ldr	r3, [pc, #80]	@ (8001b8c <HAL_UART_MspInit+0x80>)
 8001b3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b42:	613b      	str	r3, [r7, #16]
 8001b44:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b46:	4b11      	ldr	r3, [pc, #68]	@ (8001b8c <HAL_UART_MspInit+0x80>)
 8001b48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b4a:	4a10      	ldr	r2, [pc, #64]	@ (8001b8c <HAL_UART_MspInit+0x80>)
 8001b4c:	f043 0308 	orr.w	r3, r3, #8
 8001b50:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b52:	4b0e      	ldr	r3, [pc, #56]	@ (8001b8c <HAL_UART_MspInit+0x80>)
 8001b54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b56:	f003 0308 	and.w	r3, r3, #8
 8001b5a:	60fb      	str	r3, [r7, #12]
 8001b5c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001b5e:	2360      	movs	r3, #96	@ 0x60
 8001b60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b62:	2302      	movs	r3, #2
 8001b64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b66:	2301      	movs	r3, #1
 8001b68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b6a:	2303      	movs	r3, #3
 8001b6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001b6e:	2307      	movs	r3, #7
 8001b70:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b72:	f107 0314 	add.w	r3, r7, #20
 8001b76:	4619      	mov	r1, r3
 8001b78:	4805      	ldr	r0, [pc, #20]	@ (8001b90 <HAL_UART_MspInit+0x84>)
 8001b7a:	f001 fadd 	bl	8003138 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001b7e:	bf00      	nop
 8001b80:	3728      	adds	r7, #40	@ 0x28
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}
 8001b86:	bf00      	nop
 8001b88:	40004400 	.word	0x40004400
 8001b8c:	40021000 	.word	0x40021000
 8001b90:	48000c00 	.word	0x48000c00

08001b94 <AccToMouse_Process>:
 * Parametry:
 *   mousehid – struktura do wypełnienia i wysłania,
 *   accFilt  – tablica int16_t[3] z wycentrowanymi, przefiltrowanymi wartościami.
 */
void AccToMouse_Process(mouseHID mousehid, int16_t accFilt[3], int8_t* dpi)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b088      	sub	sp, #32
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	60f8      	str	r0, [r7, #12]
 8001b9c:	60b9      	str	r1, [r7, #8]
 8001b9e:	607a      	str	r2, [r7, #4]
    // accFilt jest już skalibrowane (offset usunięty) i przefiltrowane
    int16_t dx = accFilt[0];
 8001ba0:	68bb      	ldr	r3, [r7, #8]
 8001ba2:	881b      	ldrh	r3, [r3, #0]
 8001ba4:	83bb      	strh	r3, [r7, #28]
    int16_t dy = accFilt[1];
 8001ba6:	68bb      	ldr	r3, [r7, #8]
 8001ba8:	885b      	ldrh	r3, [r3, #2]
 8001baa:	837b      	strh	r3, [r7, #26]
    int8_t  mx = 0;
 8001bac:	2300      	movs	r3, #0
 8001bae:	77fb      	strb	r3, [r7, #31]
    int8_t  my = 0;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	77bb      	strb	r3, [r7, #30]

    // Zmiana dpi
    *dpi = buttons_changeDPI(dpi);
 8001bb4:	6878      	ldr	r0, [r7, #4]
 8001bb6:	f7ff fab3 	bl	8001120 <buttons_changeDPI>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	b25a      	sxtb	r2, r3
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	701a      	strb	r2, [r3, #0]

    int16_t MOUSE_THRESHOLD = 2000;   // próg detekcji
 8001bc2:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8001bc6:	833b      	strh	r3, [r7, #24]
    int8_t  MOUSE_STEP_MIN  = 1;      // minimalny krok
 8001bc8:	2301      	movs	r3, #1
 8001bca:	75fb      	strb	r3, [r7, #23]
    int8_t  MOUSE_STEP_MAX  = 20;     // maksymalny krok
 8001bcc:	2314      	movs	r3, #20
 8001bce:	75bb      	strb	r3, [r7, #22]

    // Oś X
    if (dx < -MOUSE_THRESHOLD) {
 8001bd0:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8001bd4:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001bd8:	425b      	negs	r3, r3
 8001bda:	429a      	cmp	r2, r3
 8001bdc:	da19      	bge.n	8001c12 <AccToMouse_Process+0x7e>
        mx = (int8_t)(((-dx - MOUSE_THRESHOLD) / 1000) + MOUSE_STEP_MIN);
 8001bde:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001be2:	425a      	negs	r2, r3
 8001be4:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001be8:	1ad3      	subs	r3, r2, r3
 8001bea:	4a50      	ldr	r2, [pc, #320]	@ (8001d2c <AccToMouse_Process+0x198>)
 8001bec:	fb82 1203 	smull	r1, r2, r2, r3
 8001bf0:	1192      	asrs	r2, r2, #6
 8001bf2:	17db      	asrs	r3, r3, #31
 8001bf4:	1ad3      	subs	r3, r2, r3
 8001bf6:	b2da      	uxtb	r2, r3
 8001bf8:	7dfb      	ldrb	r3, [r7, #23]
 8001bfa:	4413      	add	r3, r2
 8001bfc:	b2db      	uxtb	r3, r3
 8001bfe:	77fb      	strb	r3, [r7, #31]
        if (mx > MOUSE_STEP_MAX) mx = MOUSE_STEP_MAX;
 8001c00:	f997 201f 	ldrsb.w	r2, [r7, #31]
 8001c04:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8001c08:	429a      	cmp	r2, r3
 8001c0a:	dd25      	ble.n	8001c58 <AccToMouse_Process+0xc4>
 8001c0c:	7dbb      	ldrb	r3, [r7, #22]
 8001c0e:	77fb      	strb	r3, [r7, #31]
 8001c10:	e022      	b.n	8001c58 <AccToMouse_Process+0xc4>
    } else if (dx > MOUSE_THRESHOLD) {
 8001c12:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8001c16:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001c1a:	429a      	cmp	r2, r3
 8001c1c:	dd1c      	ble.n	8001c58 <AccToMouse_Process+0xc4>
        mx = -(int8_t)(((dx - MOUSE_THRESHOLD) / 1000) + MOUSE_STEP_MIN);
 8001c1e:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8001c22:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001c26:	1ad3      	subs	r3, r2, r3
 8001c28:	4a40      	ldr	r2, [pc, #256]	@ (8001d2c <AccToMouse_Process+0x198>)
 8001c2a:	fb82 1203 	smull	r1, r2, r2, r3
 8001c2e:	1192      	asrs	r2, r2, #6
 8001c30:	17db      	asrs	r3, r3, #31
 8001c32:	1ad3      	subs	r3, r2, r3
 8001c34:	b2da      	uxtb	r2, r3
 8001c36:	7dfb      	ldrb	r3, [r7, #23]
 8001c38:	4413      	add	r3, r2
 8001c3a:	b2db      	uxtb	r3, r3
 8001c3c:	425b      	negs	r3, r3
 8001c3e:	b2db      	uxtb	r3, r3
 8001c40:	77fb      	strb	r3, [r7, #31]
        if (mx < -MOUSE_STEP_MAX) mx = -MOUSE_STEP_MAX;
 8001c42:	f997 201f 	ldrsb.w	r2, [r7, #31]
 8001c46:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8001c4a:	425b      	negs	r3, r3
 8001c4c:	429a      	cmp	r2, r3
 8001c4e:	da03      	bge.n	8001c58 <AccToMouse_Process+0xc4>
 8001c50:	7dbb      	ldrb	r3, [r7, #22]
 8001c52:	425b      	negs	r3, r3
 8001c54:	b2db      	uxtb	r3, r3
 8001c56:	77fb      	strb	r3, [r7, #31]
    }

    // Oś Y (inwersja dla kursora)
    if (dy > MOUSE_THRESHOLD) {
 8001c58:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 8001c5c:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001c60:	429a      	cmp	r2, r3
 8001c62:	dd1d      	ble.n	8001ca0 <AccToMouse_Process+0x10c>
        my = -(int8_t)(((dy - MOUSE_THRESHOLD) / 1000) + MOUSE_STEP_MIN);
 8001c64:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 8001c68:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001c6c:	1ad3      	subs	r3, r2, r3
 8001c6e:	4a2f      	ldr	r2, [pc, #188]	@ (8001d2c <AccToMouse_Process+0x198>)
 8001c70:	fb82 1203 	smull	r1, r2, r2, r3
 8001c74:	1192      	asrs	r2, r2, #6
 8001c76:	17db      	asrs	r3, r3, #31
 8001c78:	1ad3      	subs	r3, r2, r3
 8001c7a:	b2da      	uxtb	r2, r3
 8001c7c:	7dfb      	ldrb	r3, [r7, #23]
 8001c7e:	4413      	add	r3, r2
 8001c80:	b2db      	uxtb	r3, r3
 8001c82:	425b      	negs	r3, r3
 8001c84:	b2db      	uxtb	r3, r3
 8001c86:	77bb      	strb	r3, [r7, #30]
        if (my < -MOUSE_STEP_MAX) my = -MOUSE_STEP_MAX;
 8001c88:	f997 201e 	ldrsb.w	r2, [r7, #30]
 8001c8c:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8001c90:	425b      	negs	r3, r3
 8001c92:	429a      	cmp	r2, r3
 8001c94:	da24      	bge.n	8001ce0 <AccToMouse_Process+0x14c>
 8001c96:	7dbb      	ldrb	r3, [r7, #22]
 8001c98:	425b      	negs	r3, r3
 8001c9a:	b2db      	uxtb	r3, r3
 8001c9c:	77bb      	strb	r3, [r7, #30]
 8001c9e:	e01f      	b.n	8001ce0 <AccToMouse_Process+0x14c>
    } else if (dy < -MOUSE_THRESHOLD) {
 8001ca0:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 8001ca4:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001ca8:	425b      	negs	r3, r3
 8001caa:	429a      	cmp	r2, r3
 8001cac:	da18      	bge.n	8001ce0 <AccToMouse_Process+0x14c>
        my = (int8_t)(((-dy - MOUSE_THRESHOLD) / 1000) + MOUSE_STEP_MIN);
 8001cae:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001cb2:	425a      	negs	r2, r3
 8001cb4:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001cb8:	1ad3      	subs	r3, r2, r3
 8001cba:	4a1c      	ldr	r2, [pc, #112]	@ (8001d2c <AccToMouse_Process+0x198>)
 8001cbc:	fb82 1203 	smull	r1, r2, r2, r3
 8001cc0:	1192      	asrs	r2, r2, #6
 8001cc2:	17db      	asrs	r3, r3, #31
 8001cc4:	1ad3      	subs	r3, r2, r3
 8001cc6:	b2da      	uxtb	r2, r3
 8001cc8:	7dfb      	ldrb	r3, [r7, #23]
 8001cca:	4413      	add	r3, r2
 8001ccc:	b2db      	uxtb	r3, r3
 8001cce:	77bb      	strb	r3, [r7, #30]
        if (my > MOUSE_STEP_MAX) my = MOUSE_STEP_MAX;
 8001cd0:	f997 201e 	ldrsb.w	r2, [r7, #30]
 8001cd4:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8001cd8:	429a      	cmp	r2, r3
 8001cda:	dd01      	ble.n	8001ce0 <AccToMouse_Process+0x14c>
 8001cdc:	7dbb      	ldrb	r3, [r7, #22]
 8001cde:	77bb      	strb	r3, [r7, #30]
    }


    // Przygotowanie raportu i wysyłka
    mousehid.buttons = buttons_getState();
 8001ce0:	f7ff f9dc 	bl	800109c <buttons_getState>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	b2db      	uxtb	r3, r3
 8001ce8:	733b      	strb	r3, [r7, #12]
    mousehid.mouse_x = mx * *dpi;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	f993 3000 	ldrsb.w	r3, [r3]
 8001cf0:	b2da      	uxtb	r2, r3
 8001cf2:	7ffb      	ldrb	r3, [r7, #31]
 8001cf4:	fb12 f303 	smulbb	r3, r2, r3
 8001cf8:	b2db      	uxtb	r3, r3
 8001cfa:	b25b      	sxtb	r3, r3
 8001cfc:	737b      	strb	r3, [r7, #13]
    mousehid.mouse_y = my * *dpi;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	f993 3000 	ldrsb.w	r3, [r3]
 8001d04:	b2da      	uxtb	r2, r3
 8001d06:	7fbb      	ldrb	r3, [r7, #30]
 8001d08:	fb12 f303 	smulbb	r3, r2, r3
 8001d0c:	b2db      	uxtb	r3, r3
 8001d0e:	b25b      	sxtb	r3, r3
 8001d10:	73bb      	strb	r3, [r7, #14]
    mousehid.wheel   = 0;
 8001d12:	2300      	movs	r3, #0
 8001d14:	73fb      	strb	r3, [r7, #15]
    USBD_HID_SendReport(&hUsbDeviceFS,
 8001d16:	f107 030c 	add.w	r3, r7, #12
 8001d1a:	2204      	movs	r2, #4
 8001d1c:	4619      	mov	r1, r3
 8001d1e:	4804      	ldr	r0, [pc, #16]	@ (8001d30 <AccToMouse_Process+0x19c>)
 8001d20:	f006 fa76 	bl	8008210 <USBD_HID_SendReport>
                        (uint8_t*)&mousehid,
                        sizeof(mousehid));
}
 8001d24:	bf00      	nop
 8001d26:	3720      	adds	r7, #32
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bd80      	pop	{r7, pc}
 8001d2c:	10624dd3 	.word	0x10624dd3
 8001d30:	200005d8 	.word	0x200005d8

08001d34 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001d34:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001d6c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001d38:	f7ff fe2c 	bl	8001994 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001d3c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001d3e:	e003      	b.n	8001d48 <LoopCopyDataInit>

08001d40 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001d40:	4b0b      	ldr	r3, [pc, #44]	@ (8001d70 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001d42:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001d44:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001d46:	3104      	adds	r1, #4

08001d48 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001d48:	480a      	ldr	r0, [pc, #40]	@ (8001d74 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001d4a:	4b0b      	ldr	r3, [pc, #44]	@ (8001d78 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001d4c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001d4e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001d50:	d3f6      	bcc.n	8001d40 <CopyDataInit>
	ldr	r2, =_sbss
 8001d52:	4a0a      	ldr	r2, [pc, #40]	@ (8001d7c <LoopForever+0x12>)
	b	LoopFillZerobss
 8001d54:	e002      	b.n	8001d5c <LoopFillZerobss>

08001d56 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001d56:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001d58:	f842 3b04 	str.w	r3, [r2], #4

08001d5c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001d5c:	4b08      	ldr	r3, [pc, #32]	@ (8001d80 <LoopForever+0x16>)
	cmp	r2, r3
 8001d5e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001d60:	d3f9      	bcc.n	8001d56 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001d62:	f009 f8a7 	bl	800aeb4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001d66:	f7ff fb9d 	bl	80014a4 <main>

08001d6a <LoopForever>:

LoopForever:
    b LoopForever
 8001d6a:	e7fe      	b.n	8001d6a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001d6c:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8001d70:	0800ce34 	.word	0x0800ce34
	ldr	r0, =_sdata
 8001d74:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001d78:	200003dc 	.word	0x200003dc
	ldr	r2, =_sbss
 8001d7c:	200003dc 	.word	0x200003dc
	ldr	r3, = _ebss
 8001d80:	20000ffc 	.word	0x20000ffc

08001d84 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001d84:	e7fe      	b.n	8001d84 <ADC1_2_IRQHandler>

08001d86 <L3GD20_Init>:
  * @param  L3GD20_InitStruct: pointer to a L3GD20_InitTypeDef structure 
  *         that contains the configuration setting for the L3GD20.
  * @retval None
  */
void L3GD20_Init(uint16_t InitStruct)
{  
 8001d86:	b580      	push	{r7, lr}
 8001d88:	b084      	sub	sp, #16
 8001d8a:	af00      	add	r7, sp, #0
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8001d90:	2300      	movs	r3, #0
 8001d92:	73fb      	strb	r3, [r7, #15]
  
  /* Configure the low level interface */
  GYRO_IO_Init();
 8001d94:	f000 fe1a 	bl	80029cc <GYRO_IO_Init>
  
  /* Write value to MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 8001d98:	88fb      	ldrh	r3, [r7, #6]
 8001d9a:	b2db      	uxtb	r3, r3
 8001d9c:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG1_ADDR, 1);
 8001d9e:	f107 030f 	add.w	r3, r7, #15
 8001da2:	2201      	movs	r2, #1
 8001da4:	2120      	movs	r1, #32
 8001da6:	4618      	mov	r0, r3
 8001da8:	f000 feb0 	bl	8002b0c <GYRO_IO_Write>
  
  /* Write value to MEMS CTRL_REG4 register */  
  ctrl = (uint8_t) (InitStruct >> 8);
 8001dac:	88fb      	ldrh	r3, [r7, #6]
 8001dae:	0a1b      	lsrs	r3, r3, #8
 8001db0:	b29b      	uxth	r3, r3
 8001db2:	b2db      	uxtb	r3, r3
 8001db4:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG4_ADDR, 1);
 8001db6:	f107 030f 	add.w	r3, r7, #15
 8001dba:	2201      	movs	r2, #1
 8001dbc:	2123      	movs	r1, #35	@ 0x23
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	f000 fea4 	bl	8002b0c <GYRO_IO_Write>
}
 8001dc4:	bf00      	nop
 8001dc6:	3710      	adds	r7, #16
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bd80      	pop	{r7, pc}

08001dcc <L3GD20_DeInit>:
  * @brief L3GD20 De-initialization
  * @param  None
  * @retval None
  */
void L3GD20_DeInit(void)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	af00      	add	r7, sp, #0
}
 8001dd0:	bf00      	nop
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd8:	4770      	bx	lr

08001dda <L3GD20_ReadID>:
  * @brief  Read ID address of L3GD20
  * @param  None
  * @retval ID name
  */
uint8_t L3GD20_ReadID(void)
{
 8001dda:	b580      	push	{r7, lr}
 8001ddc:	b082      	sub	sp, #8
 8001dde:	af00      	add	r7, sp, #0
  uint8_t tmp;
  
  /* Configure the low level interface */
  GYRO_IO_Init();
 8001de0:	f000 fdf4 	bl	80029cc <GYRO_IO_Init>
  
  /* Read WHO I AM register */
  GYRO_IO_Read(&tmp, L3GD20_WHO_AM_I_ADDR, 1);
 8001de4:	1dfb      	adds	r3, r7, #7
 8001de6:	2201      	movs	r2, #1
 8001de8:	210f      	movs	r1, #15
 8001dea:	4618      	mov	r0, r3
 8001dec:	f000 feca 	bl	8002b84 <GYRO_IO_Read>
  
  /* Return the ID */
  return (uint8_t)tmp;
 8001df0:	79fb      	ldrb	r3, [r7, #7]
}
 8001df2:	4618      	mov	r0, r3
 8001df4:	3708      	adds	r7, #8
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd80      	pop	{r7, pc}

08001dfa <L3GD20_RebootCmd>:
  * @brief  Reboot memory content of L3GD20
  * @param  None
  * @retval None
  */
void L3GD20_RebootCmd(void)
{
 8001dfa:	b580      	push	{r7, lr}
 8001dfc:	b082      	sub	sp, #8
 8001dfe:	af00      	add	r7, sp, #0
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 8001e00:	1dfb      	adds	r3, r7, #7
 8001e02:	2201      	movs	r2, #1
 8001e04:	2124      	movs	r1, #36	@ 0x24
 8001e06:	4618      	mov	r0, r3
 8001e08:	f000 febc 	bl	8002b84 <GYRO_IO_Read>
  
  /* Enable or Disable the reboot memory */
  tmpreg |= L3GD20_BOOT_REBOOTMEMORY;
 8001e0c:	79fb      	ldrb	r3, [r7, #7]
 8001e0e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001e12:	b2db      	uxtb	r3, r3
 8001e14:	71fb      	strb	r3, [r7, #7]
  
  /* Write value to MEMS CTRL_REG5 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 8001e16:	1dfb      	adds	r3, r7, #7
 8001e18:	2201      	movs	r2, #1
 8001e1a:	2124      	movs	r1, #36	@ 0x24
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	f000 fe75 	bl	8002b0c <GYRO_IO_Write>
}
 8001e22:	bf00      	nop
 8001e24:	3708      	adds	r7, #8
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bd80      	pop	{r7, pc}

08001e2a <L3GD20_LowPower>:
  * @brief Set L3GD20 in low-power mode
  * @param 
  * @retval  None
  */
void L3GD20_LowPower(uint16_t InitStruct)
{  
 8001e2a:	b580      	push	{r7, lr}
 8001e2c:	b084      	sub	sp, #16
 8001e2e:	af00      	add	r7, sp, #0
 8001e30:	4603      	mov	r3, r0
 8001e32:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8001e34:	2300      	movs	r3, #0
 8001e36:	73fb      	strb	r3, [r7, #15]

  /* Write value to MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 8001e38:	88fb      	ldrh	r3, [r7, #6]
 8001e3a:	b2db      	uxtb	r3, r3
 8001e3c:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG1_ADDR, 1);
 8001e3e:	f107 030f 	add.w	r3, r7, #15
 8001e42:	2201      	movs	r2, #1
 8001e44:	2120      	movs	r1, #32
 8001e46:	4618      	mov	r0, r3
 8001e48:	f000 fe60 	bl	8002b0c <GYRO_IO_Write>
}
 8001e4c:	bf00      	nop
 8001e4e:	3710      	adds	r7, #16
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bd80      	pop	{r7, pc}

08001e54 <L3GD20_INT1InterruptConfig>:
  * @brief  Set L3GD20 Interrupt INT1 configuration
  * @param  Int1Config: the configuration setting for the L3GD20 Interrupt.
  * @retval None
  */
void L3GD20_INT1InterruptConfig(uint16_t Int1Config)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b084      	sub	sp, #16
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl_cfr = 0x00, ctrl3 = 0x00;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	73fb      	strb	r3, [r7, #15]
 8001e62:	2300      	movs	r3, #0
 8001e64:	73bb      	strb	r3, [r7, #14]
  
  /* Read INT1_CFG register */
  GYRO_IO_Read(&ctrl_cfr, L3GD20_INT1_CFG_ADDR, 1);
 8001e66:	f107 030f 	add.w	r3, r7, #15
 8001e6a:	2201      	movs	r2, #1
 8001e6c:	2130      	movs	r1, #48	@ 0x30
 8001e6e:	4618      	mov	r0, r3
 8001e70:	f000 fe88 	bl	8002b84 <GYRO_IO_Read>
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&ctrl3, L3GD20_CTRL_REG3_ADDR, 1);
 8001e74:	f107 030e 	add.w	r3, r7, #14
 8001e78:	2201      	movs	r2, #1
 8001e7a:	2122      	movs	r1, #34	@ 0x22
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	f000 fe81 	bl	8002b84 <GYRO_IO_Read>
  
  ctrl_cfr &= 0x80;
 8001e82:	7bfb      	ldrb	r3, [r7, #15]
 8001e84:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8001e88:	b2db      	uxtb	r3, r3
 8001e8a:	73fb      	strb	r3, [r7, #15]
  ctrl_cfr |= ((uint8_t) Int1Config >> 8);
 8001e8c:	88fb      	ldrh	r3, [r7, #6]
 8001e8e:	b2db      	uxtb	r3, r3
 8001e90:	121b      	asrs	r3, r3, #8
 8001e92:	b25a      	sxtb	r2, r3
 8001e94:	7bfb      	ldrb	r3, [r7, #15]
 8001e96:	b25b      	sxtb	r3, r3
 8001e98:	4313      	orrs	r3, r2
 8001e9a:	b25b      	sxtb	r3, r3
 8001e9c:	b2db      	uxtb	r3, r3
 8001e9e:	73fb      	strb	r3, [r7, #15]
  
  ctrl3 &= 0xDF;
 8001ea0:	7bbb      	ldrb	r3, [r7, #14]
 8001ea2:	f023 0320 	bic.w	r3, r3, #32
 8001ea6:	b2db      	uxtb	r3, r3
 8001ea8:	73bb      	strb	r3, [r7, #14]
  ctrl3 |= ((uint8_t) Int1Config);   
 8001eaa:	88fb      	ldrh	r3, [r7, #6]
 8001eac:	b2da      	uxtb	r2, r3
 8001eae:	7bbb      	ldrb	r3, [r7, #14]
 8001eb0:	4313      	orrs	r3, r2
 8001eb2:	b2db      	uxtb	r3, r3
 8001eb4:	73bb      	strb	r3, [r7, #14]
  
  /* Write value to MEMS INT1_CFG register */
  GYRO_IO_Write(&ctrl_cfr, L3GD20_INT1_CFG_ADDR, 1);
 8001eb6:	f107 030f 	add.w	r3, r7, #15
 8001eba:	2201      	movs	r2, #1
 8001ebc:	2130      	movs	r1, #48	@ 0x30
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	f000 fe24 	bl	8002b0c <GYRO_IO_Write>
  
  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&ctrl3, L3GD20_CTRL_REG3_ADDR, 1);
 8001ec4:	f107 030e 	add.w	r3, r7, #14
 8001ec8:	2201      	movs	r2, #1
 8001eca:	2122      	movs	r1, #34	@ 0x22
 8001ecc:	4618      	mov	r0, r3
 8001ece:	f000 fe1d 	bl	8002b0c <GYRO_IO_Write>
}
 8001ed2:	bf00      	nop
 8001ed4:	3710      	adds	r7, #16
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}

08001eda <L3GD20_EnableIT>:
  *        @arg L3GD20_INT1
  *        @arg L3GD20_INT2   
  * @retval None
  */
void L3GD20_EnableIT(uint8_t IntSel)
{  
 8001eda:	b580      	push	{r7, lr}
 8001edc:	b084      	sub	sp, #16
 8001ede:	af00      	add	r7, sp, #0
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 8001ee4:	f107 030f 	add.w	r3, r7, #15
 8001ee8:	2201      	movs	r2, #1
 8001eea:	2122      	movs	r1, #34	@ 0x22
 8001eec:	4618      	mov	r0, r3
 8001eee:	f000 fe49 	bl	8002b84 <GYRO_IO_Read>
  
  if(IntSel == L3GD20_INT1)
 8001ef2:	79fb      	ldrb	r3, [r7, #7]
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d10a      	bne.n	8001f0e <L3GD20_EnableIT+0x34>
  {
    tmpreg &= 0x7F;	
 8001ef8:	7bfb      	ldrb	r3, [r7, #15]
 8001efa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001efe:	b2db      	uxtb	r3, r3
 8001f00:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT1INTERRUPT_ENABLE;
 8001f02:	7bfb      	ldrb	r3, [r7, #15]
 8001f04:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001f08:	b2db      	uxtb	r3, r3
 8001f0a:	73fb      	strb	r3, [r7, #15]
 8001f0c:	e00c      	b.n	8001f28 <L3GD20_EnableIT+0x4e>
  }
  else if(IntSel == L3GD20_INT2)
 8001f0e:	79fb      	ldrb	r3, [r7, #7]
 8001f10:	2b01      	cmp	r3, #1
 8001f12:	d109      	bne.n	8001f28 <L3GD20_EnableIT+0x4e>
  {
    tmpreg &= 0xF7;
 8001f14:	7bfb      	ldrb	r3, [r7, #15]
 8001f16:	f023 0308 	bic.w	r3, r3, #8
 8001f1a:	b2db      	uxtb	r3, r3
 8001f1c:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT2INTERRUPT_ENABLE;
 8001f1e:	7bfb      	ldrb	r3, [r7, #15]
 8001f20:	f043 0308 	orr.w	r3, r3, #8
 8001f24:	b2db      	uxtb	r3, r3
 8001f26:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 8001f28:	f107 030f 	add.w	r3, r7, #15
 8001f2c:	2201      	movs	r2, #1
 8001f2e:	2122      	movs	r1, #34	@ 0x22
 8001f30:	4618      	mov	r0, r3
 8001f32:	f000 fdeb 	bl	8002b0c <GYRO_IO_Write>
}
 8001f36:	bf00      	nop
 8001f38:	3710      	adds	r7, #16
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}

08001f3e <L3GD20_DisableIT>:
  *        @arg L3GD20_INT1
  *        @arg L3GD20_INT2   
  * @retval None
  */
void L3GD20_DisableIT(uint8_t IntSel)
{  
 8001f3e:	b580      	push	{r7, lr}
 8001f40:	b084      	sub	sp, #16
 8001f42:	af00      	add	r7, sp, #0
 8001f44:	4603      	mov	r3, r0
 8001f46:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 8001f48:	f107 030f 	add.w	r3, r7, #15
 8001f4c:	2201      	movs	r2, #1
 8001f4e:	2122      	movs	r1, #34	@ 0x22
 8001f50:	4618      	mov	r0, r3
 8001f52:	f000 fe17 	bl	8002b84 <GYRO_IO_Read>
  
  if(IntSel == L3GD20_INT1)
 8001f56:	79fb      	ldrb	r3, [r7, #7]
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d107      	bne.n	8001f6c <L3GD20_DisableIT+0x2e>
  {
    tmpreg &= 0x7F;	
 8001f5c:	7bfb      	ldrb	r3, [r7, #15]
 8001f5e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001f62:	b2db      	uxtb	r3, r3
 8001f64:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT1INTERRUPT_DISABLE;
 8001f66:	7bfb      	ldrb	r3, [r7, #15]
 8001f68:	73fb      	strb	r3, [r7, #15]
 8001f6a:	e009      	b.n	8001f80 <L3GD20_DisableIT+0x42>
  }
  else if(IntSel == L3GD20_INT2)
 8001f6c:	79fb      	ldrb	r3, [r7, #7]
 8001f6e:	2b01      	cmp	r3, #1
 8001f70:	d106      	bne.n	8001f80 <L3GD20_DisableIT+0x42>
  {
    tmpreg &= 0xF7;
 8001f72:	7bfb      	ldrb	r3, [r7, #15]
 8001f74:	f023 0308 	bic.w	r3, r3, #8
 8001f78:	b2db      	uxtb	r3, r3
 8001f7a:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT2INTERRUPT_DISABLE;
 8001f7c:	7bfb      	ldrb	r3, [r7, #15]
 8001f7e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 8001f80:	f107 030f 	add.w	r3, r7, #15
 8001f84:	2201      	movs	r2, #1
 8001f86:	2122      	movs	r1, #34	@ 0x22
 8001f88:	4618      	mov	r0, r3
 8001f8a:	f000 fdbf 	bl	8002b0c <GYRO_IO_Write>
}
 8001f8e:	bf00      	nop
 8001f90:	3710      	adds	r7, #16
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd80      	pop	{r7, pc}

08001f96 <L3GD20_FilterConfig>:
  * @brief  Set High Pass Filter Modality
  * @param  FilterStruct: contains the configuration setting for the L3GD20.        
  * @retval None
  */
void L3GD20_FilterConfig(uint8_t FilterStruct) 
{
 8001f96:	b580      	push	{r7, lr}
 8001f98:	b084      	sub	sp, #16
 8001f9a:	af00      	add	r7, sp, #0
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG2_ADDR, 1);
 8001fa0:	f107 030f 	add.w	r3, r7, #15
 8001fa4:	2201      	movs	r2, #1
 8001fa6:	2121      	movs	r1, #33	@ 0x21
 8001fa8:	4618      	mov	r0, r3
 8001faa:	f000 fdeb 	bl	8002b84 <GYRO_IO_Read>
  
  tmpreg &= 0xC0;
 8001fae:	7bfb      	ldrb	r3, [r7, #15]
 8001fb0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001fb4:	b2db      	uxtb	r3, r3
 8001fb6:	73fb      	strb	r3, [r7, #15]
  
  /* Configure MEMS: mode and cutoff frequency */
  tmpreg |= FilterStruct;
 8001fb8:	7bfa      	ldrb	r2, [r7, #15]
 8001fba:	79fb      	ldrb	r3, [r7, #7]
 8001fbc:	4313      	orrs	r3, r2
 8001fbe:	b2db      	uxtb	r3, r3
 8001fc0:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG2 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG2_ADDR, 1);
 8001fc2:	f107 030f 	add.w	r3, r7, #15
 8001fc6:	2201      	movs	r2, #1
 8001fc8:	2121      	movs	r1, #33	@ 0x21
 8001fca:	4618      	mov	r0, r3
 8001fcc:	f000 fd9e 	bl	8002b0c <GYRO_IO_Write>
}
 8001fd0:	bf00      	nop
 8001fd2:	3710      	adds	r7, #16
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	bd80      	pop	{r7, pc}

08001fd8 <L3GD20_FilterCmd>:
  *         @arg: L3GD20_HIGHPASSFILTER_DISABLE 
  *         @arg: L3GD20_HIGHPASSFILTER_ENABLE          
  * @retval None
  */
void L3GD20_FilterCmd(uint8_t HighPassFilterState)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b084      	sub	sp, #16
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	4603      	mov	r3, r0
 8001fe0:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 8001fe2:	f107 030f 	add.w	r3, r7, #15
 8001fe6:	2201      	movs	r2, #1
 8001fe8:	2124      	movs	r1, #36	@ 0x24
 8001fea:	4618      	mov	r0, r3
 8001fec:	f000 fdca 	bl	8002b84 <GYRO_IO_Read>
  
  tmpreg &= 0xEF;
 8001ff0:	7bfb      	ldrb	r3, [r7, #15]
 8001ff2:	f023 0310 	bic.w	r3, r3, #16
 8001ff6:	b2db      	uxtb	r3, r3
 8001ff8:	73fb      	strb	r3, [r7, #15]
  
  tmpreg |= HighPassFilterState;
 8001ffa:	7bfa      	ldrb	r2, [r7, #15]
 8001ffc:	79fb      	ldrb	r3, [r7, #7]
 8001ffe:	4313      	orrs	r3, r2
 8002000:	b2db      	uxtb	r3, r3
 8002002:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG5 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 8002004:	f107 030f 	add.w	r3, r7, #15
 8002008:	2201      	movs	r2, #1
 800200a:	2124      	movs	r1, #36	@ 0x24
 800200c:	4618      	mov	r0, r3
 800200e:	f000 fd7d 	bl	8002b0c <GYRO_IO_Write>
}
 8002012:	bf00      	nop
 8002014:	3710      	adds	r7, #16
 8002016:	46bd      	mov	sp, r7
 8002018:	bd80      	pop	{r7, pc}
	...

0800201c <L3GD20_ReadXYZAngRate>:
* @brief  Calculate the L3GD20 angular data.
* @param  pfData: Data out pointer
* @retval None
*/
void L3GD20_ReadXYZAngRate(float *pfData)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b08a      	sub	sp, #40	@ 0x28
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
  uint8_t tmpbuffer[6] ={0};
 8002024:	f107 0318 	add.w	r3, r7, #24
 8002028:	2200      	movs	r2, #0
 800202a:	601a      	str	r2, [r3, #0]
 800202c:	809a      	strh	r2, [r3, #4]
  int16_t RawData[3] = {0};
 800202e:	f107 0310 	add.w	r3, r7, #16
 8002032:	2200      	movs	r2, #0
 8002034:	601a      	str	r2, [r3, #0]
 8002036:	809a      	strh	r2, [r3, #4]
  uint8_t tmpreg = 0;
 8002038:	2300      	movs	r3, #0
 800203a:	73fb      	strb	r3, [r7, #15]
  float sensitivity = 0;
 800203c:	f04f 0300 	mov.w	r3, #0
 8002040:	627b      	str	r3, [r7, #36]	@ 0x24
  int i =0;
 8002042:	2300      	movs	r3, #0
 8002044:	623b      	str	r3, [r7, #32]
  
  GYRO_IO_Read(&tmpreg,L3GD20_CTRL_REG4_ADDR,1);
 8002046:	f107 030f 	add.w	r3, r7, #15
 800204a:	2201      	movs	r2, #1
 800204c:	2123      	movs	r1, #35	@ 0x23
 800204e:	4618      	mov	r0, r3
 8002050:	f000 fd98 	bl	8002b84 <GYRO_IO_Read>
  
  GYRO_IO_Read(tmpbuffer,L3GD20_OUT_X_L_ADDR,6);
 8002054:	f107 0318 	add.w	r3, r7, #24
 8002058:	2206      	movs	r2, #6
 800205a:	2128      	movs	r1, #40	@ 0x28
 800205c:	4618      	mov	r0, r3
 800205e:	f000 fd91 	bl	8002b84 <GYRO_IO_Read>
  
  /* check in the control register 4 the data alignment (Big Endian or Little Endian)*/
  if(!(tmpreg & L3GD20_BLE_MSB))
 8002062:	7bfb      	ldrb	r3, [r7, #15]
 8002064:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002068:	2b00      	cmp	r3, #0
 800206a:	d121      	bne.n	80020b0 <L3GD20_ReadXYZAngRate+0x94>
  {
    for(i=0; i<3; i++)
 800206c:	2300      	movs	r3, #0
 800206e:	623b      	str	r3, [r7, #32]
 8002070:	e01a      	b.n	80020a8 <L3GD20_ReadXYZAngRate+0x8c>
    {
      RawData[i]=(int16_t)(((uint16_t)tmpbuffer[2*i+1] << 8) + tmpbuffer[2*i]);
 8002072:	6a3b      	ldr	r3, [r7, #32]
 8002074:	005b      	lsls	r3, r3, #1
 8002076:	3301      	adds	r3, #1
 8002078:	3328      	adds	r3, #40	@ 0x28
 800207a:	443b      	add	r3, r7
 800207c:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8002080:	021b      	lsls	r3, r3, #8
 8002082:	b29b      	uxth	r3, r3
 8002084:	6a3a      	ldr	r2, [r7, #32]
 8002086:	0052      	lsls	r2, r2, #1
 8002088:	3228      	adds	r2, #40	@ 0x28
 800208a:	443a      	add	r2, r7
 800208c:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 8002090:	4413      	add	r3, r2
 8002092:	b29b      	uxth	r3, r3
 8002094:	b21a      	sxth	r2, r3
 8002096:	6a3b      	ldr	r3, [r7, #32]
 8002098:	005b      	lsls	r3, r3, #1
 800209a:	3328      	adds	r3, #40	@ 0x28
 800209c:	443b      	add	r3, r7
 800209e:	f823 2c18 	strh.w	r2, [r3, #-24]
    for(i=0; i<3; i++)
 80020a2:	6a3b      	ldr	r3, [r7, #32]
 80020a4:	3301      	adds	r3, #1
 80020a6:	623b      	str	r3, [r7, #32]
 80020a8:	6a3b      	ldr	r3, [r7, #32]
 80020aa:	2b02      	cmp	r3, #2
 80020ac:	dde1      	ble.n	8002072 <L3GD20_ReadXYZAngRate+0x56>
 80020ae:	e020      	b.n	80020f2 <L3GD20_ReadXYZAngRate+0xd6>
    }
  }
  else
  {
    for(i=0; i<3; i++)
 80020b0:	2300      	movs	r3, #0
 80020b2:	623b      	str	r3, [r7, #32]
 80020b4:	e01a      	b.n	80020ec <L3GD20_ReadXYZAngRate+0xd0>
    {
      RawData[i]=(int16_t)(((uint16_t)tmpbuffer[2*i] << 8) + tmpbuffer[2*i+1]);
 80020b6:	6a3b      	ldr	r3, [r7, #32]
 80020b8:	005b      	lsls	r3, r3, #1
 80020ba:	3328      	adds	r3, #40	@ 0x28
 80020bc:	443b      	add	r3, r7
 80020be:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80020c2:	021b      	lsls	r3, r3, #8
 80020c4:	b29b      	uxth	r3, r3
 80020c6:	6a3a      	ldr	r2, [r7, #32]
 80020c8:	0052      	lsls	r2, r2, #1
 80020ca:	3201      	adds	r2, #1
 80020cc:	3228      	adds	r2, #40	@ 0x28
 80020ce:	443a      	add	r2, r7
 80020d0:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 80020d4:	4413      	add	r3, r2
 80020d6:	b29b      	uxth	r3, r3
 80020d8:	b21a      	sxth	r2, r3
 80020da:	6a3b      	ldr	r3, [r7, #32]
 80020dc:	005b      	lsls	r3, r3, #1
 80020de:	3328      	adds	r3, #40	@ 0x28
 80020e0:	443b      	add	r3, r7
 80020e2:	f823 2c18 	strh.w	r2, [r3, #-24]
    for(i=0; i<3; i++)
 80020e6:	6a3b      	ldr	r3, [r7, #32]
 80020e8:	3301      	adds	r3, #1
 80020ea:	623b      	str	r3, [r7, #32]
 80020ec:	6a3b      	ldr	r3, [r7, #32]
 80020ee:	2b02      	cmp	r3, #2
 80020f0:	dde1      	ble.n	80020b6 <L3GD20_ReadXYZAngRate+0x9a>
    }
  }
  
  /* Switch the sensitivity value set in the CRTL4 */
  switch(tmpreg & L3GD20_FULLSCALE_SELECTION)
 80020f2:	7bfb      	ldrb	r3, [r7, #15]
 80020f4:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80020f8:	2b20      	cmp	r3, #32
 80020fa:	d00c      	beq.n	8002116 <L3GD20_ReadXYZAngRate+0xfa>
 80020fc:	2b20      	cmp	r3, #32
 80020fe:	dc0d      	bgt.n	800211c <L3GD20_ReadXYZAngRate+0x100>
 8002100:	2b00      	cmp	r3, #0
 8002102:	d002      	beq.n	800210a <L3GD20_ReadXYZAngRate+0xee>
 8002104:	2b10      	cmp	r3, #16
 8002106:	d003      	beq.n	8002110 <L3GD20_ReadXYZAngRate+0xf4>
 8002108:	e008      	b.n	800211c <L3GD20_ReadXYZAngRate+0x100>
  {
  case L3GD20_FULLSCALE_250:
    sensitivity=L3GD20_SENSITIVITY_250DPS;
 800210a:	4b15      	ldr	r3, [pc, #84]	@ (8002160 <L3GD20_ReadXYZAngRate+0x144>)
 800210c:	627b      	str	r3, [r7, #36]	@ 0x24
    break;
 800210e:	e005      	b.n	800211c <L3GD20_ReadXYZAngRate+0x100>
    
  case L3GD20_FULLSCALE_500:
    sensitivity=L3GD20_SENSITIVITY_500DPS;
 8002110:	4b14      	ldr	r3, [pc, #80]	@ (8002164 <L3GD20_ReadXYZAngRate+0x148>)
 8002112:	627b      	str	r3, [r7, #36]	@ 0x24
    break;
 8002114:	e002      	b.n	800211c <L3GD20_ReadXYZAngRate+0x100>
    
  case L3GD20_FULLSCALE_2000:
    sensitivity=L3GD20_SENSITIVITY_2000DPS;
 8002116:	4b14      	ldr	r3, [pc, #80]	@ (8002168 <L3GD20_ReadXYZAngRate+0x14c>)
 8002118:	627b      	str	r3, [r7, #36]	@ 0x24
    break;
 800211a:	bf00      	nop
  }
  /* Divide by sensitivity */
  for(i=0; i<3; i++)
 800211c:	2300      	movs	r3, #0
 800211e:	623b      	str	r3, [r7, #32]
 8002120:	e016      	b.n	8002150 <L3GD20_ReadXYZAngRate+0x134>
  {
    pfData[i]=(float)(RawData[i] * sensitivity);
 8002122:	6a3b      	ldr	r3, [r7, #32]
 8002124:	005b      	lsls	r3, r3, #1
 8002126:	3328      	adds	r3, #40	@ 0x28
 8002128:	443b      	add	r3, r7
 800212a:	f933 3c18 	ldrsh.w	r3, [r3, #-24]
 800212e:	ee07 3a90 	vmov	s15, r3
 8002132:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002136:	6a3b      	ldr	r3, [r7, #32]
 8002138:	009b      	lsls	r3, r3, #2
 800213a:	687a      	ldr	r2, [r7, #4]
 800213c:	4413      	add	r3, r2
 800213e:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8002142:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002146:	edc3 7a00 	vstr	s15, [r3]
  for(i=0; i<3; i++)
 800214a:	6a3b      	ldr	r3, [r7, #32]
 800214c:	3301      	adds	r3, #1
 800214e:	623b      	str	r3, [r7, #32]
 8002150:	6a3b      	ldr	r3, [r7, #32]
 8002152:	2b02      	cmp	r3, #2
 8002154:	dde5      	ble.n	8002122 <L3GD20_ReadXYZAngRate+0x106>
  }
}
 8002156:	bf00      	nop
 8002158:	bf00      	nop
 800215a:	3728      	adds	r7, #40	@ 0x28
 800215c:	46bd      	mov	sp, r7
 800215e:	bd80      	pop	{r7, pc}
 8002160:	410c0000 	.word	0x410c0000
 8002164:	418c0000 	.word	0x418c0000
 8002168:	428c0000 	.word	0x428c0000

0800216c <LSM303C_AccInit>:
  * @brief  Set LSM303C Accelerometer Initialization.
  * @param  InitStruct: Init parameters
  * @retval None
  */
void LSM303C_AccInit(uint16_t InitStruct)
{  
 800216c:	b580      	push	{r7, lr}
 800216e:	b084      	sub	sp, #16
 8002170:	af00      	add	r7, sp, #0
 8002172:	4603      	mov	r3, r0
 8002174:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8002176:	2300      	movs	r3, #0
 8002178:	73fb      	strb	r3, [r7, #15]
  
  /*  Low level init */
  ACCELERO_IO_Init();
 800217a:	f000 fae3 	bl	8002744 <ACCELERO_IO_Init>
  
  /* Write value to ACC MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 800217e:	88fb      	ldrh	r3, [r7, #6]
 8002180:	73fb      	strb	r3, [r7, #15]
  ACCELERO_IO_Write(LSM303C_CTRL_REG1_A, ctrl);
 8002182:	7bfb      	ldrb	r3, [r7, #15]
 8002184:	4619      	mov	r1, r3
 8002186:	2020      	movs	r0, #32
 8002188:	f000 fb08 	bl	800279c <ACCELERO_IO_Write>
  
  /* Write value to ACC MEMS CTRL_REG4 register */
  ctrl = ((uint8_t) (InitStruct >> 8));
 800218c:	88fb      	ldrh	r3, [r7, #6]
 800218e:	0a1b      	lsrs	r3, r3, #8
 8002190:	b29b      	uxth	r3, r3
 8002192:	73fb      	strb	r3, [r7, #15]
  ACCELERO_IO_Write(LSM303C_CTRL_REG4_A, ctrl);
 8002194:	7bfb      	ldrb	r3, [r7, #15]
 8002196:	4619      	mov	r1, r3
 8002198:	2023      	movs	r0, #35	@ 0x23
 800219a:	f000 faff 	bl	800279c <ACCELERO_IO_Write>
}
 800219e:	bf00      	nop
 80021a0:	3710      	adds	r7, #16
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd80      	pop	{r7, pc}

080021a6 <LSM303C_AccDeInit>:
  * @brief  LSM303C Accelerometer De-initialization.
  * @param  None
  * @retval None
  */
void LSM303C_AccDeInit(void)
{  
 80021a6:	b480      	push	{r7}
 80021a8:	af00      	add	r7, sp, #0
}
 80021aa:	bf00      	nop
 80021ac:	46bd      	mov	sp, r7
 80021ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b2:	4770      	bx	lr

080021b4 <LSM303C_AccReadID>:
  * @brief  Read LSM303C ID.
  * @param  None
  * @retval ID 
  */
uint8_t LSM303C_AccReadID(void)
{  
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b082      	sub	sp, #8
 80021b8:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 80021ba:	2300      	movs	r3, #0
 80021bc:	71fb      	strb	r3, [r7, #7]
  
  /* Low level init */
  ACCELERO_IO_Init();
 80021be:	f000 fac1 	bl	8002744 <ACCELERO_IO_Init>
  
  /* Enabled SPI/I2C read communication */
  ACCELERO_IO_Write(LSM303C_CTRL_REG4_A, 0x5);
 80021c2:	2105      	movs	r1, #5
 80021c4:	2023      	movs	r0, #35	@ 0x23
 80021c6:	f000 fae9 	bl	800279c <ACCELERO_IO_Write>
  
  /* Read value at Who am I register address */
  ctrl = ACCELERO_IO_Read(LSM303C_WHO_AM_I_ADDR);
 80021ca:	200f      	movs	r0, #15
 80021cc:	f000 fb18 	bl	8002800 <ACCELERO_IO_Read>
 80021d0:	4603      	mov	r3, r0
 80021d2:	71fb      	strb	r3, [r7, #7]
  
  return ctrl;
 80021d4:	79fb      	ldrb	r3, [r7, #7]
}
 80021d6:	4618      	mov	r0, r3
 80021d8:	3708      	adds	r7, #8
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}

080021de <LSM303C_AccLowPower>:
  * @param  Mode equal to LSM303C_ACC_ODR_OFF means enable Low Power Mode, otherwise Output data rate is set.
  *         This parameter can be a value of @ref Acc_OutPut_DataRate_Selection
  * @retval None 
  */
void LSM303C_AccLowPower(uint16_t Mode)
{  
 80021de:	b580      	push	{r7, lr}
 80021e0:	b084      	sub	sp, #16
 80021e2:	af00      	add	r7, sp, #0
 80021e4:	4603      	mov	r3, r0
 80021e6:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 80021e8:	2300      	movs	r3, #0
 80021ea:	73fb      	strb	r3, [r7, #15]
  
  /* Read control register 1 value */
  ctrl = ACCELERO_IO_Read(LSM303C_CTRL_REG1_A);
 80021ec:	2020      	movs	r0, #32
 80021ee:	f000 fb07 	bl	8002800 <ACCELERO_IO_Read>
 80021f2:	4603      	mov	r3, r0
 80021f4:	73fb      	strb	r3, [r7, #15]

  /* Clear ODR bits */
  ctrl &= ~(LSM303C_ACC_ODR_BITPOSITION);
 80021f6:	7bfb      	ldrb	r3, [r7, #15]
 80021f8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80021fc:	73fb      	strb	r3, [r7, #15]

  /* Set Power down */
  ctrl |= (uint8_t)Mode;
 80021fe:	88fb      	ldrh	r3, [r7, #6]
 8002200:	b2da      	uxtb	r2, r3
 8002202:	7bfb      	ldrb	r3, [r7, #15]
 8002204:	4313      	orrs	r3, r2
 8002206:	73fb      	strb	r3, [r7, #15]
  
  /* write back control register */
  ACCELERO_IO_Write(LSM303C_CTRL_REG1_A, ctrl);
 8002208:	7bfb      	ldrb	r3, [r7, #15]
 800220a:	4619      	mov	r1, r3
 800220c:	2020      	movs	r0, #32
 800220e:	f000 fac5 	bl	800279c <ACCELERO_IO_Write>
}
 8002212:	bf00      	nop
 8002214:	3710      	adds	r7, #16
 8002216:	46bd      	mov	sp, r7
 8002218:	bd80      	pop	{r7, pc}

0800221a <LSM303C_AccFilterConfig>:
  * @brief  Set High Pass Filter Modality
  * @param  FilterStruct: contains data for filter config
  * @retval None
  */
void LSM303C_AccFilterConfig(uint8_t FilterStruct) 
{
 800221a:	b580      	push	{r7, lr}
 800221c:	b084      	sub	sp, #16
 800221e:	af00      	add	r7, sp, #0
 8002220:	4603      	mov	r3, r0
 8002222:	71fb      	strb	r3, [r7, #7]
  
//  /* Read CTRL_REG2 register */
//  tmpreg = ACCELERO_IO_Read(LSM303C_CTRL_REG2_A);
//  
//  tmpreg &= 0x0C;
  tmpreg = FilterStruct;
 8002224:	79fb      	ldrb	r3, [r7, #7]
 8002226:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to ACC MEMS CTRL_REG2 register */
  ACCELERO_IO_Write(LSM303C_CTRL_REG2_A, tmpreg);
 8002228:	7bfb      	ldrb	r3, [r7, #15]
 800222a:	4619      	mov	r1, r3
 800222c:	2021      	movs	r0, #33	@ 0x21
 800222e:	f000 fab5 	bl	800279c <ACCELERO_IO_Write>
}
 8002232:	bf00      	nop
 8002234:	3710      	adds	r7, #16
 8002236:	46bd      	mov	sp, r7
 8002238:	bd80      	pop	{r7, pc}

0800223a <LSM303C_AccReadXYZ>:
  * @brief  Read X, Y & Z Acceleration values 
  * @param  pData: Data out pointer
  * @retval None
  */
void LSM303C_AccReadXYZ(int16_t* pData)
{
 800223a:	b580      	push	{r7, lr}
 800223c:	b088      	sub	sp, #32
 800223e:	af00      	add	r7, sp, #0
 8002240:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlx[2]={0,0};
 8002242:	2300      	movs	r3, #0
 8002244:	82bb      	strh	r3, [r7, #20]
  uint8_t buffer[6];
  uint8_t i = 0;
 8002246:	2300      	movs	r3, #0
 8002248:	77fb      	strb	r3, [r7, #31]
  uint8_t sensitivity = LSM303C_ACC_SENSITIVITY_2G;
 800224a:	2301      	movs	r3, #1
 800224c:	77bb      	strb	r3, [r7, #30]
  
  /* Read the acceleration control register content */
  ctrlx[0] = ACCELERO_IO_Read(LSM303C_CTRL_REG4_A);
 800224e:	2023      	movs	r0, #35	@ 0x23
 8002250:	f000 fad6 	bl	8002800 <ACCELERO_IO_Read>
 8002254:	4603      	mov	r3, r0
 8002256:	753b      	strb	r3, [r7, #20]
  ctrlx[1] = ACCELERO_IO_Read(LSM303C_CTRL_REG5_A);
 8002258:	2024      	movs	r0, #36	@ 0x24
 800225a:	f000 fad1 	bl	8002800 <ACCELERO_IO_Read>
 800225e:	4603      	mov	r3, r0
 8002260:	757b      	strb	r3, [r7, #21]
  
  /* Read output register X, Y & Z acceleration */
  buffer[0] = ACCELERO_IO_Read(LSM303C_OUT_X_L_A); 
 8002262:	2028      	movs	r0, #40	@ 0x28
 8002264:	f000 facc 	bl	8002800 <ACCELERO_IO_Read>
 8002268:	4603      	mov	r3, r0
 800226a:	733b      	strb	r3, [r7, #12]
  buffer[1] = ACCELERO_IO_Read(LSM303C_OUT_X_H_A);
 800226c:	2029      	movs	r0, #41	@ 0x29
 800226e:	f000 fac7 	bl	8002800 <ACCELERO_IO_Read>
 8002272:	4603      	mov	r3, r0
 8002274:	737b      	strb	r3, [r7, #13]
  buffer[2] = ACCELERO_IO_Read(LSM303C_OUT_Y_L_A);
 8002276:	202a      	movs	r0, #42	@ 0x2a
 8002278:	f000 fac2 	bl	8002800 <ACCELERO_IO_Read>
 800227c:	4603      	mov	r3, r0
 800227e:	73bb      	strb	r3, [r7, #14]
  buffer[3] = ACCELERO_IO_Read(LSM303C_OUT_Y_H_A);
 8002280:	202b      	movs	r0, #43	@ 0x2b
 8002282:	f000 fabd 	bl	8002800 <ACCELERO_IO_Read>
 8002286:	4603      	mov	r3, r0
 8002288:	73fb      	strb	r3, [r7, #15]
  buffer[4] = ACCELERO_IO_Read(LSM303C_OUT_Z_L_A);
 800228a:	202c      	movs	r0, #44	@ 0x2c
 800228c:	f000 fab8 	bl	8002800 <ACCELERO_IO_Read>
 8002290:	4603      	mov	r3, r0
 8002292:	743b      	strb	r3, [r7, #16]
  buffer[5] = ACCELERO_IO_Read(LSM303C_OUT_Z_H_A);
 8002294:	202d      	movs	r0, #45	@ 0x2d
 8002296:	f000 fab3 	bl	8002800 <ACCELERO_IO_Read>
 800229a:	4603      	mov	r3, r0
 800229c:	747b      	strb	r3, [r7, #17]
  
  for(i=0; i<3; i++)
 800229e:	2300      	movs	r3, #0
 80022a0:	77fb      	strb	r3, [r7, #31]
 80022a2:	e01a      	b.n	80022da <LSM303C_AccReadXYZ+0xa0>
  {
    pnRawData[i]=((int16_t)((uint16_t)buffer[2*i+1] << 8) + buffer[2*i]);
 80022a4:	7ffb      	ldrb	r3, [r7, #31]
 80022a6:	005b      	lsls	r3, r3, #1
 80022a8:	3301      	adds	r3, #1
 80022aa:	3320      	adds	r3, #32
 80022ac:	443b      	add	r3, r7
 80022ae:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 80022b2:	021b      	lsls	r3, r3, #8
 80022b4:	b29b      	uxth	r3, r3
 80022b6:	7ffa      	ldrb	r2, [r7, #31]
 80022b8:	0052      	lsls	r2, r2, #1
 80022ba:	3220      	adds	r2, #32
 80022bc:	443a      	add	r2, r7
 80022be:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 80022c2:	4413      	add	r3, r2
 80022c4:	b29a      	uxth	r2, r3
 80022c6:	7ffb      	ldrb	r3, [r7, #31]
 80022c8:	b212      	sxth	r2, r2
 80022ca:	005b      	lsls	r3, r3, #1
 80022cc:	3320      	adds	r3, #32
 80022ce:	443b      	add	r3, r7
 80022d0:	f823 2c08 	strh.w	r2, [r3, #-8]
  for(i=0; i<3; i++)
 80022d4:	7ffb      	ldrb	r3, [r7, #31]
 80022d6:	3301      	adds	r3, #1
 80022d8:	77fb      	strb	r3, [r7, #31]
 80022da:	7ffb      	ldrb	r3, [r7, #31]
 80022dc:	2b02      	cmp	r3, #2
 80022de:	d9e1      	bls.n	80022a4 <LSM303C_AccReadXYZ+0x6a>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL4 */
  switch(ctrlx[0] & LSM303C_ACC_FULLSCALE_8G)
 80022e0:	7d3b      	ldrb	r3, [r7, #20]
 80022e2:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80022e6:	2b30      	cmp	r3, #48	@ 0x30
 80022e8:	d00c      	beq.n	8002304 <LSM303C_AccReadXYZ+0xca>
 80022ea:	2b30      	cmp	r3, #48	@ 0x30
 80022ec:	dc0d      	bgt.n	800230a <LSM303C_AccReadXYZ+0xd0>
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d002      	beq.n	80022f8 <LSM303C_AccReadXYZ+0xbe>
 80022f2:	2b20      	cmp	r3, #32
 80022f4:	d003      	beq.n	80022fe <LSM303C_AccReadXYZ+0xc4>
 80022f6:	e008      	b.n	800230a <LSM303C_AccReadXYZ+0xd0>
  {
  case LSM303C_ACC_FULLSCALE_2G:
    sensitivity = LSM303C_ACC_SENSITIVITY_2G;
 80022f8:	2301      	movs	r3, #1
 80022fa:	77bb      	strb	r3, [r7, #30]
    break;
 80022fc:	e005      	b.n	800230a <LSM303C_AccReadXYZ+0xd0>
  case LSM303C_ACC_FULLSCALE_4G:
    sensitivity = LSM303C_ACC_SENSITIVITY_4G;
 80022fe:	2302      	movs	r3, #2
 8002300:	77bb      	strb	r3, [r7, #30]
    break;
 8002302:	e002      	b.n	800230a <LSM303C_AccReadXYZ+0xd0>
  case LSM303C_ACC_FULLSCALE_8G:
    sensitivity = LSM303C_ACC_SENSITIVITY_8G;
 8002304:	2304      	movs	r3, #4
 8002306:	77bb      	strb	r3, [r7, #30]
    break;
 8002308:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 800230a:	2300      	movs	r3, #0
 800230c:	77fb      	strb	r3, [r7, #31]
 800230e:	e014      	b.n	800233a <LSM303C_AccReadXYZ+0x100>
  {
    pData[i]=(pnRawData[i] * sensitivity);
 8002310:	7ffb      	ldrb	r3, [r7, #31]
 8002312:	005b      	lsls	r3, r3, #1
 8002314:	3320      	adds	r3, #32
 8002316:	443b      	add	r3, r7
 8002318:	f933 3c08 	ldrsh.w	r3, [r3, #-8]
 800231c:	b29a      	uxth	r2, r3
 800231e:	7fbb      	ldrb	r3, [r7, #30]
 8002320:	b29b      	uxth	r3, r3
 8002322:	fb12 f303 	smulbb	r3, r2, r3
 8002326:	b299      	uxth	r1, r3
 8002328:	7ffb      	ldrb	r3, [r7, #31]
 800232a:	005b      	lsls	r3, r3, #1
 800232c:	687a      	ldr	r2, [r7, #4]
 800232e:	4413      	add	r3, r2
 8002330:	b20a      	sxth	r2, r1
 8002332:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 8002334:	7ffb      	ldrb	r3, [r7, #31]
 8002336:	3301      	adds	r3, #1
 8002338:	77fb      	strb	r3, [r7, #31]
 800233a:	7ffb      	ldrb	r3, [r7, #31]
 800233c:	2b02      	cmp	r3, #2
 800233e:	d9e7      	bls.n	8002310 <LSM303C_AccReadXYZ+0xd6>
  }
}
 8002340:	bf00      	nop
 8002342:	bf00      	nop
 8002344:	3720      	adds	r7, #32
 8002346:	46bd      	mov	sp, r7
 8002348:	bd80      	pop	{r7, pc}

0800234a <LSM303C_MagInit>:
  * @param  LSM303C_InitStruct: pointer to a LSM303C_MagInitTypeDef structure 
  *         that contains the configuration setting for the LSM303C.
  * @retval None
  */
void LSM303C_MagInit(MAGNETO_InitTypeDef LSM303C_InitStruct)
{  
 800234a:	b580      	push	{r7, lr}
 800234c:	b082      	sub	sp, #8
 800234e:	af00      	add	r7, sp, #0
 8002350:	463b      	mov	r3, r7
 8002352:	e883 0003 	stmia.w	r3, {r0, r1}
  MAGNETO_IO_Write(LSM303C_CTRL_REG1_M, LSM303C_InitStruct.Register1);
 8002356:	783b      	ldrb	r3, [r7, #0]
 8002358:	4619      	mov	r1, r3
 800235a:	2020      	movs	r0, #32
 800235c:	f000 fac0 	bl	80028e0 <MAGNETO_IO_Write>
  MAGNETO_IO_Write(LSM303C_CTRL_REG2_M, LSM303C_InitStruct.Register2);
 8002360:	787b      	ldrb	r3, [r7, #1]
 8002362:	4619      	mov	r1, r3
 8002364:	2021      	movs	r0, #33	@ 0x21
 8002366:	f000 fabb 	bl	80028e0 <MAGNETO_IO_Write>
  MAGNETO_IO_Write(LSM303C_CTRL_REG3_M, LSM303C_InitStruct.Register3);
 800236a:	78bb      	ldrb	r3, [r7, #2]
 800236c:	4619      	mov	r1, r3
 800236e:	2022      	movs	r0, #34	@ 0x22
 8002370:	f000 fab6 	bl	80028e0 <MAGNETO_IO_Write>
  MAGNETO_IO_Write(LSM303C_CTRL_REG4_M, LSM303C_InitStruct.Register4);
 8002374:	78fb      	ldrb	r3, [r7, #3]
 8002376:	4619      	mov	r1, r3
 8002378:	2023      	movs	r0, #35	@ 0x23
 800237a:	f000 fab1 	bl	80028e0 <MAGNETO_IO_Write>
  MAGNETO_IO_Write(LSM303C_CTRL_REG5_M, LSM303C_InitStruct.Register5);
 800237e:	793b      	ldrb	r3, [r7, #4]
 8002380:	4619      	mov	r1, r3
 8002382:	2024      	movs	r0, #36	@ 0x24
 8002384:	f000 faac 	bl	80028e0 <MAGNETO_IO_Write>
}
 8002388:	bf00      	nop
 800238a:	3708      	adds	r7, #8
 800238c:	46bd      	mov	sp, r7
 800238e:	bd80      	pop	{r7, pc}

08002390 <LSM303C_MagDeInit>:
  * @brief  LSM303C Magnetometer De-initialization.
  * @param  None
  * @retval None
  */
void LSM303C_MagDeInit(void)
{  
 8002390:	b480      	push	{r7}
 8002392:	af00      	add	r7, sp, #0
}
 8002394:	bf00      	nop
 8002396:	46bd      	mov	sp, r7
 8002398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239c:	4770      	bx	lr

0800239e <LSM303C_MagReadID>:
  * @brief  Read LSM303C ID.
  * @param  None
  * @retval ID 
  */
uint8_t LSM303C_MagReadID(void)
{  
 800239e:	b580      	push	{r7, lr}
 80023a0:	af00      	add	r7, sp, #0
  /* Low level init */
  MAGNETO_IO_Init();
 80023a2:	f000 fa71 	bl	8002888 <MAGNETO_IO_Init>
  
  /* Enabled the SPI/I2C read operation */
  MAGNETO_IO_Write(LSM303C_CTRL_REG3_M, 0x84);
 80023a6:	2184      	movs	r1, #132	@ 0x84
 80023a8:	2022      	movs	r0, #34	@ 0x22
 80023aa:	f000 fa99 	bl	80028e0 <MAGNETO_IO_Write>
  
  /* Read value at Who am I register address */
  return MAGNETO_IO_Read(LSM303C_WHO_AM_I_ADDR);
 80023ae:	200f      	movs	r0, #15
 80023b0:	f000 fac8 	bl	8002944 <MAGNETO_IO_Read>
 80023b4:	4603      	mov	r3, r0
}
 80023b6:	4618      	mov	r0, r3
 80023b8:	bd80      	pop	{r7, pc}

080023ba <LSM303C_MagLowPower>:
  * @param  Mode equal to LSM303C_MAG_POWERDOWN2_MODE means enable deepest Low Power Mode, otherwise other mode is set.
  *         This parameter can be a value of @ref Mag_Operation_Mode
  * @retval None 
  */
void LSM303C_MagLowPower(uint16_t Mode)
{  
 80023ba:	b580      	push	{r7, lr}
 80023bc:	b084      	sub	sp, #16
 80023be:	af00      	add	r7, sp, #0
 80023c0:	4603      	mov	r3, r0
 80023c2:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 80023c4:	2300      	movs	r3, #0
 80023c6:	73fb      	strb	r3, [r7, #15]
  
  /* Read control register 1 value */
  ctrl = MAGNETO_IO_Read(LSM303C_CTRL_REG3_M);
 80023c8:	2022      	movs	r0, #34	@ 0x22
 80023ca:	f000 fabb 	bl	8002944 <MAGNETO_IO_Read>
 80023ce:	4603      	mov	r3, r0
 80023d0:	73fb      	strb	r3, [r7, #15]

  /* Clear ODR bits */
  ctrl &= ~(LSM303C_MAG_SELECTION_MODE);
 80023d2:	7bfb      	ldrb	r3, [r7, #15]
 80023d4:	f023 0303 	bic.w	r3, r3, #3
 80023d8:	73fb      	strb	r3, [r7, #15]

  /* Set mode */
  ctrl |= (uint8_t)Mode;
 80023da:	88fb      	ldrh	r3, [r7, #6]
 80023dc:	b2da      	uxtb	r2, r3
 80023de:	7bfb      	ldrb	r3, [r7, #15]
 80023e0:	4313      	orrs	r3, r2
 80023e2:	73fb      	strb	r3, [r7, #15]
  
  /* write back control register */
  MAGNETO_IO_Write(LSM303C_CTRL_REG3_M, ctrl);
 80023e4:	7bfb      	ldrb	r3, [r7, #15]
 80023e6:	4619      	mov	r1, r3
 80023e8:	2022      	movs	r0, #34	@ 0x22
 80023ea:	f000 fa79 	bl	80028e0 <MAGNETO_IO_Write>
}
 80023ee:	bf00      	nop
 80023f0:	3710      	adds	r7, #16
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd80      	pop	{r7, pc}

080023f6 <LSM303C_MagReadXYZ>:
  * @brief  Read X, Y & Z Magnetometer values 
  * @param  pData: Data out pointer
  * @retval None
  */
void LSM303C_MagReadXYZ(int16_t* pData)
{
 80023f6:	b580      	push	{r7, lr}
 80023f8:	b084      	sub	sp, #16
 80023fa:	af00      	add	r7, sp, #0
 80023fc:	6078      	str	r0, [r7, #4]
  uint8_t ctrlx;
  uint8_t buffer[6];
  uint8_t i=0;
 80023fe:	2300      	movs	r3, #0
 8002400:	73fb      	strb	r3, [r7, #15]
  
  /* Read the magnetometer control register content */
  ctrlx = MAGNETO_IO_Read(LSM303C_CTRL_REG4_M);
 8002402:	2023      	movs	r0, #35	@ 0x23
 8002404:	f000 fa9e 	bl	8002944 <MAGNETO_IO_Read>
 8002408:	4603      	mov	r3, r0
 800240a:	73bb      	strb	r3, [r7, #14]

  /* Read output register X, Y & Z magnetometer */
  buffer[0] = MAGNETO_IO_Read(LSM303C_OUT_X_L_M); 
 800240c:	2028      	movs	r0, #40	@ 0x28
 800240e:	f000 fa99 	bl	8002944 <MAGNETO_IO_Read>
 8002412:	4603      	mov	r3, r0
 8002414:	723b      	strb	r3, [r7, #8]
  buffer[1] = MAGNETO_IO_Read(LSM303C_OUT_X_H_M);
 8002416:	2029      	movs	r0, #41	@ 0x29
 8002418:	f000 fa94 	bl	8002944 <MAGNETO_IO_Read>
 800241c:	4603      	mov	r3, r0
 800241e:	727b      	strb	r3, [r7, #9]
  buffer[2] = MAGNETO_IO_Read(LSM303C_OUT_Y_L_M);
 8002420:	202a      	movs	r0, #42	@ 0x2a
 8002422:	f000 fa8f 	bl	8002944 <MAGNETO_IO_Read>
 8002426:	4603      	mov	r3, r0
 8002428:	72bb      	strb	r3, [r7, #10]
  buffer[3] = MAGNETO_IO_Read(LSM303C_OUT_Y_H_M);
 800242a:	202b      	movs	r0, #43	@ 0x2b
 800242c:	f000 fa8a 	bl	8002944 <MAGNETO_IO_Read>
 8002430:	4603      	mov	r3, r0
 8002432:	72fb      	strb	r3, [r7, #11]
  buffer[4] = MAGNETO_IO_Read(LSM303C_OUT_Z_L_M);
 8002434:	202c      	movs	r0, #44	@ 0x2c
 8002436:	f000 fa85 	bl	8002944 <MAGNETO_IO_Read>
 800243a:	4603      	mov	r3, r0
 800243c:	733b      	strb	r3, [r7, #12]
  buffer[5] = MAGNETO_IO_Read(LSM303C_OUT_Z_H_M);
 800243e:	202d      	movs	r0, #45	@ 0x2d
 8002440:	f000 fa80 	bl	8002944 <MAGNETO_IO_Read>
 8002444:	4603      	mov	r3, r0
 8002446:	737b      	strb	r3, [r7, #13]
  
  /* Check in the control register4 the data alignment*/
  if((ctrlx & LSM303C_MAG_BLE_MSB)) 
 8002448:	7bbb      	ldrb	r3, [r7, #14]
 800244a:	f003 0302 	and.w	r3, r3, #2
 800244e:	2b00      	cmp	r3, #0
 8002450:	d020      	beq.n	8002494 <LSM303C_MagReadXYZ+0x9e>
  {
    for(i=0; i<3; i++)
 8002452:	2300      	movs	r3, #0
 8002454:	73fb      	strb	r3, [r7, #15]
 8002456:	e019      	b.n	800248c <LSM303C_MagReadXYZ+0x96>
    {
      pData[i]=((int16_t)((uint16_t)buffer[2*i] << 8) + buffer[2*i+1]);
 8002458:	7bfb      	ldrb	r3, [r7, #15]
 800245a:	005b      	lsls	r3, r3, #1
 800245c:	3310      	adds	r3, #16
 800245e:	443b      	add	r3, r7
 8002460:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 8002464:	021b      	lsls	r3, r3, #8
 8002466:	b29b      	uxth	r3, r3
 8002468:	7bfa      	ldrb	r2, [r7, #15]
 800246a:	0052      	lsls	r2, r2, #1
 800246c:	3201      	adds	r2, #1
 800246e:	3210      	adds	r2, #16
 8002470:	443a      	add	r2, r7
 8002472:	f812 2c08 	ldrb.w	r2, [r2, #-8]
 8002476:	4413      	add	r3, r2
 8002478:	b299      	uxth	r1, r3
 800247a:	7bfb      	ldrb	r3, [r7, #15]
 800247c:	005b      	lsls	r3, r3, #1
 800247e:	687a      	ldr	r2, [r7, #4]
 8002480:	4413      	add	r3, r2
 8002482:	b20a      	sxth	r2, r1
 8002484:	801a      	strh	r2, [r3, #0]
    for(i=0; i<3; i++)
 8002486:	7bfb      	ldrb	r3, [r7, #15]
 8002488:	3301      	adds	r3, #1
 800248a:	73fb      	strb	r3, [r7, #15]
 800248c:	7bfb      	ldrb	r3, [r7, #15]
 800248e:	2b02      	cmp	r3, #2
 8002490:	d9e2      	bls.n	8002458 <LSM303C_MagReadXYZ+0x62>
    for(i=0; i<3; i++)
    {
      pData[i]=((int16_t)((uint16_t)buffer[2*i+1] << 8) + buffer[2*i]);
    }
  }
}
 8002492:	e01f      	b.n	80024d4 <LSM303C_MagReadXYZ+0xde>
    for(i=0; i<3; i++)
 8002494:	2300      	movs	r3, #0
 8002496:	73fb      	strb	r3, [r7, #15]
 8002498:	e019      	b.n	80024ce <LSM303C_MagReadXYZ+0xd8>
      pData[i]=((int16_t)((uint16_t)buffer[2*i+1] << 8) + buffer[2*i]);
 800249a:	7bfb      	ldrb	r3, [r7, #15]
 800249c:	005b      	lsls	r3, r3, #1
 800249e:	3301      	adds	r3, #1
 80024a0:	3310      	adds	r3, #16
 80024a2:	443b      	add	r3, r7
 80024a4:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 80024a8:	021b      	lsls	r3, r3, #8
 80024aa:	b29b      	uxth	r3, r3
 80024ac:	7bfa      	ldrb	r2, [r7, #15]
 80024ae:	0052      	lsls	r2, r2, #1
 80024b0:	3210      	adds	r2, #16
 80024b2:	443a      	add	r2, r7
 80024b4:	f812 2c08 	ldrb.w	r2, [r2, #-8]
 80024b8:	4413      	add	r3, r2
 80024ba:	b299      	uxth	r1, r3
 80024bc:	7bfb      	ldrb	r3, [r7, #15]
 80024be:	005b      	lsls	r3, r3, #1
 80024c0:	687a      	ldr	r2, [r7, #4]
 80024c2:	4413      	add	r3, r2
 80024c4:	b20a      	sxth	r2, r1
 80024c6:	801a      	strh	r2, [r3, #0]
    for(i=0; i<3; i++)
 80024c8:	7bfb      	ldrb	r3, [r7, #15]
 80024ca:	3301      	adds	r3, #1
 80024cc:	73fb      	strb	r3, [r7, #15]
 80024ce:	7bfb      	ldrb	r3, [r7, #15]
 80024d0:	2b02      	cmp	r3, #2
 80024d2:	d9e2      	bls.n	800249a <LSM303C_MagReadXYZ+0xa4>
}
 80024d4:	bf00      	nop
 80024d6:	3710      	adds	r7, #16
 80024d8:	46bd      	mov	sp, r7
 80024da:	bd80      	pop	{r7, pc}

080024dc <SPIx_Init>:
/**
  * @brief SPIx Bus initialization
  * @retval None
  */
static void SPIx_Init(void)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	af00      	add	r7, sp, #0
  if (HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 80024e0:	481a      	ldr	r0, [pc, #104]	@ (800254c <SPIx_Init+0x70>)
 80024e2:	f003 fc86 	bl	8005df2 <HAL_SPI_GetState>
 80024e6:	4603      	mov	r3, r0
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d12c      	bne.n	8002546 <SPIx_Init+0x6a>
  {
    /* SPI Config */
    SpiHandle.Instance = DISCOVERY_SPIx;
 80024ec:	4b17      	ldr	r3, [pc, #92]	@ (800254c <SPIx_Init+0x70>)
 80024ee:	4a18      	ldr	r2, [pc, #96]	@ (8002550 <SPIx_Init+0x74>)
 80024f0:	601a      	str	r2, [r3, #0]
    /* SPI baudrate is set to 10 MHz (PCLK1/SPI_BaudRatePrescaler = 80/8 = 10 MHz)
      to verify these constraints:
      lsm303c SPI interface max baudrate is 10MHz for write/read
      PCLK1 max frequency is set to 80 MHz
      */
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80024f2:	4b16      	ldr	r3, [pc, #88]	@ (800254c <SPIx_Init+0x70>)
 80024f4:	2210      	movs	r2, #16
 80024f6:	61da      	str	r2, [r3, #28]
    SpiHandle.Init.Direction = SPI_DIRECTION_2LINES;
 80024f8:	4b14      	ldr	r3, [pc, #80]	@ (800254c <SPIx_Init+0x70>)
 80024fa:	2200      	movs	r2, #0
 80024fc:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase = SPI_PHASE_1EDGE;
 80024fe:	4b13      	ldr	r3, [pc, #76]	@ (800254c <SPIx_Init+0x70>)
 8002500:	2200      	movs	r2, #0
 8002502:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002504:	4b11      	ldr	r3, [pc, #68]	@ (800254c <SPIx_Init+0x70>)
 8002506:	2200      	movs	r2, #0
 8002508:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800250a:	4b10      	ldr	r3, [pc, #64]	@ (800254c <SPIx_Init+0x70>)
 800250c:	2200      	movs	r2, #0
 800250e:	629a      	str	r2, [r3, #40]	@ 0x28
    SpiHandle.Init.CRCPolynomial = 7;
 8002510:	4b0e      	ldr	r3, [pc, #56]	@ (800254c <SPIx_Init+0x70>)
 8002512:	2207      	movs	r2, #7
 8002514:	62da      	str	r2, [r3, #44]	@ 0x2c
    SpiHandle.Init.DataSize = SPI_DATASIZE_8BIT;
 8002516:	4b0d      	ldr	r3, [pc, #52]	@ (800254c <SPIx_Init+0x70>)
 8002518:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800251c:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800251e:	4b0b      	ldr	r3, [pc, #44]	@ (800254c <SPIx_Init+0x70>)
 8002520:	2200      	movs	r2, #0
 8002522:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS = SPI_NSS_SOFT;
 8002524:	4b09      	ldr	r3, [pc, #36]	@ (800254c <SPIx_Init+0x70>)
 8002526:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800252a:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode = SPI_TIMODE_DISABLE;
 800252c:	4b07      	ldr	r3, [pc, #28]	@ (800254c <SPIx_Init+0x70>)
 800252e:	2200      	movs	r2, #0
 8002530:	625a      	str	r2, [r3, #36]	@ 0x24
    SpiHandle.Init.Mode = SPI_MODE_MASTER;
 8002532:	4b06      	ldr	r3, [pc, #24]	@ (800254c <SPIx_Init+0x70>)
 8002534:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002538:	605a      	str	r2, [r3, #4]

    SPIx_MspInit(&SpiHandle);
 800253a:	4804      	ldr	r0, [pc, #16]	@ (800254c <SPIx_Init+0x70>)
 800253c:	f000 f80a 	bl	8002554 <SPIx_MspInit>
    HAL_SPI_Init(&SpiHandle);
 8002540:	4802      	ldr	r0, [pc, #8]	@ (800254c <SPIx_Init+0x70>)
 8002542:	f003 fbb3 	bl	8005cac <HAL_SPI_Init>
  }
}
 8002546:	bf00      	nop
 8002548:	bd80      	pop	{r7, pc}
 800254a:	bf00      	nop
 800254c:	20000560 	.word	0x20000560
 8002550:	40003800 	.word	0x40003800

08002554 <SPIx_MspInit>:
  * @brief SPI MSP Init
  * @param hspi: SPI handle
  * @retval None
  */
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b08a      	sub	sp, #40	@ 0x28
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPIx clock  */
  DISCOVERY_SPIx_CLOCK_ENABLE();
 800255c:	4b15      	ldr	r3, [pc, #84]	@ (80025b4 <SPIx_MspInit+0x60>)
 800255e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002560:	4a14      	ldr	r2, [pc, #80]	@ (80025b4 <SPIx_MspInit+0x60>)
 8002562:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002566:	6593      	str	r3, [r2, #88]	@ 0x58
 8002568:	4b12      	ldr	r3, [pc, #72]	@ (80025b4 <SPIx_MspInit+0x60>)
 800256a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800256c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002570:	613b      	str	r3, [r7, #16]
 8002572:	693b      	ldr	r3, [r7, #16]

  /* enable SPIx gpio clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 8002574:	4b0f      	ldr	r3, [pc, #60]	@ (80025b4 <SPIx_MspInit+0x60>)
 8002576:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002578:	4a0e      	ldr	r2, [pc, #56]	@ (80025b4 <SPIx_MspInit+0x60>)
 800257a:	f043 0308 	orr.w	r3, r3, #8
 800257e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002580:	4b0c      	ldr	r3, [pc, #48]	@ (80025b4 <SPIx_MspInit+0x60>)
 8002582:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002584:	f003 0308 	and.w	r3, r3, #8
 8002588:	60fb      	str	r3, [r7, #12]
 800258a:	68fb      	ldr	r3, [r7, #12]

  /* configure SPIx SCK, MOSI and MISO */
  GPIO_InitStructure.Pin = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 800258c:	231a      	movs	r3, #26
 800258e:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8002590:	2302      	movs	r3, #2
 8002592:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull  = GPIO_NOPULL; // GPIO_PULLDOWN;
 8002594:	2300      	movs	r3, #0
 8002596:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 8002598:	2302      	movs	r3, #2
 800259a:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 800259c:	2305      	movs	r3, #5
 800259e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);
 80025a0:	f107 0314 	add.w	r3, r7, #20
 80025a4:	4619      	mov	r1, r3
 80025a6:	4804      	ldr	r0, [pc, #16]	@ (80025b8 <SPIx_MspInit+0x64>)
 80025a8:	f000 fdc6 	bl	8003138 <HAL_GPIO_Init>
}
 80025ac:	bf00      	nop
 80025ae:	3728      	adds	r7, #40	@ 0x28
 80025b0:	46bd      	mov	sp, r7
 80025b2:	bd80      	pop	{r7, pc}
 80025b4:	40021000 	.word	0x40021000
 80025b8:	48000c00 	.word	0x48000c00

080025bc <SPIx_WriteRead>:
  *         from the SPI bus.
  * @param  Byte : Byte send.
  * @retval none.
  */
static uint8_t SPIx_WriteRead(uint8_t Byte)
{
 80025bc:	b480      	push	{r7}
 80025be:	b085      	sub	sp, #20
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	4603      	mov	r3, r0
 80025c4:	71fb      	strb	r3, [r7, #7]
  uint8_t receivedbyte;

  /* Enable the SPI */
  __HAL_SPI_ENABLE(&SpiHandle);
 80025c6:	4b20      	ldr	r3, [pc, #128]	@ (8002648 <SPIx_WriteRead+0x8c>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	681a      	ldr	r2, [r3, #0]
 80025cc:	4b1e      	ldr	r3, [pc, #120]	@ (8002648 <SPIx_WriteRead+0x8c>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80025d4:	601a      	str	r2, [r3, #0]
  /* check TXE flag */
  while ((SpiHandle.Instance->SR & SPI_FLAG_TXE) != SPI_FLAG_TXE);
 80025d6:	bf00      	nop
 80025d8:	4b1b      	ldr	r3, [pc, #108]	@ (8002648 <SPIx_WriteRead+0x8c>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	689b      	ldr	r3, [r3, #8]
 80025de:	f003 0302 	and.w	r3, r3, #2
 80025e2:	2b02      	cmp	r3, #2
 80025e4:	d1f8      	bne.n	80025d8 <SPIx_WriteRead+0x1c>

  /* Write the data */
  *((__IO uint8_t *)&SpiHandle.Instance->DR) = Byte;
 80025e6:	4b18      	ldr	r3, [pc, #96]	@ (8002648 <SPIx_WriteRead+0x8c>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	330c      	adds	r3, #12
 80025ec:	79fa      	ldrb	r2, [r7, #7]
 80025ee:	701a      	strb	r2, [r3, #0]

  while ((SpiHandle.Instance->SR & SPI_FLAG_RXNE) != SPI_FLAG_RXNE);
 80025f0:	bf00      	nop
 80025f2:	4b15      	ldr	r3, [pc, #84]	@ (8002648 <SPIx_WriteRead+0x8c>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	689b      	ldr	r3, [r3, #8]
 80025f8:	f003 0301 	and.w	r3, r3, #1
 80025fc:	2b01      	cmp	r3, #1
 80025fe:	d1f8      	bne.n	80025f2 <SPIx_WriteRead+0x36>
  receivedbyte = *((__IO uint8_t *)&SpiHandle.Instance->DR);
 8002600:	4b11      	ldr	r3, [pc, #68]	@ (8002648 <SPIx_WriteRead+0x8c>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	330c      	adds	r3, #12
 8002606:	781b      	ldrb	r3, [r3, #0]
 8002608:	73fb      	strb	r3, [r7, #15]

  /* Wait BSY flag */
  while ((SpiHandle.Instance->SR & SPI_FLAG_FTLVL) != SPI_FTLVL_EMPTY);
 800260a:	bf00      	nop
 800260c:	4b0e      	ldr	r3, [pc, #56]	@ (8002648 <SPIx_WriteRead+0x8c>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	689b      	ldr	r3, [r3, #8]
 8002612:	f403 53c0 	and.w	r3, r3, #6144	@ 0x1800
 8002616:	2b00      	cmp	r3, #0
 8002618:	d1f8      	bne.n	800260c <SPIx_WriteRead+0x50>
  while ((SpiHandle.Instance->SR & SPI_FLAG_BSY) == SPI_FLAG_BSY);
 800261a:	bf00      	nop
 800261c:	4b0a      	ldr	r3, [pc, #40]	@ (8002648 <SPIx_WriteRead+0x8c>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	689b      	ldr	r3, [r3, #8]
 8002622:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002626:	2b80      	cmp	r3, #128	@ 0x80
 8002628:	d0f8      	beq.n	800261c <SPIx_WriteRead+0x60>

  /* disable the SPI */
  __HAL_SPI_DISABLE(&SpiHandle);
 800262a:	4b07      	ldr	r3, [pc, #28]	@ (8002648 <SPIx_WriteRead+0x8c>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	681a      	ldr	r2, [r3, #0]
 8002630:	4b05      	ldr	r3, [pc, #20]	@ (8002648 <SPIx_WriteRead+0x8c>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002638:	601a      	str	r2, [r3, #0]

  return receivedbyte;
 800263a:	7bfb      	ldrb	r3, [r7, #15]
}
 800263c:	4618      	mov	r0, r3
 800263e:	3714      	adds	r7, #20
 8002640:	46bd      	mov	sp, r7
 8002642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002646:	4770      	bx	lr
 8002648:	20000560 	.word	0x20000560

0800264c <SPIx_Write>:
  * @brief  Sends a Byte through the SPI interface.
  * @param  Byte : Byte to send.
  * @retval none.
  */
static void SPIx_Write(uint8_t Byte)
{
 800264c:	b480      	push	{r7}
 800264e:	b083      	sub	sp, #12
 8002650:	af00      	add	r7, sp, #0
 8002652:	4603      	mov	r3, r0
 8002654:	71fb      	strb	r3, [r7, #7]
  /* Enable the SPI */
  __HAL_SPI_ENABLE(&SpiHandle);
 8002656:	4b15      	ldr	r3, [pc, #84]	@ (80026ac <SPIx_Write+0x60>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	681a      	ldr	r2, [r3, #0]
 800265c:	4b13      	ldr	r3, [pc, #76]	@ (80026ac <SPIx_Write+0x60>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002664:	601a      	str	r2, [r3, #0]
  /* check TXE flag */
  while ((SpiHandle.Instance->SR & SPI_FLAG_TXE) != SPI_FLAG_TXE);
 8002666:	bf00      	nop
 8002668:	4b10      	ldr	r3, [pc, #64]	@ (80026ac <SPIx_Write+0x60>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	689b      	ldr	r3, [r3, #8]
 800266e:	f003 0302 	and.w	r3, r3, #2
 8002672:	2b02      	cmp	r3, #2
 8002674:	d1f8      	bne.n	8002668 <SPIx_Write+0x1c>

  /* Write the data */
  *((__IO uint8_t *)&SpiHandle.Instance->DR) = Byte;
 8002676:	4b0d      	ldr	r3, [pc, #52]	@ (80026ac <SPIx_Write+0x60>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	330c      	adds	r3, #12
 800267c:	79fa      	ldrb	r2, [r7, #7]
 800267e:	701a      	strb	r2, [r3, #0]

  /* Wait BSY flag */
  while ((SpiHandle.Instance->SR & SPI_FLAG_BSY) == SPI_FLAG_BSY);
 8002680:	bf00      	nop
 8002682:	4b0a      	ldr	r3, [pc, #40]	@ (80026ac <SPIx_Write+0x60>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	689b      	ldr	r3, [r3, #8]
 8002688:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800268c:	2b80      	cmp	r3, #128	@ 0x80
 800268e:	d0f8      	beq.n	8002682 <SPIx_Write+0x36>

  /* disable the SPI */
  __HAL_SPI_DISABLE(&SpiHandle);
 8002690:	4b06      	ldr	r3, [pc, #24]	@ (80026ac <SPIx_Write+0x60>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	681a      	ldr	r2, [r3, #0]
 8002696:	4b05      	ldr	r3, [pc, #20]	@ (80026ac <SPIx_Write+0x60>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800269e:	601a      	str	r2, [r3, #0]
}
 80026a0:	bf00      	nop
 80026a2:	370c      	adds	r7, #12
 80026a4:	46bd      	mov	sp, r7
 80026a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026aa:	4770      	bx	lr
 80026ac:	20000560 	.word	0x20000560

080026b0 <SPIx_Read>:
/**
  * @brief  Receives a Byte from the SPI bus.
  * @retval The received byte value
  */
static uint8_t SPIx_Read(void)
{
 80026b0:	b480      	push	{r7}
 80026b2:	b083      	sub	sp, #12
 80026b4:	af00      	add	r7, sp, #0
  uint8_t receivedbyte;

  __HAL_SPI_ENABLE(&SpiHandle);
 80026b6:	4b22      	ldr	r3, [pc, #136]	@ (8002740 <SPIx_Read+0x90>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	681a      	ldr	r2, [r3, #0]
 80026bc:	4b20      	ldr	r3, [pc, #128]	@ (8002740 <SPIx_Read+0x90>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80026c4:	601a      	str	r2, [r3, #0]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80026c6:	f3bf 8f4f 	dsb	sy
}
 80026ca:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 80026cc:	f3bf 8f4f 	dsb	sy
}
 80026d0:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 80026d2:	f3bf 8f4f 	dsb	sy
}
 80026d6:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 80026d8:	f3bf 8f4f 	dsb	sy
}
 80026dc:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 80026de:	f3bf 8f4f 	dsb	sy
}
 80026e2:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 80026e4:	f3bf 8f4f 	dsb	sy
}
 80026e8:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 80026ea:	f3bf 8f4f 	dsb	sy
}
 80026ee:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 80026f0:	f3bf 8f4f 	dsb	sy
}
 80026f4:	bf00      	nop
  __DSB();
  __DSB();
  __DSB();
  __DSB();
  __DSB();
  __HAL_SPI_DISABLE(&SpiHandle);
 80026f6:	4b12      	ldr	r3, [pc, #72]	@ (8002740 <SPIx_Read+0x90>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	681a      	ldr	r2, [r3, #0]
 80026fc:	4b10      	ldr	r3, [pc, #64]	@ (8002740 <SPIx_Read+0x90>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002704:	601a      	str	r2, [r3, #0]

  while ((SpiHandle.Instance->SR & SPI_FLAG_RXNE) != SPI_FLAG_RXNE);
 8002706:	bf00      	nop
 8002708:	4b0d      	ldr	r3, [pc, #52]	@ (8002740 <SPIx_Read+0x90>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	689b      	ldr	r3, [r3, #8]
 800270e:	f003 0301 	and.w	r3, r3, #1
 8002712:	2b01      	cmp	r3, #1
 8002714:	d1f8      	bne.n	8002708 <SPIx_Read+0x58>
  /* read the received data */
  receivedbyte = *(__IO uint8_t *)&SpiHandle.Instance->DR;
 8002716:	4b0a      	ldr	r3, [pc, #40]	@ (8002740 <SPIx_Read+0x90>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	330c      	adds	r3, #12
 800271c:	781b      	ldrb	r3, [r3, #0]
 800271e:	71fb      	strb	r3, [r7, #7]

  /* Wait for the BSY flag reset */
  while ((SpiHandle.Instance->SR & SPI_FLAG_BSY) == SPI_FLAG_BSY);
 8002720:	bf00      	nop
 8002722:	4b07      	ldr	r3, [pc, #28]	@ (8002740 <SPIx_Read+0x90>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	689b      	ldr	r3, [r3, #8]
 8002728:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800272c:	2b80      	cmp	r3, #128	@ 0x80
 800272e:	d0f8      	beq.n	8002722 <SPIx_Read+0x72>


  return receivedbyte;
 8002730:	79fb      	ldrb	r3, [r7, #7]
}
 8002732:	4618      	mov	r0, r3
 8002734:	370c      	adds	r7, #12
 8002736:	46bd      	mov	sp, r7
 8002738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273c:	4770      	bx	lr
 800273e:	bf00      	nop
 8002740:	20000560 	.word	0x20000560

08002744 <ACCELERO_IO_Init>:
/**
  * @brief  Configures COMPASS/ACCELEROMETER io interface.
  * @retval None
  */
void ACCELERO_IO_Init(void)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b086      	sub	sp, #24
 8002748:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable CS GPIO clock and  Configure GPIO PIN for Gyroscope Chip select */
  ACCELERO_CS_GPIO_CLK_ENABLE();
 800274a:	4b12      	ldr	r3, [pc, #72]	@ (8002794 <ACCELERO_IO_Init+0x50>)
 800274c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800274e:	4a11      	ldr	r2, [pc, #68]	@ (8002794 <ACCELERO_IO_Init+0x50>)
 8002750:	f043 0310 	orr.w	r3, r3, #16
 8002754:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002756:	4b0f      	ldr	r3, [pc, #60]	@ (8002794 <ACCELERO_IO_Init+0x50>)
 8002758:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800275a:	f003 0310 	and.w	r3, r3, #16
 800275e:	603b      	str	r3, [r7, #0]
 8002760:	683b      	ldr	r3, [r7, #0]
  GPIO_InitStructure.Pin = ACCELERO_CS_PIN;
 8002762:	2301      	movs	r3, #1
 8002764:	607b      	str	r3, [r7, #4]
  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 8002766:	2301      	movs	r3, #1
 8002768:	60bb      	str	r3, [r7, #8]
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 800276a:	2300      	movs	r3, #0
 800276c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800276e:	2303      	movs	r3, #3
 8002770:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(ACCELERO_CS_GPIO_PORT, &GPIO_InitStructure);
 8002772:	1d3b      	adds	r3, r7, #4
 8002774:	4619      	mov	r1, r3
 8002776:	4808      	ldr	r0, [pc, #32]	@ (8002798 <ACCELERO_IO_Init+0x54>)
 8002778:	f000 fcde 	bl	8003138 <HAL_GPIO_Init>

  /* Deselect : Chip Select high */
  ACCELERO_CS_HIGH();
 800277c:	2201      	movs	r2, #1
 800277e:	2101      	movs	r1, #1
 8002780:	4805      	ldr	r0, [pc, #20]	@ (8002798 <ACCELERO_IO_Init+0x54>)
 8002782:	f000 fe9b 	bl	80034bc <HAL_GPIO_WritePin>

  SPIx_Init();
 8002786:	f7ff fea9 	bl	80024dc <SPIx_Init>
}
 800278a:	bf00      	nop
 800278c:	3718      	adds	r7, #24
 800278e:	46bd      	mov	sp, r7
 8002790:	bd80      	pop	{r7, pc}
 8002792:	bf00      	nop
 8002794:	40021000 	.word	0x40021000
 8002798:	48001000 	.word	0x48001000

0800279c <ACCELERO_IO_Write>:
  * @param  RegisterAddr specifies the COMPASS / ACCELEROMETER register to be written.
  * @param  Value : Data to be written
  * @retval   None
 */
void ACCELERO_IO_Write(uint8_t RegisterAddr, uint8_t Value)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b082      	sub	sp, #8
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	4603      	mov	r3, r0
 80027a4:	460a      	mov	r2, r1
 80027a6:	71fb      	strb	r3, [r7, #7]
 80027a8:	4613      	mov	r3, r2
 80027aa:	71bb      	strb	r3, [r7, #6]
  ACCELERO_CS_LOW();
 80027ac:	2200      	movs	r2, #0
 80027ae:	2101      	movs	r1, #1
 80027b0:	4811      	ldr	r0, [pc, #68]	@ (80027f8 <ACCELERO_IO_Write+0x5c>)
 80027b2:	f000 fe83 	bl	80034bc <HAL_GPIO_WritePin>
  __SPI_DIRECTION_1LINE_TX(&SpiHandle);
 80027b6:	4b11      	ldr	r3, [pc, #68]	@ (80027fc <ACCELERO_IO_Write+0x60>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	681a      	ldr	r2, [r3, #0]
 80027bc:	4b0f      	ldr	r3, [pc, #60]	@ (80027fc <ACCELERO_IO_Write+0x60>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f422 4244 	bic.w	r2, r2, #50176	@ 0xc400
 80027c4:	601a      	str	r2, [r3, #0]
 80027c6:	4b0d      	ldr	r3, [pc, #52]	@ (80027fc <ACCELERO_IO_Write+0x60>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	681a      	ldr	r2, [r3, #0]
 80027cc:	4b0b      	ldr	r3, [pc, #44]	@ (80027fc <ACCELERO_IO_Write+0x60>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 80027d4:	601a      	str	r2, [r3, #0]
  /* call SPI Read data bus function */
  SPIx_Write(RegisterAddr);
 80027d6:	79fb      	ldrb	r3, [r7, #7]
 80027d8:	4618      	mov	r0, r3
 80027da:	f7ff ff37 	bl	800264c <SPIx_Write>
  SPIx_Write(Value);
 80027de:	79bb      	ldrb	r3, [r7, #6]
 80027e0:	4618      	mov	r0, r3
 80027e2:	f7ff ff33 	bl	800264c <SPIx_Write>
  ACCELERO_CS_HIGH();
 80027e6:	2201      	movs	r2, #1
 80027e8:	2101      	movs	r1, #1
 80027ea:	4803      	ldr	r0, [pc, #12]	@ (80027f8 <ACCELERO_IO_Write+0x5c>)
 80027ec:	f000 fe66 	bl	80034bc <HAL_GPIO_WritePin>
}
 80027f0:	bf00      	nop
 80027f2:	3708      	adds	r7, #8
 80027f4:	46bd      	mov	sp, r7
 80027f6:	bd80      	pop	{r7, pc}
 80027f8:	48001000 	.word	0x48001000
 80027fc:	20000560 	.word	0x20000560

08002800 <ACCELERO_IO_Read>:
  * @brief  Reads a block of data from the COMPASS / ACCELEROMETER.
  * @param  RegisterAddr : specifies the COMPASS / ACCELEROMETER internal address register to read from
  * @retval ACCELEROMETER register value
  */
uint8_t ACCELERO_IO_Read(uint8_t RegisterAddr)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b084      	sub	sp, #16
 8002804:	af00      	add	r7, sp, #0
 8002806:	4603      	mov	r3, r0
 8002808:	71fb      	strb	r3, [r7, #7]
  RegisterAddr = RegisterAddr | ((uint8_t)0x80);
 800280a:	79fb      	ldrb	r3, [r7, #7]
 800280c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002810:	71fb      	strb	r3, [r7, #7]
  ACCELERO_CS_LOW();
 8002812:	2200      	movs	r2, #0
 8002814:	2101      	movs	r1, #1
 8002816:	481a      	ldr	r0, [pc, #104]	@ (8002880 <ACCELERO_IO_Read+0x80>)
 8002818:	f000 fe50 	bl	80034bc <HAL_GPIO_WritePin>
  __SPI_DIRECTION_1LINE_TX(&SpiHandle);
 800281c:	4b19      	ldr	r3, [pc, #100]	@ (8002884 <ACCELERO_IO_Read+0x84>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	681a      	ldr	r2, [r3, #0]
 8002822:	4b18      	ldr	r3, [pc, #96]	@ (8002884 <ACCELERO_IO_Read+0x84>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f422 4244 	bic.w	r2, r2, #50176	@ 0xc400
 800282a:	601a      	str	r2, [r3, #0]
 800282c:	4b15      	ldr	r3, [pc, #84]	@ (8002884 <ACCELERO_IO_Read+0x84>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	681a      	ldr	r2, [r3, #0]
 8002832:	4b14      	ldr	r3, [pc, #80]	@ (8002884 <ACCELERO_IO_Read+0x84>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 800283a:	601a      	str	r2, [r3, #0]
  SPIx_Write(RegisterAddr);
 800283c:	79fb      	ldrb	r3, [r7, #7]
 800283e:	4618      	mov	r0, r3
 8002840:	f7ff ff04 	bl	800264c <SPIx_Write>
  __SPI_DIRECTION_1LINE_RX(&SpiHandle);
 8002844:	4b0f      	ldr	r3, [pc, #60]	@ (8002884 <ACCELERO_IO_Read+0x84>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	681a      	ldr	r2, [r3, #0]
 800284a:	4b0e      	ldr	r3, [pc, #56]	@ (8002884 <ACCELERO_IO_Read+0x84>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f422 4244 	bic.w	r2, r2, #50176	@ 0xc400
 8002852:	601a      	str	r2, [r3, #0]
 8002854:	4b0b      	ldr	r3, [pc, #44]	@ (8002884 <ACCELERO_IO_Read+0x84>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	681a      	ldr	r2, [r3, #0]
 800285a:	4b0a      	ldr	r3, [pc, #40]	@ (8002884 <ACCELERO_IO_Read+0x84>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002862:	601a      	str	r2, [r3, #0]
  uint8_t val = SPIx_Read();
 8002864:	f7ff ff24 	bl	80026b0 <SPIx_Read>
 8002868:	4603      	mov	r3, r0
 800286a:	73fb      	strb	r3, [r7, #15]
  ACCELERO_CS_HIGH();
 800286c:	2201      	movs	r2, #1
 800286e:	2101      	movs	r1, #1
 8002870:	4803      	ldr	r0, [pc, #12]	@ (8002880 <ACCELERO_IO_Read+0x80>)
 8002872:	f000 fe23 	bl	80034bc <HAL_GPIO_WritePin>
  return val;
 8002876:	7bfb      	ldrb	r3, [r7, #15]
}
 8002878:	4618      	mov	r0, r3
 800287a:	3710      	adds	r7, #16
 800287c:	46bd      	mov	sp, r7
 800287e:	bd80      	pop	{r7, pc}
 8002880:	48001000 	.word	0x48001000
 8002884:	20000560 	.word	0x20000560

08002888 <MAGNETO_IO_Init>:
/**
  * @brief  Configures COMPASS/MAGNETO SPI interface.
  * @retval None
  */
void MAGNETO_IO_Init(void)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b086      	sub	sp, #24
 800288c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable CS GPIO clock and  Configure GPIO PIN for Gyroscope Chip select */
  MAGNETO_CS_GPIO_CLK_ENABLE();
 800288e:	4b12      	ldr	r3, [pc, #72]	@ (80028d8 <MAGNETO_IO_Init+0x50>)
 8002890:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002892:	4a11      	ldr	r2, [pc, #68]	@ (80028d8 <MAGNETO_IO_Init+0x50>)
 8002894:	f043 0304 	orr.w	r3, r3, #4
 8002898:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800289a:	4b0f      	ldr	r3, [pc, #60]	@ (80028d8 <MAGNETO_IO_Init+0x50>)
 800289c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800289e:	f003 0304 	and.w	r3, r3, #4
 80028a2:	603b      	str	r3, [r7, #0]
 80028a4:	683b      	ldr	r3, [r7, #0]
  GPIO_InitStructure.Pin = MAGNETO_CS_PIN;
 80028a6:	2301      	movs	r3, #1
 80028a8:	607b      	str	r3, [r7, #4]
  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 80028aa:	2301      	movs	r3, #1
 80028ac:	60bb      	str	r3, [r7, #8]
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 80028ae:	2300      	movs	r3, #0
 80028b0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028b2:	2303      	movs	r3, #3
 80028b4:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(MAGNETO_CS_GPIO_PORT, &GPIO_InitStructure);
 80028b6:	1d3b      	adds	r3, r7, #4
 80028b8:	4619      	mov	r1, r3
 80028ba:	4808      	ldr	r0, [pc, #32]	@ (80028dc <MAGNETO_IO_Init+0x54>)
 80028bc:	f000 fc3c 	bl	8003138 <HAL_GPIO_Init>

  /* Deselect : Chip Select high */
  MAGNETO_CS_HIGH();
 80028c0:	2201      	movs	r2, #1
 80028c2:	2101      	movs	r1, #1
 80028c4:	4805      	ldr	r0, [pc, #20]	@ (80028dc <MAGNETO_IO_Init+0x54>)
 80028c6:	f000 fdf9 	bl	80034bc <HAL_GPIO_WritePin>

  SPIx_Init();
 80028ca:	f7ff fe07 	bl	80024dc <SPIx_Init>
}
 80028ce:	bf00      	nop
 80028d0:	3718      	adds	r7, #24
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bd80      	pop	{r7, pc}
 80028d6:	bf00      	nop
 80028d8:	40021000 	.word	0x40021000
 80028dc:	48000800 	.word	0x48000800

080028e0 <MAGNETO_IO_Write>:
  * @param  RegisterAddr specifies the COMPASS/MAGNETO register to be written.
  * @param  Value : Data to be written
  * @retval   None
 */
void MAGNETO_IO_Write(uint8_t RegisterAddr, uint8_t Value)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b082      	sub	sp, #8
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	4603      	mov	r3, r0
 80028e8:	460a      	mov	r2, r1
 80028ea:	71fb      	strb	r3, [r7, #7]
 80028ec:	4613      	mov	r3, r2
 80028ee:	71bb      	strb	r3, [r7, #6]
  MAGNETO_CS_LOW();
 80028f0:	2200      	movs	r2, #0
 80028f2:	2101      	movs	r1, #1
 80028f4:	4811      	ldr	r0, [pc, #68]	@ (800293c <MAGNETO_IO_Write+0x5c>)
 80028f6:	f000 fde1 	bl	80034bc <HAL_GPIO_WritePin>
  __SPI_DIRECTION_1LINE_TX(&SpiHandle);
 80028fa:	4b11      	ldr	r3, [pc, #68]	@ (8002940 <MAGNETO_IO_Write+0x60>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	681a      	ldr	r2, [r3, #0]
 8002900:	4b0f      	ldr	r3, [pc, #60]	@ (8002940 <MAGNETO_IO_Write+0x60>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f422 4244 	bic.w	r2, r2, #50176	@ 0xc400
 8002908:	601a      	str	r2, [r3, #0]
 800290a:	4b0d      	ldr	r3, [pc, #52]	@ (8002940 <MAGNETO_IO_Write+0x60>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	681a      	ldr	r2, [r3, #0]
 8002910:	4b0b      	ldr	r3, [pc, #44]	@ (8002940 <MAGNETO_IO_Write+0x60>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 8002918:	601a      	str	r2, [r3, #0]
  /* call SPI Read data bus function */
  SPIx_Write(RegisterAddr);
 800291a:	79fb      	ldrb	r3, [r7, #7]
 800291c:	4618      	mov	r0, r3
 800291e:	f7ff fe95 	bl	800264c <SPIx_Write>
  SPIx_Write(Value);
 8002922:	79bb      	ldrb	r3, [r7, #6]
 8002924:	4618      	mov	r0, r3
 8002926:	f7ff fe91 	bl	800264c <SPIx_Write>
  MAGNETO_CS_HIGH();
 800292a:	2201      	movs	r2, #1
 800292c:	2101      	movs	r1, #1
 800292e:	4803      	ldr	r0, [pc, #12]	@ (800293c <MAGNETO_IO_Write+0x5c>)
 8002930:	f000 fdc4 	bl	80034bc <HAL_GPIO_WritePin>
}
 8002934:	bf00      	nop
 8002936:	3708      	adds	r7, #8
 8002938:	46bd      	mov	sp, r7
 800293a:	bd80      	pop	{r7, pc}
 800293c:	48000800 	.word	0x48000800
 8002940:	20000560 	.word	0x20000560

08002944 <MAGNETO_IO_Read>:
  * @brief  Reads a block of data from the COMPASS/MAGNETO.
  * @param  RegisterAddr : specifies the COMPASS/MAGNETO internal address register to read from
  * @retval ACCELEROMETER register value
  */
uint8_t MAGNETO_IO_Read(uint8_t RegisterAddr)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b084      	sub	sp, #16
 8002948:	af00      	add	r7, sp, #0
 800294a:	4603      	mov	r3, r0
 800294c:	71fb      	strb	r3, [r7, #7]
  MAGNETO_CS_LOW();
 800294e:	2200      	movs	r2, #0
 8002950:	2101      	movs	r1, #1
 8002952:	481c      	ldr	r0, [pc, #112]	@ (80029c4 <MAGNETO_IO_Read+0x80>)
 8002954:	f000 fdb2 	bl	80034bc <HAL_GPIO_WritePin>
  __SPI_DIRECTION_1LINE_TX(&SpiHandle);
 8002958:	4b1b      	ldr	r3, [pc, #108]	@ (80029c8 <MAGNETO_IO_Read+0x84>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	681a      	ldr	r2, [r3, #0]
 800295e:	4b1a      	ldr	r3, [pc, #104]	@ (80029c8 <MAGNETO_IO_Read+0x84>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f422 4244 	bic.w	r2, r2, #50176	@ 0xc400
 8002966:	601a      	str	r2, [r3, #0]
 8002968:	4b17      	ldr	r3, [pc, #92]	@ (80029c8 <MAGNETO_IO_Read+0x84>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	681a      	ldr	r2, [r3, #0]
 800296e:	4b16      	ldr	r3, [pc, #88]	@ (80029c8 <MAGNETO_IO_Read+0x84>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 8002976:	601a      	str	r2, [r3, #0]
  SPIx_Write(RegisterAddr | 0x80);
 8002978:	79fb      	ldrb	r3, [r7, #7]
 800297a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800297e:	b2db      	uxtb	r3, r3
 8002980:	4618      	mov	r0, r3
 8002982:	f7ff fe63 	bl	800264c <SPIx_Write>
  __SPI_DIRECTION_1LINE_RX(&SpiHandle);
 8002986:	4b10      	ldr	r3, [pc, #64]	@ (80029c8 <MAGNETO_IO_Read+0x84>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	681a      	ldr	r2, [r3, #0]
 800298c:	4b0e      	ldr	r3, [pc, #56]	@ (80029c8 <MAGNETO_IO_Read+0x84>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f422 4244 	bic.w	r2, r2, #50176	@ 0xc400
 8002994:	601a      	str	r2, [r3, #0]
 8002996:	4b0c      	ldr	r3, [pc, #48]	@ (80029c8 <MAGNETO_IO_Read+0x84>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	681a      	ldr	r2, [r3, #0]
 800299c:	4b0a      	ldr	r3, [pc, #40]	@ (80029c8 <MAGNETO_IO_Read+0x84>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80029a4:	601a      	str	r2, [r3, #0]
  uint8_t val = SPIx_Read();
 80029a6:	f7ff fe83 	bl	80026b0 <SPIx_Read>
 80029aa:	4603      	mov	r3, r0
 80029ac:	73fb      	strb	r3, [r7, #15]
  MAGNETO_CS_HIGH();
 80029ae:	2201      	movs	r2, #1
 80029b0:	2101      	movs	r1, #1
 80029b2:	4804      	ldr	r0, [pc, #16]	@ (80029c4 <MAGNETO_IO_Read+0x80>)
 80029b4:	f000 fd82 	bl	80034bc <HAL_GPIO_WritePin>
  return val;
 80029b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80029ba:	4618      	mov	r0, r3
 80029bc:	3710      	adds	r7, #16
 80029be:	46bd      	mov	sp, r7
 80029c0:	bd80      	pop	{r7, pc}
 80029c2:	bf00      	nop
 80029c4:	48000800 	.word	0x48000800
 80029c8:	20000560 	.word	0x20000560

080029cc <GYRO_IO_Init>:
/**
  * @brief  Configures the GYRO SPI interface.
  * @retval None
  */
void GYRO_IO_Init(void)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b08a      	sub	sp, #40	@ 0x28
 80029d0:	af00      	add	r7, sp, #0

  /* Case GYRO not used in the demonstration software except being set in
     low power mode.
     To avoid access conflicts with accelerometer and magnetometer,
     initialize  XL_CS and MAG_CS pins then deselect these I/O */
  ACCELERO_CS_GPIO_CLK_ENABLE();
 80029d2:	4b49      	ldr	r3, [pc, #292]	@ (8002af8 <GYRO_IO_Init+0x12c>)
 80029d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029d6:	4a48      	ldr	r2, [pc, #288]	@ (8002af8 <GYRO_IO_Init+0x12c>)
 80029d8:	f043 0310 	orr.w	r3, r3, #16
 80029dc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80029de:	4b46      	ldr	r3, [pc, #280]	@ (8002af8 <GYRO_IO_Init+0x12c>)
 80029e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029e2:	f003 0310 	and.w	r3, r3, #16
 80029e6:	613b      	str	r3, [r7, #16]
 80029e8:	693b      	ldr	r3, [r7, #16]
  GPIO_InitStructure.Pin = ACCELERO_CS_PIN;
 80029ea:	2301      	movs	r3, #1
 80029ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 80029ee:	2301      	movs	r3, #1
 80029f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 80029f2:	2300      	movs	r3, #0
 80029f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029f6:	2303      	movs	r3, #3
 80029f8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ACCELERO_CS_GPIO_PORT, &GPIO_InitStructure);
 80029fa:	f107 0314 	add.w	r3, r7, #20
 80029fe:	4619      	mov	r1, r3
 8002a00:	483e      	ldr	r0, [pc, #248]	@ (8002afc <GYRO_IO_Init+0x130>)
 8002a02:	f000 fb99 	bl	8003138 <HAL_GPIO_Init>

  /* Deselect : Chip Select high */
  ACCELERO_CS_HIGH();
 8002a06:	2201      	movs	r2, #1
 8002a08:	2101      	movs	r1, #1
 8002a0a:	483c      	ldr	r0, [pc, #240]	@ (8002afc <GYRO_IO_Init+0x130>)
 8002a0c:	f000 fd56 	bl	80034bc <HAL_GPIO_WritePin>

  /* Enable CS GPIO clock and  Configure GPIO PIN for Gyroscope Chip select */
  MAGNETO_CS_GPIO_CLK_ENABLE();
 8002a10:	4b39      	ldr	r3, [pc, #228]	@ (8002af8 <GYRO_IO_Init+0x12c>)
 8002a12:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a14:	4a38      	ldr	r2, [pc, #224]	@ (8002af8 <GYRO_IO_Init+0x12c>)
 8002a16:	f043 0304 	orr.w	r3, r3, #4
 8002a1a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002a1c:	4b36      	ldr	r3, [pc, #216]	@ (8002af8 <GYRO_IO_Init+0x12c>)
 8002a1e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a20:	f003 0304 	and.w	r3, r3, #4
 8002a24:	60fb      	str	r3, [r7, #12]
 8002a26:	68fb      	ldr	r3, [r7, #12]
  GPIO_InitStructure.Pin = MAGNETO_CS_PIN;
 8002a28:	2301      	movs	r3, #1
 8002a2a:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 8002a2c:	2301      	movs	r3, #1
 8002a2e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 8002a30:	2300      	movs	r3, #0
 8002a32:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a34:	2303      	movs	r3, #3
 8002a36:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(MAGNETO_CS_GPIO_PORT, &GPIO_InitStructure);
 8002a38:	f107 0314 	add.w	r3, r7, #20
 8002a3c:	4619      	mov	r1, r3
 8002a3e:	4830      	ldr	r0, [pc, #192]	@ (8002b00 <GYRO_IO_Init+0x134>)
 8002a40:	f000 fb7a 	bl	8003138 <HAL_GPIO_Init>

  /* Deselect : Chip Select high */
  MAGNETO_CS_HIGH();
 8002a44:	2201      	movs	r2, #1
 8002a46:	2101      	movs	r1, #1
 8002a48:	482d      	ldr	r0, [pc, #180]	@ (8002b00 <GYRO_IO_Init+0x134>)
 8002a4a:	f000 fd37 	bl	80034bc <HAL_GPIO_WritePin>


  /* Configure the Gyroscope Control pins ---------------------------------*/
  /* Enable CS GPIO clock and  Configure GPIO PIN for Gyroscope Chip select */
  GYRO_CS_GPIO_CLK_ENABLE();
 8002a4e:	4b2a      	ldr	r3, [pc, #168]	@ (8002af8 <GYRO_IO_Init+0x12c>)
 8002a50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a52:	4a29      	ldr	r2, [pc, #164]	@ (8002af8 <GYRO_IO_Init+0x12c>)
 8002a54:	f043 0308 	orr.w	r3, r3, #8
 8002a58:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002a5a:	4b27      	ldr	r3, [pc, #156]	@ (8002af8 <GYRO_IO_Init+0x12c>)
 8002a5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a5e:	f003 0308 	and.w	r3, r3, #8
 8002a62:	60bb      	str	r3, [r7, #8]
 8002a64:	68bb      	ldr	r3, [r7, #8]
  GPIO_InitStructure.Pin = GYRO_CS_PIN;
 8002a66:	2380      	movs	r3, #128	@ 0x80
 8002a68:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 8002a6e:	2300      	movs	r3, #0
 8002a70:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a72:	2303      	movs	r3, #3
 8002a74:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GYRO_CS_GPIO_PORT, &GPIO_InitStructure);
 8002a76:	f107 0314 	add.w	r3, r7, #20
 8002a7a:	4619      	mov	r1, r3
 8002a7c:	4821      	ldr	r0, [pc, #132]	@ (8002b04 <GYRO_IO_Init+0x138>)
 8002a7e:	f000 fb5b 	bl	8003138 <HAL_GPIO_Init>

  /* Deselect : Chip Select high */
  GYRO_CS_HIGH();
 8002a82:	2201      	movs	r2, #1
 8002a84:	2180      	movs	r1, #128	@ 0x80
 8002a86:	481f      	ldr	r0, [pc, #124]	@ (8002b04 <GYRO_IO_Init+0x138>)
 8002a88:	f000 fd18 	bl	80034bc <HAL_GPIO_WritePin>

  /* Enable INT1, INT2 GPIO clock and Configure GPIO PINs to detect Interrupts */
  GYRO_INT1_GPIO_CLK_ENABLE();
 8002a8c:	4b1a      	ldr	r3, [pc, #104]	@ (8002af8 <GYRO_IO_Init+0x12c>)
 8002a8e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a90:	4a19      	ldr	r2, [pc, #100]	@ (8002af8 <GYRO_IO_Init+0x12c>)
 8002a92:	f043 0308 	orr.w	r3, r3, #8
 8002a96:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002a98:	4b17      	ldr	r3, [pc, #92]	@ (8002af8 <GYRO_IO_Init+0x12c>)
 8002a9a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a9c:	f003 0308 	and.w	r3, r3, #8
 8002aa0:	607b      	str	r3, [r7, #4]
 8002aa2:	687b      	ldr	r3, [r7, #4]
  GPIO_InitStructure.Pin = GYRO_INT1_PIN;
 8002aa4:	2304      	movs	r3, #4
 8002aa6:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002aac:	2303      	movs	r3, #3
 8002aae:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GYRO_INT1_GPIO_PORT, &GPIO_InitStructure);
 8002ab4:	f107 0314 	add.w	r3, r7, #20
 8002ab8:	4619      	mov	r1, r3
 8002aba:	4812      	ldr	r0, [pc, #72]	@ (8002b04 <GYRO_IO_Init+0x138>)
 8002abc:	f000 fb3c 	bl	8003138 <HAL_GPIO_Init>

  GYRO_INT2_GPIO_CLK_ENABLE();
 8002ac0:	4b0d      	ldr	r3, [pc, #52]	@ (8002af8 <GYRO_IO_Init+0x12c>)
 8002ac2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ac4:	4a0c      	ldr	r2, [pc, #48]	@ (8002af8 <GYRO_IO_Init+0x12c>)
 8002ac6:	f043 0302 	orr.w	r3, r3, #2
 8002aca:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002acc:	4b0a      	ldr	r3, [pc, #40]	@ (8002af8 <GYRO_IO_Init+0x12c>)
 8002ace:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ad0:	f003 0302 	and.w	r3, r3, #2
 8002ad4:	603b      	str	r3, [r7, #0]
 8002ad6:	683b      	ldr	r3, [r7, #0]
  GPIO_InitStructure.Pin = GYRO_INT2_PIN;
 8002ad8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002adc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GYRO_INT2_GPIO_PORT, &GPIO_InitStructure);
 8002ade:	f107 0314 	add.w	r3, r7, #20
 8002ae2:	4619      	mov	r1, r3
 8002ae4:	4808      	ldr	r0, [pc, #32]	@ (8002b08 <GYRO_IO_Init+0x13c>)
 8002ae6:	f000 fb27 	bl	8003138 <HAL_GPIO_Init>

  SPIx_Init();
 8002aea:	f7ff fcf7 	bl	80024dc <SPIx_Init>

}
 8002aee:	bf00      	nop
 8002af0:	3728      	adds	r7, #40	@ 0x28
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bd80      	pop	{r7, pc}
 8002af6:	bf00      	nop
 8002af8:	40021000 	.word	0x40021000
 8002afc:	48001000 	.word	0x48001000
 8002b00:	48000800 	.word	0x48000800
 8002b04:	48000c00 	.word	0x48000c00
 8002b08:	48000400 	.word	0x48000400

08002b0c <GYRO_IO_Write>:
  * @param  WriteAddr : GYRO's internal address to write to.
  * @param  NumByteToWrite: Number of bytes to write.
  * @retval None
  */
void GYRO_IO_Write(uint8_t *pBuffer, uint8_t WriteAddr, uint16_t NumByteToWrite)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b082      	sub	sp, #8
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
 8002b14:	460b      	mov	r3, r1
 8002b16:	70fb      	strb	r3, [r7, #3]
 8002b18:	4613      	mov	r3, r2
 8002b1a:	803b      	strh	r3, [r7, #0]
  /* Configure the MS bit:
       - When 0, the address will remain unchanged in multiple read/write commands.
       - When 1, the address will be auto incremented in multiple read/write commands.
  */
  if (NumByteToWrite > 0x01)
 8002b1c:	883b      	ldrh	r3, [r7, #0]
 8002b1e:	2b01      	cmp	r3, #1
 8002b20:	d903      	bls.n	8002b2a <GYRO_IO_Write+0x1e>
  {
    WriteAddr |= (uint8_t)MULTIPLEBYTE_CMD;
 8002b22:	78fb      	ldrb	r3, [r7, #3]
 8002b24:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002b28:	70fb      	strb	r3, [r7, #3]
  }
  /* Set chip select Low at the start of the transmission */
  GYRO_CS_LOW();
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	2180      	movs	r1, #128	@ 0x80
 8002b2e:	4813      	ldr	r0, [pc, #76]	@ (8002b7c <GYRO_IO_Write+0x70>)
 8002b30:	f000 fcc4 	bl	80034bc <HAL_GPIO_WritePin>
  __SPI_DIRECTION_2LINES(&SpiHandle);
 8002b34:	4b12      	ldr	r3, [pc, #72]	@ (8002b80 <GYRO_IO_Write+0x74>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	681a      	ldr	r2, [r3, #0]
 8002b3a:	4b11      	ldr	r3, [pc, #68]	@ (8002b80 <GYRO_IO_Write+0x74>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f422 4244 	bic.w	r2, r2, #50176	@ 0xc400
 8002b42:	601a      	str	r2, [r3, #0]

  /* Send the Address of the indexed register */
  SPIx_WriteRead(WriteAddr);
 8002b44:	78fb      	ldrb	r3, [r7, #3]
 8002b46:	4618      	mov	r0, r3
 8002b48:	f7ff fd38 	bl	80025bc <SPIx_WriteRead>

  /* Send the data that will be written into the device (MSB First) */
  while (NumByteToWrite >= 0x01)
 8002b4c:	e00a      	b.n	8002b64 <GYRO_IO_Write+0x58>
  {
    SPIx_WriteRead(*pBuffer);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	781b      	ldrb	r3, [r3, #0]
 8002b52:	4618      	mov	r0, r3
 8002b54:	f7ff fd32 	bl	80025bc <SPIx_WriteRead>
    NumByteToWrite--;
 8002b58:	883b      	ldrh	r3, [r7, #0]
 8002b5a:	3b01      	subs	r3, #1
 8002b5c:	803b      	strh	r3, [r7, #0]
    pBuffer++;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	3301      	adds	r3, #1
 8002b62:	607b      	str	r3, [r7, #4]
  while (NumByteToWrite >= 0x01)
 8002b64:	883b      	ldrh	r3, [r7, #0]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d1f1      	bne.n	8002b4e <GYRO_IO_Write+0x42>
  }

  /* Set chip select High at the end of the transmission */
  GYRO_CS_HIGH();
 8002b6a:	2201      	movs	r2, #1
 8002b6c:	2180      	movs	r1, #128	@ 0x80
 8002b6e:	4803      	ldr	r0, [pc, #12]	@ (8002b7c <GYRO_IO_Write+0x70>)
 8002b70:	f000 fca4 	bl	80034bc <HAL_GPIO_WritePin>
}
 8002b74:	bf00      	nop
 8002b76:	3708      	adds	r7, #8
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	bd80      	pop	{r7, pc}
 8002b7c:	48000c00 	.word	0x48000c00
 8002b80:	20000560 	.word	0x20000560

08002b84 <GYRO_IO_Read>:
  * @param  ReadAddr : GYROSCOPE's internal address to read from.
  * @param  NumByteToRead : number of bytes to read from the GYROSCOPE.
  * @retval None
  */
void GYRO_IO_Read(uint8_t *pBuffer, uint8_t ReadAddr, uint16_t NumByteToRead)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b082      	sub	sp, #8
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
 8002b8c:	460b      	mov	r3, r1
 8002b8e:	70fb      	strb	r3, [r7, #3]
 8002b90:	4613      	mov	r3, r2
 8002b92:	803b      	strh	r3, [r7, #0]
  if (NumByteToRead > 0x01)
 8002b94:	883b      	ldrh	r3, [r7, #0]
 8002b96:	2b01      	cmp	r3, #1
 8002b98:	d904      	bls.n	8002ba4 <GYRO_IO_Read+0x20>
  {
    ReadAddr |= (uint8_t)(READWRITE_CMD | MULTIPLEBYTE_CMD);
 8002b9a:	78fb      	ldrb	r3, [r7, #3]
 8002b9c:	f063 033f 	orn	r3, r3, #63	@ 0x3f
 8002ba0:	70fb      	strb	r3, [r7, #3]
 8002ba2:	e003      	b.n	8002bac <GYRO_IO_Read+0x28>
  }
  else
  {
    ReadAddr |= (uint8_t)READWRITE_CMD;
 8002ba4:	78fb      	ldrb	r3, [r7, #3]
 8002ba6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002baa:	70fb      	strb	r3, [r7, #3]
  }
  /* Set chip select Low at the start of the transmission */
  GYRO_CS_LOW();
 8002bac:	2200      	movs	r2, #0
 8002bae:	2180      	movs	r1, #128	@ 0x80
 8002bb0:	4814      	ldr	r0, [pc, #80]	@ (8002c04 <GYRO_IO_Read+0x80>)
 8002bb2:	f000 fc83 	bl	80034bc <HAL_GPIO_WritePin>
  __SPI_DIRECTION_2LINES(&SpiHandle);
 8002bb6:	4b14      	ldr	r3, [pc, #80]	@ (8002c08 <GYRO_IO_Read+0x84>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	681a      	ldr	r2, [r3, #0]
 8002bbc:	4b12      	ldr	r3, [pc, #72]	@ (8002c08 <GYRO_IO_Read+0x84>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f422 4244 	bic.w	r2, r2, #50176	@ 0xc400
 8002bc4:	601a      	str	r2, [r3, #0]
  /* Send the Address of the indexed register */
  SPIx_WriteRead(ReadAddr);
 8002bc6:	78fb      	ldrb	r3, [r7, #3]
 8002bc8:	4618      	mov	r0, r3
 8002bca:	f7ff fcf7 	bl	80025bc <SPIx_WriteRead>

  /* Receive the data that will be read from the device (MSB First) */
  while (NumByteToRead > 0x00)
 8002bce:	e00c      	b.n	8002bea <GYRO_IO_Read+0x66>
  {
    /* Send dummy byte (0x00) to generate the SPI clock to GYROSCOPE (Slave device) */
    *pBuffer = SPIx_WriteRead(0x00);
 8002bd0:	2000      	movs	r0, #0
 8002bd2:	f7ff fcf3 	bl	80025bc <SPIx_WriteRead>
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	461a      	mov	r2, r3
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	701a      	strb	r2, [r3, #0]
    NumByteToRead--;
 8002bde:	883b      	ldrh	r3, [r7, #0]
 8002be0:	3b01      	subs	r3, #1
 8002be2:	803b      	strh	r3, [r7, #0]
    pBuffer++;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	3301      	adds	r3, #1
 8002be8:	607b      	str	r3, [r7, #4]
  while (NumByteToRead > 0x00)
 8002bea:	883b      	ldrh	r3, [r7, #0]
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d1ef      	bne.n	8002bd0 <GYRO_IO_Read+0x4c>
  }

  /* Set chip select High at the end of the transmission */
  GYRO_CS_HIGH();
 8002bf0:	2201      	movs	r2, #1
 8002bf2:	2180      	movs	r1, #128	@ 0x80
 8002bf4:	4803      	ldr	r0, [pc, #12]	@ (8002c04 <GYRO_IO_Read+0x80>)
 8002bf6:	f000 fc61 	bl	80034bc <HAL_GPIO_WritePin>
}
 8002bfa:	bf00      	nop
 8002bfc:	3708      	adds	r7, #8
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bd80      	pop	{r7, pc}
 8002c02:	bf00      	nop
 8002c04:	48000c00 	.word	0x48000c00
 8002c08:	20000560 	.word	0x20000560

08002c0c <BSP_COMPASS_Init>:
/**
  * @brief  Initialize the COMPASS.
  * @retval COMPASS_OK or COMPASS_ERROR
  */
COMPASS_StatusTypeDef BSP_COMPASS_Init(void)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b088      	sub	sp, #32
 8002c10:	af00      	add	r7, sp, #0
  COMPASS_StatusTypeDef ret = COMPASS_OK;
 8002c12:	2300      	movs	r3, #0
 8002c14:	77fb      	strb	r3, [r7, #31]
  uint16_t ctrl = 0x0000;
 8002c16:	2300      	movs	r3, #0
 8002c18:	83bb      	strh	r3, [r7, #28]
  ACCELERO_InitTypeDef LSM303C_InitStructure;
  ACCELERO_FilterConfigTypeDef LSM303C_FilterStructure;
  MAGNETO_InitTypeDef LSM303C_InitStructureMag;

  if (Lsm303cDrv_accelero.ReadID() != LMS303C_ACC_ID)
 8002c1a:	4b36      	ldr	r3, [pc, #216]	@ (8002cf4 <BSP_COMPASS_Init+0xe8>)
 8002c1c:	689b      	ldr	r3, [r3, #8]
 8002c1e:	4798      	blx	r3
 8002c20:	4603      	mov	r3, r0
 8002c22:	2b41      	cmp	r3, #65	@ 0x41
 8002c24:	d002      	beq.n	8002c2c <BSP_COMPASS_Init+0x20>
  {
    ret = COMPASS_ERROR;
 8002c26:	2301      	movs	r3, #1
 8002c28:	77fb      	strb	r3, [r7, #31]
 8002c2a:	e040      	b.n	8002cae <BSP_COMPASS_Init+0xa2>
  }
  else
  {
    /* Initialize the COMPASS accelerometer driver structure */
    AccelerometerDrv = &Lsm303cDrv_accelero;
 8002c2c:	4b32      	ldr	r3, [pc, #200]	@ (8002cf8 <BSP_COMPASS_Init+0xec>)
 8002c2e:	4a31      	ldr	r2, [pc, #196]	@ (8002cf4 <BSP_COMPASS_Init+0xe8>)
 8002c30:	601a      	str	r2, [r3, #0]

    /* MEMS configuration ------------------------------------------------------*/
    /* Fill the COMPASS accelerometer structure */
    LSM303C_InitStructure.AccOutput_DataRate = LSM303C_ACC_ODR_50_HZ;
 8002c32:	2320      	movs	r3, #32
 8002c34:	757b      	strb	r3, [r7, #21]
    LSM303C_InitStructure.Axes_Enable = LSM303C_ACC_AXES_ENABLE;
 8002c36:	2307      	movs	r3, #7
 8002c38:	75bb      	strb	r3, [r7, #22]
    LSM303C_InitStructure.AccFull_Scale = LSM303C_ACC_FULLSCALE_2G;
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	76bb      	strb	r3, [r7, #26]
    LSM303C_InitStructure.BlockData_Update = LSM303C_ACC_BDU_CONTINUOUS;
 8002c3e:	2300      	movs	r3, #0
 8002c40:	763b      	strb	r3, [r7, #24]
    LSM303C_InitStructure.High_Resolution = LSM303C_ACC_HR_DISABLE;
 8002c42:	2300      	movs	r3, #0
 8002c44:	75fb      	strb	r3, [r7, #23]
    LSM303C_InitStructure.Communication_Mode = LSM303C_ACC_SPI_MODE;
 8002c46:	2301      	movs	r3, #1
 8002c48:	76fb      	strb	r3, [r7, #27]

    /* Configure MEMS: data rate, power mode, full scale and axes */
    ctrl = (LSM303C_InitStructure.High_Resolution | LSM303C_InitStructure.AccOutput_DataRate | \
 8002c4a:	7dfa      	ldrb	r2, [r7, #23]
 8002c4c:	7d7b      	ldrb	r3, [r7, #21]
 8002c4e:	4313      	orrs	r3, r2
 8002c50:	b2da      	uxtb	r2, r3
            LSM303C_InitStructure.Axes_Enable | LSM303C_InitStructure.BlockData_Update);
 8002c52:	7dbb      	ldrb	r3, [r7, #22]
    ctrl = (LSM303C_InitStructure.High_Resolution | LSM303C_InitStructure.AccOutput_DataRate | \
 8002c54:	4313      	orrs	r3, r2
 8002c56:	b2da      	uxtb	r2, r3
            LSM303C_InitStructure.Axes_Enable | LSM303C_InitStructure.BlockData_Update);
 8002c58:	7e3b      	ldrb	r3, [r7, #24]
    ctrl = (LSM303C_InitStructure.High_Resolution | LSM303C_InitStructure.AccOutput_DataRate | \
 8002c5a:	4313      	orrs	r3, r2
 8002c5c:	b2db      	uxtb	r3, r3
 8002c5e:	83bb      	strh	r3, [r7, #28]

    ctrl |= (LSM303C_InitStructure.AccFull_Scale | LSM303C_InitStructure.Communication_Mode) << 8;
 8002c60:	7eba      	ldrb	r2, [r7, #26]
 8002c62:	7efb      	ldrb	r3, [r7, #27]
 8002c64:	4313      	orrs	r3, r2
 8002c66:	b2db      	uxtb	r3, r3
 8002c68:	b21b      	sxth	r3, r3
 8002c6a:	021b      	lsls	r3, r3, #8
 8002c6c:	b21a      	sxth	r2, r3
 8002c6e:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8002c72:	4313      	orrs	r3, r2
 8002c74:	b21b      	sxth	r3, r3
 8002c76:	83bb      	strh	r3, [r7, #28]

    /* Configure the COMPASS accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 8002c78:	4b1f      	ldr	r3, [pc, #124]	@ (8002cf8 <BSP_COMPASS_Init+0xec>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	8bba      	ldrh	r2, [r7, #28]
 8002c80:	4610      	mov	r0, r2
 8002c82:	4798      	blx	r3

    /* Fill the COMPASS accelerometer HPF structure */
    LSM303C_FilterStructure.HighPassFilter_Mode_Selection = LSM303C_ACC_HPM_NORMAL_MODE;
 8002c84:	2300      	movs	r3, #0
 8002c86:	733b      	strb	r3, [r7, #12]
    LSM303C_FilterStructure.HighPassFilter_CutOff_Frequency = LSM303C_ACC_DFC1_ODRDIV50;
 8002c88:	2300      	movs	r3, #0
 8002c8a:	737b      	strb	r3, [r7, #13]
    LSM303C_FilterStructure.HighPassFilter_Stat = LSM303C_ACC_HPI2S_INT1_DISABLE | LSM303C_ACC_HPI2S_INT2_DISABLE;
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	747b      	strb	r3, [r7, #17]

    /* Configure MEMS: mode, cutoff frequency, Filter status, Click, AOI1 and AOI2 */
    ctrl = (uint8_t)(LSM303C_FilterStructure.HighPassFilter_Mode_Selection | \
 8002c90:	7b3a      	ldrb	r2, [r7, #12]
                     LSM303C_FilterStructure.HighPassFilter_CutOff_Frequency | \
 8002c92:	7b7b      	ldrb	r3, [r7, #13]
    ctrl = (uint8_t)(LSM303C_FilterStructure.HighPassFilter_Mode_Selection | \
 8002c94:	4313      	orrs	r3, r2
 8002c96:	b2da      	uxtb	r2, r3
                     LSM303C_FilterStructure.HighPassFilter_Stat);
 8002c98:	7c7b      	ldrb	r3, [r7, #17]
    ctrl = (uint8_t)(LSM303C_FilterStructure.HighPassFilter_Mode_Selection | \
 8002c9a:	4313      	orrs	r3, r2
 8002c9c:	b2db      	uxtb	r3, r3
 8002c9e:	83bb      	strh	r3, [r7, #28]

    /* Configure the COMPASS accelerometer LPF main parameters */
    AccelerometerDrv->FilterConfig(ctrl);
 8002ca0:	4b15      	ldr	r3, [pc, #84]	@ (8002cf8 <BSP_COMPASS_Init+0xec>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ca6:	8bba      	ldrh	r2, [r7, #28]
 8002ca8:	b2d2      	uxtb	r2, r2
 8002caa:	4610      	mov	r0, r2
 8002cac:	4798      	blx	r3
  }

  if (Lsm303cDrv_magneto.ReadID() != LMS303C_MAG_ID)
 8002cae:	4b13      	ldr	r3, [pc, #76]	@ (8002cfc <BSP_COMPASS_Init+0xf0>)
 8002cb0:	689b      	ldr	r3, [r3, #8]
 8002cb2:	4798      	blx	r3
 8002cb4:	4603      	mov	r3, r0
 8002cb6:	2b3d      	cmp	r3, #61	@ 0x3d
 8002cb8:	d002      	beq.n	8002cc0 <BSP_COMPASS_Init+0xb4>
  {
    ret = COMPASS_ERROR;
 8002cba:	2301      	movs	r3, #1
 8002cbc:	77fb      	strb	r3, [r7, #31]
 8002cbe:	e013      	b.n	8002ce8 <BSP_COMPASS_Init+0xdc>
  }
  else
  {
    /* Initialize the COMPASS magnetometer driver structure */
    MagnetoDrv = &Lsm303cDrv_magneto;
 8002cc0:	4b0f      	ldr	r3, [pc, #60]	@ (8002d00 <BSP_COMPASS_Init+0xf4>)
 8002cc2:	4a0e      	ldr	r2, [pc, #56]	@ (8002cfc <BSP_COMPASS_Init+0xf0>)
 8002cc4:	601a      	str	r2, [r3, #0]

    /* MEMS configuration ------------------------------------------------------*/
    /* Fill the COMPASS magnetometer structure */
    LSM303C_InitStructureMag.Register1 = LSM303C_MAG_TEMPSENSOR_DISABLE | LSM303C_MAG_OM_XY_ULTRAHIGH | LSM303C_MAG_ODR_40_HZ;
 8002cc6:	2378      	movs	r3, #120	@ 0x78
 8002cc8:	713b      	strb	r3, [r7, #4]
    LSM303C_InitStructureMag.Register2 = LSM303C_MAG_FS_16_GA | LSM303C_MAG_REBOOT_DEFAULT | LSM303C_MAG_SOFT_RESET_DEFAULT;
 8002cca:	2360      	movs	r3, #96	@ 0x60
 8002ccc:	717b      	strb	r3, [r7, #5]
    LSM303C_InitStructureMag.Register3 = LSM303C_MAG_SPI_MODE | LSM303C_MAG_CONFIG_NORMAL_MODE | LSM303C_MAG_CONTINUOUS_MODE;
 8002cce:	2304      	movs	r3, #4
 8002cd0:	71bb      	strb	r3, [r7, #6]
    LSM303C_InitStructureMag.Register4 = LSM303C_MAG_OM_Z_ULTRAHIGH | LSM303C_MAG_BLE_LSB;
 8002cd2:	230c      	movs	r3, #12
 8002cd4:	71fb      	strb	r3, [r7, #7]
    LSM303C_InitStructureMag.Register5 = LSM303C_MAG_BDU_CONTINUOUS;
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	723b      	strb	r3, [r7, #8]
    /* Configure the COMPASS magnetometer main parameters */
    MagnetoDrv->Init(LSM303C_InitStructureMag);
 8002cda:	4b09      	ldr	r3, [pc, #36]	@ (8002d00 <BSP_COMPASS_Init+0xf4>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	1d3a      	adds	r2, r7, #4
 8002ce2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002ce6:	4798      	blx	r3
  }

  return ret;
 8002ce8:	7ffb      	ldrb	r3, [r7, #31]
}
 8002cea:	4618      	mov	r0, r3
 8002cec:	3720      	adds	r7, #32
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bd80      	pop	{r7, pc}
 8002cf2:	bf00      	nop
 8002cf4:	2000003c 	.word	0x2000003c
 8002cf8:	200005c4 	.word	0x200005c4
 8002cfc:	20000070 	.word	0x20000070
 8002d00:	200005c8 	.word	0x200005c8

08002d04 <BSP_GYRO_Init>:
/**
  * @brief  Initialize Gyroscope.
  * @retval GYRO_OK or GYRO_ERROR
  */
uint8_t BSP_GYRO_Init(void)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b084      	sub	sp, #16
 8002d08:	af00      	add	r7, sp, #0
  uint8_t ret = GYRO_ERROR;
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 8002d0e:	2300      	movs	r3, #0
 8002d10:	81bb      	strh	r3, [r7, #12]
  GYRO_InitTypeDef L3GD20_InitStructure;
  GYRO_FilterConfigTypeDef L3GD20_FilterStructure = {0, 0};
 8002d12:	2300      	movs	r3, #0
 8002d14:	703b      	strb	r3, [r7, #0]
 8002d16:	2300      	movs	r3, #0
 8002d18:	707b      	strb	r3, [r7, #1]

  if ((L3gd20Drv.ReadID() == I_AM_L3GD20) || (L3gd20Drv.ReadID() == I_AM_L3GD20_TR))
 8002d1a:	4b2c      	ldr	r3, [pc, #176]	@ (8002dcc <BSP_GYRO_Init+0xc8>)
 8002d1c:	689b      	ldr	r3, [r3, #8]
 8002d1e:	4798      	blx	r3
 8002d20:	4603      	mov	r3, r0
 8002d22:	2bd4      	cmp	r3, #212	@ 0xd4
 8002d24:	d005      	beq.n	8002d32 <BSP_GYRO_Init+0x2e>
 8002d26:	4b29      	ldr	r3, [pc, #164]	@ (8002dcc <BSP_GYRO_Init+0xc8>)
 8002d28:	689b      	ldr	r3, [r3, #8]
 8002d2a:	4798      	blx	r3
 8002d2c:	4603      	mov	r3, r0
 8002d2e:	2bd5      	cmp	r3, #213	@ 0xd5
 8002d30:	d145      	bne.n	8002dbe <BSP_GYRO_Init+0xba>
  {
    /* Initialize the gyroscope driver structure */
    GyroscopeDrv = &L3gd20Drv;
 8002d32:	4b27      	ldr	r3, [pc, #156]	@ (8002dd0 <BSP_GYRO_Init+0xcc>)
 8002d34:	4a25      	ldr	r2, [pc, #148]	@ (8002dcc <BSP_GYRO_Init+0xc8>)
 8002d36:	601a      	str	r2, [r3, #0]

    /* Configure Mems : data rate, power mode, full scale and axes */
    L3GD20_InitStructure.Power_Mode = L3GD20_MODE_ACTIVE;
 8002d38:	2308      	movs	r3, #8
 8002d3a:	713b      	strb	r3, [r7, #4]
    L3GD20_InitStructure.Output_DataRate = L3GD20_OUTPUT_DATARATE_1;
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	717b      	strb	r3, [r7, #5]
    L3GD20_InitStructure.Axes_Enable = L3GD20_AXES_ENABLE;
 8002d40:	2307      	movs	r3, #7
 8002d42:	71bb      	strb	r3, [r7, #6]
    L3GD20_InitStructure.Band_Width = L3GD20_BANDWIDTH_4;
 8002d44:	2330      	movs	r3, #48	@ 0x30
 8002d46:	71fb      	strb	r3, [r7, #7]
    L3GD20_InitStructure.BlockData_Update = L3GD20_BlockDataUpdate_Continous;
 8002d48:	2300      	movs	r3, #0
 8002d4a:	723b      	strb	r3, [r7, #8]
    L3GD20_InitStructure.Endianness = L3GD20_BLE_LSB;
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	727b      	strb	r3, [r7, #9]
    L3GD20_InitStructure.Full_Scale = L3GD20_FULLSCALE_500;
 8002d50:	2310      	movs	r3, #16
 8002d52:	72bb      	strb	r3, [r7, #10]

    /* Configure MEMS: data rate, power mode, full scale and axes */
    ctrl = (uint16_t)(L3GD20_InitStructure.Power_Mode | L3GD20_InitStructure.Output_DataRate | \
 8002d54:	793a      	ldrb	r2, [r7, #4]
 8002d56:	797b      	ldrb	r3, [r7, #5]
 8002d58:	4313      	orrs	r3, r2
 8002d5a:	b2da      	uxtb	r2, r3
                      L3GD20_InitStructure.Axes_Enable | L3GD20_InitStructure.Band_Width);
 8002d5c:	79bb      	ldrb	r3, [r7, #6]
    ctrl = (uint16_t)(L3GD20_InitStructure.Power_Mode | L3GD20_InitStructure.Output_DataRate | \
 8002d5e:	4313      	orrs	r3, r2
 8002d60:	b2da      	uxtb	r2, r3
                      L3GD20_InitStructure.Axes_Enable | L3GD20_InitStructure.Band_Width);
 8002d62:	79fb      	ldrb	r3, [r7, #7]
    ctrl = (uint16_t)(L3GD20_InitStructure.Power_Mode | L3GD20_InitStructure.Output_DataRate | \
 8002d64:	4313      	orrs	r3, r2
 8002d66:	b2db      	uxtb	r3, r3
 8002d68:	81bb      	strh	r3, [r7, #12]

    ctrl |= (uint16_t)((L3GD20_InitStructure.BlockData_Update | L3GD20_InitStructure.Endianness | \
 8002d6a:	7a3a      	ldrb	r2, [r7, #8]
 8002d6c:	7a7b      	ldrb	r3, [r7, #9]
 8002d6e:	4313      	orrs	r3, r2
 8002d70:	b2da      	uxtb	r2, r3
                        L3GD20_InitStructure.Full_Scale) << 8);
 8002d72:	7abb      	ldrb	r3, [r7, #10]
    ctrl |= (uint16_t)((L3GD20_InitStructure.BlockData_Update | L3GD20_InitStructure.Endianness | \
 8002d74:	4313      	orrs	r3, r2
 8002d76:	b2db      	uxtb	r3, r3
 8002d78:	021b      	lsls	r3, r3, #8
 8002d7a:	b29a      	uxth	r2, r3
 8002d7c:	89bb      	ldrh	r3, [r7, #12]
 8002d7e:	4313      	orrs	r3, r2
 8002d80:	81bb      	strh	r3, [r7, #12]

    /* Initialize component */
    GyroscopeDrv->Init(ctrl);
 8002d82:	4b13      	ldr	r3, [pc, #76]	@ (8002dd0 <BSP_GYRO_Init+0xcc>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	89ba      	ldrh	r2, [r7, #12]
 8002d8a:	4610      	mov	r0, r2
 8002d8c:	4798      	blx	r3

    L3GD20_FilterStructure.HighPassFilter_Mode_Selection = L3GD20_HPM_NORMAL_MODE_RES;
 8002d8e:	2300      	movs	r3, #0
 8002d90:	703b      	strb	r3, [r7, #0]
    L3GD20_FilterStructure.HighPassFilter_CutOff_Frequency = L3GD20_HPFCF_0;
 8002d92:	2300      	movs	r3, #0
 8002d94:	707b      	strb	r3, [r7, #1]

    ctrl = (uint8_t)((L3GD20_FilterStructure.HighPassFilter_Mode_Selection | \
 8002d96:	783a      	ldrb	r2, [r7, #0]
                      L3GD20_FilterStructure.HighPassFilter_CutOff_Frequency));
 8002d98:	787b      	ldrb	r3, [r7, #1]
    ctrl = (uint8_t)((L3GD20_FilterStructure.HighPassFilter_Mode_Selection | \
 8002d9a:	4313      	orrs	r3, r2
 8002d9c:	b2db      	uxtb	r3, r3
 8002d9e:	81bb      	strh	r3, [r7, #12]

    /* Configure component filter */
    GyroscopeDrv->FilterConfig(ctrl) ;
 8002da0:	4b0b      	ldr	r3, [pc, #44]	@ (8002dd0 <BSP_GYRO_Init+0xcc>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002da6:	89ba      	ldrh	r2, [r7, #12]
 8002da8:	b2d2      	uxtb	r2, r2
 8002daa:	4610      	mov	r0, r2
 8002dac:	4798      	blx	r3

    /* Enable component filter */
    GyroscopeDrv->FilterCmd(L3GD20_HIGHPASSFILTER_ENABLE);
 8002dae:	4b08      	ldr	r3, [pc, #32]	@ (8002dd0 <BSP_GYRO_Init+0xcc>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002db4:	2010      	movs	r0, #16
 8002db6:	4798      	blx	r3

    ret = GYRO_OK;
 8002db8:	2300      	movs	r3, #0
 8002dba:	73fb      	strb	r3, [r7, #15]
 8002dbc:	e001      	b.n	8002dc2 <BSP_GYRO_Init+0xbe>
  }
  else
  {
    ret = GYRO_ERROR;
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8002dc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	3710      	adds	r7, #16
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	bd80      	pop	{r7, pc}
 8002dcc:	20000008 	.word	0x20000008
 8002dd0:	200005cc 	.word	0x200005cc

08002dd4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b082      	sub	sp, #8
 8002dd8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002dda:	2300      	movs	r3, #0
 8002ddc:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002dde:	4b0c      	ldr	r3, [pc, #48]	@ (8002e10 <HAL_Init+0x3c>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4a0b      	ldr	r2, [pc, #44]	@ (8002e10 <HAL_Init+0x3c>)
 8002de4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002de8:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002dea:	2003      	movs	r0, #3
 8002dec:	f000 f962 	bl	80030b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002df0:	2000      	movs	r0, #0
 8002df2:	f000 f80f 	bl	8002e14 <HAL_InitTick>
 8002df6:	4603      	mov	r3, r0
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d002      	beq.n	8002e02 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8002dfc:	2301      	movs	r3, #1
 8002dfe:	71fb      	strb	r3, [r7, #7]
 8002e00:	e001      	b.n	8002e06 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002e02:	f7fe fcbd 	bl	8001780 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002e06:	79fb      	ldrb	r3, [r7, #7]
}
 8002e08:	4618      	mov	r0, r3
 8002e0a:	3708      	adds	r7, #8
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	bd80      	pop	{r7, pc}
 8002e10:	40022000 	.word	0x40022000

08002e14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b084      	sub	sp, #16
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002e20:	4b17      	ldr	r3, [pc, #92]	@ (8002e80 <HAL_InitTick+0x6c>)
 8002e22:	781b      	ldrb	r3, [r3, #0]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d023      	beq.n	8002e70 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002e28:	4b16      	ldr	r3, [pc, #88]	@ (8002e84 <HAL_InitTick+0x70>)
 8002e2a:	681a      	ldr	r2, [r3, #0]
 8002e2c:	4b14      	ldr	r3, [pc, #80]	@ (8002e80 <HAL_InitTick+0x6c>)
 8002e2e:	781b      	ldrb	r3, [r3, #0]
 8002e30:	4619      	mov	r1, r3
 8002e32:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002e36:	fbb3 f3f1 	udiv	r3, r3, r1
 8002e3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e3e:	4618      	mov	r0, r3
 8002e40:	f000 f96d 	bl	800311e <HAL_SYSTICK_Config>
 8002e44:	4603      	mov	r3, r0
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d10f      	bne.n	8002e6a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2b0f      	cmp	r3, #15
 8002e4e:	d809      	bhi.n	8002e64 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002e50:	2200      	movs	r2, #0
 8002e52:	6879      	ldr	r1, [r7, #4]
 8002e54:	f04f 30ff 	mov.w	r0, #4294967295
 8002e58:	f000 f937 	bl	80030ca <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002e5c:	4a0a      	ldr	r2, [pc, #40]	@ (8002e88 <HAL_InitTick+0x74>)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6013      	str	r3, [r2, #0]
 8002e62:	e007      	b.n	8002e74 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002e64:	2301      	movs	r3, #1
 8002e66:	73fb      	strb	r3, [r7, #15]
 8002e68:	e004      	b.n	8002e74 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	73fb      	strb	r3, [r7, #15]
 8002e6e:	e001      	b.n	8002e74 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002e70:	2301      	movs	r3, #1
 8002e72:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002e74:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e76:	4618      	mov	r0, r3
 8002e78:	3710      	adds	r7, #16
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bd80      	pop	{r7, pc}
 8002e7e:	bf00      	nop
 8002e80:	200000a8 	.word	0x200000a8
 8002e84:	20000004 	.word	0x20000004
 8002e88:	200000a4 	.word	0x200000a4

08002e8c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002e90:	4b06      	ldr	r3, [pc, #24]	@ (8002eac <HAL_IncTick+0x20>)
 8002e92:	781b      	ldrb	r3, [r3, #0]
 8002e94:	461a      	mov	r2, r3
 8002e96:	4b06      	ldr	r3, [pc, #24]	@ (8002eb0 <HAL_IncTick+0x24>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4413      	add	r3, r2
 8002e9c:	4a04      	ldr	r2, [pc, #16]	@ (8002eb0 <HAL_IncTick+0x24>)
 8002e9e:	6013      	str	r3, [r2, #0]
}
 8002ea0:	bf00      	nop
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea8:	4770      	bx	lr
 8002eaa:	bf00      	nop
 8002eac:	200000a8 	.word	0x200000a8
 8002eb0:	200005d0 	.word	0x200005d0

08002eb4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	af00      	add	r7, sp, #0
  return uwTick;
 8002eb8:	4b03      	ldr	r3, [pc, #12]	@ (8002ec8 <HAL_GetTick+0x14>)
 8002eba:	681b      	ldr	r3, [r3, #0]
}
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec4:	4770      	bx	lr
 8002ec6:	bf00      	nop
 8002ec8:	200005d0 	.word	0x200005d0

08002ecc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b084      	sub	sp, #16
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002ed4:	f7ff ffee 	bl	8002eb4 <HAL_GetTick>
 8002ed8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ee4:	d005      	beq.n	8002ef2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002ee6:	4b0a      	ldr	r3, [pc, #40]	@ (8002f10 <HAL_Delay+0x44>)
 8002ee8:	781b      	ldrb	r3, [r3, #0]
 8002eea:	461a      	mov	r2, r3
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	4413      	add	r3, r2
 8002ef0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002ef2:	bf00      	nop
 8002ef4:	f7ff ffde 	bl	8002eb4 <HAL_GetTick>
 8002ef8:	4602      	mov	r2, r0
 8002efa:	68bb      	ldr	r3, [r7, #8]
 8002efc:	1ad3      	subs	r3, r2, r3
 8002efe:	68fa      	ldr	r2, [r7, #12]
 8002f00:	429a      	cmp	r2, r3
 8002f02:	d8f7      	bhi.n	8002ef4 <HAL_Delay+0x28>
  {
  }
}
 8002f04:	bf00      	nop
 8002f06:	bf00      	nop
 8002f08:	3710      	adds	r7, #16
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	bd80      	pop	{r7, pc}
 8002f0e:	bf00      	nop
 8002f10:	200000a8 	.word	0x200000a8

08002f14 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f14:	b480      	push	{r7}
 8002f16:	b085      	sub	sp, #20
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	f003 0307 	and.w	r3, r3, #7
 8002f22:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f24:	4b0c      	ldr	r3, [pc, #48]	@ (8002f58 <__NVIC_SetPriorityGrouping+0x44>)
 8002f26:	68db      	ldr	r3, [r3, #12]
 8002f28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f2a:	68ba      	ldr	r2, [r7, #8]
 8002f2c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002f30:	4013      	ands	r3, r2
 8002f32:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f38:	68bb      	ldr	r3, [r7, #8]
 8002f3a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002f3c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002f40:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002f44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002f46:	4a04      	ldr	r2, [pc, #16]	@ (8002f58 <__NVIC_SetPriorityGrouping+0x44>)
 8002f48:	68bb      	ldr	r3, [r7, #8]
 8002f4a:	60d3      	str	r3, [r2, #12]
}
 8002f4c:	bf00      	nop
 8002f4e:	3714      	adds	r7, #20
 8002f50:	46bd      	mov	sp, r7
 8002f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f56:	4770      	bx	lr
 8002f58:	e000ed00 	.word	0xe000ed00

08002f5c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f60:	4b04      	ldr	r3, [pc, #16]	@ (8002f74 <__NVIC_GetPriorityGrouping+0x18>)
 8002f62:	68db      	ldr	r3, [r3, #12]
 8002f64:	0a1b      	lsrs	r3, r3, #8
 8002f66:	f003 0307 	and.w	r3, r3, #7
}
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f72:	4770      	bx	lr
 8002f74:	e000ed00 	.word	0xe000ed00

08002f78 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f78:	b480      	push	{r7}
 8002f7a:	b083      	sub	sp, #12
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	4603      	mov	r3, r0
 8002f80:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	db0b      	blt.n	8002fa2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f8a:	79fb      	ldrb	r3, [r7, #7]
 8002f8c:	f003 021f 	and.w	r2, r3, #31
 8002f90:	4907      	ldr	r1, [pc, #28]	@ (8002fb0 <__NVIC_EnableIRQ+0x38>)
 8002f92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f96:	095b      	lsrs	r3, r3, #5
 8002f98:	2001      	movs	r0, #1
 8002f9a:	fa00 f202 	lsl.w	r2, r0, r2
 8002f9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002fa2:	bf00      	nop
 8002fa4:	370c      	adds	r7, #12
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fac:	4770      	bx	lr
 8002fae:	bf00      	nop
 8002fb0:	e000e100 	.word	0xe000e100

08002fb4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	b083      	sub	sp, #12
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	4603      	mov	r3, r0
 8002fbc:	6039      	str	r1, [r7, #0]
 8002fbe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002fc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	db0a      	blt.n	8002fde <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	b2da      	uxtb	r2, r3
 8002fcc:	490c      	ldr	r1, [pc, #48]	@ (8003000 <__NVIC_SetPriority+0x4c>)
 8002fce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fd2:	0112      	lsls	r2, r2, #4
 8002fd4:	b2d2      	uxtb	r2, r2
 8002fd6:	440b      	add	r3, r1
 8002fd8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002fdc:	e00a      	b.n	8002ff4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	b2da      	uxtb	r2, r3
 8002fe2:	4908      	ldr	r1, [pc, #32]	@ (8003004 <__NVIC_SetPriority+0x50>)
 8002fe4:	79fb      	ldrb	r3, [r7, #7]
 8002fe6:	f003 030f 	and.w	r3, r3, #15
 8002fea:	3b04      	subs	r3, #4
 8002fec:	0112      	lsls	r2, r2, #4
 8002fee:	b2d2      	uxtb	r2, r2
 8002ff0:	440b      	add	r3, r1
 8002ff2:	761a      	strb	r2, [r3, #24]
}
 8002ff4:	bf00      	nop
 8002ff6:	370c      	adds	r7, #12
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffe:	4770      	bx	lr
 8003000:	e000e100 	.word	0xe000e100
 8003004:	e000ed00 	.word	0xe000ed00

08003008 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003008:	b480      	push	{r7}
 800300a:	b089      	sub	sp, #36	@ 0x24
 800300c:	af00      	add	r7, sp, #0
 800300e:	60f8      	str	r0, [r7, #12]
 8003010:	60b9      	str	r1, [r7, #8]
 8003012:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	f003 0307 	and.w	r3, r3, #7
 800301a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800301c:	69fb      	ldr	r3, [r7, #28]
 800301e:	f1c3 0307 	rsb	r3, r3, #7
 8003022:	2b04      	cmp	r3, #4
 8003024:	bf28      	it	cs
 8003026:	2304      	movcs	r3, #4
 8003028:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800302a:	69fb      	ldr	r3, [r7, #28]
 800302c:	3304      	adds	r3, #4
 800302e:	2b06      	cmp	r3, #6
 8003030:	d902      	bls.n	8003038 <NVIC_EncodePriority+0x30>
 8003032:	69fb      	ldr	r3, [r7, #28]
 8003034:	3b03      	subs	r3, #3
 8003036:	e000      	b.n	800303a <NVIC_EncodePriority+0x32>
 8003038:	2300      	movs	r3, #0
 800303a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800303c:	f04f 32ff 	mov.w	r2, #4294967295
 8003040:	69bb      	ldr	r3, [r7, #24]
 8003042:	fa02 f303 	lsl.w	r3, r2, r3
 8003046:	43da      	mvns	r2, r3
 8003048:	68bb      	ldr	r3, [r7, #8]
 800304a:	401a      	ands	r2, r3
 800304c:	697b      	ldr	r3, [r7, #20]
 800304e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003050:	f04f 31ff 	mov.w	r1, #4294967295
 8003054:	697b      	ldr	r3, [r7, #20]
 8003056:	fa01 f303 	lsl.w	r3, r1, r3
 800305a:	43d9      	mvns	r1, r3
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003060:	4313      	orrs	r3, r2
         );
}
 8003062:	4618      	mov	r0, r3
 8003064:	3724      	adds	r7, #36	@ 0x24
 8003066:	46bd      	mov	sp, r7
 8003068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306c:	4770      	bx	lr
	...

08003070 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b082      	sub	sp, #8
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	3b01      	subs	r3, #1
 800307c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003080:	d301      	bcc.n	8003086 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003082:	2301      	movs	r3, #1
 8003084:	e00f      	b.n	80030a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003086:	4a0a      	ldr	r2, [pc, #40]	@ (80030b0 <SysTick_Config+0x40>)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	3b01      	subs	r3, #1
 800308c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800308e:	210f      	movs	r1, #15
 8003090:	f04f 30ff 	mov.w	r0, #4294967295
 8003094:	f7ff ff8e 	bl	8002fb4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003098:	4b05      	ldr	r3, [pc, #20]	@ (80030b0 <SysTick_Config+0x40>)
 800309a:	2200      	movs	r2, #0
 800309c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800309e:	4b04      	ldr	r3, [pc, #16]	@ (80030b0 <SysTick_Config+0x40>)
 80030a0:	2207      	movs	r2, #7
 80030a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80030a4:	2300      	movs	r3, #0
}
 80030a6:	4618      	mov	r0, r3
 80030a8:	3708      	adds	r7, #8
 80030aa:	46bd      	mov	sp, r7
 80030ac:	bd80      	pop	{r7, pc}
 80030ae:	bf00      	nop
 80030b0:	e000e010 	.word	0xe000e010

080030b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b082      	sub	sp, #8
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80030bc:	6878      	ldr	r0, [r7, #4]
 80030be:	f7ff ff29 	bl	8002f14 <__NVIC_SetPriorityGrouping>
}
 80030c2:	bf00      	nop
 80030c4:	3708      	adds	r7, #8
 80030c6:	46bd      	mov	sp, r7
 80030c8:	bd80      	pop	{r7, pc}

080030ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80030ca:	b580      	push	{r7, lr}
 80030cc:	b086      	sub	sp, #24
 80030ce:	af00      	add	r7, sp, #0
 80030d0:	4603      	mov	r3, r0
 80030d2:	60b9      	str	r1, [r7, #8]
 80030d4:	607a      	str	r2, [r7, #4]
 80030d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80030d8:	2300      	movs	r3, #0
 80030da:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80030dc:	f7ff ff3e 	bl	8002f5c <__NVIC_GetPriorityGrouping>
 80030e0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80030e2:	687a      	ldr	r2, [r7, #4]
 80030e4:	68b9      	ldr	r1, [r7, #8]
 80030e6:	6978      	ldr	r0, [r7, #20]
 80030e8:	f7ff ff8e 	bl	8003008 <NVIC_EncodePriority>
 80030ec:	4602      	mov	r2, r0
 80030ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80030f2:	4611      	mov	r1, r2
 80030f4:	4618      	mov	r0, r3
 80030f6:	f7ff ff5d 	bl	8002fb4 <__NVIC_SetPriority>
}
 80030fa:	bf00      	nop
 80030fc:	3718      	adds	r7, #24
 80030fe:	46bd      	mov	sp, r7
 8003100:	bd80      	pop	{r7, pc}

08003102 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003102:	b580      	push	{r7, lr}
 8003104:	b082      	sub	sp, #8
 8003106:	af00      	add	r7, sp, #0
 8003108:	4603      	mov	r3, r0
 800310a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800310c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003110:	4618      	mov	r0, r3
 8003112:	f7ff ff31 	bl	8002f78 <__NVIC_EnableIRQ>
}
 8003116:	bf00      	nop
 8003118:	3708      	adds	r7, #8
 800311a:	46bd      	mov	sp, r7
 800311c:	bd80      	pop	{r7, pc}

0800311e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800311e:	b580      	push	{r7, lr}
 8003120:	b082      	sub	sp, #8
 8003122:	af00      	add	r7, sp, #0
 8003124:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003126:	6878      	ldr	r0, [r7, #4]
 8003128:	f7ff ffa2 	bl	8003070 <SysTick_Config>
 800312c:	4603      	mov	r3, r0
}
 800312e:	4618      	mov	r0, r3
 8003130:	3708      	adds	r7, #8
 8003132:	46bd      	mov	sp, r7
 8003134:	bd80      	pop	{r7, pc}
	...

08003138 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003138:	b480      	push	{r7}
 800313a:	b087      	sub	sp, #28
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
 8003140:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003142:	2300      	movs	r3, #0
 8003144:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003146:	e17f      	b.n	8003448 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	681a      	ldr	r2, [r3, #0]
 800314c:	2101      	movs	r1, #1
 800314e:	697b      	ldr	r3, [r7, #20]
 8003150:	fa01 f303 	lsl.w	r3, r1, r3
 8003154:	4013      	ands	r3, r2
 8003156:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	2b00      	cmp	r3, #0
 800315c:	f000 8171 	beq.w	8003442 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	685b      	ldr	r3, [r3, #4]
 8003164:	2b01      	cmp	r3, #1
 8003166:	d00b      	beq.n	8003180 <HAL_GPIO_Init+0x48>
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	685b      	ldr	r3, [r3, #4]
 800316c:	2b02      	cmp	r3, #2
 800316e:	d007      	beq.n	8003180 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003174:	2b11      	cmp	r3, #17
 8003176:	d003      	beq.n	8003180 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	685b      	ldr	r3, [r3, #4]
 800317c:	2b12      	cmp	r3, #18
 800317e:	d130      	bne.n	80031e2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	689b      	ldr	r3, [r3, #8]
 8003184:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003186:	697b      	ldr	r3, [r7, #20]
 8003188:	005b      	lsls	r3, r3, #1
 800318a:	2203      	movs	r2, #3
 800318c:	fa02 f303 	lsl.w	r3, r2, r3
 8003190:	43db      	mvns	r3, r3
 8003192:	693a      	ldr	r2, [r7, #16]
 8003194:	4013      	ands	r3, r2
 8003196:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	68da      	ldr	r2, [r3, #12]
 800319c:	697b      	ldr	r3, [r7, #20]
 800319e:	005b      	lsls	r3, r3, #1
 80031a0:	fa02 f303 	lsl.w	r3, r2, r3
 80031a4:	693a      	ldr	r2, [r7, #16]
 80031a6:	4313      	orrs	r3, r2
 80031a8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	693a      	ldr	r2, [r7, #16]
 80031ae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	685b      	ldr	r3, [r3, #4]
 80031b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80031b6:	2201      	movs	r2, #1
 80031b8:	697b      	ldr	r3, [r7, #20]
 80031ba:	fa02 f303 	lsl.w	r3, r2, r3
 80031be:	43db      	mvns	r3, r3
 80031c0:	693a      	ldr	r2, [r7, #16]
 80031c2:	4013      	ands	r3, r2
 80031c4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	091b      	lsrs	r3, r3, #4
 80031cc:	f003 0201 	and.w	r2, r3, #1
 80031d0:	697b      	ldr	r3, [r7, #20]
 80031d2:	fa02 f303 	lsl.w	r3, r2, r3
 80031d6:	693a      	ldr	r2, [r7, #16]
 80031d8:	4313      	orrs	r3, r2
 80031da:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	693a      	ldr	r2, [r7, #16]
 80031e0:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	685b      	ldr	r3, [r3, #4]
 80031e6:	f003 0303 	and.w	r3, r3, #3
 80031ea:	2b03      	cmp	r3, #3
 80031ec:	d118      	bne.n	8003220 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031f2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80031f4:	2201      	movs	r2, #1
 80031f6:	697b      	ldr	r3, [r7, #20]
 80031f8:	fa02 f303 	lsl.w	r3, r2, r3
 80031fc:	43db      	mvns	r3, r3
 80031fe:	693a      	ldr	r2, [r7, #16]
 8003200:	4013      	ands	r3, r2
 8003202:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	685b      	ldr	r3, [r3, #4]
 8003208:	08db      	lsrs	r3, r3, #3
 800320a:	f003 0201 	and.w	r2, r3, #1
 800320e:	697b      	ldr	r3, [r7, #20]
 8003210:	fa02 f303 	lsl.w	r3, r2, r3
 8003214:	693a      	ldr	r2, [r7, #16]
 8003216:	4313      	orrs	r3, r2
 8003218:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	693a      	ldr	r2, [r7, #16]
 800321e:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	68db      	ldr	r3, [r3, #12]
 8003224:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003226:	697b      	ldr	r3, [r7, #20]
 8003228:	005b      	lsls	r3, r3, #1
 800322a:	2203      	movs	r2, #3
 800322c:	fa02 f303 	lsl.w	r3, r2, r3
 8003230:	43db      	mvns	r3, r3
 8003232:	693a      	ldr	r2, [r7, #16]
 8003234:	4013      	ands	r3, r2
 8003236:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	689a      	ldr	r2, [r3, #8]
 800323c:	697b      	ldr	r3, [r7, #20]
 800323e:	005b      	lsls	r3, r3, #1
 8003240:	fa02 f303 	lsl.w	r3, r2, r3
 8003244:	693a      	ldr	r2, [r7, #16]
 8003246:	4313      	orrs	r3, r2
 8003248:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	693a      	ldr	r2, [r7, #16]
 800324e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	685b      	ldr	r3, [r3, #4]
 8003254:	2b02      	cmp	r3, #2
 8003256:	d003      	beq.n	8003260 <HAL_GPIO_Init+0x128>
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	2b12      	cmp	r3, #18
 800325e:	d123      	bne.n	80032a8 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003260:	697b      	ldr	r3, [r7, #20]
 8003262:	08da      	lsrs	r2, r3, #3
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	3208      	adds	r2, #8
 8003268:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800326c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800326e:	697b      	ldr	r3, [r7, #20]
 8003270:	f003 0307 	and.w	r3, r3, #7
 8003274:	009b      	lsls	r3, r3, #2
 8003276:	220f      	movs	r2, #15
 8003278:	fa02 f303 	lsl.w	r3, r2, r3
 800327c:	43db      	mvns	r3, r3
 800327e:	693a      	ldr	r2, [r7, #16]
 8003280:	4013      	ands	r3, r2
 8003282:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	691a      	ldr	r2, [r3, #16]
 8003288:	697b      	ldr	r3, [r7, #20]
 800328a:	f003 0307 	and.w	r3, r3, #7
 800328e:	009b      	lsls	r3, r3, #2
 8003290:	fa02 f303 	lsl.w	r3, r2, r3
 8003294:	693a      	ldr	r2, [r7, #16]
 8003296:	4313      	orrs	r3, r2
 8003298:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800329a:	697b      	ldr	r3, [r7, #20]
 800329c:	08da      	lsrs	r2, r3, #3
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	3208      	adds	r2, #8
 80032a2:	6939      	ldr	r1, [r7, #16]
 80032a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80032ae:	697b      	ldr	r3, [r7, #20]
 80032b0:	005b      	lsls	r3, r3, #1
 80032b2:	2203      	movs	r2, #3
 80032b4:	fa02 f303 	lsl.w	r3, r2, r3
 80032b8:	43db      	mvns	r3, r3
 80032ba:	693a      	ldr	r2, [r7, #16]
 80032bc:	4013      	ands	r3, r2
 80032be:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	685b      	ldr	r3, [r3, #4]
 80032c4:	f003 0203 	and.w	r2, r3, #3
 80032c8:	697b      	ldr	r3, [r7, #20]
 80032ca:	005b      	lsls	r3, r3, #1
 80032cc:	fa02 f303 	lsl.w	r3, r2, r3
 80032d0:	693a      	ldr	r2, [r7, #16]
 80032d2:	4313      	orrs	r3, r2
 80032d4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	693a      	ldr	r2, [r7, #16]
 80032da:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	f000 80ac 	beq.w	8003442 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80032ea:	4b5f      	ldr	r3, [pc, #380]	@ (8003468 <HAL_GPIO_Init+0x330>)
 80032ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80032ee:	4a5e      	ldr	r2, [pc, #376]	@ (8003468 <HAL_GPIO_Init+0x330>)
 80032f0:	f043 0301 	orr.w	r3, r3, #1
 80032f4:	6613      	str	r3, [r2, #96]	@ 0x60
 80032f6:	4b5c      	ldr	r3, [pc, #368]	@ (8003468 <HAL_GPIO_Init+0x330>)
 80032f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80032fa:	f003 0301 	and.w	r3, r3, #1
 80032fe:	60bb      	str	r3, [r7, #8]
 8003300:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003302:	4a5a      	ldr	r2, [pc, #360]	@ (800346c <HAL_GPIO_Init+0x334>)
 8003304:	697b      	ldr	r3, [r7, #20]
 8003306:	089b      	lsrs	r3, r3, #2
 8003308:	3302      	adds	r3, #2
 800330a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800330e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003310:	697b      	ldr	r3, [r7, #20]
 8003312:	f003 0303 	and.w	r3, r3, #3
 8003316:	009b      	lsls	r3, r3, #2
 8003318:	220f      	movs	r2, #15
 800331a:	fa02 f303 	lsl.w	r3, r2, r3
 800331e:	43db      	mvns	r3, r3
 8003320:	693a      	ldr	r2, [r7, #16]
 8003322:	4013      	ands	r3, r2
 8003324:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800332c:	d025      	beq.n	800337a <HAL_GPIO_Init+0x242>
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	4a4f      	ldr	r2, [pc, #316]	@ (8003470 <HAL_GPIO_Init+0x338>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d01f      	beq.n	8003376 <HAL_GPIO_Init+0x23e>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	4a4e      	ldr	r2, [pc, #312]	@ (8003474 <HAL_GPIO_Init+0x33c>)
 800333a:	4293      	cmp	r3, r2
 800333c:	d019      	beq.n	8003372 <HAL_GPIO_Init+0x23a>
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	4a4d      	ldr	r2, [pc, #308]	@ (8003478 <HAL_GPIO_Init+0x340>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d013      	beq.n	800336e <HAL_GPIO_Init+0x236>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	4a4c      	ldr	r2, [pc, #304]	@ (800347c <HAL_GPIO_Init+0x344>)
 800334a:	4293      	cmp	r3, r2
 800334c:	d00d      	beq.n	800336a <HAL_GPIO_Init+0x232>
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	4a4b      	ldr	r2, [pc, #300]	@ (8003480 <HAL_GPIO_Init+0x348>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d007      	beq.n	8003366 <HAL_GPIO_Init+0x22e>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	4a4a      	ldr	r2, [pc, #296]	@ (8003484 <HAL_GPIO_Init+0x34c>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d101      	bne.n	8003362 <HAL_GPIO_Init+0x22a>
 800335e:	2306      	movs	r3, #6
 8003360:	e00c      	b.n	800337c <HAL_GPIO_Init+0x244>
 8003362:	2307      	movs	r3, #7
 8003364:	e00a      	b.n	800337c <HAL_GPIO_Init+0x244>
 8003366:	2305      	movs	r3, #5
 8003368:	e008      	b.n	800337c <HAL_GPIO_Init+0x244>
 800336a:	2304      	movs	r3, #4
 800336c:	e006      	b.n	800337c <HAL_GPIO_Init+0x244>
 800336e:	2303      	movs	r3, #3
 8003370:	e004      	b.n	800337c <HAL_GPIO_Init+0x244>
 8003372:	2302      	movs	r3, #2
 8003374:	e002      	b.n	800337c <HAL_GPIO_Init+0x244>
 8003376:	2301      	movs	r3, #1
 8003378:	e000      	b.n	800337c <HAL_GPIO_Init+0x244>
 800337a:	2300      	movs	r3, #0
 800337c:	697a      	ldr	r2, [r7, #20]
 800337e:	f002 0203 	and.w	r2, r2, #3
 8003382:	0092      	lsls	r2, r2, #2
 8003384:	4093      	lsls	r3, r2
 8003386:	693a      	ldr	r2, [r7, #16]
 8003388:	4313      	orrs	r3, r2
 800338a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800338c:	4937      	ldr	r1, [pc, #220]	@ (800346c <HAL_GPIO_Init+0x334>)
 800338e:	697b      	ldr	r3, [r7, #20]
 8003390:	089b      	lsrs	r3, r3, #2
 8003392:	3302      	adds	r3, #2
 8003394:	693a      	ldr	r2, [r7, #16]
 8003396:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800339a:	4b3b      	ldr	r3, [pc, #236]	@ (8003488 <HAL_GPIO_Init+0x350>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	43db      	mvns	r3, r3
 80033a4:	693a      	ldr	r2, [r7, #16]
 80033a6:	4013      	ands	r3, r2
 80033a8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	685b      	ldr	r3, [r3, #4]
 80033ae:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d003      	beq.n	80033be <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80033b6:	693a      	ldr	r2, [r7, #16]
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	4313      	orrs	r3, r2
 80033bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80033be:	4a32      	ldr	r2, [pc, #200]	@ (8003488 <HAL_GPIO_Init+0x350>)
 80033c0:	693b      	ldr	r3, [r7, #16]
 80033c2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80033c4:	4b30      	ldr	r3, [pc, #192]	@ (8003488 <HAL_GPIO_Init+0x350>)
 80033c6:	685b      	ldr	r3, [r3, #4]
 80033c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	43db      	mvns	r3, r3
 80033ce:	693a      	ldr	r2, [r7, #16]
 80033d0:	4013      	ands	r3, r2
 80033d2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d003      	beq.n	80033e8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80033e0:	693a      	ldr	r2, [r7, #16]
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	4313      	orrs	r3, r2
 80033e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80033e8:	4a27      	ldr	r2, [pc, #156]	@ (8003488 <HAL_GPIO_Init+0x350>)
 80033ea:	693b      	ldr	r3, [r7, #16]
 80033ec:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80033ee:	4b26      	ldr	r3, [pc, #152]	@ (8003488 <HAL_GPIO_Init+0x350>)
 80033f0:	689b      	ldr	r3, [r3, #8]
 80033f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	43db      	mvns	r3, r3
 80033f8:	693a      	ldr	r2, [r7, #16]
 80033fa:	4013      	ands	r3, r2
 80033fc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003406:	2b00      	cmp	r3, #0
 8003408:	d003      	beq.n	8003412 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800340a:	693a      	ldr	r2, [r7, #16]
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	4313      	orrs	r3, r2
 8003410:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003412:	4a1d      	ldr	r2, [pc, #116]	@ (8003488 <HAL_GPIO_Init+0x350>)
 8003414:	693b      	ldr	r3, [r7, #16]
 8003416:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003418:	4b1b      	ldr	r3, [pc, #108]	@ (8003488 <HAL_GPIO_Init+0x350>)
 800341a:	68db      	ldr	r3, [r3, #12]
 800341c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	43db      	mvns	r3, r3
 8003422:	693a      	ldr	r2, [r7, #16]
 8003424:	4013      	ands	r3, r2
 8003426:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003430:	2b00      	cmp	r3, #0
 8003432:	d003      	beq.n	800343c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003434:	693a      	ldr	r2, [r7, #16]
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	4313      	orrs	r3, r2
 800343a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800343c:	4a12      	ldr	r2, [pc, #72]	@ (8003488 <HAL_GPIO_Init+0x350>)
 800343e:	693b      	ldr	r3, [r7, #16]
 8003440:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8003442:	697b      	ldr	r3, [r7, #20]
 8003444:	3301      	adds	r3, #1
 8003446:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	681a      	ldr	r2, [r3, #0]
 800344c:	697b      	ldr	r3, [r7, #20]
 800344e:	fa22 f303 	lsr.w	r3, r2, r3
 8003452:	2b00      	cmp	r3, #0
 8003454:	f47f ae78 	bne.w	8003148 <HAL_GPIO_Init+0x10>
  }
}
 8003458:	bf00      	nop
 800345a:	bf00      	nop
 800345c:	371c      	adds	r7, #28
 800345e:	46bd      	mov	sp, r7
 8003460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003464:	4770      	bx	lr
 8003466:	bf00      	nop
 8003468:	40021000 	.word	0x40021000
 800346c:	40010000 	.word	0x40010000
 8003470:	48000400 	.word	0x48000400
 8003474:	48000800 	.word	0x48000800
 8003478:	48000c00 	.word	0x48000c00
 800347c:	48001000 	.word	0x48001000
 8003480:	48001400 	.word	0x48001400
 8003484:	48001800 	.word	0x48001800
 8003488:	40010400 	.word	0x40010400

0800348c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800348c:	b480      	push	{r7}
 800348e:	b085      	sub	sp, #20
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
 8003494:	460b      	mov	r3, r1
 8003496:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	691a      	ldr	r2, [r3, #16]
 800349c:	887b      	ldrh	r3, [r7, #2]
 800349e:	4013      	ands	r3, r2
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d002      	beq.n	80034aa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80034a4:	2301      	movs	r3, #1
 80034a6:	73fb      	strb	r3, [r7, #15]
 80034a8:	e001      	b.n	80034ae <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80034aa:	2300      	movs	r3, #0
 80034ac:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80034ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80034b0:	4618      	mov	r0, r3
 80034b2:	3714      	adds	r7, #20
 80034b4:	46bd      	mov	sp, r7
 80034b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ba:	4770      	bx	lr

080034bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80034bc:	b480      	push	{r7}
 80034be:	b083      	sub	sp, #12
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
 80034c4:	460b      	mov	r3, r1
 80034c6:	807b      	strh	r3, [r7, #2]
 80034c8:	4613      	mov	r3, r2
 80034ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80034cc:	787b      	ldrb	r3, [r7, #1]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d003      	beq.n	80034da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80034d2:	887a      	ldrh	r2, [r7, #2]
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80034d8:	e002      	b.n	80034e0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80034da:	887a      	ldrh	r2, [r7, #2]
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80034e0:	bf00      	nop
 80034e2:	370c      	adds	r7, #12
 80034e4:	46bd      	mov	sp, r7
 80034e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ea:	4770      	bx	lr

080034ec <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80034ec:	b480      	push	{r7}
 80034ee:	b085      	sub	sp, #20
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
 80034f4:	460b      	mov	r3, r1
 80034f6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	695b      	ldr	r3, [r3, #20]
 80034fc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80034fe:	887a      	ldrh	r2, [r7, #2]
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	4013      	ands	r3, r2
 8003504:	041a      	lsls	r2, r3, #16
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	43d9      	mvns	r1, r3
 800350a:	887b      	ldrh	r3, [r7, #2]
 800350c:	400b      	ands	r3, r1
 800350e:	431a      	orrs	r2, r3
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	619a      	str	r2, [r3, #24]
}
 8003514:	bf00      	nop
 8003516:	3714      	adds	r7, #20
 8003518:	46bd      	mov	sp, r7
 800351a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351e:	4770      	bx	lr

08003520 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003520:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003522:	b08f      	sub	sp, #60	@ 0x3c
 8003524:	af0a      	add	r7, sp, #40	@ 0x28
 8003526:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2b00      	cmp	r3, #0
 800352c:	d101      	bne.n	8003532 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800352e:	2301      	movs	r3, #1
 8003530:	e116      	b.n	8003760 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	f893 33bd 	ldrb.w	r3, [r3, #957]	@ 0x3bd
 800353e:	b2db      	uxtb	r3, r3
 8003540:	2b00      	cmp	r3, #0
 8003542:	d106      	bne.n	8003552 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2200      	movs	r2, #0
 8003548:	f883 23bc 	strb.w	r2, [r3, #956]	@ 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800354c:	6878      	ldr	r0, [r7, #4]
 800354e:	f006 f93f 	bl	80097d0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2203      	movs	r2, #3
 8003556:	f883 23bd 	strb.w	r2, [r3, #957]	@ 0x3bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800355a:	68bb      	ldr	r3, [r7, #8]
 800355c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800355e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003562:	2b00      	cmp	r3, #0
 8003564:	d102      	bne.n	800356c <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2200      	movs	r2, #0
 800356a:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4618      	mov	r0, r3
 8003572:	f003 fbc0 	bl	8006cf6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	603b      	str	r3, [r7, #0]
 800357c:	687e      	ldr	r6, [r7, #4]
 800357e:	466d      	mov	r5, sp
 8003580:	f106 0410 	add.w	r4, r6, #16
 8003584:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003586:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003588:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800358a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800358c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003590:	e885 0003 	stmia.w	r5, {r0, r1}
 8003594:	1d33      	adds	r3, r6, #4
 8003596:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003598:	6838      	ldr	r0, [r7, #0]
 800359a:	f003 faad 	bl	8006af8 <USB_CoreInit>
 800359e:	4603      	mov	r3, r0
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d005      	beq.n	80035b0 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2202      	movs	r2, #2
 80035a8:	f883 23bd 	strb.w	r2, [r3, #957]	@ 0x3bd
    return HAL_ERROR;
 80035ac:	2301      	movs	r3, #1
 80035ae:	e0d7      	b.n	8003760 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	2100      	movs	r1, #0
 80035b6:	4618      	mov	r0, r3
 80035b8:	f003 fbae 	bl	8006d18 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80035bc:	2300      	movs	r3, #0
 80035be:	73fb      	strb	r3, [r7, #15]
 80035c0:	e04a      	b.n	8003658 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80035c2:	7bfa      	ldrb	r2, [r7, #15]
 80035c4:	6879      	ldr	r1, [r7, #4]
 80035c6:	4613      	mov	r3, r2
 80035c8:	00db      	lsls	r3, r3, #3
 80035ca:	1a9b      	subs	r3, r3, r2
 80035cc:	009b      	lsls	r3, r3, #2
 80035ce:	440b      	add	r3, r1
 80035d0:	333d      	adds	r3, #61	@ 0x3d
 80035d2:	2201      	movs	r2, #1
 80035d4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80035d6:	7bfa      	ldrb	r2, [r7, #15]
 80035d8:	6879      	ldr	r1, [r7, #4]
 80035da:	4613      	mov	r3, r2
 80035dc:	00db      	lsls	r3, r3, #3
 80035de:	1a9b      	subs	r3, r3, r2
 80035e0:	009b      	lsls	r3, r3, #2
 80035e2:	440b      	add	r3, r1
 80035e4:	333c      	adds	r3, #60	@ 0x3c
 80035e6:	7bfa      	ldrb	r2, [r7, #15]
 80035e8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80035ea:	7bfa      	ldrb	r2, [r7, #15]
 80035ec:	7bfb      	ldrb	r3, [r7, #15]
 80035ee:	b298      	uxth	r0, r3
 80035f0:	6879      	ldr	r1, [r7, #4]
 80035f2:	4613      	mov	r3, r2
 80035f4:	00db      	lsls	r3, r3, #3
 80035f6:	1a9b      	subs	r3, r3, r2
 80035f8:	009b      	lsls	r3, r3, #2
 80035fa:	440b      	add	r3, r1
 80035fc:	3342      	adds	r3, #66	@ 0x42
 80035fe:	4602      	mov	r2, r0
 8003600:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003602:	7bfa      	ldrb	r2, [r7, #15]
 8003604:	6879      	ldr	r1, [r7, #4]
 8003606:	4613      	mov	r3, r2
 8003608:	00db      	lsls	r3, r3, #3
 800360a:	1a9b      	subs	r3, r3, r2
 800360c:	009b      	lsls	r3, r3, #2
 800360e:	440b      	add	r3, r1
 8003610:	333f      	adds	r3, #63	@ 0x3f
 8003612:	2200      	movs	r2, #0
 8003614:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003616:	7bfa      	ldrb	r2, [r7, #15]
 8003618:	6879      	ldr	r1, [r7, #4]
 800361a:	4613      	mov	r3, r2
 800361c:	00db      	lsls	r3, r3, #3
 800361e:	1a9b      	subs	r3, r3, r2
 8003620:	009b      	lsls	r3, r3, #2
 8003622:	440b      	add	r3, r1
 8003624:	3344      	adds	r3, #68	@ 0x44
 8003626:	2200      	movs	r2, #0
 8003628:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800362a:	7bfa      	ldrb	r2, [r7, #15]
 800362c:	6879      	ldr	r1, [r7, #4]
 800362e:	4613      	mov	r3, r2
 8003630:	00db      	lsls	r3, r3, #3
 8003632:	1a9b      	subs	r3, r3, r2
 8003634:	009b      	lsls	r3, r3, #2
 8003636:	440b      	add	r3, r1
 8003638:	3348      	adds	r3, #72	@ 0x48
 800363a:	2200      	movs	r2, #0
 800363c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800363e:	7bfa      	ldrb	r2, [r7, #15]
 8003640:	6879      	ldr	r1, [r7, #4]
 8003642:	4613      	mov	r3, r2
 8003644:	00db      	lsls	r3, r3, #3
 8003646:	1a9b      	subs	r3, r3, r2
 8003648:	009b      	lsls	r3, r3, #2
 800364a:	440b      	add	r3, r1
 800364c:	3350      	adds	r3, #80	@ 0x50
 800364e:	2200      	movs	r2, #0
 8003650:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003652:	7bfb      	ldrb	r3, [r7, #15]
 8003654:	3301      	adds	r3, #1
 8003656:	73fb      	strb	r3, [r7, #15]
 8003658:	7bfa      	ldrb	r2, [r7, #15]
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	685b      	ldr	r3, [r3, #4]
 800365e:	429a      	cmp	r2, r3
 8003660:	d3af      	bcc.n	80035c2 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003662:	2300      	movs	r3, #0
 8003664:	73fb      	strb	r3, [r7, #15]
 8003666:	e044      	b.n	80036f2 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003668:	7bfa      	ldrb	r2, [r7, #15]
 800366a:	6879      	ldr	r1, [r7, #4]
 800366c:	4613      	mov	r3, r2
 800366e:	00db      	lsls	r3, r3, #3
 8003670:	1a9b      	subs	r3, r3, r2
 8003672:	009b      	lsls	r3, r3, #2
 8003674:	440b      	add	r3, r1
 8003676:	f203 13fd 	addw	r3, r3, #509	@ 0x1fd
 800367a:	2200      	movs	r2, #0
 800367c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800367e:	7bfa      	ldrb	r2, [r7, #15]
 8003680:	6879      	ldr	r1, [r7, #4]
 8003682:	4613      	mov	r3, r2
 8003684:	00db      	lsls	r3, r3, #3
 8003686:	1a9b      	subs	r3, r3, r2
 8003688:	009b      	lsls	r3, r3, #2
 800368a:	440b      	add	r3, r1
 800368c:	f503 73fe 	add.w	r3, r3, #508	@ 0x1fc
 8003690:	7bfa      	ldrb	r2, [r7, #15]
 8003692:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003694:	7bfa      	ldrb	r2, [r7, #15]
 8003696:	6879      	ldr	r1, [r7, #4]
 8003698:	4613      	mov	r3, r2
 800369a:	00db      	lsls	r3, r3, #3
 800369c:	1a9b      	subs	r3, r3, r2
 800369e:	009b      	lsls	r3, r3, #2
 80036a0:	440b      	add	r3, r1
 80036a2:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 80036a6:	2200      	movs	r2, #0
 80036a8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80036aa:	7bfa      	ldrb	r2, [r7, #15]
 80036ac:	6879      	ldr	r1, [r7, #4]
 80036ae:	4613      	mov	r3, r2
 80036b0:	00db      	lsls	r3, r3, #3
 80036b2:	1a9b      	subs	r3, r3, r2
 80036b4:	009b      	lsls	r3, r3, #2
 80036b6:	440b      	add	r3, r1
 80036b8:	f503 7301 	add.w	r3, r3, #516	@ 0x204
 80036bc:	2200      	movs	r2, #0
 80036be:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80036c0:	7bfa      	ldrb	r2, [r7, #15]
 80036c2:	6879      	ldr	r1, [r7, #4]
 80036c4:	4613      	mov	r3, r2
 80036c6:	00db      	lsls	r3, r3, #3
 80036c8:	1a9b      	subs	r3, r3, r2
 80036ca:	009b      	lsls	r3, r3, #2
 80036cc:	440b      	add	r3, r1
 80036ce:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 80036d2:	2200      	movs	r2, #0
 80036d4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80036d6:	7bfa      	ldrb	r2, [r7, #15]
 80036d8:	6879      	ldr	r1, [r7, #4]
 80036da:	4613      	mov	r3, r2
 80036dc:	00db      	lsls	r3, r3, #3
 80036de:	1a9b      	subs	r3, r3, r2
 80036e0:	009b      	lsls	r3, r3, #2
 80036e2:	440b      	add	r3, r1
 80036e4:	f503 7304 	add.w	r3, r3, #528	@ 0x210
 80036e8:	2200      	movs	r2, #0
 80036ea:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80036ec:	7bfb      	ldrb	r3, [r7, #15]
 80036ee:	3301      	adds	r3, #1
 80036f0:	73fb      	strb	r3, [r7, #15]
 80036f2:	7bfa      	ldrb	r2, [r7, #15]
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	685b      	ldr	r3, [r3, #4]
 80036f8:	429a      	cmp	r2, r3
 80036fa:	d3b5      	bcc.n	8003668 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	603b      	str	r3, [r7, #0]
 8003702:	687e      	ldr	r6, [r7, #4]
 8003704:	466d      	mov	r5, sp
 8003706:	f106 0410 	add.w	r4, r6, #16
 800370a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800370c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800370e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003710:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003712:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003716:	e885 0003 	stmia.w	r5, {r0, r1}
 800371a:	1d33      	adds	r3, r6, #4
 800371c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800371e:	6838      	ldr	r0, [r7, #0]
 8003720:	f003 fb24 	bl	8006d6c <USB_DevInit>
 8003724:	4603      	mov	r3, r0
 8003726:	2b00      	cmp	r3, #0
 8003728:	d005      	beq.n	8003736 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2202      	movs	r2, #2
 800372e:	f883 23bd 	strb.w	r2, [r3, #957]	@ 0x3bd
    return HAL_ERROR;
 8003732:	2301      	movs	r3, #1
 8003734:	e014      	b.n	8003760 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2200      	movs	r2, #0
 800373a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2201      	movs	r2, #1
 8003742:	f883 23bd 	strb.w	r2, [r3, #957]	@ 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800374a:	2b01      	cmp	r3, #1
 800374c:	d102      	bne.n	8003754 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800374e:	6878      	ldr	r0, [r7, #4]
 8003750:	f000 ff4a 	bl	80045e8 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4618      	mov	r0, r3
 800375a:	f004 faa6 	bl	8007caa <USB_DevDisconnect>

  return HAL_OK;
 800375e:	2300      	movs	r3, #0
}
 8003760:	4618      	mov	r0, r3
 8003762:	3714      	adds	r7, #20
 8003764:	46bd      	mov	sp, r7
 8003766:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003768 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b084      	sub	sp, #16
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	f893 33bc 	ldrb.w	r3, [r3, #956]	@ 0x3bc
 800377c:	2b01      	cmp	r3, #1
 800377e:	d101      	bne.n	8003784 <HAL_PCD_Start+0x1c>
 8003780:	2302      	movs	r3, #2
 8003782:	e01c      	b.n	80037be <HAL_PCD_Start+0x56>
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2201      	movs	r2, #1
 8003788:	f883 23bc 	strb.w	r2, [r3, #956]	@ 0x3bc
#if defined (USB_OTG_FS)
  if (hpcd->Init.battery_charging_enable == 1U)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003790:	2b01      	cmp	r3, #1
 8003792:	d105      	bne.n	80037a0 <HAL_PCD_Start+0x38>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003798:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	639a      	str	r2, [r3, #56]	@ 0x38
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	4618      	mov	r0, r3
 80037a6:	f003 fa95 	bl	8006cd4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	4618      	mov	r0, r3
 80037b0:	f004 fa5a 	bl	8007c68 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2200      	movs	r2, #0
 80037b8:	f883 23bc 	strb.w	r2, [r3, #956]	@ 0x3bc

  return HAL_OK;
 80037bc:	2300      	movs	r3, #0
}
 80037be:	4618      	mov	r0, r3
 80037c0:	3710      	adds	r7, #16
 80037c2:	46bd      	mov	sp, r7
 80037c4:	bd80      	pop	{r7, pc}

080037c6 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80037c6:	b590      	push	{r4, r7, lr}
 80037c8:	b08d      	sub	sp, #52	@ 0x34
 80037ca:	af00      	add	r7, sp, #0
 80037cc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80037d4:	6a3b      	ldr	r3, [r7, #32]
 80037d6:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	4618      	mov	r0, r3
 80037de:	f004 fb18 	bl	8007e12 <USB_GetMode>
 80037e2:	4603      	mov	r3, r0
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	f040 838f 	bne.w	8003f08 <HAL_PCD_IRQHandler+0x742>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	4618      	mov	r0, r3
 80037f0:	f004 fa7c 	bl	8007cec <USB_ReadInterrupts>
 80037f4:	4603      	mov	r3, r0
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	f000 8385 	beq.w	8003f06 <HAL_PCD_IRQHandler+0x740>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	4618      	mov	r0, r3
 8003802:	f004 fa73 	bl	8007cec <USB_ReadInterrupts>
 8003806:	4603      	mov	r3, r0
 8003808:	f003 0302 	and.w	r3, r3, #2
 800380c:	2b02      	cmp	r3, #2
 800380e:	d107      	bne.n	8003820 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	695a      	ldr	r2, [r3, #20]
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f002 0202 	and.w	r2, r2, #2
 800381e:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	4618      	mov	r0, r3
 8003826:	f004 fa61 	bl	8007cec <USB_ReadInterrupts>
 800382a:	4603      	mov	r3, r0
 800382c:	f003 0310 	and.w	r3, r3, #16
 8003830:	2b10      	cmp	r3, #16
 8003832:	d161      	bne.n	80038f8 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	699a      	ldr	r2, [r3, #24]
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f022 0210 	bic.w	r2, r2, #16
 8003842:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8003844:	6a3b      	ldr	r3, [r7, #32]
 8003846:	6a1b      	ldr	r3, [r3, #32]
 8003848:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 800384a:	69bb      	ldr	r3, [r7, #24]
 800384c:	f003 020f 	and.w	r2, r3, #15
 8003850:	4613      	mov	r3, r2
 8003852:	00db      	lsls	r3, r3, #3
 8003854:	1a9b      	subs	r3, r3, r2
 8003856:	009b      	lsls	r3, r3, #2
 8003858:	f503 73fc 	add.w	r3, r3, #504	@ 0x1f8
 800385c:	687a      	ldr	r2, [r7, #4]
 800385e:	4413      	add	r3, r2
 8003860:	3304      	adds	r3, #4
 8003862:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003864:	69bb      	ldr	r3, [r7, #24]
 8003866:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 800386a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800386e:	d124      	bne.n	80038ba <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003870:	69ba      	ldr	r2, [r7, #24]
 8003872:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8003876:	4013      	ands	r3, r2
 8003878:	2b00      	cmp	r3, #0
 800387a:	d035      	beq.n	80038e8 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800387c:	697b      	ldr	r3, [r7, #20]
 800387e:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003880:	69bb      	ldr	r3, [r7, #24]
 8003882:	091b      	lsrs	r3, r3, #4
 8003884:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003886:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800388a:	b29b      	uxth	r3, r3
 800388c:	461a      	mov	r2, r3
 800388e:	6a38      	ldr	r0, [r7, #32]
 8003890:	f004 f8c7 	bl	8007a22 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003894:	697b      	ldr	r3, [r7, #20]
 8003896:	68da      	ldr	r2, [r3, #12]
 8003898:	69bb      	ldr	r3, [r7, #24]
 800389a:	091b      	lsrs	r3, r3, #4
 800389c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80038a0:	441a      	add	r2, r3
 80038a2:	697b      	ldr	r3, [r7, #20]
 80038a4:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80038a6:	697b      	ldr	r3, [r7, #20]
 80038a8:	699a      	ldr	r2, [r3, #24]
 80038aa:	69bb      	ldr	r3, [r7, #24]
 80038ac:	091b      	lsrs	r3, r3, #4
 80038ae:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80038b2:	441a      	add	r2, r3
 80038b4:	697b      	ldr	r3, [r7, #20]
 80038b6:	619a      	str	r2, [r3, #24]
 80038b8:	e016      	b.n	80038e8 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80038ba:	69bb      	ldr	r3, [r7, #24]
 80038bc:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 80038c0:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80038c4:	d110      	bne.n	80038e8 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	f503 7371 	add.w	r3, r3, #964	@ 0x3c4
 80038cc:	2208      	movs	r2, #8
 80038ce:	4619      	mov	r1, r3
 80038d0:	6a38      	ldr	r0, [r7, #32]
 80038d2:	f004 f8a6 	bl	8007a22 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80038d6:	697b      	ldr	r3, [r7, #20]
 80038d8:	699a      	ldr	r2, [r3, #24]
 80038da:	69bb      	ldr	r3, [r7, #24]
 80038dc:	091b      	lsrs	r3, r3, #4
 80038de:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80038e2:	441a      	add	r2, r3
 80038e4:	697b      	ldr	r3, [r7, #20]
 80038e6:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	699a      	ldr	r2, [r3, #24]
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f042 0210 	orr.w	r2, r2, #16
 80038f6:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	4618      	mov	r0, r3
 80038fe:	f004 f9f5 	bl	8007cec <USB_ReadInterrupts>
 8003902:	4603      	mov	r3, r0
 8003904:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003908:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800390c:	d16e      	bne.n	80039ec <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 800390e:	2300      	movs	r3, #0
 8003910:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	4618      	mov	r0, r3
 8003918:	f004 f9fb 	bl	8007d12 <USB_ReadDevAllOutEpInterrupt>
 800391c:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 800391e:	e062      	b.n	80039e6 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003920:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003922:	f003 0301 	and.w	r3, r3, #1
 8003926:	2b00      	cmp	r3, #0
 8003928:	d057      	beq.n	80039da <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003930:	b2d2      	uxtb	r2, r2
 8003932:	4611      	mov	r1, r2
 8003934:	4618      	mov	r0, r3
 8003936:	f004 fa20 	bl	8007d7a <USB_ReadDevOutEPInterrupt>
 800393a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800393c:	693b      	ldr	r3, [r7, #16]
 800393e:	f003 0301 	and.w	r3, r3, #1
 8003942:	2b00      	cmp	r3, #0
 8003944:	d00c      	beq.n	8003960 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003946:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003948:	015a      	lsls	r2, r3, #5
 800394a:	69fb      	ldr	r3, [r7, #28]
 800394c:	4413      	add	r3, r2
 800394e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003952:	461a      	mov	r2, r3
 8003954:	2301      	movs	r3, #1
 8003956:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003958:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800395a:	6878      	ldr	r0, [r7, #4]
 800395c:	f000 fd6a 	bl	8004434 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003960:	693b      	ldr	r3, [r7, #16]
 8003962:	f003 0308 	and.w	r3, r3, #8
 8003966:	2b00      	cmp	r3, #0
 8003968:	d00c      	beq.n	8003984 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800396a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800396c:	015a      	lsls	r2, r3, #5
 800396e:	69fb      	ldr	r3, [r7, #28]
 8003970:	4413      	add	r3, r2
 8003972:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003976:	461a      	mov	r2, r3
 8003978:	2308      	movs	r3, #8
 800397a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800397c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800397e:	6878      	ldr	r0, [r7, #4]
 8003980:	f000 fda6 	bl	80044d0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003984:	693b      	ldr	r3, [r7, #16]
 8003986:	f003 0310 	and.w	r3, r3, #16
 800398a:	2b00      	cmp	r3, #0
 800398c:	d008      	beq.n	80039a0 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800398e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003990:	015a      	lsls	r2, r3, #5
 8003992:	69fb      	ldr	r3, [r7, #28]
 8003994:	4413      	add	r3, r2
 8003996:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800399a:	461a      	mov	r2, r3
 800399c:	2310      	movs	r3, #16
 800399e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80039a0:	693b      	ldr	r3, [r7, #16]
 80039a2:	f003 0320 	and.w	r3, r3, #32
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d008      	beq.n	80039bc <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80039aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039ac:	015a      	lsls	r2, r3, #5
 80039ae:	69fb      	ldr	r3, [r7, #28]
 80039b0:	4413      	add	r3, r2
 80039b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80039b6:	461a      	mov	r2, r3
 80039b8:	2320      	movs	r3, #32
 80039ba:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80039bc:	693b      	ldr	r3, [r7, #16]
 80039be:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d009      	beq.n	80039da <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80039c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039c8:	015a      	lsls	r2, r3, #5
 80039ca:	69fb      	ldr	r3, [r7, #28]
 80039cc:	4413      	add	r3, r2
 80039ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80039d2:	461a      	mov	r2, r3
 80039d4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80039d8:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80039da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039dc:	3301      	adds	r3, #1
 80039de:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80039e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039e2:	085b      	lsrs	r3, r3, #1
 80039e4:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80039e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d199      	bne.n	8003920 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	4618      	mov	r0, r3
 80039f2:	f004 f97b 	bl	8007cec <USB_ReadInterrupts>
 80039f6:	4603      	mov	r3, r0
 80039f8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80039fc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003a00:	f040 8087 	bne.w	8003b12 <HAL_PCD_IRQHandler+0x34c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	4618      	mov	r0, r3
 8003a0a:	f004 f99c 	bl	8007d46 <USB_ReadDevAllInEpInterrupt>
 8003a0e:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8003a10:	2300      	movs	r3, #0
 8003a12:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8003a14:	e07a      	b.n	8003b0c <HAL_PCD_IRQHandler+0x346>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003a16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a18:	f003 0301 	and.w	r3, r3, #1
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d06f      	beq.n	8003b00 <HAL_PCD_IRQHandler+0x33a>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a26:	b2d2      	uxtb	r2, r2
 8003a28:	4611      	mov	r1, r2
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	f004 f9c3 	bl	8007db6 <USB_ReadDevInEPInterrupt>
 8003a30:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003a32:	693b      	ldr	r3, [r7, #16]
 8003a34:	f003 0301 	and.w	r3, r3, #1
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d020      	beq.n	8003a7e <HAL_PCD_IRQHandler+0x2b8>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003a3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a3e:	f003 030f 	and.w	r3, r3, #15
 8003a42:	2201      	movs	r2, #1
 8003a44:	fa02 f303 	lsl.w	r3, r2, r3
 8003a48:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003a4a:	69fb      	ldr	r3, [r7, #28]
 8003a4c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003a50:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	43db      	mvns	r3, r3
 8003a56:	69f9      	ldr	r1, [r7, #28]
 8003a58:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003a5c:	4013      	ands	r3, r2
 8003a5e:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003a60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a62:	015a      	lsls	r2, r3, #5
 8003a64:	69fb      	ldr	r3, [r7, #28]
 8003a66:	4413      	add	r3, r2
 8003a68:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003a6c:	461a      	mov	r2, r3
 8003a6e:	2301      	movs	r3, #1
 8003a70:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003a72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a74:	b2db      	uxtb	r3, r3
 8003a76:	4619      	mov	r1, r3
 8003a78:	6878      	ldr	r0, [r7, #4]
 8003a7a:	f005 ff3c 	bl	80098f6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003a7e:	693b      	ldr	r3, [r7, #16]
 8003a80:	f003 0308 	and.w	r3, r3, #8
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d008      	beq.n	8003a9a <HAL_PCD_IRQHandler+0x2d4>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003a88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a8a:	015a      	lsls	r2, r3, #5
 8003a8c:	69fb      	ldr	r3, [r7, #28]
 8003a8e:	4413      	add	r3, r2
 8003a90:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003a94:	461a      	mov	r2, r3
 8003a96:	2308      	movs	r3, #8
 8003a98:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003a9a:	693b      	ldr	r3, [r7, #16]
 8003a9c:	f003 0310 	and.w	r3, r3, #16
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d008      	beq.n	8003ab6 <HAL_PCD_IRQHandler+0x2f0>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003aa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003aa6:	015a      	lsls	r2, r3, #5
 8003aa8:	69fb      	ldr	r3, [r7, #28]
 8003aaa:	4413      	add	r3, r2
 8003aac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003ab0:	461a      	mov	r2, r3
 8003ab2:	2310      	movs	r3, #16
 8003ab4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003ab6:	693b      	ldr	r3, [r7, #16]
 8003ab8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d008      	beq.n	8003ad2 <HAL_PCD_IRQHandler+0x30c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003ac0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ac2:	015a      	lsls	r2, r3, #5
 8003ac4:	69fb      	ldr	r3, [r7, #28]
 8003ac6:	4413      	add	r3, r2
 8003ac8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003acc:	461a      	mov	r2, r3
 8003ace:	2340      	movs	r3, #64	@ 0x40
 8003ad0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003ad2:	693b      	ldr	r3, [r7, #16]
 8003ad4:	f003 0302 	and.w	r3, r3, #2
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d008      	beq.n	8003aee <HAL_PCD_IRQHandler+0x328>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003adc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ade:	015a      	lsls	r2, r3, #5
 8003ae0:	69fb      	ldr	r3, [r7, #28]
 8003ae2:	4413      	add	r3, r2
 8003ae4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003ae8:	461a      	mov	r2, r3
 8003aea:	2302      	movs	r3, #2
 8003aec:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003aee:	693b      	ldr	r3, [r7, #16]
 8003af0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d003      	beq.n	8003b00 <HAL_PCD_IRQHandler+0x33a>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003af8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003afa:	6878      	ldr	r0, [r7, #4]
 8003afc:	f000 fc11 	bl	8004322 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003b00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b02:	3301      	adds	r3, #1
 8003b04:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8003b06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b08:	085b      	lsrs	r3, r3, #1
 8003b0a:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8003b0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d181      	bne.n	8003a16 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	4618      	mov	r0, r3
 8003b18:	f004 f8e8 	bl	8007cec <USB_ReadInterrupts>
 8003b1c:	4603      	mov	r3, r0
 8003b1e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003b22:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003b26:	d122      	bne.n	8003b6e <HAL_PCD_IRQHandler+0x3a8>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003b28:	69fb      	ldr	r3, [r7, #28]
 8003b2a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003b2e:	685b      	ldr	r3, [r3, #4]
 8003b30:	69fa      	ldr	r2, [r7, #28]
 8003b32:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003b36:	f023 0301 	bic.w	r3, r3, #1
 8003b3a:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	f893 33f4 	ldrb.w	r3, [r3, #1012]	@ 0x3f4
 8003b42:	2b01      	cmp	r3, #1
 8003b44:	d108      	bne.n	8003b58 <HAL_PCD_IRQHandler+0x392>
      {
        hpcd->LPM_State = LPM_L0;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2200      	movs	r2, #0
 8003b4a:	f883 23f4 	strb.w	r2, [r3, #1012]	@ 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003b4e:	2100      	movs	r1, #0
 8003b50:	6878      	ldr	r0, [r7, #4]
 8003b52:	f006 f9d5 	bl	8009f00 <HAL_PCDEx_LPM_Callback>
 8003b56:	e002      	b.n	8003b5e <HAL_PCD_IRQHandler+0x398>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003b58:	6878      	ldr	r0, [r7, #4]
 8003b5a:	f005 ff39 	bl	80099d0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	695a      	ldr	r2, [r3, #20]
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8003b6c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4618      	mov	r0, r3
 8003b74:	f004 f8ba 	bl	8007cec <USB_ReadInterrupts>
 8003b78:	4603      	mov	r3, r0
 8003b7a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003b7e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003b82:	d112      	bne.n	8003baa <HAL_PCD_IRQHandler+0x3e4>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003b84:	69fb      	ldr	r3, [r7, #28]
 8003b86:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003b8a:	689b      	ldr	r3, [r3, #8]
 8003b8c:	f003 0301 	and.w	r3, r3, #1
 8003b90:	2b01      	cmp	r3, #1
 8003b92:	d102      	bne.n	8003b9a <HAL_PCD_IRQHandler+0x3d4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003b94:	6878      	ldr	r0, [r7, #4]
 8003b96:	f005 fef5 	bl	8009984 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	695a      	ldr	r2, [r3, #20]
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8003ba8:	615a      	str	r2, [r3, #20]
    }
    
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	4618      	mov	r0, r3
 8003bb0:	f004 f89c 	bl	8007cec <USB_ReadInterrupts>
 8003bb4:	4603      	mov	r3, r0
 8003bb6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003bba:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003bbe:	d121      	bne.n	8003c04 <HAL_PCD_IRQHandler+0x43e>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	695a      	ldr	r2, [r3, #20]
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 8003bce:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	f893 33f4 	ldrb.w	r3, [r3, #1012]	@ 0x3f4
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d111      	bne.n	8003bfe <HAL_PCD_IRQHandler+0x438>
      {
        hpcd->LPM_State = LPM_L1;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	2201      	movs	r2, #1
 8003bde:	f883 23f4 	strb.w	r2, [r3, #1012]	@ 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003be8:	089b      	lsrs	r3, r3, #2
 8003bea:	f003 020f 	and.w	r2, r3, #15
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	f8c3 23f8 	str.w	r2, [r3, #1016]	@ 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8003bf4:	2101      	movs	r1, #1
 8003bf6:	6878      	ldr	r0, [r7, #4]
 8003bf8:	f006 f982 	bl	8009f00 <HAL_PCDEx_LPM_Callback>
 8003bfc:	e002      	b.n	8003c04 <HAL_PCD_IRQHandler+0x43e>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003bfe:	6878      	ldr	r0, [r7, #4]
 8003c00:	f005 fec0 	bl	8009984 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4618      	mov	r0, r3
 8003c0a:	f004 f86f 	bl	8007cec <USB_ReadInterrupts>
 8003c0e:	4603      	mov	r3, r0
 8003c10:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003c14:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003c18:	f040 80c5 	bne.w	8003da6 <HAL_PCD_IRQHandler+0x5e0>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003c1c:	69fb      	ldr	r3, [r7, #28]
 8003c1e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003c22:	685b      	ldr	r3, [r3, #4]
 8003c24:	69fa      	ldr	r2, [r7, #28]
 8003c26:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003c2a:	f023 0301 	bic.w	r3, r3, #1
 8003c2e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	2110      	movs	r1, #16
 8003c36:	4618      	mov	r0, r3
 8003c38:	f003 f9e4 	bl	8007004 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003c40:	e056      	b.n	8003cf0 <HAL_PCD_IRQHandler+0x52a>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003c42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c44:	015a      	lsls	r2, r3, #5
 8003c46:	69fb      	ldr	r3, [r7, #28]
 8003c48:	4413      	add	r3, r2
 8003c4a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003c4e:	461a      	mov	r2, r3
 8003c50:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003c54:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003c56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c58:	015a      	lsls	r2, r3, #5
 8003c5a:	69fb      	ldr	r3, [r7, #28]
 8003c5c:	4413      	add	r3, r2
 8003c5e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003c66:	0151      	lsls	r1, r2, #5
 8003c68:	69fa      	ldr	r2, [r7, #28]
 8003c6a:	440a      	add	r2, r1
 8003c6c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003c70:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003c74:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003c76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c78:	015a      	lsls	r2, r3, #5
 8003c7a:	69fb      	ldr	r3, [r7, #28]
 8003c7c:	4413      	add	r3, r2
 8003c7e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003c86:	0151      	lsls	r1, r2, #5
 8003c88:	69fa      	ldr	r2, [r7, #28]
 8003c8a:	440a      	add	r2, r1
 8003c8c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003c90:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003c94:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003c96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c98:	015a      	lsls	r2, r3, #5
 8003c9a:	69fb      	ldr	r3, [r7, #28]
 8003c9c:	4413      	add	r3, r2
 8003c9e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003ca2:	461a      	mov	r2, r3
 8003ca4:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003ca8:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003caa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003cac:	015a      	lsls	r2, r3, #5
 8003cae:	69fb      	ldr	r3, [r7, #28]
 8003cb0:	4413      	add	r3, r2
 8003cb2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003cba:	0151      	lsls	r1, r2, #5
 8003cbc:	69fa      	ldr	r2, [r7, #28]
 8003cbe:	440a      	add	r2, r1
 8003cc0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003cc4:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003cc8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003cca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ccc:	015a      	lsls	r2, r3, #5
 8003cce:	69fb      	ldr	r3, [r7, #28]
 8003cd0:	4413      	add	r3, r2
 8003cd2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003cda:	0151      	lsls	r1, r2, #5
 8003cdc:	69fa      	ldr	r2, [r7, #28]
 8003cde:	440a      	add	r2, r1
 8003ce0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003ce4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003ce8:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003cea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003cec:	3301      	adds	r3, #1
 8003cee:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	685b      	ldr	r3, [r3, #4]
 8003cf4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003cf6:	429a      	cmp	r2, r3
 8003cf8:	d3a3      	bcc.n	8003c42 <HAL_PCD_IRQHandler+0x47c>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003cfa:	69fb      	ldr	r3, [r7, #28]
 8003cfc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003d00:	69db      	ldr	r3, [r3, #28]
 8003d02:	69fa      	ldr	r2, [r7, #28]
 8003d04:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003d08:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8003d0c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d016      	beq.n	8003d44 <HAL_PCD_IRQHandler+0x57e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003d16:	69fb      	ldr	r3, [r7, #28]
 8003d18:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003d1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003d20:	69fa      	ldr	r2, [r7, #28]
 8003d22:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003d26:	f043 030b 	orr.w	r3, r3, #11
 8003d2a:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003d2e:	69fb      	ldr	r3, [r7, #28]
 8003d30:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003d34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d36:	69fa      	ldr	r2, [r7, #28]
 8003d38:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003d3c:	f043 030b 	orr.w	r3, r3, #11
 8003d40:	6453      	str	r3, [r2, #68]	@ 0x44
 8003d42:	e015      	b.n	8003d70 <HAL_PCD_IRQHandler+0x5aa>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003d44:	69fb      	ldr	r3, [r7, #28]
 8003d46:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003d4a:	695b      	ldr	r3, [r3, #20]
 8003d4c:	69fa      	ldr	r2, [r7, #28]
 8003d4e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003d52:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003d56:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8003d5a:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003d5c:	69fb      	ldr	r3, [r7, #28]
 8003d5e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003d62:	691b      	ldr	r3, [r3, #16]
 8003d64:	69fa      	ldr	r2, [r7, #28]
 8003d66:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003d6a:	f043 030b 	orr.w	r3, r3, #11
 8003d6e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003d70:	69fb      	ldr	r3, [r7, #28]
 8003d72:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	69fa      	ldr	r2, [r7, #28]
 8003d7a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003d7e:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8003d82:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681a      	ldr	r2, [r3, #0]
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	f503 7371 	add.w	r3, r3, #964	@ 0x3c4
 8003d8e:	4619      	mov	r1, r3
 8003d90:	4610      	mov	r0, r2
 8003d92:	f004 f86f 	bl	8007e74 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	695a      	ldr	r2, [r3, #20]
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8003da4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	4618      	mov	r0, r3
 8003dac:	f003 ff9e 	bl	8007cec <USB_ReadInterrupts>
 8003db0:	4603      	mov	r3, r0
 8003db2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003db6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003dba:	d124      	bne.n	8003e06 <HAL_PCD_IRQHandler+0x640>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	f004 f834 	bl	8007e2e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	4618      	mov	r0, r3
 8003dcc:	f003 f97b 	bl	80070c6 <USB_GetDevSpeed>
 8003dd0:	4603      	mov	r3, r0
 8003dd2:	461a      	mov	r2, r3
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681c      	ldr	r4, [r3, #0]
 8003ddc:	f001 fa02 	bl	80051e4 <HAL_RCC_GetHCLKFreq>
 8003de0:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003de6:	b2db      	uxtb	r3, r3
 8003de8:	461a      	mov	r2, r3
 8003dea:	4620      	mov	r0, r4
 8003dec:	f002 fed6 	bl	8006b9c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003df0:	6878      	ldr	r0, [r7, #4]
 8003df2:	f005 fda8 	bl	8009946 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	695a      	ldr	r2, [r3, #20]
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8003e04:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	f003 ff6e 	bl	8007cec <USB_ReadInterrupts>
 8003e10:	4603      	mov	r3, r0
 8003e12:	f003 0308 	and.w	r3, r3, #8
 8003e16:	2b08      	cmp	r3, #8
 8003e18:	d10a      	bne.n	8003e30 <HAL_PCD_IRQHandler+0x66a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003e1a:	6878      	ldr	r0, [r7, #4]
 8003e1c:	f005 fd85 	bl	800992a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	695a      	ldr	r2, [r3, #20]
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f002 0208 	and.w	r2, r2, #8
 8003e2e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	4618      	mov	r0, r3
 8003e36:	f003 ff59 	bl	8007cec <USB_ReadInterrupts>
 8003e3a:	4603      	mov	r3, r0
 8003e3c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003e40:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003e44:	d10f      	bne.n	8003e66 <HAL_PCD_IRQHandler+0x6a0>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8003e46:	2300      	movs	r3, #0
 8003e48:	627b      	str	r3, [r7, #36]	@ 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003e4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e4c:	b2db      	uxtb	r3, r3
 8003e4e:	4619      	mov	r1, r3
 8003e50:	6878      	ldr	r0, [r7, #4]
 8003e52:	f005 fdf7 	bl	8009a44 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	695a      	ldr	r2, [r3, #20]
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8003e64:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	f003 ff3e 	bl	8007cec <USB_ReadInterrupts>
 8003e70:	4603      	mov	r3, r0
 8003e72:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003e76:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003e7a:	d10f      	bne.n	8003e9c <HAL_PCD_IRQHandler+0x6d6>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	627b      	str	r3, [r7, #36]	@ 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003e80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e82:	b2db      	uxtb	r3, r3
 8003e84:	4619      	mov	r1, r3
 8003e86:	6878      	ldr	r0, [r7, #4]
 8003e88:	f005 fdca 	bl	8009a20 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	695a      	ldr	r2, [r3, #20]
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8003e9a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	f003 ff23 	bl	8007cec <USB_ReadInterrupts>
 8003ea6:	4603      	mov	r3, r0
 8003ea8:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8003eac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003eb0:	d10a      	bne.n	8003ec8 <HAL_PCD_IRQHandler+0x702>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003eb2:	6878      	ldr	r0, [r7, #4]
 8003eb4:	f005 fdd8 	bl	8009a68 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	695a      	ldr	r2, [r3, #20]
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8003ec6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	4618      	mov	r0, r3
 8003ece:	f003 ff0d 	bl	8007cec <USB_ReadInterrupts>
 8003ed2:	4603      	mov	r3, r0
 8003ed4:	f003 0304 	and.w	r3, r3, #4
 8003ed8:	2b04      	cmp	r3, #4
 8003eda:	d115      	bne.n	8003f08 <HAL_PCD_IRQHandler+0x742>
    {
      temp = hpcd->Instance->GOTGINT;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	685b      	ldr	r3, [r3, #4]
 8003ee2:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003ee4:	69bb      	ldr	r3, [r7, #24]
 8003ee6:	f003 0304 	and.w	r3, r3, #4
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d002      	beq.n	8003ef4 <HAL_PCD_IRQHandler+0x72e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003eee:	6878      	ldr	r0, [r7, #4]
 8003ef0:	f005 fdc8 	bl	8009a84 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	6859      	ldr	r1, [r3, #4]
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	69ba      	ldr	r2, [r7, #24]
 8003f00:	430a      	orrs	r2, r1
 8003f02:	605a      	str	r2, [r3, #4]
 8003f04:	e000      	b.n	8003f08 <HAL_PCD_IRQHandler+0x742>
      return;
 8003f06:	bf00      	nop
    }
  }
}
 8003f08:	3734      	adds	r7, #52	@ 0x34
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	bd90      	pop	{r4, r7, pc}

08003f0e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003f0e:	b580      	push	{r7, lr}
 8003f10:	b082      	sub	sp, #8
 8003f12:	af00      	add	r7, sp, #0
 8003f14:	6078      	str	r0, [r7, #4]
 8003f16:	460b      	mov	r3, r1
 8003f18:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	f893 33bc 	ldrb.w	r3, [r3, #956]	@ 0x3bc
 8003f20:	2b01      	cmp	r3, #1
 8003f22:	d101      	bne.n	8003f28 <HAL_PCD_SetAddress+0x1a>
 8003f24:	2302      	movs	r3, #2
 8003f26:	e013      	b.n	8003f50 <HAL_PCD_SetAddress+0x42>
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2201      	movs	r2, #1
 8003f2c:	f883 23bc 	strb.w	r2, [r3, #956]	@ 0x3bc
  hpcd->USB_Address = address;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	78fa      	ldrb	r2, [r7, #3]
 8003f34:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	78fa      	ldrb	r2, [r7, #3]
 8003f3e:	4611      	mov	r1, r2
 8003f40:	4618      	mov	r0, r3
 8003f42:	f003 fe6b 	bl	8007c1c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	2200      	movs	r2, #0
 8003f4a:	f883 23bc 	strb.w	r2, [r3, #956]	@ 0x3bc

  return HAL_OK;
 8003f4e:	2300      	movs	r3, #0
}
 8003f50:	4618      	mov	r0, r3
 8003f52:	3708      	adds	r7, #8
 8003f54:	46bd      	mov	sp, r7
 8003f56:	bd80      	pop	{r7, pc}

08003f58 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b084      	sub	sp, #16
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
 8003f60:	4608      	mov	r0, r1
 8003f62:	4611      	mov	r1, r2
 8003f64:	461a      	mov	r2, r3
 8003f66:	4603      	mov	r3, r0
 8003f68:	70fb      	strb	r3, [r7, #3]
 8003f6a:	460b      	mov	r3, r1
 8003f6c:	803b      	strh	r3, [r7, #0]
 8003f6e:	4613      	mov	r3, r2
 8003f70:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003f72:	2300      	movs	r3, #0
 8003f74:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003f76:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	da0f      	bge.n	8003f9e <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003f7e:	78fb      	ldrb	r3, [r7, #3]
 8003f80:	f003 020f 	and.w	r2, r3, #15
 8003f84:	4613      	mov	r3, r2
 8003f86:	00db      	lsls	r3, r3, #3
 8003f88:	1a9b      	subs	r3, r3, r2
 8003f8a:	009b      	lsls	r3, r3, #2
 8003f8c:	3338      	adds	r3, #56	@ 0x38
 8003f8e:	687a      	ldr	r2, [r7, #4]
 8003f90:	4413      	add	r3, r2
 8003f92:	3304      	adds	r3, #4
 8003f94:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	2201      	movs	r2, #1
 8003f9a:	705a      	strb	r2, [r3, #1]
 8003f9c:	e00f      	b.n	8003fbe <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003f9e:	78fb      	ldrb	r3, [r7, #3]
 8003fa0:	f003 020f 	and.w	r2, r3, #15
 8003fa4:	4613      	mov	r3, r2
 8003fa6:	00db      	lsls	r3, r3, #3
 8003fa8:	1a9b      	subs	r3, r3, r2
 8003faa:	009b      	lsls	r3, r3, #2
 8003fac:	f503 73fc 	add.w	r3, r3, #504	@ 0x1f8
 8003fb0:	687a      	ldr	r2, [r7, #4]
 8003fb2:	4413      	add	r3, r2
 8003fb4:	3304      	adds	r3, #4
 8003fb6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	2200      	movs	r2, #0
 8003fbc:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003fbe:	78fb      	ldrb	r3, [r7, #3]
 8003fc0:	f003 030f 	and.w	r3, r3, #15
 8003fc4:	b2da      	uxtb	r2, r3
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003fca:	883a      	ldrh	r2, [r7, #0]
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	78ba      	ldrb	r2, [r7, #2]
 8003fd4:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	785b      	ldrb	r3, [r3, #1]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d004      	beq.n	8003fe8 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	781b      	ldrb	r3, [r3, #0]
 8003fe2:	461a      	mov	r2, r3
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003fe8:	78bb      	ldrb	r3, [r7, #2]
 8003fea:	2b02      	cmp	r3, #2
 8003fec:	d102      	bne.n	8003ff4 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	f893 33bc 	ldrb.w	r3, [r3, #956]	@ 0x3bc
 8003ffa:	2b01      	cmp	r3, #1
 8003ffc:	d101      	bne.n	8004002 <HAL_PCD_EP_Open+0xaa>
 8003ffe:	2302      	movs	r3, #2
 8004000:	e00e      	b.n	8004020 <HAL_PCD_EP_Open+0xc8>
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	2201      	movs	r2, #1
 8004006:	f883 23bc 	strb.w	r2, [r3, #956]	@ 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	68f9      	ldr	r1, [r7, #12]
 8004010:	4618      	mov	r0, r3
 8004012:	f003 f877 	bl	8007104 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	2200      	movs	r2, #0
 800401a:	f883 23bc 	strb.w	r2, [r3, #956]	@ 0x3bc

  return ret;
 800401e:	7afb      	ldrb	r3, [r7, #11]
}
 8004020:	4618      	mov	r0, r3
 8004022:	3710      	adds	r7, #16
 8004024:	46bd      	mov	sp, r7
 8004026:	bd80      	pop	{r7, pc}

08004028 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b084      	sub	sp, #16
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
 8004030:	460b      	mov	r3, r1
 8004032:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004034:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004038:	2b00      	cmp	r3, #0
 800403a:	da0f      	bge.n	800405c <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800403c:	78fb      	ldrb	r3, [r7, #3]
 800403e:	f003 020f 	and.w	r2, r3, #15
 8004042:	4613      	mov	r3, r2
 8004044:	00db      	lsls	r3, r3, #3
 8004046:	1a9b      	subs	r3, r3, r2
 8004048:	009b      	lsls	r3, r3, #2
 800404a:	3338      	adds	r3, #56	@ 0x38
 800404c:	687a      	ldr	r2, [r7, #4]
 800404e:	4413      	add	r3, r2
 8004050:	3304      	adds	r3, #4
 8004052:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	2201      	movs	r2, #1
 8004058:	705a      	strb	r2, [r3, #1]
 800405a:	e00f      	b.n	800407c <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800405c:	78fb      	ldrb	r3, [r7, #3]
 800405e:	f003 020f 	and.w	r2, r3, #15
 8004062:	4613      	mov	r3, r2
 8004064:	00db      	lsls	r3, r3, #3
 8004066:	1a9b      	subs	r3, r3, r2
 8004068:	009b      	lsls	r3, r3, #2
 800406a:	f503 73fc 	add.w	r3, r3, #504	@ 0x1f8
 800406e:	687a      	ldr	r2, [r7, #4]
 8004070:	4413      	add	r3, r2
 8004072:	3304      	adds	r3, #4
 8004074:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	2200      	movs	r2, #0
 800407a:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800407c:	78fb      	ldrb	r3, [r7, #3]
 800407e:	f003 030f 	and.w	r3, r3, #15
 8004082:	b2da      	uxtb	r2, r3
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	f893 33bc 	ldrb.w	r3, [r3, #956]	@ 0x3bc
 800408e:	2b01      	cmp	r3, #1
 8004090:	d101      	bne.n	8004096 <HAL_PCD_EP_Close+0x6e>
 8004092:	2302      	movs	r3, #2
 8004094:	e00e      	b.n	80040b4 <HAL_PCD_EP_Close+0x8c>
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	2201      	movs	r2, #1
 800409a:	f883 23bc 	strb.w	r2, [r3, #956]	@ 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	68f9      	ldr	r1, [r7, #12]
 80040a4:	4618      	mov	r0, r3
 80040a6:	f003 f8b5 	bl	8007214 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	2200      	movs	r2, #0
 80040ae:	f883 23bc 	strb.w	r2, [r3, #956]	@ 0x3bc
  return HAL_OK;
 80040b2:	2300      	movs	r3, #0
}
 80040b4:	4618      	mov	r0, r3
 80040b6:	3710      	adds	r7, #16
 80040b8:	46bd      	mov	sp, r7
 80040ba:	bd80      	pop	{r7, pc}

080040bc <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	b086      	sub	sp, #24
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	60f8      	str	r0, [r7, #12]
 80040c4:	607a      	str	r2, [r7, #4]
 80040c6:	603b      	str	r3, [r7, #0]
 80040c8:	460b      	mov	r3, r1
 80040ca:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80040cc:	7afb      	ldrb	r3, [r7, #11]
 80040ce:	f003 020f 	and.w	r2, r3, #15
 80040d2:	4613      	mov	r3, r2
 80040d4:	00db      	lsls	r3, r3, #3
 80040d6:	1a9b      	subs	r3, r3, r2
 80040d8:	009b      	lsls	r3, r3, #2
 80040da:	f503 73fc 	add.w	r3, r3, #504	@ 0x1f8
 80040de:	68fa      	ldr	r2, [r7, #12]
 80040e0:	4413      	add	r3, r2
 80040e2:	3304      	adds	r3, #4
 80040e4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80040e6:	697b      	ldr	r3, [r7, #20]
 80040e8:	687a      	ldr	r2, [r7, #4]
 80040ea:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80040ec:	697b      	ldr	r3, [r7, #20]
 80040ee:	683a      	ldr	r2, [r7, #0]
 80040f0:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80040f2:	697b      	ldr	r3, [r7, #20]
 80040f4:	2200      	movs	r2, #0
 80040f6:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 80040f8:	697b      	ldr	r3, [r7, #20]
 80040fa:	2200      	movs	r2, #0
 80040fc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80040fe:	7afb      	ldrb	r3, [r7, #11]
 8004100:	f003 030f 	and.w	r3, r3, #15
 8004104:	b2da      	uxtb	r2, r3
 8004106:	697b      	ldr	r3, [r7, #20]
 8004108:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800410a:	7afb      	ldrb	r3, [r7, #11]
 800410c:	f003 030f 	and.w	r3, r3, #15
 8004110:	2b00      	cmp	r3, #0
 8004112:	d106      	bne.n	8004122 <HAL_PCD_EP_Receive+0x66>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	6979      	ldr	r1, [r7, #20]
 800411a:	4618      	mov	r0, r3
 800411c:	f003 fb32 	bl	8007784 <USB_EP0StartXfer>
 8004120:	e005      	b.n	800412e <HAL_PCD_EP_Receive+0x72>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	6979      	ldr	r1, [r7, #20]
 8004128:	4618      	mov	r0, r3
 800412a:	f003 f94f 	bl	80073cc <USB_EPStartXfer>
  }

  return HAL_OK;
 800412e:	2300      	movs	r3, #0
}
 8004130:	4618      	mov	r0, r3
 8004132:	3718      	adds	r7, #24
 8004134:	46bd      	mov	sp, r7
 8004136:	bd80      	pop	{r7, pc}

08004138 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004138:	b580      	push	{r7, lr}
 800413a:	b086      	sub	sp, #24
 800413c:	af00      	add	r7, sp, #0
 800413e:	60f8      	str	r0, [r7, #12]
 8004140:	607a      	str	r2, [r7, #4]
 8004142:	603b      	str	r3, [r7, #0]
 8004144:	460b      	mov	r3, r1
 8004146:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004148:	7afb      	ldrb	r3, [r7, #11]
 800414a:	f003 020f 	and.w	r2, r3, #15
 800414e:	4613      	mov	r3, r2
 8004150:	00db      	lsls	r3, r3, #3
 8004152:	1a9b      	subs	r3, r3, r2
 8004154:	009b      	lsls	r3, r3, #2
 8004156:	3338      	adds	r3, #56	@ 0x38
 8004158:	68fa      	ldr	r2, [r7, #12]
 800415a:	4413      	add	r3, r2
 800415c:	3304      	adds	r3, #4
 800415e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004160:	697b      	ldr	r3, [r7, #20]
 8004162:	687a      	ldr	r2, [r7, #4]
 8004164:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004166:	697b      	ldr	r3, [r7, #20]
 8004168:	683a      	ldr	r2, [r7, #0]
 800416a:	615a      	str	r2, [r3, #20]
#if defined (USB)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 800416c:	697b      	ldr	r3, [r7, #20]
 800416e:	2200      	movs	r2, #0
 8004170:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8004172:	697b      	ldr	r3, [r7, #20]
 8004174:	2201      	movs	r2, #1
 8004176:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004178:	7afb      	ldrb	r3, [r7, #11]
 800417a:	f003 030f 	and.w	r3, r3, #15
 800417e:	b2da      	uxtb	r2, r3
 8004180:	697b      	ldr	r3, [r7, #20]
 8004182:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004184:	7afb      	ldrb	r3, [r7, #11]
 8004186:	f003 030f 	and.w	r3, r3, #15
 800418a:	2b00      	cmp	r3, #0
 800418c:	d106      	bne.n	800419c <HAL_PCD_EP_Transmit+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	6979      	ldr	r1, [r7, #20]
 8004194:	4618      	mov	r0, r3
 8004196:	f003 faf5 	bl	8007784 <USB_EP0StartXfer>
 800419a:	e005      	b.n	80041a8 <HAL_PCD_EP_Transmit+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	6979      	ldr	r1, [r7, #20]
 80041a2:	4618      	mov	r0, r3
 80041a4:	f003 f912 	bl	80073cc <USB_EPStartXfer>
  }

  return HAL_OK;
 80041a8:	2300      	movs	r3, #0
}
 80041aa:	4618      	mov	r0, r3
 80041ac:	3718      	adds	r7, #24
 80041ae:	46bd      	mov	sp, r7
 80041b0:	bd80      	pop	{r7, pc}

080041b2 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80041b2:	b580      	push	{r7, lr}
 80041b4:	b084      	sub	sp, #16
 80041b6:	af00      	add	r7, sp, #0
 80041b8:	6078      	str	r0, [r7, #4]
 80041ba:	460b      	mov	r3, r1
 80041bc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80041be:	78fb      	ldrb	r3, [r7, #3]
 80041c0:	f003 020f 	and.w	r2, r3, #15
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	685b      	ldr	r3, [r3, #4]
 80041c8:	429a      	cmp	r2, r3
 80041ca:	d901      	bls.n	80041d0 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80041cc:	2301      	movs	r3, #1
 80041ce:	e04e      	b.n	800426e <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80041d0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	da0f      	bge.n	80041f8 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80041d8:	78fb      	ldrb	r3, [r7, #3]
 80041da:	f003 020f 	and.w	r2, r3, #15
 80041de:	4613      	mov	r3, r2
 80041e0:	00db      	lsls	r3, r3, #3
 80041e2:	1a9b      	subs	r3, r3, r2
 80041e4:	009b      	lsls	r3, r3, #2
 80041e6:	3338      	adds	r3, #56	@ 0x38
 80041e8:	687a      	ldr	r2, [r7, #4]
 80041ea:	4413      	add	r3, r2
 80041ec:	3304      	adds	r3, #4
 80041ee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	2201      	movs	r2, #1
 80041f4:	705a      	strb	r2, [r3, #1]
 80041f6:	e00d      	b.n	8004214 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80041f8:	78fa      	ldrb	r2, [r7, #3]
 80041fa:	4613      	mov	r3, r2
 80041fc:	00db      	lsls	r3, r3, #3
 80041fe:	1a9b      	subs	r3, r3, r2
 8004200:	009b      	lsls	r3, r3, #2
 8004202:	f503 73fc 	add.w	r3, r3, #504	@ 0x1f8
 8004206:	687a      	ldr	r2, [r7, #4]
 8004208:	4413      	add	r3, r2
 800420a:	3304      	adds	r3, #4
 800420c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	2200      	movs	r2, #0
 8004212:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	2201      	movs	r2, #1
 8004218:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800421a:	78fb      	ldrb	r3, [r7, #3]
 800421c:	f003 030f 	and.w	r3, r3, #15
 8004220:	b2da      	uxtb	r2, r3
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	f893 33bc 	ldrb.w	r3, [r3, #956]	@ 0x3bc
 800422c:	2b01      	cmp	r3, #1
 800422e:	d101      	bne.n	8004234 <HAL_PCD_EP_SetStall+0x82>
 8004230:	2302      	movs	r3, #2
 8004232:	e01c      	b.n	800426e <HAL_PCD_EP_SetStall+0xbc>
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2201      	movs	r2, #1
 8004238:	f883 23bc 	strb.w	r2, [r3, #956]	@ 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	68f9      	ldr	r1, [r7, #12]
 8004242:	4618      	mov	r0, r3
 8004244:	f003 fc16 	bl	8007a74 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004248:	78fb      	ldrb	r3, [r7, #3]
 800424a:	f003 030f 	and.w	r3, r3, #15
 800424e:	2b00      	cmp	r3, #0
 8004250:	d108      	bne.n	8004264 <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681a      	ldr	r2, [r3, #0]
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	f503 7371 	add.w	r3, r3, #964	@ 0x3c4
 800425c:	4619      	mov	r1, r3
 800425e:	4610      	mov	r0, r2
 8004260:	f003 fe08 	bl	8007e74 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2200      	movs	r2, #0
 8004268:	f883 23bc 	strb.w	r2, [r3, #956]	@ 0x3bc

  return HAL_OK;
 800426c:	2300      	movs	r3, #0
}
 800426e:	4618      	mov	r0, r3
 8004270:	3710      	adds	r7, #16
 8004272:	46bd      	mov	sp, r7
 8004274:	bd80      	pop	{r7, pc}

08004276 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004276:	b580      	push	{r7, lr}
 8004278:	b084      	sub	sp, #16
 800427a:	af00      	add	r7, sp, #0
 800427c:	6078      	str	r0, [r7, #4]
 800427e:	460b      	mov	r3, r1
 8004280:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004282:	78fb      	ldrb	r3, [r7, #3]
 8004284:	f003 020f 	and.w	r2, r3, #15
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	685b      	ldr	r3, [r3, #4]
 800428c:	429a      	cmp	r2, r3
 800428e:	d901      	bls.n	8004294 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004290:	2301      	movs	r3, #1
 8004292:	e042      	b.n	800431a <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004294:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004298:	2b00      	cmp	r3, #0
 800429a:	da0f      	bge.n	80042bc <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800429c:	78fb      	ldrb	r3, [r7, #3]
 800429e:	f003 020f 	and.w	r2, r3, #15
 80042a2:	4613      	mov	r3, r2
 80042a4:	00db      	lsls	r3, r3, #3
 80042a6:	1a9b      	subs	r3, r3, r2
 80042a8:	009b      	lsls	r3, r3, #2
 80042aa:	3338      	adds	r3, #56	@ 0x38
 80042ac:	687a      	ldr	r2, [r7, #4]
 80042ae:	4413      	add	r3, r2
 80042b0:	3304      	adds	r3, #4
 80042b2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	2201      	movs	r2, #1
 80042b8:	705a      	strb	r2, [r3, #1]
 80042ba:	e00f      	b.n	80042dc <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80042bc:	78fb      	ldrb	r3, [r7, #3]
 80042be:	f003 020f 	and.w	r2, r3, #15
 80042c2:	4613      	mov	r3, r2
 80042c4:	00db      	lsls	r3, r3, #3
 80042c6:	1a9b      	subs	r3, r3, r2
 80042c8:	009b      	lsls	r3, r3, #2
 80042ca:	f503 73fc 	add.w	r3, r3, #504	@ 0x1f8
 80042ce:	687a      	ldr	r2, [r7, #4]
 80042d0:	4413      	add	r3, r2
 80042d2:	3304      	adds	r3, #4
 80042d4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	2200      	movs	r2, #0
 80042da:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	2200      	movs	r2, #0
 80042e0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80042e2:	78fb      	ldrb	r3, [r7, #3]
 80042e4:	f003 030f 	and.w	r3, r3, #15
 80042e8:	b2da      	uxtb	r2, r3
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	f893 33bc 	ldrb.w	r3, [r3, #956]	@ 0x3bc
 80042f4:	2b01      	cmp	r3, #1
 80042f6:	d101      	bne.n	80042fc <HAL_PCD_EP_ClrStall+0x86>
 80042f8:	2302      	movs	r3, #2
 80042fa:	e00e      	b.n	800431a <HAL_PCD_EP_ClrStall+0xa4>
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2201      	movs	r2, #1
 8004300:	f883 23bc 	strb.w	r2, [r3, #956]	@ 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	68f9      	ldr	r1, [r7, #12]
 800430a:	4618      	mov	r0, r3
 800430c:	f003 fc20 	bl	8007b50 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2200      	movs	r2, #0
 8004314:	f883 23bc 	strb.w	r2, [r3, #956]	@ 0x3bc

  return HAL_OK;
 8004318:	2300      	movs	r3, #0
}
 800431a:	4618      	mov	r0, r3
 800431c:	3710      	adds	r7, #16
 800431e:	46bd      	mov	sp, r7
 8004320:	bd80      	pop	{r7, pc}

08004322 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004322:	b580      	push	{r7, lr}
 8004324:	b088      	sub	sp, #32
 8004326:	af00      	add	r7, sp, #0
 8004328:	6078      	str	r0, [r7, #4]
 800432a:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004332:	697b      	ldr	r3, [r7, #20]
 8004334:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004336:	683a      	ldr	r2, [r7, #0]
 8004338:	4613      	mov	r3, r2
 800433a:	00db      	lsls	r3, r3, #3
 800433c:	1a9b      	subs	r3, r3, r2
 800433e:	009b      	lsls	r3, r3, #2
 8004340:	3338      	adds	r3, #56	@ 0x38
 8004342:	687a      	ldr	r2, [r7, #4]
 8004344:	4413      	add	r3, r2
 8004346:	3304      	adds	r3, #4
 8004348:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	699a      	ldr	r2, [r3, #24]
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	695b      	ldr	r3, [r3, #20]
 8004352:	429a      	cmp	r2, r3
 8004354:	d901      	bls.n	800435a <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004356:	2301      	movs	r3, #1
 8004358:	e067      	b.n	800442a <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	695a      	ldr	r2, [r3, #20]
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	699b      	ldr	r3, [r3, #24]
 8004362:	1ad3      	subs	r3, r2, r3
 8004364:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	689b      	ldr	r3, [r3, #8]
 800436a:	69fa      	ldr	r2, [r7, #28]
 800436c:	429a      	cmp	r2, r3
 800436e:	d902      	bls.n	8004376 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	689b      	ldr	r3, [r3, #8]
 8004374:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004376:	69fb      	ldr	r3, [r7, #28]
 8004378:	3303      	adds	r3, #3
 800437a:	089b      	lsrs	r3, r3, #2
 800437c:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800437e:	e026      	b.n	80043ce <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	695a      	ldr	r2, [r3, #20]
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	699b      	ldr	r3, [r3, #24]
 8004388:	1ad3      	subs	r3, r2, r3
 800438a:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	689b      	ldr	r3, [r3, #8]
 8004390:	69fa      	ldr	r2, [r7, #28]
 8004392:	429a      	cmp	r2, r3
 8004394:	d902      	bls.n	800439c <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	689b      	ldr	r3, [r3, #8]
 800439a:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800439c:	69fb      	ldr	r3, [r7, #28]
 800439e:	3303      	adds	r3, #3
 80043a0:	089b      	lsrs	r3, r3, #2
 80043a2:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	68d9      	ldr	r1, [r3, #12]
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	b2da      	uxtb	r2, r3
 80043ac:	69fb      	ldr	r3, [r7, #28]
 80043ae:	b29b      	uxth	r3, r3
 80043b0:	6978      	ldr	r0, [r7, #20]
 80043b2:	f003 fb05 	bl	80079c0 <USB_WritePacket>

    ep->xfer_buff  += len;
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	68da      	ldr	r2, [r3, #12]
 80043ba:	69fb      	ldr	r3, [r7, #28]
 80043bc:	441a      	add	r2, r3
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	699a      	ldr	r2, [r3, #24]
 80043c6:	69fb      	ldr	r3, [r7, #28]
 80043c8:	441a      	add	r2, r3
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	015a      	lsls	r2, r3, #5
 80043d2:	693b      	ldr	r3, [r7, #16]
 80043d4:	4413      	add	r3, r2
 80043d6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80043da:	699b      	ldr	r3, [r3, #24]
 80043dc:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80043de:	69ba      	ldr	r2, [r7, #24]
 80043e0:	429a      	cmp	r2, r3
 80043e2:	d809      	bhi.n	80043f8 <PCD_WriteEmptyTxFifo+0xd6>
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	699a      	ldr	r2, [r3, #24]
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80043ec:	429a      	cmp	r2, r3
 80043ee:	d203      	bcs.n	80043f8 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	695b      	ldr	r3, [r3, #20]
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d1c3      	bne.n	8004380 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	695a      	ldr	r2, [r3, #20]
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	699b      	ldr	r3, [r3, #24]
 8004400:	429a      	cmp	r2, r3
 8004402:	d811      	bhi.n	8004428 <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	f003 030f 	and.w	r3, r3, #15
 800440a:	2201      	movs	r2, #1
 800440c:	fa02 f303 	lsl.w	r3, r2, r3
 8004410:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004412:	693b      	ldr	r3, [r7, #16]
 8004414:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004418:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800441a:	68bb      	ldr	r3, [r7, #8]
 800441c:	43db      	mvns	r3, r3
 800441e:	6939      	ldr	r1, [r7, #16]
 8004420:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004424:	4013      	ands	r3, r2
 8004426:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8004428:	2300      	movs	r3, #0
}
 800442a:	4618      	mov	r0, r3
 800442c:	3720      	adds	r7, #32
 800442e:	46bd      	mov	sp, r7
 8004430:	bd80      	pop	{r7, pc}
	...

08004434 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004434:	b580      	push	{r7, lr}
 8004436:	b086      	sub	sp, #24
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
 800443c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004444:	697b      	ldr	r3, [r7, #20]
 8004446:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004448:	697b      	ldr	r3, [r7, #20]
 800444a:	333c      	adds	r3, #60	@ 0x3c
 800444c:	3304      	adds	r3, #4
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	015a      	lsls	r2, r3, #5
 8004456:	693b      	ldr	r3, [r7, #16]
 8004458:	4413      	add	r3, r2
 800445a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800445e:	689b      	ldr	r3, [r3, #8]
 8004460:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	4a19      	ldr	r2, [pc, #100]	@ (80044cc <PCD_EP_OutXfrComplete_int+0x98>)
 8004466:	4293      	cmp	r3, r2
 8004468:	d124      	bne.n	80044b4 <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800446a:	68bb      	ldr	r3, [r7, #8]
 800446c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004470:	2b00      	cmp	r3, #0
 8004472:	d00a      	beq.n	800448a <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	015a      	lsls	r2, r3, #5
 8004478:	693b      	ldr	r3, [r7, #16]
 800447a:	4413      	add	r3, r2
 800447c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004480:	461a      	mov	r2, r3
 8004482:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004486:	6093      	str	r3, [r2, #8]
 8004488:	e01a      	b.n	80044c0 <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800448a:	68bb      	ldr	r3, [r7, #8]
 800448c:	f003 0320 	and.w	r3, r3, #32
 8004490:	2b00      	cmp	r3, #0
 8004492:	d008      	beq.n	80044a6 <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	015a      	lsls	r2, r3, #5
 8004498:	693b      	ldr	r3, [r7, #16]
 800449a:	4413      	add	r3, r2
 800449c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80044a0:	461a      	mov	r2, r3
 80044a2:	2320      	movs	r3, #32
 80044a4:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	b2db      	uxtb	r3, r3
 80044aa:	4619      	mov	r1, r3
 80044ac:	6878      	ldr	r0, [r7, #4]
 80044ae:	f005 fa07 	bl	80098c0 <HAL_PCD_DataOutStageCallback>
 80044b2:	e005      	b.n	80044c0 <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	b2db      	uxtb	r3, r3
 80044b8:	4619      	mov	r1, r3
 80044ba:	6878      	ldr	r0, [r7, #4]
 80044bc:	f005 fa00 	bl	80098c0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 80044c0:	2300      	movs	r3, #0
}
 80044c2:	4618      	mov	r0, r3
 80044c4:	3718      	adds	r7, #24
 80044c6:	46bd      	mov	sp, r7
 80044c8:	bd80      	pop	{r7, pc}
 80044ca:	bf00      	nop
 80044cc:	4f54310a 	.word	0x4f54310a

080044d0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	b086      	sub	sp, #24
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
 80044d8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044e0:	697b      	ldr	r3, [r7, #20]
 80044e2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80044e4:	697b      	ldr	r3, [r7, #20]
 80044e6:	333c      	adds	r3, #60	@ 0x3c
 80044e8:	3304      	adds	r3, #4
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80044ee:	683b      	ldr	r3, [r7, #0]
 80044f0:	015a      	lsls	r2, r3, #5
 80044f2:	693b      	ldr	r3, [r7, #16]
 80044f4:	4413      	add	r3, r2
 80044f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80044fa:	689b      	ldr	r3, [r3, #8]
 80044fc:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	4a0c      	ldr	r2, [pc, #48]	@ (8004534 <PCD_EP_OutSetupPacket_int+0x64>)
 8004502:	4293      	cmp	r3, r2
 8004504:	d90e      	bls.n	8004524 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004506:	68bb      	ldr	r3, [r7, #8]
 8004508:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800450c:	2b00      	cmp	r3, #0
 800450e:	d009      	beq.n	8004524 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	015a      	lsls	r2, r3, #5
 8004514:	693b      	ldr	r3, [r7, #16]
 8004516:	4413      	add	r3, r2
 8004518:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800451c:	461a      	mov	r2, r3
 800451e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004522:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004524:	6878      	ldr	r0, [r7, #4]
 8004526:	f005 f9b9 	bl	800989c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 800452a:	2300      	movs	r3, #0
}
 800452c:	4618      	mov	r0, r3
 800452e:	3718      	adds	r7, #24
 8004530:	46bd      	mov	sp, r7
 8004532:	bd80      	pop	{r7, pc}
 8004534:	4f54300a 	.word	0x4f54300a

08004538 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004538:	b480      	push	{r7}
 800453a:	b085      	sub	sp, #20
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
 8004540:	460b      	mov	r3, r1
 8004542:	70fb      	strb	r3, [r7, #3]
 8004544:	4613      	mov	r3, r2
 8004546:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800454e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004550:	78fb      	ldrb	r3, [r7, #3]
 8004552:	2b00      	cmp	r3, #0
 8004554:	d107      	bne.n	8004566 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004556:	883b      	ldrh	r3, [r7, #0]
 8004558:	0419      	lsls	r1, r3, #16
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	68ba      	ldr	r2, [r7, #8]
 8004560:	430a      	orrs	r2, r1
 8004562:	629a      	str	r2, [r3, #40]	@ 0x28
 8004564:	e028      	b.n	80045b8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800456c:	0c1b      	lsrs	r3, r3, #16
 800456e:	68ba      	ldr	r2, [r7, #8]
 8004570:	4413      	add	r3, r2
 8004572:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004574:	2300      	movs	r3, #0
 8004576:	73fb      	strb	r3, [r7, #15]
 8004578:	e00d      	b.n	8004596 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681a      	ldr	r2, [r3, #0]
 800457e:	7bfb      	ldrb	r3, [r7, #15]
 8004580:	3340      	adds	r3, #64	@ 0x40
 8004582:	009b      	lsls	r3, r3, #2
 8004584:	4413      	add	r3, r2
 8004586:	685b      	ldr	r3, [r3, #4]
 8004588:	0c1b      	lsrs	r3, r3, #16
 800458a:	68ba      	ldr	r2, [r7, #8]
 800458c:	4413      	add	r3, r2
 800458e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004590:	7bfb      	ldrb	r3, [r7, #15]
 8004592:	3301      	adds	r3, #1
 8004594:	73fb      	strb	r3, [r7, #15]
 8004596:	7bfa      	ldrb	r2, [r7, #15]
 8004598:	78fb      	ldrb	r3, [r7, #3]
 800459a:	3b01      	subs	r3, #1
 800459c:	429a      	cmp	r2, r3
 800459e:	d3ec      	bcc.n	800457a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80045a0:	883b      	ldrh	r3, [r7, #0]
 80045a2:	0418      	lsls	r0, r3, #16
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6819      	ldr	r1, [r3, #0]
 80045a8:	78fb      	ldrb	r3, [r7, #3]
 80045aa:	3b01      	subs	r3, #1
 80045ac:	68ba      	ldr	r2, [r7, #8]
 80045ae:	4302      	orrs	r2, r0
 80045b0:	3340      	adds	r3, #64	@ 0x40
 80045b2:	009b      	lsls	r3, r3, #2
 80045b4:	440b      	add	r3, r1
 80045b6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80045b8:	2300      	movs	r3, #0
}
 80045ba:	4618      	mov	r0, r3
 80045bc:	3714      	adds	r7, #20
 80045be:	46bd      	mov	sp, r7
 80045c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c4:	4770      	bx	lr

080045c6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80045c6:	b480      	push	{r7}
 80045c8:	b083      	sub	sp, #12
 80045ca:	af00      	add	r7, sp, #0
 80045cc:	6078      	str	r0, [r7, #4]
 80045ce:	460b      	mov	r3, r1
 80045d0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	887a      	ldrh	r2, [r7, #2]
 80045d8:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80045da:	2300      	movs	r3, #0
}
 80045dc:	4618      	mov	r0, r3
 80045de:	370c      	adds	r7, #12
 80045e0:	46bd      	mov	sp, r7
 80045e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e6:	4770      	bx	lr

080045e8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80045e8:	b480      	push	{r7}
 80045ea:	b085      	sub	sp, #20
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	2201      	movs	r2, #1
 80045fa:	f8c3 23fc 	str.w	r2, [r3, #1020]	@ 0x3fc
  hpcd->LPM_State = LPM_L0;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	2200      	movs	r2, #0
 8004602:	f883 23f4 	strb.w	r2, [r3, #1012]	@ 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	699b      	ldr	r3, [r3, #24]
 800460a:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004616:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800461a:	f043 0303 	orr.w	r3, r3, #3
 800461e:	68fa      	ldr	r2, [r7, #12]
 8004620:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8004622:	2300      	movs	r3, #0
}
 8004624:	4618      	mov	r0, r3
 8004626:	3714      	adds	r7, #20
 8004628:	46bd      	mov	sp, r7
 800462a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462e:	4770      	bx	lr

08004630 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004630:	b480      	push	{r7}
 8004632:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004634:	4b05      	ldr	r3, [pc, #20]	@ (800464c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	4a04      	ldr	r2, [pc, #16]	@ (800464c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800463a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800463e:	6013      	str	r3, [r2, #0]
}
 8004640:	bf00      	nop
 8004642:	46bd      	mov	sp, r7
 8004644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004648:	4770      	bx	lr
 800464a:	bf00      	nop
 800464c:	40007000 	.word	0x40007000

08004650 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004650:	b480      	push	{r7}
 8004652:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004654:	4b04      	ldr	r3, [pc, #16]	@ (8004668 <HAL_PWREx_GetVoltageRange+0x18>)
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 800465c:	4618      	mov	r0, r3
 800465e:	46bd      	mov	sp, r7
 8004660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004664:	4770      	bx	lr
 8004666:	bf00      	nop
 8004668:	40007000 	.word	0x40007000

0800466c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800466c:	b480      	push	{r7}
 800466e:	b085      	sub	sp, #20
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800467a:	d130      	bne.n	80046de <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800467c:	4b23      	ldr	r3, [pc, #140]	@ (800470c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004684:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004688:	d038      	beq.n	80046fc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800468a:	4b20      	ldr	r3, [pc, #128]	@ (800470c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004692:	4a1e      	ldr	r2, [pc, #120]	@ (800470c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004694:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004698:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800469a:	4b1d      	ldr	r3, [pc, #116]	@ (8004710 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	2232      	movs	r2, #50	@ 0x32
 80046a0:	fb02 f303 	mul.w	r3, r2, r3
 80046a4:	4a1b      	ldr	r2, [pc, #108]	@ (8004714 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80046a6:	fba2 2303 	umull	r2, r3, r2, r3
 80046aa:	0c9b      	lsrs	r3, r3, #18
 80046ac:	3301      	adds	r3, #1
 80046ae:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80046b0:	e002      	b.n	80046b8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	3b01      	subs	r3, #1
 80046b6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80046b8:	4b14      	ldr	r3, [pc, #80]	@ (800470c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80046ba:	695b      	ldr	r3, [r3, #20]
 80046bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80046c0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80046c4:	d102      	bne.n	80046cc <HAL_PWREx_ControlVoltageScaling+0x60>
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d1f2      	bne.n	80046b2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80046cc:	4b0f      	ldr	r3, [pc, #60]	@ (800470c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80046ce:	695b      	ldr	r3, [r3, #20]
 80046d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80046d4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80046d8:	d110      	bne.n	80046fc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80046da:	2303      	movs	r3, #3
 80046dc:	e00f      	b.n	80046fe <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80046de:	4b0b      	ldr	r3, [pc, #44]	@ (800470c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80046e6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80046ea:	d007      	beq.n	80046fc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80046ec:	4b07      	ldr	r3, [pc, #28]	@ (800470c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80046f4:	4a05      	ldr	r2, [pc, #20]	@ (800470c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80046f6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80046fa:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80046fc:	2300      	movs	r3, #0
}
 80046fe:	4618      	mov	r0, r3
 8004700:	3714      	adds	r7, #20
 8004702:	46bd      	mov	sp, r7
 8004704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004708:	4770      	bx	lr
 800470a:	bf00      	nop
 800470c:	40007000 	.word	0x40007000
 8004710:	20000004 	.word	0x20000004
 8004714:	431bde83 	.word	0x431bde83

08004718 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8004718:	b480      	push	{r7}
 800471a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 800471c:	4b05      	ldr	r3, [pc, #20]	@ (8004734 <HAL_PWREx_EnableVddUSB+0x1c>)
 800471e:	685b      	ldr	r3, [r3, #4]
 8004720:	4a04      	ldr	r2, [pc, #16]	@ (8004734 <HAL_PWREx_EnableVddUSB+0x1c>)
 8004722:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004726:	6053      	str	r3, [r2, #4]
}
 8004728:	bf00      	nop
 800472a:	46bd      	mov	sp, r7
 800472c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004730:	4770      	bx	lr
 8004732:	bf00      	nop
 8004734:	40007000 	.word	0x40007000

08004738 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004738:	b580      	push	{r7, lr}
 800473a:	b088      	sub	sp, #32
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2b00      	cmp	r3, #0
 8004744:	d101      	bne.n	800474a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004746:	2301      	movs	r3, #1
 8004748:	e3d8      	b.n	8004efc <HAL_RCC_OscConfig+0x7c4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800474a:	4b97      	ldr	r3, [pc, #604]	@ (80049a8 <HAL_RCC_OscConfig+0x270>)
 800474c:	689b      	ldr	r3, [r3, #8]
 800474e:	f003 030c 	and.w	r3, r3, #12
 8004752:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004754:	4b94      	ldr	r3, [pc, #592]	@ (80049a8 <HAL_RCC_OscConfig+0x270>)
 8004756:	68db      	ldr	r3, [r3, #12]
 8004758:	f003 0303 	and.w	r3, r3, #3
 800475c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f003 0310 	and.w	r3, r3, #16
 8004766:	2b00      	cmp	r3, #0
 8004768:	f000 80e4 	beq.w	8004934 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800476c:	69bb      	ldr	r3, [r7, #24]
 800476e:	2b00      	cmp	r3, #0
 8004770:	d007      	beq.n	8004782 <HAL_RCC_OscConfig+0x4a>
 8004772:	69bb      	ldr	r3, [r7, #24]
 8004774:	2b0c      	cmp	r3, #12
 8004776:	f040 808b 	bne.w	8004890 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800477a:	697b      	ldr	r3, [r7, #20]
 800477c:	2b01      	cmp	r3, #1
 800477e:	f040 8087 	bne.w	8004890 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004782:	4b89      	ldr	r3, [pc, #548]	@ (80049a8 <HAL_RCC_OscConfig+0x270>)
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f003 0302 	and.w	r3, r3, #2
 800478a:	2b00      	cmp	r3, #0
 800478c:	d005      	beq.n	800479a <HAL_RCC_OscConfig+0x62>
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	699b      	ldr	r3, [r3, #24]
 8004792:	2b00      	cmp	r3, #0
 8004794:	d101      	bne.n	800479a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8004796:	2301      	movs	r3, #1
 8004798:	e3b0      	b.n	8004efc <HAL_RCC_OscConfig+0x7c4>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6a1a      	ldr	r2, [r3, #32]
 800479e:	4b82      	ldr	r3, [pc, #520]	@ (80049a8 <HAL_RCC_OscConfig+0x270>)
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f003 0308 	and.w	r3, r3, #8
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d004      	beq.n	80047b4 <HAL_RCC_OscConfig+0x7c>
 80047aa:	4b7f      	ldr	r3, [pc, #508]	@ (80049a8 <HAL_RCC_OscConfig+0x270>)
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80047b2:	e005      	b.n	80047c0 <HAL_RCC_OscConfig+0x88>
 80047b4:	4b7c      	ldr	r3, [pc, #496]	@ (80049a8 <HAL_RCC_OscConfig+0x270>)
 80047b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80047ba:	091b      	lsrs	r3, r3, #4
 80047bc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80047c0:	4293      	cmp	r3, r2
 80047c2:	d223      	bcs.n	800480c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	6a1b      	ldr	r3, [r3, #32]
 80047c8:	4618      	mov	r0, r3
 80047ca:	f000 fd43 	bl	8005254 <RCC_SetFlashLatencyFromMSIRange>
 80047ce:	4603      	mov	r3, r0
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d001      	beq.n	80047d8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80047d4:	2301      	movs	r3, #1
 80047d6:	e391      	b.n	8004efc <HAL_RCC_OscConfig+0x7c4>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80047d8:	4b73      	ldr	r3, [pc, #460]	@ (80049a8 <HAL_RCC_OscConfig+0x270>)
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	4a72      	ldr	r2, [pc, #456]	@ (80049a8 <HAL_RCC_OscConfig+0x270>)
 80047de:	f043 0308 	orr.w	r3, r3, #8
 80047e2:	6013      	str	r3, [r2, #0]
 80047e4:	4b70      	ldr	r3, [pc, #448]	@ (80049a8 <HAL_RCC_OscConfig+0x270>)
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	6a1b      	ldr	r3, [r3, #32]
 80047f0:	496d      	ldr	r1, [pc, #436]	@ (80049a8 <HAL_RCC_OscConfig+0x270>)
 80047f2:	4313      	orrs	r3, r2
 80047f4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80047f6:	4b6c      	ldr	r3, [pc, #432]	@ (80049a8 <HAL_RCC_OscConfig+0x270>)
 80047f8:	685b      	ldr	r3, [r3, #4]
 80047fa:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	69db      	ldr	r3, [r3, #28]
 8004802:	021b      	lsls	r3, r3, #8
 8004804:	4968      	ldr	r1, [pc, #416]	@ (80049a8 <HAL_RCC_OscConfig+0x270>)
 8004806:	4313      	orrs	r3, r2
 8004808:	604b      	str	r3, [r1, #4]
 800480a:	e025      	b.n	8004858 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800480c:	4b66      	ldr	r3, [pc, #408]	@ (80049a8 <HAL_RCC_OscConfig+0x270>)
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	4a65      	ldr	r2, [pc, #404]	@ (80049a8 <HAL_RCC_OscConfig+0x270>)
 8004812:	f043 0308 	orr.w	r3, r3, #8
 8004816:	6013      	str	r3, [r2, #0]
 8004818:	4b63      	ldr	r3, [pc, #396]	@ (80049a8 <HAL_RCC_OscConfig+0x270>)
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	6a1b      	ldr	r3, [r3, #32]
 8004824:	4960      	ldr	r1, [pc, #384]	@ (80049a8 <HAL_RCC_OscConfig+0x270>)
 8004826:	4313      	orrs	r3, r2
 8004828:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800482a:	4b5f      	ldr	r3, [pc, #380]	@ (80049a8 <HAL_RCC_OscConfig+0x270>)
 800482c:	685b      	ldr	r3, [r3, #4]
 800482e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	69db      	ldr	r3, [r3, #28]
 8004836:	021b      	lsls	r3, r3, #8
 8004838:	495b      	ldr	r1, [pc, #364]	@ (80049a8 <HAL_RCC_OscConfig+0x270>)
 800483a:	4313      	orrs	r3, r2
 800483c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800483e:	69bb      	ldr	r3, [r7, #24]
 8004840:	2b00      	cmp	r3, #0
 8004842:	d109      	bne.n	8004858 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6a1b      	ldr	r3, [r3, #32]
 8004848:	4618      	mov	r0, r3
 800484a:	f000 fd03 	bl	8005254 <RCC_SetFlashLatencyFromMSIRange>
 800484e:	4603      	mov	r3, r0
 8004850:	2b00      	cmp	r3, #0
 8004852:	d001      	beq.n	8004858 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8004854:	2301      	movs	r3, #1
 8004856:	e351      	b.n	8004efc <HAL_RCC_OscConfig+0x7c4>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004858:	f000 fc38 	bl	80050cc <HAL_RCC_GetSysClockFreq>
 800485c:	4602      	mov	r2, r0
 800485e:	4b52      	ldr	r3, [pc, #328]	@ (80049a8 <HAL_RCC_OscConfig+0x270>)
 8004860:	689b      	ldr	r3, [r3, #8]
 8004862:	091b      	lsrs	r3, r3, #4
 8004864:	f003 030f 	and.w	r3, r3, #15
 8004868:	4950      	ldr	r1, [pc, #320]	@ (80049ac <HAL_RCC_OscConfig+0x274>)
 800486a:	5ccb      	ldrb	r3, [r1, r3]
 800486c:	f003 031f 	and.w	r3, r3, #31
 8004870:	fa22 f303 	lsr.w	r3, r2, r3
 8004874:	4a4e      	ldr	r2, [pc, #312]	@ (80049b0 <HAL_RCC_OscConfig+0x278>)
 8004876:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004878:	4b4e      	ldr	r3, [pc, #312]	@ (80049b4 <HAL_RCC_OscConfig+0x27c>)
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	4618      	mov	r0, r3
 800487e:	f7fe fac9 	bl	8002e14 <HAL_InitTick>
 8004882:	4603      	mov	r3, r0
 8004884:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004886:	7bfb      	ldrb	r3, [r7, #15]
 8004888:	2b00      	cmp	r3, #0
 800488a:	d052      	beq.n	8004932 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800488c:	7bfb      	ldrb	r3, [r7, #15]
 800488e:	e335      	b.n	8004efc <HAL_RCC_OscConfig+0x7c4>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	699b      	ldr	r3, [r3, #24]
 8004894:	2b00      	cmp	r3, #0
 8004896:	d032      	beq.n	80048fe <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004898:	4b43      	ldr	r3, [pc, #268]	@ (80049a8 <HAL_RCC_OscConfig+0x270>)
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	4a42      	ldr	r2, [pc, #264]	@ (80049a8 <HAL_RCC_OscConfig+0x270>)
 800489e:	f043 0301 	orr.w	r3, r3, #1
 80048a2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80048a4:	f7fe fb06 	bl	8002eb4 <HAL_GetTick>
 80048a8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80048aa:	e008      	b.n	80048be <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80048ac:	f7fe fb02 	bl	8002eb4 <HAL_GetTick>
 80048b0:	4602      	mov	r2, r0
 80048b2:	693b      	ldr	r3, [r7, #16]
 80048b4:	1ad3      	subs	r3, r2, r3
 80048b6:	2b02      	cmp	r3, #2
 80048b8:	d901      	bls.n	80048be <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80048ba:	2303      	movs	r3, #3
 80048bc:	e31e      	b.n	8004efc <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80048be:	4b3a      	ldr	r3, [pc, #232]	@ (80049a8 <HAL_RCC_OscConfig+0x270>)
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f003 0302 	and.w	r3, r3, #2
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d0f0      	beq.n	80048ac <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80048ca:	4b37      	ldr	r3, [pc, #220]	@ (80049a8 <HAL_RCC_OscConfig+0x270>)
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	4a36      	ldr	r2, [pc, #216]	@ (80049a8 <HAL_RCC_OscConfig+0x270>)
 80048d0:	f043 0308 	orr.w	r3, r3, #8
 80048d4:	6013      	str	r3, [r2, #0]
 80048d6:	4b34      	ldr	r3, [pc, #208]	@ (80049a8 <HAL_RCC_OscConfig+0x270>)
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6a1b      	ldr	r3, [r3, #32]
 80048e2:	4931      	ldr	r1, [pc, #196]	@ (80049a8 <HAL_RCC_OscConfig+0x270>)
 80048e4:	4313      	orrs	r3, r2
 80048e6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80048e8:	4b2f      	ldr	r3, [pc, #188]	@ (80049a8 <HAL_RCC_OscConfig+0x270>)
 80048ea:	685b      	ldr	r3, [r3, #4]
 80048ec:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	69db      	ldr	r3, [r3, #28]
 80048f4:	021b      	lsls	r3, r3, #8
 80048f6:	492c      	ldr	r1, [pc, #176]	@ (80049a8 <HAL_RCC_OscConfig+0x270>)
 80048f8:	4313      	orrs	r3, r2
 80048fa:	604b      	str	r3, [r1, #4]
 80048fc:	e01a      	b.n	8004934 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80048fe:	4b2a      	ldr	r3, [pc, #168]	@ (80049a8 <HAL_RCC_OscConfig+0x270>)
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	4a29      	ldr	r2, [pc, #164]	@ (80049a8 <HAL_RCC_OscConfig+0x270>)
 8004904:	f023 0301 	bic.w	r3, r3, #1
 8004908:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800490a:	f7fe fad3 	bl	8002eb4 <HAL_GetTick>
 800490e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004910:	e008      	b.n	8004924 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004912:	f7fe facf 	bl	8002eb4 <HAL_GetTick>
 8004916:	4602      	mov	r2, r0
 8004918:	693b      	ldr	r3, [r7, #16]
 800491a:	1ad3      	subs	r3, r2, r3
 800491c:	2b02      	cmp	r3, #2
 800491e:	d901      	bls.n	8004924 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8004920:	2303      	movs	r3, #3
 8004922:	e2eb      	b.n	8004efc <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004924:	4b20      	ldr	r3, [pc, #128]	@ (80049a8 <HAL_RCC_OscConfig+0x270>)
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f003 0302 	and.w	r3, r3, #2
 800492c:	2b00      	cmp	r3, #0
 800492e:	d1f0      	bne.n	8004912 <HAL_RCC_OscConfig+0x1da>
 8004930:	e000      	b.n	8004934 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004932:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f003 0301 	and.w	r3, r3, #1
 800493c:	2b00      	cmp	r3, #0
 800493e:	d074      	beq.n	8004a2a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004940:	69bb      	ldr	r3, [r7, #24]
 8004942:	2b08      	cmp	r3, #8
 8004944:	d005      	beq.n	8004952 <HAL_RCC_OscConfig+0x21a>
 8004946:	69bb      	ldr	r3, [r7, #24]
 8004948:	2b0c      	cmp	r3, #12
 800494a:	d10e      	bne.n	800496a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800494c:	697b      	ldr	r3, [r7, #20]
 800494e:	2b03      	cmp	r3, #3
 8004950:	d10b      	bne.n	800496a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004952:	4b15      	ldr	r3, [pc, #84]	@ (80049a8 <HAL_RCC_OscConfig+0x270>)
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800495a:	2b00      	cmp	r3, #0
 800495c:	d064      	beq.n	8004a28 <HAL_RCC_OscConfig+0x2f0>
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	685b      	ldr	r3, [r3, #4]
 8004962:	2b00      	cmp	r3, #0
 8004964:	d160      	bne.n	8004a28 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004966:	2301      	movs	r3, #1
 8004968:	e2c8      	b.n	8004efc <HAL_RCC_OscConfig+0x7c4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	685b      	ldr	r3, [r3, #4]
 800496e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004972:	d106      	bne.n	8004982 <HAL_RCC_OscConfig+0x24a>
 8004974:	4b0c      	ldr	r3, [pc, #48]	@ (80049a8 <HAL_RCC_OscConfig+0x270>)
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	4a0b      	ldr	r2, [pc, #44]	@ (80049a8 <HAL_RCC_OscConfig+0x270>)
 800497a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800497e:	6013      	str	r3, [r2, #0]
 8004980:	e026      	b.n	80049d0 <HAL_RCC_OscConfig+0x298>
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	685b      	ldr	r3, [r3, #4]
 8004986:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800498a:	d115      	bne.n	80049b8 <HAL_RCC_OscConfig+0x280>
 800498c:	4b06      	ldr	r3, [pc, #24]	@ (80049a8 <HAL_RCC_OscConfig+0x270>)
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	4a05      	ldr	r2, [pc, #20]	@ (80049a8 <HAL_RCC_OscConfig+0x270>)
 8004992:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004996:	6013      	str	r3, [r2, #0]
 8004998:	4b03      	ldr	r3, [pc, #12]	@ (80049a8 <HAL_RCC_OscConfig+0x270>)
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	4a02      	ldr	r2, [pc, #8]	@ (80049a8 <HAL_RCC_OscConfig+0x270>)
 800499e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80049a2:	6013      	str	r3, [r2, #0]
 80049a4:	e014      	b.n	80049d0 <HAL_RCC_OscConfig+0x298>
 80049a6:	bf00      	nop
 80049a8:	40021000 	.word	0x40021000
 80049ac:	0800ca68 	.word	0x0800ca68
 80049b0:	20000004 	.word	0x20000004
 80049b4:	200000a4 	.word	0x200000a4
 80049b8:	4ba0      	ldr	r3, [pc, #640]	@ (8004c3c <HAL_RCC_OscConfig+0x504>)
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	4a9f      	ldr	r2, [pc, #636]	@ (8004c3c <HAL_RCC_OscConfig+0x504>)
 80049be:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80049c2:	6013      	str	r3, [r2, #0]
 80049c4:	4b9d      	ldr	r3, [pc, #628]	@ (8004c3c <HAL_RCC_OscConfig+0x504>)
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	4a9c      	ldr	r2, [pc, #624]	@ (8004c3c <HAL_RCC_OscConfig+0x504>)
 80049ca:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80049ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	685b      	ldr	r3, [r3, #4]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d013      	beq.n	8004a00 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049d8:	f7fe fa6c 	bl	8002eb4 <HAL_GetTick>
 80049dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80049de:	e008      	b.n	80049f2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80049e0:	f7fe fa68 	bl	8002eb4 <HAL_GetTick>
 80049e4:	4602      	mov	r2, r0
 80049e6:	693b      	ldr	r3, [r7, #16]
 80049e8:	1ad3      	subs	r3, r2, r3
 80049ea:	2b64      	cmp	r3, #100	@ 0x64
 80049ec:	d901      	bls.n	80049f2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80049ee:	2303      	movs	r3, #3
 80049f0:	e284      	b.n	8004efc <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80049f2:	4b92      	ldr	r3, [pc, #584]	@ (8004c3c <HAL_RCC_OscConfig+0x504>)
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d0f0      	beq.n	80049e0 <HAL_RCC_OscConfig+0x2a8>
 80049fe:	e014      	b.n	8004a2a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a00:	f7fe fa58 	bl	8002eb4 <HAL_GetTick>
 8004a04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004a06:	e008      	b.n	8004a1a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004a08:	f7fe fa54 	bl	8002eb4 <HAL_GetTick>
 8004a0c:	4602      	mov	r2, r0
 8004a0e:	693b      	ldr	r3, [r7, #16]
 8004a10:	1ad3      	subs	r3, r2, r3
 8004a12:	2b64      	cmp	r3, #100	@ 0x64
 8004a14:	d901      	bls.n	8004a1a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004a16:	2303      	movs	r3, #3
 8004a18:	e270      	b.n	8004efc <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004a1a:	4b88      	ldr	r3, [pc, #544]	@ (8004c3c <HAL_RCC_OscConfig+0x504>)
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d1f0      	bne.n	8004a08 <HAL_RCC_OscConfig+0x2d0>
 8004a26:	e000      	b.n	8004a2a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a28:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f003 0302 	and.w	r3, r3, #2
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d060      	beq.n	8004af8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004a36:	69bb      	ldr	r3, [r7, #24]
 8004a38:	2b04      	cmp	r3, #4
 8004a3a:	d005      	beq.n	8004a48 <HAL_RCC_OscConfig+0x310>
 8004a3c:	69bb      	ldr	r3, [r7, #24]
 8004a3e:	2b0c      	cmp	r3, #12
 8004a40:	d119      	bne.n	8004a76 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004a42:	697b      	ldr	r3, [r7, #20]
 8004a44:	2b02      	cmp	r3, #2
 8004a46:	d116      	bne.n	8004a76 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004a48:	4b7c      	ldr	r3, [pc, #496]	@ (8004c3c <HAL_RCC_OscConfig+0x504>)
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d005      	beq.n	8004a60 <HAL_RCC_OscConfig+0x328>
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	68db      	ldr	r3, [r3, #12]
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d101      	bne.n	8004a60 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004a5c:	2301      	movs	r3, #1
 8004a5e:	e24d      	b.n	8004efc <HAL_RCC_OscConfig+0x7c4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a60:	4b76      	ldr	r3, [pc, #472]	@ (8004c3c <HAL_RCC_OscConfig+0x504>)
 8004a62:	685b      	ldr	r3, [r3, #4]
 8004a64:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	691b      	ldr	r3, [r3, #16]
 8004a6c:	061b      	lsls	r3, r3, #24
 8004a6e:	4973      	ldr	r1, [pc, #460]	@ (8004c3c <HAL_RCC_OscConfig+0x504>)
 8004a70:	4313      	orrs	r3, r2
 8004a72:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004a74:	e040      	b.n	8004af8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	68db      	ldr	r3, [r3, #12]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d023      	beq.n	8004ac6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004a7e:	4b6f      	ldr	r3, [pc, #444]	@ (8004c3c <HAL_RCC_OscConfig+0x504>)
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	4a6e      	ldr	r2, [pc, #440]	@ (8004c3c <HAL_RCC_OscConfig+0x504>)
 8004a84:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004a88:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a8a:	f7fe fa13 	bl	8002eb4 <HAL_GetTick>
 8004a8e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004a90:	e008      	b.n	8004aa4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004a92:	f7fe fa0f 	bl	8002eb4 <HAL_GetTick>
 8004a96:	4602      	mov	r2, r0
 8004a98:	693b      	ldr	r3, [r7, #16]
 8004a9a:	1ad3      	subs	r3, r2, r3
 8004a9c:	2b02      	cmp	r3, #2
 8004a9e:	d901      	bls.n	8004aa4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004aa0:	2303      	movs	r3, #3
 8004aa2:	e22b      	b.n	8004efc <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004aa4:	4b65      	ldr	r3, [pc, #404]	@ (8004c3c <HAL_RCC_OscConfig+0x504>)
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d0f0      	beq.n	8004a92 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ab0:	4b62      	ldr	r3, [pc, #392]	@ (8004c3c <HAL_RCC_OscConfig+0x504>)
 8004ab2:	685b      	ldr	r3, [r3, #4]
 8004ab4:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	691b      	ldr	r3, [r3, #16]
 8004abc:	061b      	lsls	r3, r3, #24
 8004abe:	495f      	ldr	r1, [pc, #380]	@ (8004c3c <HAL_RCC_OscConfig+0x504>)
 8004ac0:	4313      	orrs	r3, r2
 8004ac2:	604b      	str	r3, [r1, #4]
 8004ac4:	e018      	b.n	8004af8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004ac6:	4b5d      	ldr	r3, [pc, #372]	@ (8004c3c <HAL_RCC_OscConfig+0x504>)
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	4a5c      	ldr	r2, [pc, #368]	@ (8004c3c <HAL_RCC_OscConfig+0x504>)
 8004acc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004ad0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ad2:	f7fe f9ef 	bl	8002eb4 <HAL_GetTick>
 8004ad6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004ad8:	e008      	b.n	8004aec <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ada:	f7fe f9eb 	bl	8002eb4 <HAL_GetTick>
 8004ade:	4602      	mov	r2, r0
 8004ae0:	693b      	ldr	r3, [r7, #16]
 8004ae2:	1ad3      	subs	r3, r2, r3
 8004ae4:	2b02      	cmp	r3, #2
 8004ae6:	d901      	bls.n	8004aec <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004ae8:	2303      	movs	r3, #3
 8004aea:	e207      	b.n	8004efc <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004aec:	4b53      	ldr	r3, [pc, #332]	@ (8004c3c <HAL_RCC_OscConfig+0x504>)
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d1f0      	bne.n	8004ada <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f003 0308 	and.w	r3, r3, #8
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d03c      	beq.n	8004b7e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	695b      	ldr	r3, [r3, #20]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d01c      	beq.n	8004b46 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004b0c:	4b4b      	ldr	r3, [pc, #300]	@ (8004c3c <HAL_RCC_OscConfig+0x504>)
 8004b0e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004b12:	4a4a      	ldr	r2, [pc, #296]	@ (8004c3c <HAL_RCC_OscConfig+0x504>)
 8004b14:	f043 0301 	orr.w	r3, r3, #1
 8004b18:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b1c:	f7fe f9ca 	bl	8002eb4 <HAL_GetTick>
 8004b20:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004b22:	e008      	b.n	8004b36 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004b24:	f7fe f9c6 	bl	8002eb4 <HAL_GetTick>
 8004b28:	4602      	mov	r2, r0
 8004b2a:	693b      	ldr	r3, [r7, #16]
 8004b2c:	1ad3      	subs	r3, r2, r3
 8004b2e:	2b02      	cmp	r3, #2
 8004b30:	d901      	bls.n	8004b36 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004b32:	2303      	movs	r3, #3
 8004b34:	e1e2      	b.n	8004efc <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004b36:	4b41      	ldr	r3, [pc, #260]	@ (8004c3c <HAL_RCC_OscConfig+0x504>)
 8004b38:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004b3c:	f003 0302 	and.w	r3, r3, #2
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d0ef      	beq.n	8004b24 <HAL_RCC_OscConfig+0x3ec>
 8004b44:	e01b      	b.n	8004b7e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004b46:	4b3d      	ldr	r3, [pc, #244]	@ (8004c3c <HAL_RCC_OscConfig+0x504>)
 8004b48:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004b4c:	4a3b      	ldr	r2, [pc, #236]	@ (8004c3c <HAL_RCC_OscConfig+0x504>)
 8004b4e:	f023 0301 	bic.w	r3, r3, #1
 8004b52:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b56:	f7fe f9ad 	bl	8002eb4 <HAL_GetTick>
 8004b5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004b5c:	e008      	b.n	8004b70 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004b5e:	f7fe f9a9 	bl	8002eb4 <HAL_GetTick>
 8004b62:	4602      	mov	r2, r0
 8004b64:	693b      	ldr	r3, [r7, #16]
 8004b66:	1ad3      	subs	r3, r2, r3
 8004b68:	2b02      	cmp	r3, #2
 8004b6a:	d901      	bls.n	8004b70 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004b6c:	2303      	movs	r3, #3
 8004b6e:	e1c5      	b.n	8004efc <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004b70:	4b32      	ldr	r3, [pc, #200]	@ (8004c3c <HAL_RCC_OscConfig+0x504>)
 8004b72:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004b76:	f003 0302 	and.w	r3, r3, #2
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d1ef      	bne.n	8004b5e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f003 0304 	and.w	r3, r3, #4
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	f000 80a6 	beq.w	8004cd8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004b8c:	2300      	movs	r3, #0
 8004b8e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004b90:	4b2a      	ldr	r3, [pc, #168]	@ (8004c3c <HAL_RCC_OscConfig+0x504>)
 8004b92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b94:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d10d      	bne.n	8004bb8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b9c:	4b27      	ldr	r3, [pc, #156]	@ (8004c3c <HAL_RCC_OscConfig+0x504>)
 8004b9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ba0:	4a26      	ldr	r2, [pc, #152]	@ (8004c3c <HAL_RCC_OscConfig+0x504>)
 8004ba2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004ba6:	6593      	str	r3, [r2, #88]	@ 0x58
 8004ba8:	4b24      	ldr	r3, [pc, #144]	@ (8004c3c <HAL_RCC_OscConfig+0x504>)
 8004baa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004bac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004bb0:	60bb      	str	r3, [r7, #8]
 8004bb2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004bb4:	2301      	movs	r3, #1
 8004bb6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004bb8:	4b21      	ldr	r3, [pc, #132]	@ (8004c40 <HAL_RCC_OscConfig+0x508>)
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d118      	bne.n	8004bf6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004bc4:	4b1e      	ldr	r3, [pc, #120]	@ (8004c40 <HAL_RCC_OscConfig+0x508>)
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	4a1d      	ldr	r2, [pc, #116]	@ (8004c40 <HAL_RCC_OscConfig+0x508>)
 8004bca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004bce:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004bd0:	f7fe f970 	bl	8002eb4 <HAL_GetTick>
 8004bd4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004bd6:	e008      	b.n	8004bea <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004bd8:	f7fe f96c 	bl	8002eb4 <HAL_GetTick>
 8004bdc:	4602      	mov	r2, r0
 8004bde:	693b      	ldr	r3, [r7, #16]
 8004be0:	1ad3      	subs	r3, r2, r3
 8004be2:	2b02      	cmp	r3, #2
 8004be4:	d901      	bls.n	8004bea <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004be6:	2303      	movs	r3, #3
 8004be8:	e188      	b.n	8004efc <HAL_RCC_OscConfig+0x7c4>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004bea:	4b15      	ldr	r3, [pc, #84]	@ (8004c40 <HAL_RCC_OscConfig+0x508>)
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d0f0      	beq.n	8004bd8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	689b      	ldr	r3, [r3, #8]
 8004bfa:	2b01      	cmp	r3, #1
 8004bfc:	d108      	bne.n	8004c10 <HAL_RCC_OscConfig+0x4d8>
 8004bfe:	4b0f      	ldr	r3, [pc, #60]	@ (8004c3c <HAL_RCC_OscConfig+0x504>)
 8004c00:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c04:	4a0d      	ldr	r2, [pc, #52]	@ (8004c3c <HAL_RCC_OscConfig+0x504>)
 8004c06:	f043 0301 	orr.w	r3, r3, #1
 8004c0a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004c0e:	e029      	b.n	8004c64 <HAL_RCC_OscConfig+0x52c>
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	689b      	ldr	r3, [r3, #8]
 8004c14:	2b05      	cmp	r3, #5
 8004c16:	d115      	bne.n	8004c44 <HAL_RCC_OscConfig+0x50c>
 8004c18:	4b08      	ldr	r3, [pc, #32]	@ (8004c3c <HAL_RCC_OscConfig+0x504>)
 8004c1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c1e:	4a07      	ldr	r2, [pc, #28]	@ (8004c3c <HAL_RCC_OscConfig+0x504>)
 8004c20:	f043 0304 	orr.w	r3, r3, #4
 8004c24:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004c28:	4b04      	ldr	r3, [pc, #16]	@ (8004c3c <HAL_RCC_OscConfig+0x504>)
 8004c2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c2e:	4a03      	ldr	r2, [pc, #12]	@ (8004c3c <HAL_RCC_OscConfig+0x504>)
 8004c30:	f043 0301 	orr.w	r3, r3, #1
 8004c34:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004c38:	e014      	b.n	8004c64 <HAL_RCC_OscConfig+0x52c>
 8004c3a:	bf00      	nop
 8004c3c:	40021000 	.word	0x40021000
 8004c40:	40007000 	.word	0x40007000
 8004c44:	4b91      	ldr	r3, [pc, #580]	@ (8004e8c <HAL_RCC_OscConfig+0x754>)
 8004c46:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c4a:	4a90      	ldr	r2, [pc, #576]	@ (8004e8c <HAL_RCC_OscConfig+0x754>)
 8004c4c:	f023 0301 	bic.w	r3, r3, #1
 8004c50:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004c54:	4b8d      	ldr	r3, [pc, #564]	@ (8004e8c <HAL_RCC_OscConfig+0x754>)
 8004c56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c5a:	4a8c      	ldr	r2, [pc, #560]	@ (8004e8c <HAL_RCC_OscConfig+0x754>)
 8004c5c:	f023 0304 	bic.w	r3, r3, #4
 8004c60:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	689b      	ldr	r3, [r3, #8]
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d016      	beq.n	8004c9a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c6c:	f7fe f922 	bl	8002eb4 <HAL_GetTick>
 8004c70:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004c72:	e00a      	b.n	8004c8a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c74:	f7fe f91e 	bl	8002eb4 <HAL_GetTick>
 8004c78:	4602      	mov	r2, r0
 8004c7a:	693b      	ldr	r3, [r7, #16]
 8004c7c:	1ad3      	subs	r3, r2, r3
 8004c7e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c82:	4293      	cmp	r3, r2
 8004c84:	d901      	bls.n	8004c8a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004c86:	2303      	movs	r3, #3
 8004c88:	e138      	b.n	8004efc <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004c8a:	4b80      	ldr	r3, [pc, #512]	@ (8004e8c <HAL_RCC_OscConfig+0x754>)
 8004c8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c90:	f003 0302 	and.w	r3, r3, #2
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d0ed      	beq.n	8004c74 <HAL_RCC_OscConfig+0x53c>
 8004c98:	e015      	b.n	8004cc6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c9a:	f7fe f90b 	bl	8002eb4 <HAL_GetTick>
 8004c9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004ca0:	e00a      	b.n	8004cb8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ca2:	f7fe f907 	bl	8002eb4 <HAL_GetTick>
 8004ca6:	4602      	mov	r2, r0
 8004ca8:	693b      	ldr	r3, [r7, #16]
 8004caa:	1ad3      	subs	r3, r2, r3
 8004cac:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004cb0:	4293      	cmp	r3, r2
 8004cb2:	d901      	bls.n	8004cb8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004cb4:	2303      	movs	r3, #3
 8004cb6:	e121      	b.n	8004efc <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004cb8:	4b74      	ldr	r3, [pc, #464]	@ (8004e8c <HAL_RCC_OscConfig+0x754>)
 8004cba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004cbe:	f003 0302 	and.w	r3, r3, #2
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d1ed      	bne.n	8004ca2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004cc6:	7ffb      	ldrb	r3, [r7, #31]
 8004cc8:	2b01      	cmp	r3, #1
 8004cca:	d105      	bne.n	8004cd8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ccc:	4b6f      	ldr	r3, [pc, #444]	@ (8004e8c <HAL_RCC_OscConfig+0x754>)
 8004cce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004cd0:	4a6e      	ldr	r2, [pc, #440]	@ (8004e8c <HAL_RCC_OscConfig+0x754>)
 8004cd2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004cd6:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	f000 810c 	beq.w	8004efa <HAL_RCC_OscConfig+0x7c2>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ce6:	2b02      	cmp	r3, #2
 8004ce8:	f040 80d4 	bne.w	8004e94 <HAL_RCC_OscConfig+0x75c>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004cec:	4b67      	ldr	r3, [pc, #412]	@ (8004e8c <HAL_RCC_OscConfig+0x754>)
 8004cee:	68db      	ldr	r3, [r3, #12]
 8004cf0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004cf2:	697b      	ldr	r3, [r7, #20]
 8004cf4:	f003 0203 	and.w	r2, r3, #3
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cfc:	429a      	cmp	r2, r3
 8004cfe:	d130      	bne.n	8004d62 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004d00:	697b      	ldr	r3, [r7, #20]
 8004d02:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d0a:	3b01      	subs	r3, #1
 8004d0c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d0e:	429a      	cmp	r2, r3
 8004d10:	d127      	bne.n	8004d62 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004d12:	697b      	ldr	r3, [r7, #20]
 8004d14:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d1c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004d1e:	429a      	cmp	r2, r3
 8004d20:	d11f      	bne.n	8004d62 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004d22:	697b      	ldr	r3, [r7, #20]
 8004d24:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d28:	687a      	ldr	r2, [r7, #4]
 8004d2a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004d2c:	2a07      	cmp	r2, #7
 8004d2e:	bf14      	ite	ne
 8004d30:	2201      	movne	r2, #1
 8004d32:	2200      	moveq	r2, #0
 8004d34:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004d36:	4293      	cmp	r3, r2
 8004d38:	d113      	bne.n	8004d62 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004d3a:	697b      	ldr	r3, [r7, #20]
 8004d3c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d44:	085b      	lsrs	r3, r3, #1
 8004d46:	3b01      	subs	r3, #1
 8004d48:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004d4a:	429a      	cmp	r2, r3
 8004d4c:	d109      	bne.n	8004d62 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004d4e:	697b      	ldr	r3, [r7, #20]
 8004d50:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d58:	085b      	lsrs	r3, r3, #1
 8004d5a:	3b01      	subs	r3, #1
 8004d5c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004d5e:	429a      	cmp	r2, r3
 8004d60:	d06e      	beq.n	8004e40 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004d62:	69bb      	ldr	r3, [r7, #24]
 8004d64:	2b0c      	cmp	r3, #12
 8004d66:	d069      	beq.n	8004e3c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004d68:	4b48      	ldr	r3, [pc, #288]	@ (8004e8c <HAL_RCC_OscConfig+0x754>)
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d105      	bne.n	8004d80 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004d74:	4b45      	ldr	r3, [pc, #276]	@ (8004e8c <HAL_RCC_OscConfig+0x754>)
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d001      	beq.n	8004d84 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8004d80:	2301      	movs	r3, #1
 8004d82:	e0bb      	b.n	8004efc <HAL_RCC_OscConfig+0x7c4>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004d84:	4b41      	ldr	r3, [pc, #260]	@ (8004e8c <HAL_RCC_OscConfig+0x754>)
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	4a40      	ldr	r2, [pc, #256]	@ (8004e8c <HAL_RCC_OscConfig+0x754>)
 8004d8a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004d8e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004d90:	f7fe f890 	bl	8002eb4 <HAL_GetTick>
 8004d94:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004d96:	e008      	b.n	8004daa <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d98:	f7fe f88c 	bl	8002eb4 <HAL_GetTick>
 8004d9c:	4602      	mov	r2, r0
 8004d9e:	693b      	ldr	r3, [r7, #16]
 8004da0:	1ad3      	subs	r3, r2, r3
 8004da2:	2b02      	cmp	r3, #2
 8004da4:	d901      	bls.n	8004daa <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8004da6:	2303      	movs	r3, #3
 8004da8:	e0a8      	b.n	8004efc <HAL_RCC_OscConfig+0x7c4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004daa:	4b38      	ldr	r3, [pc, #224]	@ (8004e8c <HAL_RCC_OscConfig+0x754>)
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d1f0      	bne.n	8004d98 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004db6:	4b35      	ldr	r3, [pc, #212]	@ (8004e8c <HAL_RCC_OscConfig+0x754>)
 8004db8:	68da      	ldr	r2, [r3, #12]
 8004dba:	4b35      	ldr	r3, [pc, #212]	@ (8004e90 <HAL_RCC_OscConfig+0x758>)
 8004dbc:	4013      	ands	r3, r2
 8004dbe:	687a      	ldr	r2, [r7, #4]
 8004dc0:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8004dc2:	687a      	ldr	r2, [r7, #4]
 8004dc4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004dc6:	3a01      	subs	r2, #1
 8004dc8:	0112      	lsls	r2, r2, #4
 8004dca:	4311      	orrs	r1, r2
 8004dcc:	687a      	ldr	r2, [r7, #4]
 8004dce:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004dd0:	0212      	lsls	r2, r2, #8
 8004dd2:	4311      	orrs	r1, r2
 8004dd4:	687a      	ldr	r2, [r7, #4]
 8004dd6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004dd8:	0852      	lsrs	r2, r2, #1
 8004dda:	3a01      	subs	r2, #1
 8004ddc:	0552      	lsls	r2, r2, #21
 8004dde:	4311      	orrs	r1, r2
 8004de0:	687a      	ldr	r2, [r7, #4]
 8004de2:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8004de4:	0852      	lsrs	r2, r2, #1
 8004de6:	3a01      	subs	r2, #1
 8004de8:	0652      	lsls	r2, r2, #25
 8004dea:	4311      	orrs	r1, r2
 8004dec:	687a      	ldr	r2, [r7, #4]
 8004dee:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004df0:	0912      	lsrs	r2, r2, #4
 8004df2:	0452      	lsls	r2, r2, #17
 8004df4:	430a      	orrs	r2, r1
 8004df6:	4925      	ldr	r1, [pc, #148]	@ (8004e8c <HAL_RCC_OscConfig+0x754>)
 8004df8:	4313      	orrs	r3, r2
 8004dfa:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004dfc:	4b23      	ldr	r3, [pc, #140]	@ (8004e8c <HAL_RCC_OscConfig+0x754>)
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	4a22      	ldr	r2, [pc, #136]	@ (8004e8c <HAL_RCC_OscConfig+0x754>)
 8004e02:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004e06:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004e08:	4b20      	ldr	r3, [pc, #128]	@ (8004e8c <HAL_RCC_OscConfig+0x754>)
 8004e0a:	68db      	ldr	r3, [r3, #12]
 8004e0c:	4a1f      	ldr	r2, [pc, #124]	@ (8004e8c <HAL_RCC_OscConfig+0x754>)
 8004e0e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004e12:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004e14:	f7fe f84e 	bl	8002eb4 <HAL_GetTick>
 8004e18:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004e1a:	e008      	b.n	8004e2e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e1c:	f7fe f84a 	bl	8002eb4 <HAL_GetTick>
 8004e20:	4602      	mov	r2, r0
 8004e22:	693b      	ldr	r3, [r7, #16]
 8004e24:	1ad3      	subs	r3, r2, r3
 8004e26:	2b02      	cmp	r3, #2
 8004e28:	d901      	bls.n	8004e2e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8004e2a:	2303      	movs	r3, #3
 8004e2c:	e066      	b.n	8004efc <HAL_RCC_OscConfig+0x7c4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004e2e:	4b17      	ldr	r3, [pc, #92]	@ (8004e8c <HAL_RCC_OscConfig+0x754>)
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d0f0      	beq.n	8004e1c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004e3a:	e05e      	b.n	8004efa <HAL_RCC_OscConfig+0x7c2>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004e3c:	2301      	movs	r3, #1
 8004e3e:	e05d      	b.n	8004efc <HAL_RCC_OscConfig+0x7c4>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004e40:	4b12      	ldr	r3, [pc, #72]	@ (8004e8c <HAL_RCC_OscConfig+0x754>)
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d156      	bne.n	8004efa <HAL_RCC_OscConfig+0x7c2>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004e4c:	4b0f      	ldr	r3, [pc, #60]	@ (8004e8c <HAL_RCC_OscConfig+0x754>)
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	4a0e      	ldr	r2, [pc, #56]	@ (8004e8c <HAL_RCC_OscConfig+0x754>)
 8004e52:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004e56:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004e58:	4b0c      	ldr	r3, [pc, #48]	@ (8004e8c <HAL_RCC_OscConfig+0x754>)
 8004e5a:	68db      	ldr	r3, [r3, #12]
 8004e5c:	4a0b      	ldr	r2, [pc, #44]	@ (8004e8c <HAL_RCC_OscConfig+0x754>)
 8004e5e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004e62:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004e64:	f7fe f826 	bl	8002eb4 <HAL_GetTick>
 8004e68:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004e6a:	e008      	b.n	8004e7e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e6c:	f7fe f822 	bl	8002eb4 <HAL_GetTick>
 8004e70:	4602      	mov	r2, r0
 8004e72:	693b      	ldr	r3, [r7, #16]
 8004e74:	1ad3      	subs	r3, r2, r3
 8004e76:	2b02      	cmp	r3, #2
 8004e78:	d901      	bls.n	8004e7e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8004e7a:	2303      	movs	r3, #3
 8004e7c:	e03e      	b.n	8004efc <HAL_RCC_OscConfig+0x7c4>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004e7e:	4b03      	ldr	r3, [pc, #12]	@ (8004e8c <HAL_RCC_OscConfig+0x754>)
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d0f0      	beq.n	8004e6c <HAL_RCC_OscConfig+0x734>
 8004e8a:	e036      	b.n	8004efa <HAL_RCC_OscConfig+0x7c2>
 8004e8c:	40021000 	.word	0x40021000
 8004e90:	f99d808c 	.word	0xf99d808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004e94:	69bb      	ldr	r3, [r7, #24]
 8004e96:	2b0c      	cmp	r3, #12
 8004e98:	d02d      	beq.n	8004ef6 <HAL_RCC_OscConfig+0x7be>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e9a:	4b1a      	ldr	r3, [pc, #104]	@ (8004f04 <HAL_RCC_OscConfig+0x7cc>)
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	4a19      	ldr	r2, [pc, #100]	@ (8004f04 <HAL_RCC_OscConfig+0x7cc>)
 8004ea0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004ea4:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8004ea6:	4b17      	ldr	r3, [pc, #92]	@ (8004f04 <HAL_RCC_OscConfig+0x7cc>)
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f003 5320 	and.w	r3, r3, #671088640	@ 0x28000000
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d105      	bne.n	8004ebe <HAL_RCC_OscConfig+0x786>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8004eb2:	4b14      	ldr	r3, [pc, #80]	@ (8004f04 <HAL_RCC_OscConfig+0x7cc>)
 8004eb4:	68db      	ldr	r3, [r3, #12]
 8004eb6:	4a13      	ldr	r2, [pc, #76]	@ (8004f04 <HAL_RCC_OscConfig+0x7cc>)
 8004eb8:	f023 0303 	bic.w	r3, r3, #3
 8004ebc:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004ebe:	4b11      	ldr	r3, [pc, #68]	@ (8004f04 <HAL_RCC_OscConfig+0x7cc>)
 8004ec0:	68db      	ldr	r3, [r3, #12]
 8004ec2:	4a10      	ldr	r2, [pc, #64]	@ (8004f04 <HAL_RCC_OscConfig+0x7cc>)
 8004ec4:	f023 7388 	bic.w	r3, r3, #17825792	@ 0x1100000
 8004ec8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004ecc:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ece:	f7fd fff1 	bl	8002eb4 <HAL_GetTick>
 8004ed2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004ed4:	e008      	b.n	8004ee8 <HAL_RCC_OscConfig+0x7b0>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ed6:	f7fd ffed 	bl	8002eb4 <HAL_GetTick>
 8004eda:	4602      	mov	r2, r0
 8004edc:	693b      	ldr	r3, [r7, #16]
 8004ede:	1ad3      	subs	r3, r2, r3
 8004ee0:	2b02      	cmp	r3, #2
 8004ee2:	d901      	bls.n	8004ee8 <HAL_RCC_OscConfig+0x7b0>
          {
            return HAL_TIMEOUT;
 8004ee4:	2303      	movs	r3, #3
 8004ee6:	e009      	b.n	8004efc <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004ee8:	4b06      	ldr	r3, [pc, #24]	@ (8004f04 <HAL_RCC_OscConfig+0x7cc>)
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d1f0      	bne.n	8004ed6 <HAL_RCC_OscConfig+0x79e>
 8004ef4:	e001      	b.n	8004efa <HAL_RCC_OscConfig+0x7c2>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004ef6:	2301      	movs	r3, #1
 8004ef8:	e000      	b.n	8004efc <HAL_RCC_OscConfig+0x7c4>
      }
    }
  }
  return HAL_OK;
 8004efa:	2300      	movs	r3, #0
}
 8004efc:	4618      	mov	r0, r3
 8004efe:	3720      	adds	r7, #32
 8004f00:	46bd      	mov	sp, r7
 8004f02:	bd80      	pop	{r7, pc}
 8004f04:	40021000 	.word	0x40021000

08004f08 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	b084      	sub	sp, #16
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]
 8004f10:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d101      	bne.n	8004f1c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004f18:	2301      	movs	r3, #1
 8004f1a:	e0c8      	b.n	80050ae <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004f1c:	4b66      	ldr	r3, [pc, #408]	@ (80050b8 <HAL_RCC_ClockConfig+0x1b0>)
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f003 0307 	and.w	r3, r3, #7
 8004f24:	683a      	ldr	r2, [r7, #0]
 8004f26:	429a      	cmp	r2, r3
 8004f28:	d910      	bls.n	8004f4c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f2a:	4b63      	ldr	r3, [pc, #396]	@ (80050b8 <HAL_RCC_ClockConfig+0x1b0>)
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f023 0207 	bic.w	r2, r3, #7
 8004f32:	4961      	ldr	r1, [pc, #388]	@ (80050b8 <HAL_RCC_ClockConfig+0x1b0>)
 8004f34:	683b      	ldr	r3, [r7, #0]
 8004f36:	4313      	orrs	r3, r2
 8004f38:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f3a:	4b5f      	ldr	r3, [pc, #380]	@ (80050b8 <HAL_RCC_ClockConfig+0x1b0>)
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f003 0307 	and.w	r3, r3, #7
 8004f42:	683a      	ldr	r2, [r7, #0]
 8004f44:	429a      	cmp	r2, r3
 8004f46:	d001      	beq.n	8004f4c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004f48:	2301      	movs	r3, #1
 8004f4a:	e0b0      	b.n	80050ae <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f003 0301 	and.w	r3, r3, #1
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d04c      	beq.n	8004ff2 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	685b      	ldr	r3, [r3, #4]
 8004f5c:	2b03      	cmp	r3, #3
 8004f5e:	d107      	bne.n	8004f70 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f60:	4b56      	ldr	r3, [pc, #344]	@ (80050bc <HAL_RCC_ClockConfig+0x1b4>)
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d121      	bne.n	8004fb0 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8004f6c:	2301      	movs	r3, #1
 8004f6e:	e09e      	b.n	80050ae <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	685b      	ldr	r3, [r3, #4]
 8004f74:	2b02      	cmp	r3, #2
 8004f76:	d107      	bne.n	8004f88 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004f78:	4b50      	ldr	r3, [pc, #320]	@ (80050bc <HAL_RCC_ClockConfig+0x1b4>)
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d115      	bne.n	8004fb0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004f84:	2301      	movs	r3, #1
 8004f86:	e092      	b.n	80050ae <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	685b      	ldr	r3, [r3, #4]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d107      	bne.n	8004fa0 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004f90:	4b4a      	ldr	r3, [pc, #296]	@ (80050bc <HAL_RCC_ClockConfig+0x1b4>)
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f003 0302 	and.w	r3, r3, #2
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d109      	bne.n	8004fb0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004f9c:	2301      	movs	r3, #1
 8004f9e:	e086      	b.n	80050ae <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004fa0:	4b46      	ldr	r3, [pc, #280]	@ (80050bc <HAL_RCC_ClockConfig+0x1b4>)
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d101      	bne.n	8004fb0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004fac:	2301      	movs	r3, #1
 8004fae:	e07e      	b.n	80050ae <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004fb0:	4b42      	ldr	r3, [pc, #264]	@ (80050bc <HAL_RCC_ClockConfig+0x1b4>)
 8004fb2:	689b      	ldr	r3, [r3, #8]
 8004fb4:	f023 0203 	bic.w	r2, r3, #3
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	685b      	ldr	r3, [r3, #4]
 8004fbc:	493f      	ldr	r1, [pc, #252]	@ (80050bc <HAL_RCC_ClockConfig+0x1b4>)
 8004fbe:	4313      	orrs	r3, r2
 8004fc0:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004fc2:	f7fd ff77 	bl	8002eb4 <HAL_GetTick>
 8004fc6:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004fc8:	e00a      	b.n	8004fe0 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004fca:	f7fd ff73 	bl	8002eb4 <HAL_GetTick>
 8004fce:	4602      	mov	r2, r0
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	1ad3      	subs	r3, r2, r3
 8004fd4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004fd8:	4293      	cmp	r3, r2
 8004fda:	d901      	bls.n	8004fe0 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8004fdc:	2303      	movs	r3, #3
 8004fde:	e066      	b.n	80050ae <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004fe0:	4b36      	ldr	r3, [pc, #216]	@ (80050bc <HAL_RCC_ClockConfig+0x1b4>)
 8004fe2:	689b      	ldr	r3, [r3, #8]
 8004fe4:	f003 020c 	and.w	r2, r3, #12
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	685b      	ldr	r3, [r3, #4]
 8004fec:	009b      	lsls	r3, r3, #2
 8004fee:	429a      	cmp	r2, r3
 8004ff0:	d1eb      	bne.n	8004fca <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f003 0302 	and.w	r3, r3, #2
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d008      	beq.n	8005010 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004ffe:	4b2f      	ldr	r3, [pc, #188]	@ (80050bc <HAL_RCC_ClockConfig+0x1b4>)
 8005000:	689b      	ldr	r3, [r3, #8]
 8005002:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	689b      	ldr	r3, [r3, #8]
 800500a:	492c      	ldr	r1, [pc, #176]	@ (80050bc <HAL_RCC_ClockConfig+0x1b4>)
 800500c:	4313      	orrs	r3, r2
 800500e:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005010:	4b29      	ldr	r3, [pc, #164]	@ (80050b8 <HAL_RCC_ClockConfig+0x1b0>)
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f003 0307 	and.w	r3, r3, #7
 8005018:	683a      	ldr	r2, [r7, #0]
 800501a:	429a      	cmp	r2, r3
 800501c:	d210      	bcs.n	8005040 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800501e:	4b26      	ldr	r3, [pc, #152]	@ (80050b8 <HAL_RCC_ClockConfig+0x1b0>)
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f023 0207 	bic.w	r2, r3, #7
 8005026:	4924      	ldr	r1, [pc, #144]	@ (80050b8 <HAL_RCC_ClockConfig+0x1b0>)
 8005028:	683b      	ldr	r3, [r7, #0]
 800502a:	4313      	orrs	r3, r2
 800502c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800502e:	4b22      	ldr	r3, [pc, #136]	@ (80050b8 <HAL_RCC_ClockConfig+0x1b0>)
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f003 0307 	and.w	r3, r3, #7
 8005036:	683a      	ldr	r2, [r7, #0]
 8005038:	429a      	cmp	r2, r3
 800503a:	d001      	beq.n	8005040 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 800503c:	2301      	movs	r3, #1
 800503e:	e036      	b.n	80050ae <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f003 0304 	and.w	r3, r3, #4
 8005048:	2b00      	cmp	r3, #0
 800504a:	d008      	beq.n	800505e <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800504c:	4b1b      	ldr	r3, [pc, #108]	@ (80050bc <HAL_RCC_ClockConfig+0x1b4>)
 800504e:	689b      	ldr	r3, [r3, #8]
 8005050:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	68db      	ldr	r3, [r3, #12]
 8005058:	4918      	ldr	r1, [pc, #96]	@ (80050bc <HAL_RCC_ClockConfig+0x1b4>)
 800505a:	4313      	orrs	r3, r2
 800505c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f003 0308 	and.w	r3, r3, #8
 8005066:	2b00      	cmp	r3, #0
 8005068:	d009      	beq.n	800507e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800506a:	4b14      	ldr	r3, [pc, #80]	@ (80050bc <HAL_RCC_ClockConfig+0x1b4>)
 800506c:	689b      	ldr	r3, [r3, #8]
 800506e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	691b      	ldr	r3, [r3, #16]
 8005076:	00db      	lsls	r3, r3, #3
 8005078:	4910      	ldr	r1, [pc, #64]	@ (80050bc <HAL_RCC_ClockConfig+0x1b4>)
 800507a:	4313      	orrs	r3, r2
 800507c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800507e:	f000 f825 	bl	80050cc <HAL_RCC_GetSysClockFreq>
 8005082:	4602      	mov	r2, r0
 8005084:	4b0d      	ldr	r3, [pc, #52]	@ (80050bc <HAL_RCC_ClockConfig+0x1b4>)
 8005086:	689b      	ldr	r3, [r3, #8]
 8005088:	091b      	lsrs	r3, r3, #4
 800508a:	f003 030f 	and.w	r3, r3, #15
 800508e:	490c      	ldr	r1, [pc, #48]	@ (80050c0 <HAL_RCC_ClockConfig+0x1b8>)
 8005090:	5ccb      	ldrb	r3, [r1, r3]
 8005092:	f003 031f 	and.w	r3, r3, #31
 8005096:	fa22 f303 	lsr.w	r3, r2, r3
 800509a:	4a0a      	ldr	r2, [pc, #40]	@ (80050c4 <HAL_RCC_ClockConfig+0x1bc>)
 800509c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800509e:	4b0a      	ldr	r3, [pc, #40]	@ (80050c8 <HAL_RCC_ClockConfig+0x1c0>)
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	4618      	mov	r0, r3
 80050a4:	f7fd feb6 	bl	8002e14 <HAL_InitTick>
 80050a8:	4603      	mov	r3, r0
 80050aa:	72fb      	strb	r3, [r7, #11]

  return status;
 80050ac:	7afb      	ldrb	r3, [r7, #11]
}
 80050ae:	4618      	mov	r0, r3
 80050b0:	3710      	adds	r7, #16
 80050b2:	46bd      	mov	sp, r7
 80050b4:	bd80      	pop	{r7, pc}
 80050b6:	bf00      	nop
 80050b8:	40022000 	.word	0x40022000
 80050bc:	40021000 	.word	0x40021000
 80050c0:	0800ca68 	.word	0x0800ca68
 80050c4:	20000004 	.word	0x20000004
 80050c8:	200000a4 	.word	0x200000a4

080050cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80050cc:	b480      	push	{r7}
 80050ce:	b089      	sub	sp, #36	@ 0x24
 80050d0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80050d2:	2300      	movs	r3, #0
 80050d4:	61fb      	str	r3, [r7, #28]
 80050d6:	2300      	movs	r3, #0
 80050d8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80050da:	4b3e      	ldr	r3, [pc, #248]	@ (80051d4 <HAL_RCC_GetSysClockFreq+0x108>)
 80050dc:	689b      	ldr	r3, [r3, #8]
 80050de:	f003 030c 	and.w	r3, r3, #12
 80050e2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80050e4:	4b3b      	ldr	r3, [pc, #236]	@ (80051d4 <HAL_RCC_GetSysClockFreq+0x108>)
 80050e6:	68db      	ldr	r3, [r3, #12]
 80050e8:	f003 0303 	and.w	r3, r3, #3
 80050ec:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80050ee:	693b      	ldr	r3, [r7, #16]
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d005      	beq.n	8005100 <HAL_RCC_GetSysClockFreq+0x34>
 80050f4:	693b      	ldr	r3, [r7, #16]
 80050f6:	2b0c      	cmp	r3, #12
 80050f8:	d121      	bne.n	800513e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	2b01      	cmp	r3, #1
 80050fe:	d11e      	bne.n	800513e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005100:	4b34      	ldr	r3, [pc, #208]	@ (80051d4 <HAL_RCC_GetSysClockFreq+0x108>)
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f003 0308 	and.w	r3, r3, #8
 8005108:	2b00      	cmp	r3, #0
 800510a:	d107      	bne.n	800511c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800510c:	4b31      	ldr	r3, [pc, #196]	@ (80051d4 <HAL_RCC_GetSysClockFreq+0x108>)
 800510e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005112:	0a1b      	lsrs	r3, r3, #8
 8005114:	f003 030f 	and.w	r3, r3, #15
 8005118:	61fb      	str	r3, [r7, #28]
 800511a:	e005      	b.n	8005128 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800511c:	4b2d      	ldr	r3, [pc, #180]	@ (80051d4 <HAL_RCC_GetSysClockFreq+0x108>)
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	091b      	lsrs	r3, r3, #4
 8005122:	f003 030f 	and.w	r3, r3, #15
 8005126:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005128:	4a2b      	ldr	r2, [pc, #172]	@ (80051d8 <HAL_RCC_GetSysClockFreq+0x10c>)
 800512a:	69fb      	ldr	r3, [r7, #28]
 800512c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005130:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005132:	693b      	ldr	r3, [r7, #16]
 8005134:	2b00      	cmp	r3, #0
 8005136:	d10d      	bne.n	8005154 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005138:	69fb      	ldr	r3, [r7, #28]
 800513a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800513c:	e00a      	b.n	8005154 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800513e:	693b      	ldr	r3, [r7, #16]
 8005140:	2b04      	cmp	r3, #4
 8005142:	d102      	bne.n	800514a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005144:	4b25      	ldr	r3, [pc, #148]	@ (80051dc <HAL_RCC_GetSysClockFreq+0x110>)
 8005146:	61bb      	str	r3, [r7, #24]
 8005148:	e004      	b.n	8005154 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800514a:	693b      	ldr	r3, [r7, #16]
 800514c:	2b08      	cmp	r3, #8
 800514e:	d101      	bne.n	8005154 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005150:	4b23      	ldr	r3, [pc, #140]	@ (80051e0 <HAL_RCC_GetSysClockFreq+0x114>)
 8005152:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005154:	693b      	ldr	r3, [r7, #16]
 8005156:	2b0c      	cmp	r3, #12
 8005158:	d134      	bne.n	80051c4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800515a:	4b1e      	ldr	r3, [pc, #120]	@ (80051d4 <HAL_RCC_GetSysClockFreq+0x108>)
 800515c:	68db      	ldr	r3, [r3, #12]
 800515e:	f003 0303 	and.w	r3, r3, #3
 8005162:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005164:	68bb      	ldr	r3, [r7, #8]
 8005166:	2b02      	cmp	r3, #2
 8005168:	d003      	beq.n	8005172 <HAL_RCC_GetSysClockFreq+0xa6>
 800516a:	68bb      	ldr	r3, [r7, #8]
 800516c:	2b03      	cmp	r3, #3
 800516e:	d003      	beq.n	8005178 <HAL_RCC_GetSysClockFreq+0xac>
 8005170:	e005      	b.n	800517e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8005172:	4b1a      	ldr	r3, [pc, #104]	@ (80051dc <HAL_RCC_GetSysClockFreq+0x110>)
 8005174:	617b      	str	r3, [r7, #20]
      break;
 8005176:	e005      	b.n	8005184 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005178:	4b19      	ldr	r3, [pc, #100]	@ (80051e0 <HAL_RCC_GetSysClockFreq+0x114>)
 800517a:	617b      	str	r3, [r7, #20]
      break;
 800517c:	e002      	b.n	8005184 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800517e:	69fb      	ldr	r3, [r7, #28]
 8005180:	617b      	str	r3, [r7, #20]
      break;
 8005182:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005184:	4b13      	ldr	r3, [pc, #76]	@ (80051d4 <HAL_RCC_GetSysClockFreq+0x108>)
 8005186:	68db      	ldr	r3, [r3, #12]
 8005188:	091b      	lsrs	r3, r3, #4
 800518a:	f003 0307 	and.w	r3, r3, #7
 800518e:	3301      	adds	r3, #1
 8005190:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005192:	4b10      	ldr	r3, [pc, #64]	@ (80051d4 <HAL_RCC_GetSysClockFreq+0x108>)
 8005194:	68db      	ldr	r3, [r3, #12]
 8005196:	0a1b      	lsrs	r3, r3, #8
 8005198:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800519c:	697a      	ldr	r2, [r7, #20]
 800519e:	fb03 f202 	mul.w	r2, r3, r2
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80051a8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80051aa:	4b0a      	ldr	r3, [pc, #40]	@ (80051d4 <HAL_RCC_GetSysClockFreq+0x108>)
 80051ac:	68db      	ldr	r3, [r3, #12]
 80051ae:	0e5b      	lsrs	r3, r3, #25
 80051b0:	f003 0303 	and.w	r3, r3, #3
 80051b4:	3301      	adds	r3, #1
 80051b6:	005b      	lsls	r3, r3, #1
 80051b8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80051ba:	697a      	ldr	r2, [r7, #20]
 80051bc:	683b      	ldr	r3, [r7, #0]
 80051be:	fbb2 f3f3 	udiv	r3, r2, r3
 80051c2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80051c4:	69bb      	ldr	r3, [r7, #24]
}
 80051c6:	4618      	mov	r0, r3
 80051c8:	3724      	adds	r7, #36	@ 0x24
 80051ca:	46bd      	mov	sp, r7
 80051cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d0:	4770      	bx	lr
 80051d2:	bf00      	nop
 80051d4:	40021000 	.word	0x40021000
 80051d8:	0800ca80 	.word	0x0800ca80
 80051dc:	00f42400 	.word	0x00f42400
 80051e0:	007a1200 	.word	0x007a1200

080051e4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80051e4:	b480      	push	{r7}
 80051e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80051e8:	4b03      	ldr	r3, [pc, #12]	@ (80051f8 <HAL_RCC_GetHCLKFreq+0x14>)
 80051ea:	681b      	ldr	r3, [r3, #0]
}
 80051ec:	4618      	mov	r0, r3
 80051ee:	46bd      	mov	sp, r7
 80051f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f4:	4770      	bx	lr
 80051f6:	bf00      	nop
 80051f8:	20000004 	.word	0x20000004

080051fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80051fc:	b580      	push	{r7, lr}
 80051fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005200:	f7ff fff0 	bl	80051e4 <HAL_RCC_GetHCLKFreq>
 8005204:	4602      	mov	r2, r0
 8005206:	4b06      	ldr	r3, [pc, #24]	@ (8005220 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005208:	689b      	ldr	r3, [r3, #8]
 800520a:	0a1b      	lsrs	r3, r3, #8
 800520c:	f003 0307 	and.w	r3, r3, #7
 8005210:	4904      	ldr	r1, [pc, #16]	@ (8005224 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005212:	5ccb      	ldrb	r3, [r1, r3]
 8005214:	f003 031f 	and.w	r3, r3, #31
 8005218:	fa22 f303 	lsr.w	r3, r2, r3
}
 800521c:	4618      	mov	r0, r3
 800521e:	bd80      	pop	{r7, pc}
 8005220:	40021000 	.word	0x40021000
 8005224:	0800ca78 	.word	0x0800ca78

08005228 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005228:	b580      	push	{r7, lr}
 800522a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800522c:	f7ff ffda 	bl	80051e4 <HAL_RCC_GetHCLKFreq>
 8005230:	4602      	mov	r2, r0
 8005232:	4b06      	ldr	r3, [pc, #24]	@ (800524c <HAL_RCC_GetPCLK2Freq+0x24>)
 8005234:	689b      	ldr	r3, [r3, #8]
 8005236:	0adb      	lsrs	r3, r3, #11
 8005238:	f003 0307 	and.w	r3, r3, #7
 800523c:	4904      	ldr	r1, [pc, #16]	@ (8005250 <HAL_RCC_GetPCLK2Freq+0x28>)
 800523e:	5ccb      	ldrb	r3, [r1, r3]
 8005240:	f003 031f 	and.w	r3, r3, #31
 8005244:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005248:	4618      	mov	r0, r3
 800524a:	bd80      	pop	{r7, pc}
 800524c:	40021000 	.word	0x40021000
 8005250:	0800ca78 	.word	0x0800ca78

08005254 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005254:	b580      	push	{r7, lr}
 8005256:	b086      	sub	sp, #24
 8005258:	af00      	add	r7, sp, #0
 800525a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800525c:	2300      	movs	r3, #0
 800525e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005260:	4b2a      	ldr	r3, [pc, #168]	@ (800530c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005262:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005264:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005268:	2b00      	cmp	r3, #0
 800526a:	d003      	beq.n	8005274 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800526c:	f7ff f9f0 	bl	8004650 <HAL_PWREx_GetVoltageRange>
 8005270:	6178      	str	r0, [r7, #20]
 8005272:	e014      	b.n	800529e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005274:	4b25      	ldr	r3, [pc, #148]	@ (800530c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005276:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005278:	4a24      	ldr	r2, [pc, #144]	@ (800530c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800527a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800527e:	6593      	str	r3, [r2, #88]	@ 0x58
 8005280:	4b22      	ldr	r3, [pc, #136]	@ (800530c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005282:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005284:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005288:	60fb      	str	r3, [r7, #12]
 800528a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800528c:	f7ff f9e0 	bl	8004650 <HAL_PWREx_GetVoltageRange>
 8005290:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005292:	4b1e      	ldr	r3, [pc, #120]	@ (800530c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005294:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005296:	4a1d      	ldr	r2, [pc, #116]	@ (800530c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005298:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800529c:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800529e:	697b      	ldr	r3, [r7, #20]
 80052a0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80052a4:	d10b      	bne.n	80052be <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	2b80      	cmp	r3, #128	@ 0x80
 80052aa:	d919      	bls.n	80052e0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2ba0      	cmp	r3, #160	@ 0xa0
 80052b0:	d902      	bls.n	80052b8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80052b2:	2302      	movs	r3, #2
 80052b4:	613b      	str	r3, [r7, #16]
 80052b6:	e013      	b.n	80052e0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80052b8:	2301      	movs	r3, #1
 80052ba:	613b      	str	r3, [r7, #16]
 80052bc:	e010      	b.n	80052e0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	2b80      	cmp	r3, #128	@ 0x80
 80052c2:	d902      	bls.n	80052ca <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80052c4:	2303      	movs	r3, #3
 80052c6:	613b      	str	r3, [r7, #16]
 80052c8:	e00a      	b.n	80052e0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	2b80      	cmp	r3, #128	@ 0x80
 80052ce:	d102      	bne.n	80052d6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80052d0:	2302      	movs	r3, #2
 80052d2:	613b      	str	r3, [r7, #16]
 80052d4:	e004      	b.n	80052e0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	2b70      	cmp	r3, #112	@ 0x70
 80052da:	d101      	bne.n	80052e0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80052dc:	2301      	movs	r3, #1
 80052de:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80052e0:	4b0b      	ldr	r3, [pc, #44]	@ (8005310 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f023 0207 	bic.w	r2, r3, #7
 80052e8:	4909      	ldr	r1, [pc, #36]	@ (8005310 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80052ea:	693b      	ldr	r3, [r7, #16]
 80052ec:	4313      	orrs	r3, r2
 80052ee:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80052f0:	4b07      	ldr	r3, [pc, #28]	@ (8005310 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f003 0307 	and.w	r3, r3, #7
 80052f8:	693a      	ldr	r2, [r7, #16]
 80052fa:	429a      	cmp	r2, r3
 80052fc:	d001      	beq.n	8005302 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80052fe:	2301      	movs	r3, #1
 8005300:	e000      	b.n	8005304 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8005302:	2300      	movs	r3, #0
}
 8005304:	4618      	mov	r0, r3
 8005306:	3718      	adds	r7, #24
 8005308:	46bd      	mov	sp, r7
 800530a:	bd80      	pop	{r7, pc}
 800530c:	40021000 	.word	0x40021000
 8005310:	40022000 	.word	0x40022000

08005314 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005314:	b580      	push	{r7, lr}
 8005316:	b086      	sub	sp, #24
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800531c:	2300      	movs	r3, #0
 800531e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005320:	2300      	movs	r3, #0
 8005322:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800532c:	2b00      	cmp	r3, #0
 800532e:	d041      	beq.n	80053b4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005334:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8005338:	d02a      	beq.n	8005390 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800533a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800533e:	d824      	bhi.n	800538a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005340:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005344:	d008      	beq.n	8005358 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8005346:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800534a:	d81e      	bhi.n	800538a <HAL_RCCEx_PeriphCLKConfig+0x76>
 800534c:	2b00      	cmp	r3, #0
 800534e:	d00a      	beq.n	8005366 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8005350:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005354:	d010      	beq.n	8005378 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005356:	e018      	b.n	800538a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005358:	4b86      	ldr	r3, [pc, #536]	@ (8005574 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800535a:	68db      	ldr	r3, [r3, #12]
 800535c:	4a85      	ldr	r2, [pc, #532]	@ (8005574 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800535e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005362:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005364:	e015      	b.n	8005392 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	3304      	adds	r3, #4
 800536a:	2100      	movs	r1, #0
 800536c:	4618      	mov	r0, r3
 800536e:	f000 facb 	bl	8005908 <RCCEx_PLLSAI1_Config>
 8005372:	4603      	mov	r3, r0
 8005374:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005376:	e00c      	b.n	8005392 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	3320      	adds	r3, #32
 800537c:	2100      	movs	r1, #0
 800537e:	4618      	mov	r0, r3
 8005380:	f000 fbb6 	bl	8005af0 <RCCEx_PLLSAI2_Config>
 8005384:	4603      	mov	r3, r0
 8005386:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005388:	e003      	b.n	8005392 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800538a:	2301      	movs	r3, #1
 800538c:	74fb      	strb	r3, [r7, #19]
      break;
 800538e:	e000      	b.n	8005392 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8005390:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005392:	7cfb      	ldrb	r3, [r7, #19]
 8005394:	2b00      	cmp	r3, #0
 8005396:	d10b      	bne.n	80053b0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005398:	4b76      	ldr	r3, [pc, #472]	@ (8005574 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800539a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800539e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80053a6:	4973      	ldr	r1, [pc, #460]	@ (8005574 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80053a8:	4313      	orrs	r3, r2
 80053aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80053ae:	e001      	b.n	80053b4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053b0:	7cfb      	ldrb	r3, [r7, #19]
 80053b2:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d041      	beq.n	8005444 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80053c4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80053c8:	d02a      	beq.n	8005420 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80053ca:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80053ce:	d824      	bhi.n	800541a <HAL_RCCEx_PeriphCLKConfig+0x106>
 80053d0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80053d4:	d008      	beq.n	80053e8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80053d6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80053da:	d81e      	bhi.n	800541a <HAL_RCCEx_PeriphCLKConfig+0x106>
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d00a      	beq.n	80053f6 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80053e0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80053e4:	d010      	beq.n	8005408 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80053e6:	e018      	b.n	800541a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80053e8:	4b62      	ldr	r3, [pc, #392]	@ (8005574 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80053ea:	68db      	ldr	r3, [r3, #12]
 80053ec:	4a61      	ldr	r2, [pc, #388]	@ (8005574 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80053ee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80053f2:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80053f4:	e015      	b.n	8005422 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	3304      	adds	r3, #4
 80053fa:	2100      	movs	r1, #0
 80053fc:	4618      	mov	r0, r3
 80053fe:	f000 fa83 	bl	8005908 <RCCEx_PLLSAI1_Config>
 8005402:	4603      	mov	r3, r0
 8005404:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005406:	e00c      	b.n	8005422 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	3320      	adds	r3, #32
 800540c:	2100      	movs	r1, #0
 800540e:	4618      	mov	r0, r3
 8005410:	f000 fb6e 	bl	8005af0 <RCCEx_PLLSAI2_Config>
 8005414:	4603      	mov	r3, r0
 8005416:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005418:	e003      	b.n	8005422 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800541a:	2301      	movs	r3, #1
 800541c:	74fb      	strb	r3, [r7, #19]
      break;
 800541e:	e000      	b.n	8005422 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8005420:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005422:	7cfb      	ldrb	r3, [r7, #19]
 8005424:	2b00      	cmp	r3, #0
 8005426:	d10b      	bne.n	8005440 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005428:	4b52      	ldr	r3, [pc, #328]	@ (8005574 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800542a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800542e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005436:	494f      	ldr	r1, [pc, #316]	@ (8005574 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005438:	4313      	orrs	r3, r2
 800543a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800543e:	e001      	b.n	8005444 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005440:	7cfb      	ldrb	r3, [r7, #19]
 8005442:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800544c:	2b00      	cmp	r3, #0
 800544e:	f000 80a0 	beq.w	8005592 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005452:	2300      	movs	r3, #0
 8005454:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005456:	4b47      	ldr	r3, [pc, #284]	@ (8005574 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005458:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800545a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800545e:	2b00      	cmp	r3, #0
 8005460:	d101      	bne.n	8005466 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8005462:	2301      	movs	r3, #1
 8005464:	e000      	b.n	8005468 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8005466:	2300      	movs	r3, #0
 8005468:	2b00      	cmp	r3, #0
 800546a:	d00d      	beq.n	8005488 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800546c:	4b41      	ldr	r3, [pc, #260]	@ (8005574 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800546e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005470:	4a40      	ldr	r2, [pc, #256]	@ (8005574 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005472:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005476:	6593      	str	r3, [r2, #88]	@ 0x58
 8005478:	4b3e      	ldr	r3, [pc, #248]	@ (8005574 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800547a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800547c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005480:	60bb      	str	r3, [r7, #8]
 8005482:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005484:	2301      	movs	r3, #1
 8005486:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005488:	4b3b      	ldr	r3, [pc, #236]	@ (8005578 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	4a3a      	ldr	r2, [pc, #232]	@ (8005578 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800548e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005492:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005494:	f7fd fd0e 	bl	8002eb4 <HAL_GetTick>
 8005498:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800549a:	e009      	b.n	80054b0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800549c:	f7fd fd0a 	bl	8002eb4 <HAL_GetTick>
 80054a0:	4602      	mov	r2, r0
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	1ad3      	subs	r3, r2, r3
 80054a6:	2b02      	cmp	r3, #2
 80054a8:	d902      	bls.n	80054b0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80054aa:	2303      	movs	r3, #3
 80054ac:	74fb      	strb	r3, [r7, #19]
        break;
 80054ae:	e005      	b.n	80054bc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80054b0:	4b31      	ldr	r3, [pc, #196]	@ (8005578 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d0ef      	beq.n	800549c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80054bc:	7cfb      	ldrb	r3, [r7, #19]
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d15c      	bne.n	800557c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80054c2:	4b2c      	ldr	r3, [pc, #176]	@ (8005574 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80054c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80054c8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80054cc:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80054ce:	697b      	ldr	r3, [r7, #20]
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d01f      	beq.n	8005514 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80054da:	697a      	ldr	r2, [r7, #20]
 80054dc:	429a      	cmp	r2, r3
 80054de:	d019      	beq.n	8005514 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80054e0:	4b24      	ldr	r3, [pc, #144]	@ (8005574 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80054e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80054e6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80054ea:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80054ec:	4b21      	ldr	r3, [pc, #132]	@ (8005574 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80054ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80054f2:	4a20      	ldr	r2, [pc, #128]	@ (8005574 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80054f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80054f8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80054fc:	4b1d      	ldr	r3, [pc, #116]	@ (8005574 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80054fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005502:	4a1c      	ldr	r2, [pc, #112]	@ (8005574 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005504:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005508:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800550c:	4a19      	ldr	r2, [pc, #100]	@ (8005574 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800550e:	697b      	ldr	r3, [r7, #20]
 8005510:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005514:	697b      	ldr	r3, [r7, #20]
 8005516:	f003 0301 	and.w	r3, r3, #1
 800551a:	2b00      	cmp	r3, #0
 800551c:	d016      	beq.n	800554c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800551e:	f7fd fcc9 	bl	8002eb4 <HAL_GetTick>
 8005522:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005524:	e00b      	b.n	800553e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005526:	f7fd fcc5 	bl	8002eb4 <HAL_GetTick>
 800552a:	4602      	mov	r2, r0
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	1ad3      	subs	r3, r2, r3
 8005530:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005534:	4293      	cmp	r3, r2
 8005536:	d902      	bls.n	800553e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8005538:	2303      	movs	r3, #3
 800553a:	74fb      	strb	r3, [r7, #19]
            break;
 800553c:	e006      	b.n	800554c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800553e:	4b0d      	ldr	r3, [pc, #52]	@ (8005574 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005540:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005544:	f003 0302 	and.w	r3, r3, #2
 8005548:	2b00      	cmp	r3, #0
 800554a:	d0ec      	beq.n	8005526 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 800554c:	7cfb      	ldrb	r3, [r7, #19]
 800554e:	2b00      	cmp	r3, #0
 8005550:	d10c      	bne.n	800556c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005552:	4b08      	ldr	r3, [pc, #32]	@ (8005574 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005554:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005558:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005562:	4904      	ldr	r1, [pc, #16]	@ (8005574 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005564:	4313      	orrs	r3, r2
 8005566:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800556a:	e009      	b.n	8005580 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800556c:	7cfb      	ldrb	r3, [r7, #19]
 800556e:	74bb      	strb	r3, [r7, #18]
 8005570:	e006      	b.n	8005580 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8005572:	bf00      	nop
 8005574:	40021000 	.word	0x40021000
 8005578:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800557c:	7cfb      	ldrb	r3, [r7, #19]
 800557e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005580:	7c7b      	ldrb	r3, [r7, #17]
 8005582:	2b01      	cmp	r3, #1
 8005584:	d105      	bne.n	8005592 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005586:	4b9e      	ldr	r3, [pc, #632]	@ (8005800 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005588:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800558a:	4a9d      	ldr	r2, [pc, #628]	@ (8005800 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800558c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005590:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f003 0301 	and.w	r3, r3, #1
 800559a:	2b00      	cmp	r3, #0
 800559c:	d00a      	beq.n	80055b4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800559e:	4b98      	ldr	r3, [pc, #608]	@ (8005800 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80055a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055a4:	f023 0203 	bic.w	r2, r3, #3
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055ac:	4994      	ldr	r1, [pc, #592]	@ (8005800 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80055ae:	4313      	orrs	r3, r2
 80055b0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f003 0302 	and.w	r3, r3, #2
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d00a      	beq.n	80055d6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80055c0:	4b8f      	ldr	r3, [pc, #572]	@ (8005800 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80055c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055c6:	f023 020c 	bic.w	r2, r3, #12
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055ce:	498c      	ldr	r1, [pc, #560]	@ (8005800 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80055d0:	4313      	orrs	r3, r2
 80055d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f003 0304 	and.w	r3, r3, #4
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d00a      	beq.n	80055f8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80055e2:	4b87      	ldr	r3, [pc, #540]	@ (8005800 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80055e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055e8:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055f0:	4983      	ldr	r1, [pc, #524]	@ (8005800 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80055f2:	4313      	orrs	r3, r2
 80055f4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f003 0308 	and.w	r3, r3, #8
 8005600:	2b00      	cmp	r3, #0
 8005602:	d00a      	beq.n	800561a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005604:	4b7e      	ldr	r3, [pc, #504]	@ (8005800 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005606:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800560a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005612:	497b      	ldr	r1, [pc, #492]	@ (8005800 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005614:	4313      	orrs	r3, r2
 8005616:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f003 0310 	and.w	r3, r3, #16
 8005622:	2b00      	cmp	r3, #0
 8005624:	d00a      	beq.n	800563c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005626:	4b76      	ldr	r3, [pc, #472]	@ (8005800 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005628:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800562c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005634:	4972      	ldr	r1, [pc, #456]	@ (8005800 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005636:	4313      	orrs	r3, r2
 8005638:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f003 0320 	and.w	r3, r3, #32
 8005644:	2b00      	cmp	r3, #0
 8005646:	d00a      	beq.n	800565e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005648:	4b6d      	ldr	r3, [pc, #436]	@ (8005800 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800564a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800564e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005656:	496a      	ldr	r1, [pc, #424]	@ (8005800 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005658:	4313      	orrs	r3, r2
 800565a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005666:	2b00      	cmp	r3, #0
 8005668:	d00a      	beq.n	8005680 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800566a:	4b65      	ldr	r3, [pc, #404]	@ (8005800 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800566c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005670:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005678:	4961      	ldr	r1, [pc, #388]	@ (8005800 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800567a:	4313      	orrs	r3, r2
 800567c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005688:	2b00      	cmp	r3, #0
 800568a:	d00a      	beq.n	80056a2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800568c:	4b5c      	ldr	r3, [pc, #368]	@ (8005800 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800568e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005692:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800569a:	4959      	ldr	r1, [pc, #356]	@ (8005800 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800569c:	4313      	orrs	r3, r2
 800569e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d00a      	beq.n	80056c4 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80056ae:	4b54      	ldr	r3, [pc, #336]	@ (8005800 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80056b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056b4:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80056bc:	4950      	ldr	r1, [pc, #320]	@ (8005800 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80056be:	4313      	orrs	r3, r2
 80056c0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d00a      	beq.n	80056e6 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80056d0:	4b4b      	ldr	r3, [pc, #300]	@ (8005800 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80056d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056d6:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80056de:	4948      	ldr	r1, [pc, #288]	@ (8005800 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80056e0:	4313      	orrs	r3, r2
 80056e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d00a      	beq.n	8005708 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80056f2:	4b43      	ldr	r3, [pc, #268]	@ (8005800 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80056f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056f8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005700:	493f      	ldr	r1, [pc, #252]	@ (8005800 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005702:	4313      	orrs	r3, r2
 8005704:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005710:	2b00      	cmp	r3, #0
 8005712:	d028      	beq.n	8005766 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005714:	4b3a      	ldr	r3, [pc, #232]	@ (8005800 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005716:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800571a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005722:	4937      	ldr	r1, [pc, #220]	@ (8005800 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005724:	4313      	orrs	r3, r2
 8005726:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800572e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005732:	d106      	bne.n	8005742 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005734:	4b32      	ldr	r3, [pc, #200]	@ (8005800 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005736:	68db      	ldr	r3, [r3, #12]
 8005738:	4a31      	ldr	r2, [pc, #196]	@ (8005800 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800573a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800573e:	60d3      	str	r3, [r2, #12]
 8005740:	e011      	b.n	8005766 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005746:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800574a:	d10c      	bne.n	8005766 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	3304      	adds	r3, #4
 8005750:	2101      	movs	r1, #1
 8005752:	4618      	mov	r0, r3
 8005754:	f000 f8d8 	bl	8005908 <RCCEx_PLLSAI1_Config>
 8005758:	4603      	mov	r3, r0
 800575a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800575c:	7cfb      	ldrb	r3, [r7, #19]
 800575e:	2b00      	cmp	r3, #0
 8005760:	d001      	beq.n	8005766 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8005762:	7cfb      	ldrb	r3, [r7, #19]
 8005764:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800576e:	2b00      	cmp	r3, #0
 8005770:	d028      	beq.n	80057c4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005772:	4b23      	ldr	r3, [pc, #140]	@ (8005800 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005774:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005778:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005780:	491f      	ldr	r1, [pc, #124]	@ (8005800 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005782:	4313      	orrs	r3, r2
 8005784:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800578c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005790:	d106      	bne.n	80057a0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005792:	4b1b      	ldr	r3, [pc, #108]	@ (8005800 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005794:	68db      	ldr	r3, [r3, #12]
 8005796:	4a1a      	ldr	r2, [pc, #104]	@ (8005800 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005798:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800579c:	60d3      	str	r3, [r2, #12]
 800579e:	e011      	b.n	80057c4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80057a4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80057a8:	d10c      	bne.n	80057c4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	3304      	adds	r3, #4
 80057ae:	2101      	movs	r1, #1
 80057b0:	4618      	mov	r0, r3
 80057b2:	f000 f8a9 	bl	8005908 <RCCEx_PLLSAI1_Config>
 80057b6:	4603      	mov	r3, r0
 80057b8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80057ba:	7cfb      	ldrb	r3, [r7, #19]
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d001      	beq.n	80057c4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80057c0:	7cfb      	ldrb	r3, [r7, #19]
 80057c2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d02b      	beq.n	8005828 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80057d0:	4b0b      	ldr	r3, [pc, #44]	@ (8005800 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80057d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80057d6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80057de:	4908      	ldr	r1, [pc, #32]	@ (8005800 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80057e0:	4313      	orrs	r3, r2
 80057e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80057ea:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80057ee:	d109      	bne.n	8005804 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80057f0:	4b03      	ldr	r3, [pc, #12]	@ (8005800 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80057f2:	68db      	ldr	r3, [r3, #12]
 80057f4:	4a02      	ldr	r2, [pc, #8]	@ (8005800 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80057f6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80057fa:	60d3      	str	r3, [r2, #12]
 80057fc:	e014      	b.n	8005828 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80057fe:	bf00      	nop
 8005800:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005808:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800580c:	d10c      	bne.n	8005828 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	3304      	adds	r3, #4
 8005812:	2101      	movs	r1, #1
 8005814:	4618      	mov	r0, r3
 8005816:	f000 f877 	bl	8005908 <RCCEx_PLLSAI1_Config>
 800581a:	4603      	mov	r3, r0
 800581c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800581e:	7cfb      	ldrb	r3, [r7, #19]
 8005820:	2b00      	cmp	r3, #0
 8005822:	d001      	beq.n	8005828 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8005824:	7cfb      	ldrb	r3, [r7, #19]
 8005826:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005830:	2b00      	cmp	r3, #0
 8005832:	d02f      	beq.n	8005894 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005834:	4b2b      	ldr	r3, [pc, #172]	@ (80058e4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005836:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800583a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005842:	4928      	ldr	r1, [pc, #160]	@ (80058e4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005844:	4313      	orrs	r3, r2
 8005846:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800584e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005852:	d10d      	bne.n	8005870 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	3304      	adds	r3, #4
 8005858:	2102      	movs	r1, #2
 800585a:	4618      	mov	r0, r3
 800585c:	f000 f854 	bl	8005908 <RCCEx_PLLSAI1_Config>
 8005860:	4603      	mov	r3, r0
 8005862:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005864:	7cfb      	ldrb	r3, [r7, #19]
 8005866:	2b00      	cmp	r3, #0
 8005868:	d014      	beq.n	8005894 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800586a:	7cfb      	ldrb	r3, [r7, #19]
 800586c:	74bb      	strb	r3, [r7, #18]
 800586e:	e011      	b.n	8005894 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005874:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005878:	d10c      	bne.n	8005894 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	3320      	adds	r3, #32
 800587e:	2102      	movs	r1, #2
 8005880:	4618      	mov	r0, r3
 8005882:	f000 f935 	bl	8005af0 <RCCEx_PLLSAI2_Config>
 8005886:	4603      	mov	r3, r0
 8005888:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800588a:	7cfb      	ldrb	r3, [r7, #19]
 800588c:	2b00      	cmp	r3, #0
 800588e:	d001      	beq.n	8005894 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005890:	7cfb      	ldrb	r3, [r7, #19]
 8005892:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800589c:	2b00      	cmp	r3, #0
 800589e:	d00a      	beq.n	80058b6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80058a0:	4b10      	ldr	r3, [pc, #64]	@ (80058e4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80058a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80058a6:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80058ae:	490d      	ldr	r1, [pc, #52]	@ (80058e4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80058b0:	4313      	orrs	r3, r2
 80058b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d00b      	beq.n	80058da <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80058c2:	4b08      	ldr	r3, [pc, #32]	@ (80058e4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80058c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80058c8:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80058d2:	4904      	ldr	r1, [pc, #16]	@ (80058e4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80058d4:	4313      	orrs	r3, r2
 80058d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80058da:	7cbb      	ldrb	r3, [r7, #18]
}
 80058dc:	4618      	mov	r0, r3
 80058de:	3718      	adds	r7, #24
 80058e0:	46bd      	mov	sp, r7
 80058e2:	bd80      	pop	{r7, pc}
 80058e4:	40021000 	.word	0x40021000

080058e8 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80058e8:	b480      	push	{r7}
 80058ea:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80058ec:	4b05      	ldr	r3, [pc, #20]	@ (8005904 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	4a04      	ldr	r2, [pc, #16]	@ (8005904 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80058f2:	f043 0304 	orr.w	r3, r3, #4
 80058f6:	6013      	str	r3, [r2, #0]
}
 80058f8:	bf00      	nop
 80058fa:	46bd      	mov	sp, r7
 80058fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005900:	4770      	bx	lr
 8005902:	bf00      	nop
 8005904:	40021000 	.word	0x40021000

08005908 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005908:	b580      	push	{r7, lr}
 800590a:	b084      	sub	sp, #16
 800590c:	af00      	add	r7, sp, #0
 800590e:	6078      	str	r0, [r7, #4]
 8005910:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005912:	2300      	movs	r3, #0
 8005914:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005916:	4b75      	ldr	r3, [pc, #468]	@ (8005aec <RCCEx_PLLSAI1_Config+0x1e4>)
 8005918:	68db      	ldr	r3, [r3, #12]
 800591a:	f003 0303 	and.w	r3, r3, #3
 800591e:	2b00      	cmp	r3, #0
 8005920:	d018      	beq.n	8005954 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005922:	4b72      	ldr	r3, [pc, #456]	@ (8005aec <RCCEx_PLLSAI1_Config+0x1e4>)
 8005924:	68db      	ldr	r3, [r3, #12]
 8005926:	f003 0203 	and.w	r2, r3, #3
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	429a      	cmp	r2, r3
 8005930:	d10d      	bne.n	800594e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
       ||
 8005936:	2b00      	cmp	r3, #0
 8005938:	d009      	beq.n	800594e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800593a:	4b6c      	ldr	r3, [pc, #432]	@ (8005aec <RCCEx_PLLSAI1_Config+0x1e4>)
 800593c:	68db      	ldr	r3, [r3, #12]
 800593e:	091b      	lsrs	r3, r3, #4
 8005940:	f003 0307 	and.w	r3, r3, #7
 8005944:	1c5a      	adds	r2, r3, #1
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	685b      	ldr	r3, [r3, #4]
       ||
 800594a:	429a      	cmp	r2, r3
 800594c:	d047      	beq.n	80059de <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800594e:	2301      	movs	r3, #1
 8005950:	73fb      	strb	r3, [r7, #15]
 8005952:	e044      	b.n	80059de <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	2b03      	cmp	r3, #3
 800595a:	d018      	beq.n	800598e <RCCEx_PLLSAI1_Config+0x86>
 800595c:	2b03      	cmp	r3, #3
 800595e:	d825      	bhi.n	80059ac <RCCEx_PLLSAI1_Config+0xa4>
 8005960:	2b01      	cmp	r3, #1
 8005962:	d002      	beq.n	800596a <RCCEx_PLLSAI1_Config+0x62>
 8005964:	2b02      	cmp	r3, #2
 8005966:	d009      	beq.n	800597c <RCCEx_PLLSAI1_Config+0x74>
 8005968:	e020      	b.n	80059ac <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800596a:	4b60      	ldr	r3, [pc, #384]	@ (8005aec <RCCEx_PLLSAI1_Config+0x1e4>)
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f003 0302 	and.w	r3, r3, #2
 8005972:	2b00      	cmp	r3, #0
 8005974:	d11d      	bne.n	80059b2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8005976:	2301      	movs	r3, #1
 8005978:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800597a:	e01a      	b.n	80059b2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800597c:	4b5b      	ldr	r3, [pc, #364]	@ (8005aec <RCCEx_PLLSAI1_Config+0x1e4>)
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005984:	2b00      	cmp	r3, #0
 8005986:	d116      	bne.n	80059b6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005988:	2301      	movs	r3, #1
 800598a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800598c:	e013      	b.n	80059b6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800598e:	4b57      	ldr	r3, [pc, #348]	@ (8005aec <RCCEx_PLLSAI1_Config+0x1e4>)
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005996:	2b00      	cmp	r3, #0
 8005998:	d10f      	bne.n	80059ba <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800599a:	4b54      	ldr	r3, [pc, #336]	@ (8005aec <RCCEx_PLLSAI1_Config+0x1e4>)
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d109      	bne.n	80059ba <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80059a6:	2301      	movs	r3, #1
 80059a8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80059aa:	e006      	b.n	80059ba <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80059ac:	2301      	movs	r3, #1
 80059ae:	73fb      	strb	r3, [r7, #15]
      break;
 80059b0:	e004      	b.n	80059bc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80059b2:	bf00      	nop
 80059b4:	e002      	b.n	80059bc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80059b6:	bf00      	nop
 80059b8:	e000      	b.n	80059bc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80059ba:	bf00      	nop
    }

    if(status == HAL_OK)
 80059bc:	7bfb      	ldrb	r3, [r7, #15]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d10d      	bne.n	80059de <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80059c2:	4b4a      	ldr	r3, [pc, #296]	@ (8005aec <RCCEx_PLLSAI1_Config+0x1e4>)
 80059c4:	68db      	ldr	r3, [r3, #12]
 80059c6:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	6819      	ldr	r1, [r3, #0]
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	685b      	ldr	r3, [r3, #4]
 80059d2:	3b01      	subs	r3, #1
 80059d4:	011b      	lsls	r3, r3, #4
 80059d6:	430b      	orrs	r3, r1
 80059d8:	4944      	ldr	r1, [pc, #272]	@ (8005aec <RCCEx_PLLSAI1_Config+0x1e4>)
 80059da:	4313      	orrs	r3, r2
 80059dc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80059de:	7bfb      	ldrb	r3, [r7, #15]
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d17d      	bne.n	8005ae0 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80059e4:	4b41      	ldr	r3, [pc, #260]	@ (8005aec <RCCEx_PLLSAI1_Config+0x1e4>)
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	4a40      	ldr	r2, [pc, #256]	@ (8005aec <RCCEx_PLLSAI1_Config+0x1e4>)
 80059ea:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80059ee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80059f0:	f7fd fa60 	bl	8002eb4 <HAL_GetTick>
 80059f4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80059f6:	e009      	b.n	8005a0c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80059f8:	f7fd fa5c 	bl	8002eb4 <HAL_GetTick>
 80059fc:	4602      	mov	r2, r0
 80059fe:	68bb      	ldr	r3, [r7, #8]
 8005a00:	1ad3      	subs	r3, r2, r3
 8005a02:	2b02      	cmp	r3, #2
 8005a04:	d902      	bls.n	8005a0c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005a06:	2303      	movs	r3, #3
 8005a08:	73fb      	strb	r3, [r7, #15]
        break;
 8005a0a:	e005      	b.n	8005a18 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005a0c:	4b37      	ldr	r3, [pc, #220]	@ (8005aec <RCCEx_PLLSAI1_Config+0x1e4>)
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d1ef      	bne.n	80059f8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005a18:	7bfb      	ldrb	r3, [r7, #15]
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d160      	bne.n	8005ae0 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005a1e:	683b      	ldr	r3, [r7, #0]
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d111      	bne.n	8005a48 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005a24:	4b31      	ldr	r3, [pc, #196]	@ (8005aec <RCCEx_PLLSAI1_Config+0x1e4>)
 8005a26:	691b      	ldr	r3, [r3, #16]
 8005a28:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8005a2c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005a30:	687a      	ldr	r2, [r7, #4]
 8005a32:	6892      	ldr	r2, [r2, #8]
 8005a34:	0211      	lsls	r1, r2, #8
 8005a36:	687a      	ldr	r2, [r7, #4]
 8005a38:	68d2      	ldr	r2, [r2, #12]
 8005a3a:	0912      	lsrs	r2, r2, #4
 8005a3c:	0452      	lsls	r2, r2, #17
 8005a3e:	430a      	orrs	r2, r1
 8005a40:	492a      	ldr	r1, [pc, #168]	@ (8005aec <RCCEx_PLLSAI1_Config+0x1e4>)
 8005a42:	4313      	orrs	r3, r2
 8005a44:	610b      	str	r3, [r1, #16]
 8005a46:	e027      	b.n	8005a98 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005a48:	683b      	ldr	r3, [r7, #0]
 8005a4a:	2b01      	cmp	r3, #1
 8005a4c:	d112      	bne.n	8005a74 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005a4e:	4b27      	ldr	r3, [pc, #156]	@ (8005aec <RCCEx_PLLSAI1_Config+0x1e4>)
 8005a50:	691b      	ldr	r3, [r3, #16]
 8005a52:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8005a56:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005a5a:	687a      	ldr	r2, [r7, #4]
 8005a5c:	6892      	ldr	r2, [r2, #8]
 8005a5e:	0211      	lsls	r1, r2, #8
 8005a60:	687a      	ldr	r2, [r7, #4]
 8005a62:	6912      	ldr	r2, [r2, #16]
 8005a64:	0852      	lsrs	r2, r2, #1
 8005a66:	3a01      	subs	r2, #1
 8005a68:	0552      	lsls	r2, r2, #21
 8005a6a:	430a      	orrs	r2, r1
 8005a6c:	491f      	ldr	r1, [pc, #124]	@ (8005aec <RCCEx_PLLSAI1_Config+0x1e4>)
 8005a6e:	4313      	orrs	r3, r2
 8005a70:	610b      	str	r3, [r1, #16]
 8005a72:	e011      	b.n	8005a98 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005a74:	4b1d      	ldr	r3, [pc, #116]	@ (8005aec <RCCEx_PLLSAI1_Config+0x1e4>)
 8005a76:	691b      	ldr	r3, [r3, #16]
 8005a78:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8005a7c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005a80:	687a      	ldr	r2, [r7, #4]
 8005a82:	6892      	ldr	r2, [r2, #8]
 8005a84:	0211      	lsls	r1, r2, #8
 8005a86:	687a      	ldr	r2, [r7, #4]
 8005a88:	6952      	ldr	r2, [r2, #20]
 8005a8a:	0852      	lsrs	r2, r2, #1
 8005a8c:	3a01      	subs	r2, #1
 8005a8e:	0652      	lsls	r2, r2, #25
 8005a90:	430a      	orrs	r2, r1
 8005a92:	4916      	ldr	r1, [pc, #88]	@ (8005aec <RCCEx_PLLSAI1_Config+0x1e4>)
 8005a94:	4313      	orrs	r3, r2
 8005a96:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005a98:	4b14      	ldr	r3, [pc, #80]	@ (8005aec <RCCEx_PLLSAI1_Config+0x1e4>)
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	4a13      	ldr	r2, [pc, #76]	@ (8005aec <RCCEx_PLLSAI1_Config+0x1e4>)
 8005a9e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005aa2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005aa4:	f7fd fa06 	bl	8002eb4 <HAL_GetTick>
 8005aa8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005aaa:	e009      	b.n	8005ac0 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005aac:	f7fd fa02 	bl	8002eb4 <HAL_GetTick>
 8005ab0:	4602      	mov	r2, r0
 8005ab2:	68bb      	ldr	r3, [r7, #8]
 8005ab4:	1ad3      	subs	r3, r2, r3
 8005ab6:	2b02      	cmp	r3, #2
 8005ab8:	d902      	bls.n	8005ac0 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8005aba:	2303      	movs	r3, #3
 8005abc:	73fb      	strb	r3, [r7, #15]
          break;
 8005abe:	e005      	b.n	8005acc <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005ac0:	4b0a      	ldr	r3, [pc, #40]	@ (8005aec <RCCEx_PLLSAI1_Config+0x1e4>)
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d0ef      	beq.n	8005aac <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8005acc:	7bfb      	ldrb	r3, [r7, #15]
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d106      	bne.n	8005ae0 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005ad2:	4b06      	ldr	r3, [pc, #24]	@ (8005aec <RCCEx_PLLSAI1_Config+0x1e4>)
 8005ad4:	691a      	ldr	r2, [r3, #16]
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	699b      	ldr	r3, [r3, #24]
 8005ada:	4904      	ldr	r1, [pc, #16]	@ (8005aec <RCCEx_PLLSAI1_Config+0x1e4>)
 8005adc:	4313      	orrs	r3, r2
 8005ade:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005ae0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ae2:	4618      	mov	r0, r3
 8005ae4:	3710      	adds	r7, #16
 8005ae6:	46bd      	mov	sp, r7
 8005ae8:	bd80      	pop	{r7, pc}
 8005aea:	bf00      	nop
 8005aec:	40021000 	.word	0x40021000

08005af0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005af0:	b580      	push	{r7, lr}
 8005af2:	b084      	sub	sp, #16
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	6078      	str	r0, [r7, #4]
 8005af8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005afa:	2300      	movs	r3, #0
 8005afc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005afe:	4b6a      	ldr	r3, [pc, #424]	@ (8005ca8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005b00:	68db      	ldr	r3, [r3, #12]
 8005b02:	f003 0303 	and.w	r3, r3, #3
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d018      	beq.n	8005b3c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005b0a:	4b67      	ldr	r3, [pc, #412]	@ (8005ca8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005b0c:	68db      	ldr	r3, [r3, #12]
 8005b0e:	f003 0203 	and.w	r2, r3, #3
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	429a      	cmp	r2, r3
 8005b18:	d10d      	bne.n	8005b36 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
       ||
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d009      	beq.n	8005b36 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8005b22:	4b61      	ldr	r3, [pc, #388]	@ (8005ca8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005b24:	68db      	ldr	r3, [r3, #12]
 8005b26:	091b      	lsrs	r3, r3, #4
 8005b28:	f003 0307 	and.w	r3, r3, #7
 8005b2c:	1c5a      	adds	r2, r3, #1
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	685b      	ldr	r3, [r3, #4]
       ||
 8005b32:	429a      	cmp	r2, r3
 8005b34:	d047      	beq.n	8005bc6 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005b36:	2301      	movs	r3, #1
 8005b38:	73fb      	strb	r3, [r7, #15]
 8005b3a:	e044      	b.n	8005bc6 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	2b03      	cmp	r3, #3
 8005b42:	d018      	beq.n	8005b76 <RCCEx_PLLSAI2_Config+0x86>
 8005b44:	2b03      	cmp	r3, #3
 8005b46:	d825      	bhi.n	8005b94 <RCCEx_PLLSAI2_Config+0xa4>
 8005b48:	2b01      	cmp	r3, #1
 8005b4a:	d002      	beq.n	8005b52 <RCCEx_PLLSAI2_Config+0x62>
 8005b4c:	2b02      	cmp	r3, #2
 8005b4e:	d009      	beq.n	8005b64 <RCCEx_PLLSAI2_Config+0x74>
 8005b50:	e020      	b.n	8005b94 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005b52:	4b55      	ldr	r3, [pc, #340]	@ (8005ca8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	f003 0302 	and.w	r3, r3, #2
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d11d      	bne.n	8005b9a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8005b5e:	2301      	movs	r3, #1
 8005b60:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005b62:	e01a      	b.n	8005b9a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005b64:	4b50      	ldr	r3, [pc, #320]	@ (8005ca8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d116      	bne.n	8005b9e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8005b70:	2301      	movs	r3, #1
 8005b72:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005b74:	e013      	b.n	8005b9e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005b76:	4b4c      	ldr	r3, [pc, #304]	@ (8005ca8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d10f      	bne.n	8005ba2 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005b82:	4b49      	ldr	r3, [pc, #292]	@ (8005ca8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d109      	bne.n	8005ba2 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8005b8e:	2301      	movs	r3, #1
 8005b90:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005b92:	e006      	b.n	8005ba2 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005b94:	2301      	movs	r3, #1
 8005b96:	73fb      	strb	r3, [r7, #15]
      break;
 8005b98:	e004      	b.n	8005ba4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005b9a:	bf00      	nop
 8005b9c:	e002      	b.n	8005ba4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005b9e:	bf00      	nop
 8005ba0:	e000      	b.n	8005ba4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005ba2:	bf00      	nop
    }

    if(status == HAL_OK)
 8005ba4:	7bfb      	ldrb	r3, [r7, #15]
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d10d      	bne.n	8005bc6 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005baa:	4b3f      	ldr	r3, [pc, #252]	@ (8005ca8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005bac:	68db      	ldr	r3, [r3, #12]
 8005bae:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	6819      	ldr	r1, [r3, #0]
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	685b      	ldr	r3, [r3, #4]
 8005bba:	3b01      	subs	r3, #1
 8005bbc:	011b      	lsls	r3, r3, #4
 8005bbe:	430b      	orrs	r3, r1
 8005bc0:	4939      	ldr	r1, [pc, #228]	@ (8005ca8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005bc2:	4313      	orrs	r3, r2
 8005bc4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005bc6:	7bfb      	ldrb	r3, [r7, #15]
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d167      	bne.n	8005c9c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005bcc:	4b36      	ldr	r3, [pc, #216]	@ (8005ca8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	4a35      	ldr	r2, [pc, #212]	@ (8005ca8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005bd2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005bd6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005bd8:	f7fd f96c 	bl	8002eb4 <HAL_GetTick>
 8005bdc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005bde:	e009      	b.n	8005bf4 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005be0:	f7fd f968 	bl	8002eb4 <HAL_GetTick>
 8005be4:	4602      	mov	r2, r0
 8005be6:	68bb      	ldr	r3, [r7, #8]
 8005be8:	1ad3      	subs	r3, r2, r3
 8005bea:	2b02      	cmp	r3, #2
 8005bec:	d902      	bls.n	8005bf4 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005bee:	2303      	movs	r3, #3
 8005bf0:	73fb      	strb	r3, [r7, #15]
        break;
 8005bf2:	e005      	b.n	8005c00 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005bf4:	4b2c      	ldr	r3, [pc, #176]	@ (8005ca8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d1ef      	bne.n	8005be0 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005c00:	7bfb      	ldrb	r3, [r7, #15]
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d14a      	bne.n	8005c9c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005c06:	683b      	ldr	r3, [r7, #0]
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d111      	bne.n	8005c30 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005c0c:	4b26      	ldr	r3, [pc, #152]	@ (8005ca8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005c0e:	695b      	ldr	r3, [r3, #20]
 8005c10:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8005c14:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005c18:	687a      	ldr	r2, [r7, #4]
 8005c1a:	6892      	ldr	r2, [r2, #8]
 8005c1c:	0211      	lsls	r1, r2, #8
 8005c1e:	687a      	ldr	r2, [r7, #4]
 8005c20:	68d2      	ldr	r2, [r2, #12]
 8005c22:	0912      	lsrs	r2, r2, #4
 8005c24:	0452      	lsls	r2, r2, #17
 8005c26:	430a      	orrs	r2, r1
 8005c28:	491f      	ldr	r1, [pc, #124]	@ (8005ca8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005c2a:	4313      	orrs	r3, r2
 8005c2c:	614b      	str	r3, [r1, #20]
 8005c2e:	e011      	b.n	8005c54 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005c30:	4b1d      	ldr	r3, [pc, #116]	@ (8005ca8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005c32:	695b      	ldr	r3, [r3, #20]
 8005c34:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8005c38:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005c3c:	687a      	ldr	r2, [r7, #4]
 8005c3e:	6892      	ldr	r2, [r2, #8]
 8005c40:	0211      	lsls	r1, r2, #8
 8005c42:	687a      	ldr	r2, [r7, #4]
 8005c44:	6912      	ldr	r2, [r2, #16]
 8005c46:	0852      	lsrs	r2, r2, #1
 8005c48:	3a01      	subs	r2, #1
 8005c4a:	0652      	lsls	r2, r2, #25
 8005c4c:	430a      	orrs	r2, r1
 8005c4e:	4916      	ldr	r1, [pc, #88]	@ (8005ca8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005c50:	4313      	orrs	r3, r2
 8005c52:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005c54:	4b14      	ldr	r3, [pc, #80]	@ (8005ca8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	4a13      	ldr	r2, [pc, #76]	@ (8005ca8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005c5a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005c5e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c60:	f7fd f928 	bl	8002eb4 <HAL_GetTick>
 8005c64:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005c66:	e009      	b.n	8005c7c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005c68:	f7fd f924 	bl	8002eb4 <HAL_GetTick>
 8005c6c:	4602      	mov	r2, r0
 8005c6e:	68bb      	ldr	r3, [r7, #8]
 8005c70:	1ad3      	subs	r3, r2, r3
 8005c72:	2b02      	cmp	r3, #2
 8005c74:	d902      	bls.n	8005c7c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8005c76:	2303      	movs	r3, #3
 8005c78:	73fb      	strb	r3, [r7, #15]
          break;
 8005c7a:	e005      	b.n	8005c88 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005c7c:	4b0a      	ldr	r3, [pc, #40]	@ (8005ca8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d0ef      	beq.n	8005c68 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8005c88:	7bfb      	ldrb	r3, [r7, #15]
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d106      	bne.n	8005c9c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005c8e:	4b06      	ldr	r3, [pc, #24]	@ (8005ca8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005c90:	695a      	ldr	r2, [r3, #20]
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	695b      	ldr	r3, [r3, #20]
 8005c96:	4904      	ldr	r1, [pc, #16]	@ (8005ca8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005c98:	4313      	orrs	r3, r2
 8005c9a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005c9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	3710      	adds	r7, #16
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	bd80      	pop	{r7, pc}
 8005ca6:	bf00      	nop
 8005ca8:	40021000 	.word	0x40021000

08005cac <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005cac:	b580      	push	{r7, lr}
 8005cae:	b084      	sub	sp, #16
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d101      	bne.n	8005cbe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005cba:	2301      	movs	r3, #1
 8005cbc:	e095      	b.n	8005dea <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d108      	bne.n	8005cd8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	685b      	ldr	r3, [r3, #4]
 8005cca:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005cce:	d009      	beq.n	8005ce4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	2200      	movs	r2, #0
 8005cd4:	61da      	str	r2, [r3, #28]
 8005cd6:	e005      	b.n	8005ce4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	2200      	movs	r2, #0
 8005cdc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	2200      	movs	r2, #0
 8005ce2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2200      	movs	r2, #0
 8005ce8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005cf0:	b2db      	uxtb	r3, r3
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d106      	bne.n	8005d04 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	2200      	movs	r2, #0
 8005cfa:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005cfe:	6878      	ldr	r0, [r7, #4]
 8005d00:	f7fb fcfa 	bl	80016f8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	2202      	movs	r2, #2
 8005d08:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	681a      	ldr	r2, [r3, #0]
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005d1a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	68db      	ldr	r3, [r3, #12]
 8005d20:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005d24:	d902      	bls.n	8005d2c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005d26:	2300      	movs	r3, #0
 8005d28:	60fb      	str	r3, [r7, #12]
 8005d2a:	e002      	b.n	8005d32 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005d2c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005d30:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	68db      	ldr	r3, [r3, #12]
 8005d36:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8005d3a:	d007      	beq.n	8005d4c <HAL_SPI_Init+0xa0>
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	68db      	ldr	r3, [r3, #12]
 8005d40:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005d44:	d002      	beq.n	8005d4c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	2200      	movs	r2, #0
 8005d4a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	685b      	ldr	r3, [r3, #4]
 8005d50:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	689b      	ldr	r3, [r3, #8]
 8005d58:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005d5c:	431a      	orrs	r2, r3
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	691b      	ldr	r3, [r3, #16]
 8005d62:	f003 0302 	and.w	r3, r3, #2
 8005d66:	431a      	orrs	r2, r3
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	695b      	ldr	r3, [r3, #20]
 8005d6c:	f003 0301 	and.w	r3, r3, #1
 8005d70:	431a      	orrs	r2, r3
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	699b      	ldr	r3, [r3, #24]
 8005d76:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005d7a:	431a      	orrs	r2, r3
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	69db      	ldr	r3, [r3, #28]
 8005d80:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005d84:	431a      	orrs	r2, r3
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	6a1b      	ldr	r3, [r3, #32]
 8005d8a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d8e:	ea42 0103 	orr.w	r1, r2, r3
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d96:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	430a      	orrs	r2, r1
 8005da0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	699b      	ldr	r3, [r3, #24]
 8005da6:	0c1b      	lsrs	r3, r3, #16
 8005da8:	f003 0204 	and.w	r2, r3, #4
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005db0:	f003 0310 	and.w	r3, r3, #16
 8005db4:	431a      	orrs	r2, r3
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005dba:	f003 0308 	and.w	r3, r3, #8
 8005dbe:	431a      	orrs	r2, r3
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	68db      	ldr	r3, [r3, #12]
 8005dc4:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8005dc8:	ea42 0103 	orr.w	r1, r2, r3
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	430a      	orrs	r2, r1
 8005dd8:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	2200      	movs	r2, #0
 8005dde:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	2201      	movs	r2, #1
 8005de4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8005de8:	2300      	movs	r3, #0
}
 8005dea:	4618      	mov	r0, r3
 8005dec:	3710      	adds	r7, #16
 8005dee:	46bd      	mov	sp, r7
 8005df0:	bd80      	pop	{r7, pc}

08005df2 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8005df2:	b480      	push	{r7}
 8005df4:	b083      	sub	sp, #12
 8005df6:	af00      	add	r7, sp, #0
 8005df8:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005e00:	b2db      	uxtb	r3, r3
}
 8005e02:	4618      	mov	r0, r3
 8005e04:	370c      	adds	r7, #12
 8005e06:	46bd      	mov	sp, r7
 8005e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0c:	4770      	bx	lr

08005e0e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005e0e:	b580      	push	{r7, lr}
 8005e10:	b082      	sub	sp, #8
 8005e12:	af00      	add	r7, sp, #0
 8005e14:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d101      	bne.n	8005e20 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005e1c:	2301      	movs	r3, #1
 8005e1e:	e049      	b.n	8005eb4 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005e26:	b2db      	uxtb	r3, r3
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d106      	bne.n	8005e3a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	2200      	movs	r2, #0
 8005e30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005e34:	6878      	ldr	r0, [r7, #4]
 8005e36:	f7fb fe19 	bl	8001a6c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	2202      	movs	r2, #2
 8005e3e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681a      	ldr	r2, [r3, #0]
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	3304      	adds	r3, #4
 8005e4a:	4619      	mov	r1, r3
 8005e4c:	4610      	mov	r0, r2
 8005e4e:	f000 f835 	bl	8005ebc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	2201      	movs	r2, #1
 8005e56:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	2201      	movs	r2, #1
 8005e5e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	2201      	movs	r2, #1
 8005e66:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	2201      	movs	r2, #1
 8005e6e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	2201      	movs	r2, #1
 8005e76:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	2201      	movs	r2, #1
 8005e7e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	2201      	movs	r2, #1
 8005e86:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	2201      	movs	r2, #1
 8005e8e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	2201      	movs	r2, #1
 8005e96:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	2201      	movs	r2, #1
 8005e9e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	2201      	movs	r2, #1
 8005ea6:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	2201      	movs	r2, #1
 8005eae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005eb2:	2300      	movs	r3, #0
}
 8005eb4:	4618      	mov	r0, r3
 8005eb6:	3708      	adds	r7, #8
 8005eb8:	46bd      	mov	sp, r7
 8005eba:	bd80      	pop	{r7, pc}

08005ebc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005ebc:	b480      	push	{r7}
 8005ebe:	b085      	sub	sp, #20
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	6078      	str	r0, [r7, #4]
 8005ec4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	4a40      	ldr	r2, [pc, #256]	@ (8005fd0 <TIM_Base_SetConfig+0x114>)
 8005ed0:	4293      	cmp	r3, r2
 8005ed2:	d013      	beq.n	8005efc <TIM_Base_SetConfig+0x40>
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005eda:	d00f      	beq.n	8005efc <TIM_Base_SetConfig+0x40>
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	4a3d      	ldr	r2, [pc, #244]	@ (8005fd4 <TIM_Base_SetConfig+0x118>)
 8005ee0:	4293      	cmp	r3, r2
 8005ee2:	d00b      	beq.n	8005efc <TIM_Base_SetConfig+0x40>
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	4a3c      	ldr	r2, [pc, #240]	@ (8005fd8 <TIM_Base_SetConfig+0x11c>)
 8005ee8:	4293      	cmp	r3, r2
 8005eea:	d007      	beq.n	8005efc <TIM_Base_SetConfig+0x40>
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	4a3b      	ldr	r2, [pc, #236]	@ (8005fdc <TIM_Base_SetConfig+0x120>)
 8005ef0:	4293      	cmp	r3, r2
 8005ef2:	d003      	beq.n	8005efc <TIM_Base_SetConfig+0x40>
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	4a3a      	ldr	r2, [pc, #232]	@ (8005fe0 <TIM_Base_SetConfig+0x124>)
 8005ef8:	4293      	cmp	r3, r2
 8005efa:	d108      	bne.n	8005f0e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f02:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005f04:	683b      	ldr	r3, [r7, #0]
 8005f06:	685b      	ldr	r3, [r3, #4]
 8005f08:	68fa      	ldr	r2, [r7, #12]
 8005f0a:	4313      	orrs	r3, r2
 8005f0c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	4a2f      	ldr	r2, [pc, #188]	@ (8005fd0 <TIM_Base_SetConfig+0x114>)
 8005f12:	4293      	cmp	r3, r2
 8005f14:	d01f      	beq.n	8005f56 <TIM_Base_SetConfig+0x9a>
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005f1c:	d01b      	beq.n	8005f56 <TIM_Base_SetConfig+0x9a>
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	4a2c      	ldr	r2, [pc, #176]	@ (8005fd4 <TIM_Base_SetConfig+0x118>)
 8005f22:	4293      	cmp	r3, r2
 8005f24:	d017      	beq.n	8005f56 <TIM_Base_SetConfig+0x9a>
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	4a2b      	ldr	r2, [pc, #172]	@ (8005fd8 <TIM_Base_SetConfig+0x11c>)
 8005f2a:	4293      	cmp	r3, r2
 8005f2c:	d013      	beq.n	8005f56 <TIM_Base_SetConfig+0x9a>
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	4a2a      	ldr	r2, [pc, #168]	@ (8005fdc <TIM_Base_SetConfig+0x120>)
 8005f32:	4293      	cmp	r3, r2
 8005f34:	d00f      	beq.n	8005f56 <TIM_Base_SetConfig+0x9a>
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	4a29      	ldr	r2, [pc, #164]	@ (8005fe0 <TIM_Base_SetConfig+0x124>)
 8005f3a:	4293      	cmp	r3, r2
 8005f3c:	d00b      	beq.n	8005f56 <TIM_Base_SetConfig+0x9a>
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	4a28      	ldr	r2, [pc, #160]	@ (8005fe4 <TIM_Base_SetConfig+0x128>)
 8005f42:	4293      	cmp	r3, r2
 8005f44:	d007      	beq.n	8005f56 <TIM_Base_SetConfig+0x9a>
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	4a27      	ldr	r2, [pc, #156]	@ (8005fe8 <TIM_Base_SetConfig+0x12c>)
 8005f4a:	4293      	cmp	r3, r2
 8005f4c:	d003      	beq.n	8005f56 <TIM_Base_SetConfig+0x9a>
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	4a26      	ldr	r2, [pc, #152]	@ (8005fec <TIM_Base_SetConfig+0x130>)
 8005f52:	4293      	cmp	r3, r2
 8005f54:	d108      	bne.n	8005f68 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005f5c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005f5e:	683b      	ldr	r3, [r7, #0]
 8005f60:	68db      	ldr	r3, [r3, #12]
 8005f62:	68fa      	ldr	r2, [r7, #12]
 8005f64:	4313      	orrs	r3, r2
 8005f66:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005f6e:	683b      	ldr	r3, [r7, #0]
 8005f70:	695b      	ldr	r3, [r3, #20]
 8005f72:	4313      	orrs	r3, r2
 8005f74:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	68fa      	ldr	r2, [r7, #12]
 8005f7a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005f7c:	683b      	ldr	r3, [r7, #0]
 8005f7e:	689a      	ldr	r2, [r3, #8]
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005f84:	683b      	ldr	r3, [r7, #0]
 8005f86:	681a      	ldr	r2, [r3, #0]
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	4a10      	ldr	r2, [pc, #64]	@ (8005fd0 <TIM_Base_SetConfig+0x114>)
 8005f90:	4293      	cmp	r3, r2
 8005f92:	d00f      	beq.n	8005fb4 <TIM_Base_SetConfig+0xf8>
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	4a12      	ldr	r2, [pc, #72]	@ (8005fe0 <TIM_Base_SetConfig+0x124>)
 8005f98:	4293      	cmp	r3, r2
 8005f9a:	d00b      	beq.n	8005fb4 <TIM_Base_SetConfig+0xf8>
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	4a11      	ldr	r2, [pc, #68]	@ (8005fe4 <TIM_Base_SetConfig+0x128>)
 8005fa0:	4293      	cmp	r3, r2
 8005fa2:	d007      	beq.n	8005fb4 <TIM_Base_SetConfig+0xf8>
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	4a10      	ldr	r2, [pc, #64]	@ (8005fe8 <TIM_Base_SetConfig+0x12c>)
 8005fa8:	4293      	cmp	r3, r2
 8005faa:	d003      	beq.n	8005fb4 <TIM_Base_SetConfig+0xf8>
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	4a0f      	ldr	r2, [pc, #60]	@ (8005fec <TIM_Base_SetConfig+0x130>)
 8005fb0:	4293      	cmp	r3, r2
 8005fb2:	d103      	bne.n	8005fbc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005fb4:	683b      	ldr	r3, [r7, #0]
 8005fb6:	691a      	ldr	r2, [r3, #16]
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	2201      	movs	r2, #1
 8005fc0:	615a      	str	r2, [r3, #20]
}
 8005fc2:	bf00      	nop
 8005fc4:	3714      	adds	r7, #20
 8005fc6:	46bd      	mov	sp, r7
 8005fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fcc:	4770      	bx	lr
 8005fce:	bf00      	nop
 8005fd0:	40012c00 	.word	0x40012c00
 8005fd4:	40000400 	.word	0x40000400
 8005fd8:	40000800 	.word	0x40000800
 8005fdc:	40000c00 	.word	0x40000c00
 8005fe0:	40013400 	.word	0x40013400
 8005fe4:	40014000 	.word	0x40014000
 8005fe8:	40014400 	.word	0x40014400
 8005fec:	40014800 	.word	0x40014800

08005ff0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005ff0:	b480      	push	{r7}
 8005ff2:	b085      	sub	sp, #20
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	6078      	str	r0, [r7, #4]
 8005ff8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006000:	2b01      	cmp	r3, #1
 8006002:	d101      	bne.n	8006008 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006004:	2302      	movs	r3, #2
 8006006:	e068      	b.n	80060da <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	2201      	movs	r2, #1
 800600c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	2202      	movs	r2, #2
 8006014:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	685b      	ldr	r3, [r3, #4]
 800601e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	689b      	ldr	r3, [r3, #8]
 8006026:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	4a2e      	ldr	r2, [pc, #184]	@ (80060e8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800602e:	4293      	cmp	r3, r2
 8006030:	d004      	beq.n	800603c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	4a2d      	ldr	r2, [pc, #180]	@ (80060ec <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006038:	4293      	cmp	r3, r2
 800603a:	d108      	bne.n	800604e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006042:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006044:	683b      	ldr	r3, [r7, #0]
 8006046:	685b      	ldr	r3, [r3, #4]
 8006048:	68fa      	ldr	r2, [r7, #12]
 800604a:	4313      	orrs	r3, r2
 800604c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006054:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006056:	683b      	ldr	r3, [r7, #0]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	68fa      	ldr	r2, [r7, #12]
 800605c:	4313      	orrs	r3, r2
 800605e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	68fa      	ldr	r2, [r7, #12]
 8006066:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	4a1e      	ldr	r2, [pc, #120]	@ (80060e8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800606e:	4293      	cmp	r3, r2
 8006070:	d01d      	beq.n	80060ae <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800607a:	d018      	beq.n	80060ae <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	4a1b      	ldr	r2, [pc, #108]	@ (80060f0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006082:	4293      	cmp	r3, r2
 8006084:	d013      	beq.n	80060ae <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	4a1a      	ldr	r2, [pc, #104]	@ (80060f4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800608c:	4293      	cmp	r3, r2
 800608e:	d00e      	beq.n	80060ae <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	4a18      	ldr	r2, [pc, #96]	@ (80060f8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006096:	4293      	cmp	r3, r2
 8006098:	d009      	beq.n	80060ae <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	4a13      	ldr	r2, [pc, #76]	@ (80060ec <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80060a0:	4293      	cmp	r3, r2
 80060a2:	d004      	beq.n	80060ae <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	4a14      	ldr	r2, [pc, #80]	@ (80060fc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80060aa:	4293      	cmp	r3, r2
 80060ac:	d10c      	bne.n	80060c8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80060ae:	68bb      	ldr	r3, [r7, #8]
 80060b0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80060b4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80060b6:	683b      	ldr	r3, [r7, #0]
 80060b8:	689b      	ldr	r3, [r3, #8]
 80060ba:	68ba      	ldr	r2, [r7, #8]
 80060bc:	4313      	orrs	r3, r2
 80060be:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	68ba      	ldr	r2, [r7, #8]
 80060c6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	2201      	movs	r2, #1
 80060cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	2200      	movs	r2, #0
 80060d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80060d8:	2300      	movs	r3, #0
}
 80060da:	4618      	mov	r0, r3
 80060dc:	3714      	adds	r7, #20
 80060de:	46bd      	mov	sp, r7
 80060e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e4:	4770      	bx	lr
 80060e6:	bf00      	nop
 80060e8:	40012c00 	.word	0x40012c00
 80060ec:	40013400 	.word	0x40013400
 80060f0:	40000400 	.word	0x40000400
 80060f4:	40000800 	.word	0x40000800
 80060f8:	40000c00 	.word	0x40000c00
 80060fc:	40014000 	.word	0x40014000

08006100 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006100:	b580      	push	{r7, lr}
 8006102:	b082      	sub	sp, #8
 8006104:	af00      	add	r7, sp, #0
 8006106:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	2b00      	cmp	r3, #0
 800610c:	d101      	bne.n	8006112 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800610e:	2301      	movs	r3, #1
 8006110:	e040      	b.n	8006194 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006116:	2b00      	cmp	r3, #0
 8006118:	d106      	bne.n	8006128 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	2200      	movs	r2, #0
 800611e:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006122:	6878      	ldr	r0, [r7, #4]
 8006124:	f7fb fcf2 	bl	8001b0c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	2224      	movs	r2, #36	@ 0x24
 800612c:	675a      	str	r2, [r3, #116]	@ 0x74

  __HAL_UART_DISABLE(huart);
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	681a      	ldr	r2, [r3, #0]
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	f022 0201 	bic.w	r2, r2, #1
 800613c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800613e:	6878      	ldr	r0, [r7, #4]
 8006140:	f000 f8be 	bl	80062c0 <UART_SetConfig>
 8006144:	4603      	mov	r3, r0
 8006146:	2b01      	cmp	r3, #1
 8006148:	d101      	bne.n	800614e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800614a:	2301      	movs	r3, #1
 800614c:	e022      	b.n	8006194 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006152:	2b00      	cmp	r3, #0
 8006154:	d002      	beq.n	800615c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006156:	6878      	ldr	r0, [r7, #4]
 8006158:	f000 fb6c 	bl	8006834 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	685a      	ldr	r2, [r3, #4]
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800616a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	689a      	ldr	r2, [r3, #8]
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800617a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	681a      	ldr	r2, [r3, #0]
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	f042 0201 	orr.w	r2, r2, #1
 800618a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800618c:	6878      	ldr	r0, [r7, #4]
 800618e:	f000 fbf3 	bl	8006978 <UART_CheckIdleState>
 8006192:	4603      	mov	r3, r0
}
 8006194:	4618      	mov	r0, r3
 8006196:	3708      	adds	r7, #8
 8006198:	46bd      	mov	sp, r7
 800619a:	bd80      	pop	{r7, pc}

0800619c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800619c:	b580      	push	{r7, lr}
 800619e:	b08a      	sub	sp, #40	@ 0x28
 80061a0:	af02      	add	r7, sp, #8
 80061a2:	60f8      	str	r0, [r7, #12]
 80061a4:	60b9      	str	r1, [r7, #8]
 80061a6:	603b      	str	r3, [r7, #0]
 80061a8:	4613      	mov	r3, r2
 80061aa:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80061b0:	2b20      	cmp	r3, #32
 80061b2:	d17f      	bne.n	80062b4 <HAL_UART_Transmit+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 80061b4:	68bb      	ldr	r3, [r7, #8]
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d002      	beq.n	80061c0 <HAL_UART_Transmit+0x24>
 80061ba:	88fb      	ldrh	r3, [r7, #6]
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d101      	bne.n	80061c4 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80061c0:	2301      	movs	r3, #1
 80061c2:	e078      	b.n	80062b6 <HAL_UART_Transmit+0x11a>
    }

    __HAL_LOCK(huart);
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 80061ca:	2b01      	cmp	r3, #1
 80061cc:	d101      	bne.n	80061d2 <HAL_UART_Transmit+0x36>
 80061ce:	2302      	movs	r3, #2
 80061d0:	e071      	b.n	80062b6 <HAL_UART_Transmit+0x11a>
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	2201      	movs	r2, #1
 80061d6:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	2200      	movs	r2, #0
 80061de:	67da      	str	r2, [r3, #124]	@ 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	2221      	movs	r2, #33	@ 0x21
 80061e4:	675a      	str	r2, [r3, #116]	@ 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80061e6:	f7fc fe65 	bl	8002eb4 <HAL_GetTick>
 80061ea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	88fa      	ldrh	r2, [r7, #6]
 80061f0:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	88fa      	ldrh	r2, [r7, #6]
 80061f8:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	689b      	ldr	r3, [r3, #8]
 8006200:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006204:	d108      	bne.n	8006218 <HAL_UART_Transmit+0x7c>
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	691b      	ldr	r3, [r3, #16]
 800620a:	2b00      	cmp	r3, #0
 800620c:	d104      	bne.n	8006218 <HAL_UART_Transmit+0x7c>
    {
      pdata8bits  = NULL;
 800620e:	2300      	movs	r3, #0
 8006210:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006212:	68bb      	ldr	r3, [r7, #8]
 8006214:	61bb      	str	r3, [r7, #24]
 8006216:	e003      	b.n	8006220 <HAL_UART_Transmit+0x84>
    }
    else
    {
      pdata8bits  = pData;
 8006218:	68bb      	ldr	r3, [r7, #8]
 800621a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800621c:	2300      	movs	r3, #0
 800621e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	2200      	movs	r2, #0
 8006224:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70

    while (huart->TxXferCount > 0U)
 8006228:	e02c      	b.n	8006284 <HAL_UART_Transmit+0xe8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800622a:	683b      	ldr	r3, [r7, #0]
 800622c:	9300      	str	r3, [sp, #0]
 800622e:	697b      	ldr	r3, [r7, #20]
 8006230:	2200      	movs	r2, #0
 8006232:	2180      	movs	r1, #128	@ 0x80
 8006234:	68f8      	ldr	r0, [r7, #12]
 8006236:	f000 fbe4 	bl	8006a02 <UART_WaitOnFlagUntilTimeout>
 800623a:	4603      	mov	r3, r0
 800623c:	2b00      	cmp	r3, #0
 800623e:	d001      	beq.n	8006244 <HAL_UART_Transmit+0xa8>
      {
        return HAL_TIMEOUT;
 8006240:	2303      	movs	r3, #3
 8006242:	e038      	b.n	80062b6 <HAL_UART_Transmit+0x11a>
      }
      if (pdata8bits == NULL)
 8006244:	69fb      	ldr	r3, [r7, #28]
 8006246:	2b00      	cmp	r3, #0
 8006248:	d10b      	bne.n	8006262 <HAL_UART_Transmit+0xc6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800624a:	69bb      	ldr	r3, [r7, #24]
 800624c:	881a      	ldrh	r2, [r3, #0]
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006256:	b292      	uxth	r2, r2
 8006258:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800625a:	69bb      	ldr	r3, [r7, #24]
 800625c:	3302      	adds	r3, #2
 800625e:	61bb      	str	r3, [r7, #24]
 8006260:	e007      	b.n	8006272 <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006262:	69fb      	ldr	r3, [r7, #28]
 8006264:	781a      	ldrb	r2, [r3, #0]
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800626c:	69fb      	ldr	r3, [r7, #28]
 800626e:	3301      	adds	r3, #1
 8006270:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8006278:	b29b      	uxth	r3, r3
 800627a:	3b01      	subs	r3, #1
 800627c:	b29a      	uxth	r2, r3
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800628a:	b29b      	uxth	r3, r3
 800628c:	2b00      	cmp	r3, #0
 800628e:	d1cc      	bne.n	800622a <HAL_UART_Transmit+0x8e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006290:	683b      	ldr	r3, [r7, #0]
 8006292:	9300      	str	r3, [sp, #0]
 8006294:	697b      	ldr	r3, [r7, #20]
 8006296:	2200      	movs	r2, #0
 8006298:	2140      	movs	r1, #64	@ 0x40
 800629a:	68f8      	ldr	r0, [r7, #12]
 800629c:	f000 fbb1 	bl	8006a02 <UART_WaitOnFlagUntilTimeout>
 80062a0:	4603      	mov	r3, r0
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d001      	beq.n	80062aa <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80062a6:	2303      	movs	r3, #3
 80062a8:	e005      	b.n	80062b6 <HAL_UART_Transmit+0x11a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	2220      	movs	r2, #32
 80062ae:	675a      	str	r2, [r3, #116]	@ 0x74

    return HAL_OK;
 80062b0:	2300      	movs	r3, #0
 80062b2:	e000      	b.n	80062b6 <HAL_UART_Transmit+0x11a>
  }
  else
  {
    return HAL_BUSY;
 80062b4:	2302      	movs	r3, #2
  }
}
 80062b6:	4618      	mov	r0, r3
 80062b8:	3720      	adds	r7, #32
 80062ba:	46bd      	mov	sp, r7
 80062bc:	bd80      	pop	{r7, pc}
	...

080062c0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80062c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80062c4:	b08a      	sub	sp, #40	@ 0x28
 80062c6:	af00      	add	r7, sp, #0
 80062c8:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80062ca:	2300      	movs	r3, #0
 80062cc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	689a      	ldr	r2, [r3, #8]
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	691b      	ldr	r3, [r3, #16]
 80062d8:	431a      	orrs	r2, r3
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	695b      	ldr	r3, [r3, #20]
 80062de:	431a      	orrs	r2, r3
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	69db      	ldr	r3, [r3, #28]
 80062e4:	4313      	orrs	r3, r2
 80062e6:	627b      	str	r3, [r7, #36]	@ 0x24
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	681a      	ldr	r2, [r3, #0]
 80062ee:	4ba4      	ldr	r3, [pc, #656]	@ (8006580 <UART_SetConfig+0x2c0>)
 80062f0:	4013      	ands	r3, r2
 80062f2:	68fa      	ldr	r2, [r7, #12]
 80062f4:	6812      	ldr	r2, [r2, #0]
 80062f6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80062f8:	430b      	orrs	r3, r1
 80062fa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	685b      	ldr	r3, [r3, #4]
 8006302:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	68da      	ldr	r2, [r3, #12]
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	430a      	orrs	r2, r1
 8006310:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	699b      	ldr	r3, [r3, #24]
 8006316:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	4a99      	ldr	r2, [pc, #612]	@ (8006584 <UART_SetConfig+0x2c4>)
 800631e:	4293      	cmp	r3, r2
 8006320:	d004      	beq.n	800632c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	6a1b      	ldr	r3, [r3, #32]
 8006326:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006328:	4313      	orrs	r3, r2
 800632a:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	689b      	ldr	r3, [r3, #8]
 8006332:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800633c:	430a      	orrs	r2, r1
 800633e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	4a90      	ldr	r2, [pc, #576]	@ (8006588 <UART_SetConfig+0x2c8>)
 8006346:	4293      	cmp	r3, r2
 8006348:	d126      	bne.n	8006398 <UART_SetConfig+0xd8>
 800634a:	4b90      	ldr	r3, [pc, #576]	@ (800658c <UART_SetConfig+0x2cc>)
 800634c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006350:	f003 0303 	and.w	r3, r3, #3
 8006354:	2b03      	cmp	r3, #3
 8006356:	d81b      	bhi.n	8006390 <UART_SetConfig+0xd0>
 8006358:	a201      	add	r2, pc, #4	@ (adr r2, 8006360 <UART_SetConfig+0xa0>)
 800635a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800635e:	bf00      	nop
 8006360:	08006371 	.word	0x08006371
 8006364:	08006381 	.word	0x08006381
 8006368:	08006379 	.word	0x08006379
 800636c:	08006389 	.word	0x08006389
 8006370:	2301      	movs	r3, #1
 8006372:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006376:	e116      	b.n	80065a6 <UART_SetConfig+0x2e6>
 8006378:	2302      	movs	r3, #2
 800637a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800637e:	e112      	b.n	80065a6 <UART_SetConfig+0x2e6>
 8006380:	2304      	movs	r3, #4
 8006382:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006386:	e10e      	b.n	80065a6 <UART_SetConfig+0x2e6>
 8006388:	2308      	movs	r3, #8
 800638a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800638e:	e10a      	b.n	80065a6 <UART_SetConfig+0x2e6>
 8006390:	2310      	movs	r3, #16
 8006392:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006396:	e106      	b.n	80065a6 <UART_SetConfig+0x2e6>
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	4a7c      	ldr	r2, [pc, #496]	@ (8006590 <UART_SetConfig+0x2d0>)
 800639e:	4293      	cmp	r3, r2
 80063a0:	d138      	bne.n	8006414 <UART_SetConfig+0x154>
 80063a2:	4b7a      	ldr	r3, [pc, #488]	@ (800658c <UART_SetConfig+0x2cc>)
 80063a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80063a8:	f003 030c 	and.w	r3, r3, #12
 80063ac:	2b0c      	cmp	r3, #12
 80063ae:	d82d      	bhi.n	800640c <UART_SetConfig+0x14c>
 80063b0:	a201      	add	r2, pc, #4	@ (adr r2, 80063b8 <UART_SetConfig+0xf8>)
 80063b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063b6:	bf00      	nop
 80063b8:	080063ed 	.word	0x080063ed
 80063bc:	0800640d 	.word	0x0800640d
 80063c0:	0800640d 	.word	0x0800640d
 80063c4:	0800640d 	.word	0x0800640d
 80063c8:	080063fd 	.word	0x080063fd
 80063cc:	0800640d 	.word	0x0800640d
 80063d0:	0800640d 	.word	0x0800640d
 80063d4:	0800640d 	.word	0x0800640d
 80063d8:	080063f5 	.word	0x080063f5
 80063dc:	0800640d 	.word	0x0800640d
 80063e0:	0800640d 	.word	0x0800640d
 80063e4:	0800640d 	.word	0x0800640d
 80063e8:	08006405 	.word	0x08006405
 80063ec:	2300      	movs	r3, #0
 80063ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80063f2:	e0d8      	b.n	80065a6 <UART_SetConfig+0x2e6>
 80063f4:	2302      	movs	r3, #2
 80063f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80063fa:	e0d4      	b.n	80065a6 <UART_SetConfig+0x2e6>
 80063fc:	2304      	movs	r3, #4
 80063fe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006402:	e0d0      	b.n	80065a6 <UART_SetConfig+0x2e6>
 8006404:	2308      	movs	r3, #8
 8006406:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800640a:	e0cc      	b.n	80065a6 <UART_SetConfig+0x2e6>
 800640c:	2310      	movs	r3, #16
 800640e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006412:	e0c8      	b.n	80065a6 <UART_SetConfig+0x2e6>
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	4a5e      	ldr	r2, [pc, #376]	@ (8006594 <UART_SetConfig+0x2d4>)
 800641a:	4293      	cmp	r3, r2
 800641c:	d125      	bne.n	800646a <UART_SetConfig+0x1aa>
 800641e:	4b5b      	ldr	r3, [pc, #364]	@ (800658c <UART_SetConfig+0x2cc>)
 8006420:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006424:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006428:	2b30      	cmp	r3, #48	@ 0x30
 800642a:	d016      	beq.n	800645a <UART_SetConfig+0x19a>
 800642c:	2b30      	cmp	r3, #48	@ 0x30
 800642e:	d818      	bhi.n	8006462 <UART_SetConfig+0x1a2>
 8006430:	2b20      	cmp	r3, #32
 8006432:	d00a      	beq.n	800644a <UART_SetConfig+0x18a>
 8006434:	2b20      	cmp	r3, #32
 8006436:	d814      	bhi.n	8006462 <UART_SetConfig+0x1a2>
 8006438:	2b00      	cmp	r3, #0
 800643a:	d002      	beq.n	8006442 <UART_SetConfig+0x182>
 800643c:	2b10      	cmp	r3, #16
 800643e:	d008      	beq.n	8006452 <UART_SetConfig+0x192>
 8006440:	e00f      	b.n	8006462 <UART_SetConfig+0x1a2>
 8006442:	2300      	movs	r3, #0
 8006444:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006448:	e0ad      	b.n	80065a6 <UART_SetConfig+0x2e6>
 800644a:	2302      	movs	r3, #2
 800644c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006450:	e0a9      	b.n	80065a6 <UART_SetConfig+0x2e6>
 8006452:	2304      	movs	r3, #4
 8006454:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006458:	e0a5      	b.n	80065a6 <UART_SetConfig+0x2e6>
 800645a:	2308      	movs	r3, #8
 800645c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006460:	e0a1      	b.n	80065a6 <UART_SetConfig+0x2e6>
 8006462:	2310      	movs	r3, #16
 8006464:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006468:	e09d      	b.n	80065a6 <UART_SetConfig+0x2e6>
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	4a4a      	ldr	r2, [pc, #296]	@ (8006598 <UART_SetConfig+0x2d8>)
 8006470:	4293      	cmp	r3, r2
 8006472:	d125      	bne.n	80064c0 <UART_SetConfig+0x200>
 8006474:	4b45      	ldr	r3, [pc, #276]	@ (800658c <UART_SetConfig+0x2cc>)
 8006476:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800647a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800647e:	2bc0      	cmp	r3, #192	@ 0xc0
 8006480:	d016      	beq.n	80064b0 <UART_SetConfig+0x1f0>
 8006482:	2bc0      	cmp	r3, #192	@ 0xc0
 8006484:	d818      	bhi.n	80064b8 <UART_SetConfig+0x1f8>
 8006486:	2b80      	cmp	r3, #128	@ 0x80
 8006488:	d00a      	beq.n	80064a0 <UART_SetConfig+0x1e0>
 800648a:	2b80      	cmp	r3, #128	@ 0x80
 800648c:	d814      	bhi.n	80064b8 <UART_SetConfig+0x1f8>
 800648e:	2b00      	cmp	r3, #0
 8006490:	d002      	beq.n	8006498 <UART_SetConfig+0x1d8>
 8006492:	2b40      	cmp	r3, #64	@ 0x40
 8006494:	d008      	beq.n	80064a8 <UART_SetConfig+0x1e8>
 8006496:	e00f      	b.n	80064b8 <UART_SetConfig+0x1f8>
 8006498:	2300      	movs	r3, #0
 800649a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800649e:	e082      	b.n	80065a6 <UART_SetConfig+0x2e6>
 80064a0:	2302      	movs	r3, #2
 80064a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80064a6:	e07e      	b.n	80065a6 <UART_SetConfig+0x2e6>
 80064a8:	2304      	movs	r3, #4
 80064aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80064ae:	e07a      	b.n	80065a6 <UART_SetConfig+0x2e6>
 80064b0:	2308      	movs	r3, #8
 80064b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80064b6:	e076      	b.n	80065a6 <UART_SetConfig+0x2e6>
 80064b8:	2310      	movs	r3, #16
 80064ba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80064be:	e072      	b.n	80065a6 <UART_SetConfig+0x2e6>
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	4a35      	ldr	r2, [pc, #212]	@ (800659c <UART_SetConfig+0x2dc>)
 80064c6:	4293      	cmp	r3, r2
 80064c8:	d12a      	bne.n	8006520 <UART_SetConfig+0x260>
 80064ca:	4b30      	ldr	r3, [pc, #192]	@ (800658c <UART_SetConfig+0x2cc>)
 80064cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80064d0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80064d4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80064d8:	d01a      	beq.n	8006510 <UART_SetConfig+0x250>
 80064da:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80064de:	d81b      	bhi.n	8006518 <UART_SetConfig+0x258>
 80064e0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80064e4:	d00c      	beq.n	8006500 <UART_SetConfig+0x240>
 80064e6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80064ea:	d815      	bhi.n	8006518 <UART_SetConfig+0x258>
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d003      	beq.n	80064f8 <UART_SetConfig+0x238>
 80064f0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80064f4:	d008      	beq.n	8006508 <UART_SetConfig+0x248>
 80064f6:	e00f      	b.n	8006518 <UART_SetConfig+0x258>
 80064f8:	2300      	movs	r3, #0
 80064fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80064fe:	e052      	b.n	80065a6 <UART_SetConfig+0x2e6>
 8006500:	2302      	movs	r3, #2
 8006502:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006506:	e04e      	b.n	80065a6 <UART_SetConfig+0x2e6>
 8006508:	2304      	movs	r3, #4
 800650a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800650e:	e04a      	b.n	80065a6 <UART_SetConfig+0x2e6>
 8006510:	2308      	movs	r3, #8
 8006512:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006516:	e046      	b.n	80065a6 <UART_SetConfig+0x2e6>
 8006518:	2310      	movs	r3, #16
 800651a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800651e:	e042      	b.n	80065a6 <UART_SetConfig+0x2e6>
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	4a17      	ldr	r2, [pc, #92]	@ (8006584 <UART_SetConfig+0x2c4>)
 8006526:	4293      	cmp	r3, r2
 8006528:	d13a      	bne.n	80065a0 <UART_SetConfig+0x2e0>
 800652a:	4b18      	ldr	r3, [pc, #96]	@ (800658c <UART_SetConfig+0x2cc>)
 800652c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006530:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006534:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006538:	d01a      	beq.n	8006570 <UART_SetConfig+0x2b0>
 800653a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800653e:	d81b      	bhi.n	8006578 <UART_SetConfig+0x2b8>
 8006540:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006544:	d00c      	beq.n	8006560 <UART_SetConfig+0x2a0>
 8006546:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800654a:	d815      	bhi.n	8006578 <UART_SetConfig+0x2b8>
 800654c:	2b00      	cmp	r3, #0
 800654e:	d003      	beq.n	8006558 <UART_SetConfig+0x298>
 8006550:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006554:	d008      	beq.n	8006568 <UART_SetConfig+0x2a8>
 8006556:	e00f      	b.n	8006578 <UART_SetConfig+0x2b8>
 8006558:	2300      	movs	r3, #0
 800655a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800655e:	e022      	b.n	80065a6 <UART_SetConfig+0x2e6>
 8006560:	2302      	movs	r3, #2
 8006562:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006566:	e01e      	b.n	80065a6 <UART_SetConfig+0x2e6>
 8006568:	2304      	movs	r3, #4
 800656a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800656e:	e01a      	b.n	80065a6 <UART_SetConfig+0x2e6>
 8006570:	2308      	movs	r3, #8
 8006572:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006576:	e016      	b.n	80065a6 <UART_SetConfig+0x2e6>
 8006578:	2310      	movs	r3, #16
 800657a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800657e:	e012      	b.n	80065a6 <UART_SetConfig+0x2e6>
 8006580:	efff69f3 	.word	0xefff69f3
 8006584:	40008000 	.word	0x40008000
 8006588:	40013800 	.word	0x40013800
 800658c:	40021000 	.word	0x40021000
 8006590:	40004400 	.word	0x40004400
 8006594:	40004800 	.word	0x40004800
 8006598:	40004c00 	.word	0x40004c00
 800659c:	40005000 	.word	0x40005000
 80065a0:	2310      	movs	r3, #16
 80065a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	4aa0      	ldr	r2, [pc, #640]	@ (800682c <UART_SetConfig+0x56c>)
 80065ac:	4293      	cmp	r3, r2
 80065ae:	d17a      	bne.n	80066a6 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80065b0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80065b4:	2b08      	cmp	r3, #8
 80065b6:	d824      	bhi.n	8006602 <UART_SetConfig+0x342>
 80065b8:	a201      	add	r2, pc, #4	@ (adr r2, 80065c0 <UART_SetConfig+0x300>)
 80065ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065be:	bf00      	nop
 80065c0:	080065e5 	.word	0x080065e5
 80065c4:	08006603 	.word	0x08006603
 80065c8:	080065ed 	.word	0x080065ed
 80065cc:	08006603 	.word	0x08006603
 80065d0:	080065f3 	.word	0x080065f3
 80065d4:	08006603 	.word	0x08006603
 80065d8:	08006603 	.word	0x08006603
 80065dc:	08006603 	.word	0x08006603
 80065e0:	080065fb 	.word	0x080065fb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80065e4:	f7fe fe0a 	bl	80051fc <HAL_RCC_GetPCLK1Freq>
 80065e8:	61f8      	str	r0, [r7, #28]
        break;
 80065ea:	e010      	b.n	800660e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80065ec:	4b90      	ldr	r3, [pc, #576]	@ (8006830 <UART_SetConfig+0x570>)
 80065ee:	61fb      	str	r3, [r7, #28]
        break;
 80065f0:	e00d      	b.n	800660e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80065f2:	f7fe fd6b 	bl	80050cc <HAL_RCC_GetSysClockFreq>
 80065f6:	61f8      	str	r0, [r7, #28]
        break;
 80065f8:	e009      	b.n	800660e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80065fa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80065fe:	61fb      	str	r3, [r7, #28]
        break;
 8006600:	e005      	b.n	800660e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8006602:	2300      	movs	r3, #0
 8006604:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006606:	2301      	movs	r3, #1
 8006608:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800660c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800660e:	69fb      	ldr	r3, [r7, #28]
 8006610:	2b00      	cmp	r3, #0
 8006612:	f000 80fd 	beq.w	8006810 <UART_SetConfig+0x550>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	685a      	ldr	r2, [r3, #4]
 800661a:	4613      	mov	r3, r2
 800661c:	005b      	lsls	r3, r3, #1
 800661e:	4413      	add	r3, r2
 8006620:	69fa      	ldr	r2, [r7, #28]
 8006622:	429a      	cmp	r2, r3
 8006624:	d305      	bcc.n	8006632 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	685b      	ldr	r3, [r3, #4]
 800662a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800662c:	69fa      	ldr	r2, [r7, #28]
 800662e:	429a      	cmp	r2, r3
 8006630:	d903      	bls.n	800663a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8006632:	2301      	movs	r3, #1
 8006634:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006638:	e0ea      	b.n	8006810 <UART_SetConfig+0x550>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate));
 800663a:	69fb      	ldr	r3, [r7, #28]
 800663c:	2200      	movs	r2, #0
 800663e:	461c      	mov	r4, r3
 8006640:	4615      	mov	r5, r2
 8006642:	f04f 0200 	mov.w	r2, #0
 8006646:	f04f 0300 	mov.w	r3, #0
 800664a:	022b      	lsls	r3, r5, #8
 800664c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8006650:	0222      	lsls	r2, r4, #8
 8006652:	68f9      	ldr	r1, [r7, #12]
 8006654:	6849      	ldr	r1, [r1, #4]
 8006656:	0849      	lsrs	r1, r1, #1
 8006658:	2000      	movs	r0, #0
 800665a:	4688      	mov	r8, r1
 800665c:	4681      	mov	r9, r0
 800665e:	eb12 0a08 	adds.w	sl, r2, r8
 8006662:	eb43 0b09 	adc.w	fp, r3, r9
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	685b      	ldr	r3, [r3, #4]
 800666a:	2200      	movs	r2, #0
 800666c:	603b      	str	r3, [r7, #0]
 800666e:	607a      	str	r2, [r7, #4]
 8006670:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006674:	4650      	mov	r0, sl
 8006676:	4659      	mov	r1, fp
 8006678:	f7fa fa96 	bl	8000ba8 <__aeabi_uldivmod>
 800667c:	4602      	mov	r2, r0
 800667e:	460b      	mov	r3, r1
 8006680:	4613      	mov	r3, r2
 8006682:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006684:	69bb      	ldr	r3, [r7, #24]
 8006686:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800668a:	d308      	bcc.n	800669e <UART_SetConfig+0x3de>
 800668c:	69bb      	ldr	r3, [r7, #24]
 800668e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006692:	d204      	bcs.n	800669e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	69ba      	ldr	r2, [r7, #24]
 800669a:	60da      	str	r2, [r3, #12]
 800669c:	e0b8      	b.n	8006810 <UART_SetConfig+0x550>
        }
        else
        {
          ret = HAL_ERROR;
 800669e:	2301      	movs	r3, #1
 80066a0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80066a4:	e0b4      	b.n	8006810 <UART_SetConfig+0x550>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	69db      	ldr	r3, [r3, #28]
 80066aa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80066ae:	d15f      	bne.n	8006770 <UART_SetConfig+0x4b0>
  {
    switch (clocksource)
 80066b0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80066b4:	2b08      	cmp	r3, #8
 80066b6:	d828      	bhi.n	800670a <UART_SetConfig+0x44a>
 80066b8:	a201      	add	r2, pc, #4	@ (adr r2, 80066c0 <UART_SetConfig+0x400>)
 80066ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066be:	bf00      	nop
 80066c0:	080066e5 	.word	0x080066e5
 80066c4:	080066ed 	.word	0x080066ed
 80066c8:	080066f5 	.word	0x080066f5
 80066cc:	0800670b 	.word	0x0800670b
 80066d0:	080066fb 	.word	0x080066fb
 80066d4:	0800670b 	.word	0x0800670b
 80066d8:	0800670b 	.word	0x0800670b
 80066dc:	0800670b 	.word	0x0800670b
 80066e0:	08006703 	.word	0x08006703
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80066e4:	f7fe fd8a 	bl	80051fc <HAL_RCC_GetPCLK1Freq>
 80066e8:	61f8      	str	r0, [r7, #28]
        break;
 80066ea:	e014      	b.n	8006716 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80066ec:	f7fe fd9c 	bl	8005228 <HAL_RCC_GetPCLK2Freq>
 80066f0:	61f8      	str	r0, [r7, #28]
        break;
 80066f2:	e010      	b.n	8006716 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80066f4:	4b4e      	ldr	r3, [pc, #312]	@ (8006830 <UART_SetConfig+0x570>)
 80066f6:	61fb      	str	r3, [r7, #28]
        break;
 80066f8:	e00d      	b.n	8006716 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80066fa:	f7fe fce7 	bl	80050cc <HAL_RCC_GetSysClockFreq>
 80066fe:	61f8      	str	r0, [r7, #28]
        break;
 8006700:	e009      	b.n	8006716 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006702:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006706:	61fb      	str	r3, [r7, #28]
        break;
 8006708:	e005      	b.n	8006716 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800670a:	2300      	movs	r3, #0
 800670c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800670e:	2301      	movs	r3, #1
 8006710:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006714:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006716:	69fb      	ldr	r3, [r7, #28]
 8006718:	2b00      	cmp	r3, #0
 800671a:	d079      	beq.n	8006810 <UART_SetConfig+0x550>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800671c:	69fb      	ldr	r3, [r7, #28]
 800671e:	005a      	lsls	r2, r3, #1
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	685b      	ldr	r3, [r3, #4]
 8006724:	085b      	lsrs	r3, r3, #1
 8006726:	441a      	add	r2, r3
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	685b      	ldr	r3, [r3, #4]
 800672c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006730:	b29b      	uxth	r3, r3
 8006732:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006734:	69bb      	ldr	r3, [r7, #24]
 8006736:	2b0f      	cmp	r3, #15
 8006738:	d916      	bls.n	8006768 <UART_SetConfig+0x4a8>
 800673a:	69bb      	ldr	r3, [r7, #24]
 800673c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006740:	d212      	bcs.n	8006768 <UART_SetConfig+0x4a8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006742:	69bb      	ldr	r3, [r7, #24]
 8006744:	b29b      	uxth	r3, r3
 8006746:	f023 030f 	bic.w	r3, r3, #15
 800674a:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800674c:	69bb      	ldr	r3, [r7, #24]
 800674e:	085b      	lsrs	r3, r3, #1
 8006750:	b29b      	uxth	r3, r3
 8006752:	f003 0307 	and.w	r3, r3, #7
 8006756:	b29a      	uxth	r2, r3
 8006758:	8afb      	ldrh	r3, [r7, #22]
 800675a:	4313      	orrs	r3, r2
 800675c:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	8afa      	ldrh	r2, [r7, #22]
 8006764:	60da      	str	r2, [r3, #12]
 8006766:	e053      	b.n	8006810 <UART_SetConfig+0x550>
      }
      else
      {
        ret = HAL_ERROR;
 8006768:	2301      	movs	r3, #1
 800676a:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800676e:	e04f      	b.n	8006810 <UART_SetConfig+0x550>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006770:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006774:	2b08      	cmp	r3, #8
 8006776:	d828      	bhi.n	80067ca <UART_SetConfig+0x50a>
 8006778:	a201      	add	r2, pc, #4	@ (adr r2, 8006780 <UART_SetConfig+0x4c0>)
 800677a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800677e:	bf00      	nop
 8006780:	080067a5 	.word	0x080067a5
 8006784:	080067ad 	.word	0x080067ad
 8006788:	080067b5 	.word	0x080067b5
 800678c:	080067cb 	.word	0x080067cb
 8006790:	080067bb 	.word	0x080067bb
 8006794:	080067cb 	.word	0x080067cb
 8006798:	080067cb 	.word	0x080067cb
 800679c:	080067cb 	.word	0x080067cb
 80067a0:	080067c3 	.word	0x080067c3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80067a4:	f7fe fd2a 	bl	80051fc <HAL_RCC_GetPCLK1Freq>
 80067a8:	61f8      	str	r0, [r7, #28]
        break;
 80067aa:	e014      	b.n	80067d6 <UART_SetConfig+0x516>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80067ac:	f7fe fd3c 	bl	8005228 <HAL_RCC_GetPCLK2Freq>
 80067b0:	61f8      	str	r0, [r7, #28]
        break;
 80067b2:	e010      	b.n	80067d6 <UART_SetConfig+0x516>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80067b4:	4b1e      	ldr	r3, [pc, #120]	@ (8006830 <UART_SetConfig+0x570>)
 80067b6:	61fb      	str	r3, [r7, #28]
        break;
 80067b8:	e00d      	b.n	80067d6 <UART_SetConfig+0x516>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80067ba:	f7fe fc87 	bl	80050cc <HAL_RCC_GetSysClockFreq>
 80067be:	61f8      	str	r0, [r7, #28]
        break;
 80067c0:	e009      	b.n	80067d6 <UART_SetConfig+0x516>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80067c2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80067c6:	61fb      	str	r3, [r7, #28]
        break;
 80067c8:	e005      	b.n	80067d6 <UART_SetConfig+0x516>
      default:
        pclk = 0U;
 80067ca:	2300      	movs	r3, #0
 80067cc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80067ce:	2301      	movs	r3, #1
 80067d0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80067d4:	bf00      	nop
    }

    if (pclk != 0U)
 80067d6:	69fb      	ldr	r3, [r7, #28]
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d019      	beq.n	8006810 <UART_SetConfig+0x550>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	685b      	ldr	r3, [r3, #4]
 80067e0:	085a      	lsrs	r2, r3, #1
 80067e2:	69fb      	ldr	r3, [r7, #28]
 80067e4:	441a      	add	r2, r3
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	685b      	ldr	r3, [r3, #4]
 80067ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80067ee:	b29b      	uxth	r3, r3
 80067f0:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80067f2:	69bb      	ldr	r3, [r7, #24]
 80067f4:	2b0f      	cmp	r3, #15
 80067f6:	d908      	bls.n	800680a <UART_SetConfig+0x54a>
 80067f8:	69bb      	ldr	r3, [r7, #24]
 80067fa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80067fe:	d204      	bcs.n	800680a <UART_SetConfig+0x54a>
      {
        huart->Instance->BRR = usartdiv;
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	69ba      	ldr	r2, [r7, #24]
 8006806:	60da      	str	r2, [r3, #12]
 8006808:	e002      	b.n	8006810 <UART_SetConfig+0x550>
      }
      else
      {
        ret = HAL_ERROR;
 800680a:	2301      	movs	r3, #1
 800680c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	2200      	movs	r2, #0
 8006814:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->TxISR = NULL;
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	2200      	movs	r2, #0
 800681a:	665a      	str	r2, [r3, #100]	@ 0x64

  return ret;
 800681c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8006820:	4618      	mov	r0, r3
 8006822:	3728      	adds	r7, #40	@ 0x28
 8006824:	46bd      	mov	sp, r7
 8006826:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800682a:	bf00      	nop
 800682c:	40008000 	.word	0x40008000
 8006830:	00f42400 	.word	0x00f42400

08006834 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006834:	b480      	push	{r7}
 8006836:	b083      	sub	sp, #12
 8006838:	af00      	add	r7, sp, #0
 800683a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006840:	f003 0301 	and.w	r3, r3, #1
 8006844:	2b00      	cmp	r3, #0
 8006846:	d00a      	beq.n	800685e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	685b      	ldr	r3, [r3, #4]
 800684e:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	430a      	orrs	r2, r1
 800685c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006862:	f003 0302 	and.w	r3, r3, #2
 8006866:	2b00      	cmp	r3, #0
 8006868:	d00a      	beq.n	8006880 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	685b      	ldr	r3, [r3, #4]
 8006870:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	430a      	orrs	r2, r1
 800687e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006884:	f003 0304 	and.w	r3, r3, #4
 8006888:	2b00      	cmp	r3, #0
 800688a:	d00a      	beq.n	80068a2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	685b      	ldr	r3, [r3, #4]
 8006892:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	430a      	orrs	r2, r1
 80068a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068a6:	f003 0308 	and.w	r3, r3, #8
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d00a      	beq.n	80068c4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	685b      	ldr	r3, [r3, #4]
 80068b4:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	430a      	orrs	r2, r1
 80068c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068c8:	f003 0310 	and.w	r3, r3, #16
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d00a      	beq.n	80068e6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	689b      	ldr	r3, [r3, #8]
 80068d6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	430a      	orrs	r2, r1
 80068e4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068ea:	f003 0320 	and.w	r3, r3, #32
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d00a      	beq.n	8006908 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	689b      	ldr	r3, [r3, #8]
 80068f8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	430a      	orrs	r2, r1
 8006906:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800690c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006910:	2b00      	cmp	r3, #0
 8006912:	d01a      	beq.n	800694a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	685b      	ldr	r3, [r3, #4]
 800691a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	430a      	orrs	r2, r1
 8006928:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800692e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006932:	d10a      	bne.n	800694a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	685b      	ldr	r3, [r3, #4]
 800693a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	430a      	orrs	r2, r1
 8006948:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800694e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006952:	2b00      	cmp	r3, #0
 8006954:	d00a      	beq.n	800696c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	685b      	ldr	r3, [r3, #4]
 800695c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	430a      	orrs	r2, r1
 800696a:	605a      	str	r2, [r3, #4]
  }
}
 800696c:	bf00      	nop
 800696e:	370c      	adds	r7, #12
 8006970:	46bd      	mov	sp, r7
 8006972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006976:	4770      	bx	lr

08006978 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006978:	b580      	push	{r7, lr}
 800697a:	b086      	sub	sp, #24
 800697c:	af02      	add	r7, sp, #8
 800697e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	2200      	movs	r2, #0
 8006984:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8006986:	f7fc fa95 	bl	8002eb4 <HAL_GetTick>
 800698a:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	f003 0308 	and.w	r3, r3, #8
 8006996:	2b08      	cmp	r3, #8
 8006998:	d10e      	bne.n	80069b8 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800699a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800699e:	9300      	str	r3, [sp, #0]
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	2200      	movs	r2, #0
 80069a4:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80069a8:	6878      	ldr	r0, [r7, #4]
 80069aa:	f000 f82a 	bl	8006a02 <UART_WaitOnFlagUntilTimeout>
 80069ae:	4603      	mov	r3, r0
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d001      	beq.n	80069b8 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80069b4:	2303      	movs	r3, #3
 80069b6:	e020      	b.n	80069fa <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	f003 0304 	and.w	r3, r3, #4
 80069c2:	2b04      	cmp	r3, #4
 80069c4:	d10e      	bne.n	80069e4 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80069c6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80069ca:	9300      	str	r3, [sp, #0]
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	2200      	movs	r2, #0
 80069d0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80069d4:	6878      	ldr	r0, [r7, #4]
 80069d6:	f000 f814 	bl	8006a02 <UART_WaitOnFlagUntilTimeout>
 80069da:	4603      	mov	r3, r0
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d001      	beq.n	80069e4 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80069e0:	2303      	movs	r3, #3
 80069e2:	e00a      	b.n	80069fa <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	2220      	movs	r2, #32
 80069e8:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	2220      	movs	r2, #32
 80069ee:	679a      	str	r2, [r3, #120]	@ 0x78

  __HAL_UNLOCK(huart);
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	2200      	movs	r2, #0
 80069f4:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70

  return HAL_OK;
 80069f8:	2300      	movs	r3, #0
}
 80069fa:	4618      	mov	r0, r3
 80069fc:	3710      	adds	r7, #16
 80069fe:	46bd      	mov	sp, r7
 8006a00:	bd80      	pop	{r7, pc}

08006a02 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006a02:	b580      	push	{r7, lr}
 8006a04:	b084      	sub	sp, #16
 8006a06:	af00      	add	r7, sp, #0
 8006a08:	60f8      	str	r0, [r7, #12]
 8006a0a:	60b9      	str	r1, [r7, #8]
 8006a0c:	603b      	str	r3, [r7, #0]
 8006a0e:	4613      	mov	r3, r2
 8006a10:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a12:	e05d      	b.n	8006ad0 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006a14:	69bb      	ldr	r3, [r7, #24]
 8006a16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a1a:	d059      	beq.n	8006ad0 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a1c:	f7fc fa4a 	bl	8002eb4 <HAL_GetTick>
 8006a20:	4602      	mov	r2, r0
 8006a22:	683b      	ldr	r3, [r7, #0]
 8006a24:	1ad3      	subs	r3, r2, r3
 8006a26:	69ba      	ldr	r2, [r7, #24]
 8006a28:	429a      	cmp	r2, r3
 8006a2a:	d302      	bcc.n	8006a32 <UART_WaitOnFlagUntilTimeout+0x30>
 8006a2c:	69bb      	ldr	r3, [r7, #24]
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d11b      	bne.n	8006a6a <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	681a      	ldr	r2, [r3, #0]
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	f422 72d0 	bic.w	r2, r2, #416	@ 0x1a0
 8006a40:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	689a      	ldr	r2, [r3, #8]
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	f022 0201 	bic.w	r2, r2, #1
 8006a50:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	2220      	movs	r2, #32
 8006a56:	675a      	str	r2, [r3, #116]	@ 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	2220      	movs	r2, #32
 8006a5c:	679a      	str	r2, [r3, #120]	@ 0x78

        __HAL_UNLOCK(huart);
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	2200      	movs	r2, #0
 8006a62:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70

        return HAL_TIMEOUT;
 8006a66:	2303      	movs	r3, #3
 8006a68:	e042      	b.n	8006af0 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	f003 0304 	and.w	r3, r3, #4
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d02b      	beq.n	8006ad0 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	69db      	ldr	r3, [r3, #28]
 8006a7e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006a82:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006a86:	d123      	bne.n	8006ad0 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006a90:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	681a      	ldr	r2, [r3, #0]
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	f422 72d0 	bic.w	r2, r2, #416	@ 0x1a0
 8006aa0:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	689a      	ldr	r2, [r3, #8]
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	f022 0201 	bic.w	r2, r2, #1
 8006ab0:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	2220      	movs	r2, #32
 8006ab6:	675a      	str	r2, [r3, #116]	@ 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	2220      	movs	r2, #32
 8006abc:	679a      	str	r2, [r3, #120]	@ 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	2220      	movs	r2, #32
 8006ac2:	67da      	str	r2, [r3, #124]	@ 0x7c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	2200      	movs	r2, #0
 8006ac8:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70

          return HAL_TIMEOUT;
 8006acc:	2303      	movs	r3, #3
 8006ace:	e00f      	b.n	8006af0 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	69da      	ldr	r2, [r3, #28]
 8006ad6:	68bb      	ldr	r3, [r7, #8]
 8006ad8:	4013      	ands	r3, r2
 8006ada:	68ba      	ldr	r2, [r7, #8]
 8006adc:	429a      	cmp	r2, r3
 8006ade:	bf0c      	ite	eq
 8006ae0:	2301      	moveq	r3, #1
 8006ae2:	2300      	movne	r3, #0
 8006ae4:	b2db      	uxtb	r3, r3
 8006ae6:	461a      	mov	r2, r3
 8006ae8:	79fb      	ldrb	r3, [r7, #7]
 8006aea:	429a      	cmp	r2, r3
 8006aec:	d092      	beq.n	8006a14 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006aee:	2300      	movs	r3, #0
}
 8006af0:	4618      	mov	r0, r3
 8006af2:	3710      	adds	r7, #16
 8006af4:	46bd      	mov	sp, r7
 8006af6:	bd80      	pop	{r7, pc}

08006af8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006af8:	b084      	sub	sp, #16
 8006afa:	b580      	push	{r7, lr}
 8006afc:	b084      	sub	sp, #16
 8006afe:	af00      	add	r7, sp, #0
 8006b00:	6078      	str	r0, [r7, #4]
 8006b02:	f107 001c 	add.w	r0, r7, #28
 8006b06:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006b0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b0c:	2b01      	cmp	r3, #1
 8006b0e:	d122      	bne.n	8006b56 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b14:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	68db      	ldr	r3, [r3, #12]
 8006b20:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8006b24:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006b28:	687a      	ldr	r2, [r7, #4]
 8006b2a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	68db      	ldr	r3, [r3, #12]
 8006b30:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006b38:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006b3a:	2b01      	cmp	r3, #1
 8006b3c:	d105      	bne.n	8006b4a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	68db      	ldr	r3, [r3, #12]
 8006b42:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8006b4a:	6878      	ldr	r0, [r7, #4]
 8006b4c:	f001 f9da 	bl	8007f04 <USB_CoreReset>
 8006b50:	4603      	mov	r3, r0
 8006b52:	73fb      	strb	r3, [r7, #15]
 8006b54:	e01a      	b.n	8006b8c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	68db      	ldr	r3, [r3, #12]
 8006b5a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8006b62:	6878      	ldr	r0, [r7, #4]
 8006b64:	f001 f9ce 	bl	8007f04 <USB_CoreReset>
 8006b68:	4603      	mov	r3, r0
 8006b6a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006b6c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d106      	bne.n	8006b80 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b76:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	639a      	str	r2, [r3, #56]	@ 0x38
 8006b7e:	e005      	b.n	8006b8c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b84:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  return ret;
 8006b8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b8e:	4618      	mov	r0, r3
 8006b90:	3710      	adds	r7, #16
 8006b92:	46bd      	mov	sp, r7
 8006b94:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006b98:	b004      	add	sp, #16
 8006b9a:	4770      	bx	lr

08006b9c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8006b9c:	b480      	push	{r7}
 8006b9e:	b087      	sub	sp, #28
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	60f8      	str	r0, [r7, #12]
 8006ba4:	60b9      	str	r1, [r7, #8]
 8006ba6:	4613      	mov	r3, r2
 8006ba8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8006baa:	79fb      	ldrb	r3, [r7, #7]
 8006bac:	2b02      	cmp	r3, #2
 8006bae:	d165      	bne.n	8006c7c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8006bb0:	68bb      	ldr	r3, [r7, #8]
 8006bb2:	4a3e      	ldr	r2, [pc, #248]	@ (8006cac <USB_SetTurnaroundTime+0x110>)
 8006bb4:	4293      	cmp	r3, r2
 8006bb6:	d906      	bls.n	8006bc6 <USB_SetTurnaroundTime+0x2a>
 8006bb8:	68bb      	ldr	r3, [r7, #8]
 8006bba:	4a3d      	ldr	r2, [pc, #244]	@ (8006cb0 <USB_SetTurnaroundTime+0x114>)
 8006bbc:	4293      	cmp	r3, r2
 8006bbe:	d202      	bcs.n	8006bc6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8006bc0:	230f      	movs	r3, #15
 8006bc2:	617b      	str	r3, [r7, #20]
 8006bc4:	e05c      	b.n	8006c80 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8006bc6:	68bb      	ldr	r3, [r7, #8]
 8006bc8:	4a39      	ldr	r2, [pc, #228]	@ (8006cb0 <USB_SetTurnaroundTime+0x114>)
 8006bca:	4293      	cmp	r3, r2
 8006bcc:	d306      	bcc.n	8006bdc <USB_SetTurnaroundTime+0x40>
 8006bce:	68bb      	ldr	r3, [r7, #8]
 8006bd0:	4a38      	ldr	r2, [pc, #224]	@ (8006cb4 <USB_SetTurnaroundTime+0x118>)
 8006bd2:	4293      	cmp	r3, r2
 8006bd4:	d202      	bcs.n	8006bdc <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8006bd6:	230e      	movs	r3, #14
 8006bd8:	617b      	str	r3, [r7, #20]
 8006bda:	e051      	b.n	8006c80 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8006bdc:	68bb      	ldr	r3, [r7, #8]
 8006bde:	4a35      	ldr	r2, [pc, #212]	@ (8006cb4 <USB_SetTurnaroundTime+0x118>)
 8006be0:	4293      	cmp	r3, r2
 8006be2:	d306      	bcc.n	8006bf2 <USB_SetTurnaroundTime+0x56>
 8006be4:	68bb      	ldr	r3, [r7, #8]
 8006be6:	4a34      	ldr	r2, [pc, #208]	@ (8006cb8 <USB_SetTurnaroundTime+0x11c>)
 8006be8:	4293      	cmp	r3, r2
 8006bea:	d202      	bcs.n	8006bf2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8006bec:	230d      	movs	r3, #13
 8006bee:	617b      	str	r3, [r7, #20]
 8006bf0:	e046      	b.n	8006c80 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8006bf2:	68bb      	ldr	r3, [r7, #8]
 8006bf4:	4a30      	ldr	r2, [pc, #192]	@ (8006cb8 <USB_SetTurnaroundTime+0x11c>)
 8006bf6:	4293      	cmp	r3, r2
 8006bf8:	d306      	bcc.n	8006c08 <USB_SetTurnaroundTime+0x6c>
 8006bfa:	68bb      	ldr	r3, [r7, #8]
 8006bfc:	4a2f      	ldr	r2, [pc, #188]	@ (8006cbc <USB_SetTurnaroundTime+0x120>)
 8006bfe:	4293      	cmp	r3, r2
 8006c00:	d802      	bhi.n	8006c08 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8006c02:	230c      	movs	r3, #12
 8006c04:	617b      	str	r3, [r7, #20]
 8006c06:	e03b      	b.n	8006c80 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8006c08:	68bb      	ldr	r3, [r7, #8]
 8006c0a:	4a2c      	ldr	r2, [pc, #176]	@ (8006cbc <USB_SetTurnaroundTime+0x120>)
 8006c0c:	4293      	cmp	r3, r2
 8006c0e:	d906      	bls.n	8006c1e <USB_SetTurnaroundTime+0x82>
 8006c10:	68bb      	ldr	r3, [r7, #8]
 8006c12:	4a2b      	ldr	r2, [pc, #172]	@ (8006cc0 <USB_SetTurnaroundTime+0x124>)
 8006c14:	4293      	cmp	r3, r2
 8006c16:	d802      	bhi.n	8006c1e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8006c18:	230b      	movs	r3, #11
 8006c1a:	617b      	str	r3, [r7, #20]
 8006c1c:	e030      	b.n	8006c80 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8006c1e:	68bb      	ldr	r3, [r7, #8]
 8006c20:	4a27      	ldr	r2, [pc, #156]	@ (8006cc0 <USB_SetTurnaroundTime+0x124>)
 8006c22:	4293      	cmp	r3, r2
 8006c24:	d906      	bls.n	8006c34 <USB_SetTurnaroundTime+0x98>
 8006c26:	68bb      	ldr	r3, [r7, #8]
 8006c28:	4a26      	ldr	r2, [pc, #152]	@ (8006cc4 <USB_SetTurnaroundTime+0x128>)
 8006c2a:	4293      	cmp	r3, r2
 8006c2c:	d802      	bhi.n	8006c34 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8006c2e:	230a      	movs	r3, #10
 8006c30:	617b      	str	r3, [r7, #20]
 8006c32:	e025      	b.n	8006c80 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8006c34:	68bb      	ldr	r3, [r7, #8]
 8006c36:	4a23      	ldr	r2, [pc, #140]	@ (8006cc4 <USB_SetTurnaroundTime+0x128>)
 8006c38:	4293      	cmp	r3, r2
 8006c3a:	d906      	bls.n	8006c4a <USB_SetTurnaroundTime+0xae>
 8006c3c:	68bb      	ldr	r3, [r7, #8]
 8006c3e:	4a22      	ldr	r2, [pc, #136]	@ (8006cc8 <USB_SetTurnaroundTime+0x12c>)
 8006c40:	4293      	cmp	r3, r2
 8006c42:	d202      	bcs.n	8006c4a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8006c44:	2309      	movs	r3, #9
 8006c46:	617b      	str	r3, [r7, #20]
 8006c48:	e01a      	b.n	8006c80 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8006c4a:	68bb      	ldr	r3, [r7, #8]
 8006c4c:	4a1e      	ldr	r2, [pc, #120]	@ (8006cc8 <USB_SetTurnaroundTime+0x12c>)
 8006c4e:	4293      	cmp	r3, r2
 8006c50:	d306      	bcc.n	8006c60 <USB_SetTurnaroundTime+0xc4>
 8006c52:	68bb      	ldr	r3, [r7, #8]
 8006c54:	4a1d      	ldr	r2, [pc, #116]	@ (8006ccc <USB_SetTurnaroundTime+0x130>)
 8006c56:	4293      	cmp	r3, r2
 8006c58:	d802      	bhi.n	8006c60 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8006c5a:	2308      	movs	r3, #8
 8006c5c:	617b      	str	r3, [r7, #20]
 8006c5e:	e00f      	b.n	8006c80 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8006c60:	68bb      	ldr	r3, [r7, #8]
 8006c62:	4a1a      	ldr	r2, [pc, #104]	@ (8006ccc <USB_SetTurnaroundTime+0x130>)
 8006c64:	4293      	cmp	r3, r2
 8006c66:	d906      	bls.n	8006c76 <USB_SetTurnaroundTime+0xda>
 8006c68:	68bb      	ldr	r3, [r7, #8]
 8006c6a:	4a19      	ldr	r2, [pc, #100]	@ (8006cd0 <USB_SetTurnaroundTime+0x134>)
 8006c6c:	4293      	cmp	r3, r2
 8006c6e:	d202      	bcs.n	8006c76 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8006c70:	2307      	movs	r3, #7
 8006c72:	617b      	str	r3, [r7, #20]
 8006c74:	e004      	b.n	8006c80 <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8006c76:	2306      	movs	r3, #6
 8006c78:	617b      	str	r3, [r7, #20]
 8006c7a:	e001      	b.n	8006c80 <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8006c7c:	2309      	movs	r3, #9
 8006c7e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	68db      	ldr	r3, [r3, #12]
 8006c84:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	68da      	ldr	r2, [r3, #12]
 8006c90:	697b      	ldr	r3, [r7, #20]
 8006c92:	029b      	lsls	r3, r3, #10
 8006c94:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8006c98:	431a      	orrs	r2, r3
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006c9e:	2300      	movs	r3, #0
}
 8006ca0:	4618      	mov	r0, r3
 8006ca2:	371c      	adds	r7, #28
 8006ca4:	46bd      	mov	sp, r7
 8006ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006caa:	4770      	bx	lr
 8006cac:	00d8acbf 	.word	0x00d8acbf
 8006cb0:	00e4e1c0 	.word	0x00e4e1c0
 8006cb4:	00f42400 	.word	0x00f42400
 8006cb8:	01067380 	.word	0x01067380
 8006cbc:	011a499f 	.word	0x011a499f
 8006cc0:	01312cff 	.word	0x01312cff
 8006cc4:	014ca43f 	.word	0x014ca43f
 8006cc8:	016e3600 	.word	0x016e3600
 8006ccc:	01a6ab1f 	.word	0x01a6ab1f
 8006cd0:	01e84800 	.word	0x01e84800

08006cd4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006cd4:	b480      	push	{r7}
 8006cd6:	b083      	sub	sp, #12
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	689b      	ldr	r3, [r3, #8]
 8006ce0:	f043 0201 	orr.w	r2, r3, #1
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006ce8:	2300      	movs	r3, #0
}
 8006cea:	4618      	mov	r0, r3
 8006cec:	370c      	adds	r7, #12
 8006cee:	46bd      	mov	sp, r7
 8006cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf4:	4770      	bx	lr

08006cf6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006cf6:	b480      	push	{r7}
 8006cf8:	b083      	sub	sp, #12
 8006cfa:	af00      	add	r7, sp, #0
 8006cfc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	689b      	ldr	r3, [r3, #8]
 8006d02:	f023 0201 	bic.w	r2, r3, #1
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006d0a:	2300      	movs	r3, #0
}
 8006d0c:	4618      	mov	r0, r3
 8006d0e:	370c      	adds	r7, #12
 8006d10:	46bd      	mov	sp, r7
 8006d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d16:	4770      	bx	lr

08006d18 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8006d18:	b580      	push	{r7, lr}
 8006d1a:	b082      	sub	sp, #8
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	6078      	str	r0, [r7, #4]
 8006d20:	460b      	mov	r3, r1
 8006d22:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	68db      	ldr	r3, [r3, #12]
 8006d28:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006d30:	78fb      	ldrb	r3, [r7, #3]
 8006d32:	2b01      	cmp	r3, #1
 8006d34:	d106      	bne.n	8006d44 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	68db      	ldr	r3, [r3, #12]
 8006d3a:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	60da      	str	r2, [r3, #12]
 8006d42:	e00b      	b.n	8006d5c <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8006d44:	78fb      	ldrb	r3, [r7, #3]
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d106      	bne.n	8006d58 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	68db      	ldr	r3, [r3, #12]
 8006d4e:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	60da      	str	r2, [r3, #12]
 8006d56:	e001      	b.n	8006d5c <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8006d58:	2301      	movs	r3, #1
 8006d5a:	e003      	b.n	8006d64 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8006d5c:	2032      	movs	r0, #50	@ 0x32
 8006d5e:	f7fc f8b5 	bl	8002ecc <HAL_Delay>

  return HAL_OK;
 8006d62:	2300      	movs	r3, #0
}
 8006d64:	4618      	mov	r0, r3
 8006d66:	3708      	adds	r7, #8
 8006d68:	46bd      	mov	sp, r7
 8006d6a:	bd80      	pop	{r7, pc}

08006d6c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006d6c:	b084      	sub	sp, #16
 8006d6e:	b580      	push	{r7, lr}
 8006d70:	b086      	sub	sp, #24
 8006d72:	af00      	add	r7, sp, #0
 8006d74:	6078      	str	r0, [r7, #4]
 8006d76:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8006d7a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006d7e:	2300      	movs	r3, #0
 8006d80:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006d86:	2300      	movs	r3, #0
 8006d88:	613b      	str	r3, [r7, #16]
 8006d8a:	e009      	b.n	8006da0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006d8c:	687a      	ldr	r2, [r7, #4]
 8006d8e:	693b      	ldr	r3, [r7, #16]
 8006d90:	3340      	adds	r3, #64	@ 0x40
 8006d92:	009b      	lsls	r3, r3, #2
 8006d94:	4413      	add	r3, r2
 8006d96:	2200      	movs	r2, #0
 8006d98:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006d9a:	693b      	ldr	r3, [r7, #16]
 8006d9c:	3301      	adds	r3, #1
 8006d9e:	613b      	str	r3, [r7, #16]
 8006da0:	693b      	ldr	r3, [r7, #16]
 8006da2:	2b0e      	cmp	r3, #14
 8006da4:	d9f2      	bls.n	8006d8c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006da6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d11c      	bne.n	8006de6 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006db2:	685b      	ldr	r3, [r3, #4]
 8006db4:	68fa      	ldr	r2, [r7, #12]
 8006db6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006dba:	f043 0302 	orr.w	r3, r3, #2
 8006dbe:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006dc4:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	601a      	str	r2, [r3, #0]
 8006de4:	e005      	b.n	8006df2 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006dea:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006df8:	461a      	mov	r2, r3
 8006dfa:	2300      	movs	r3, #0
 8006dfc:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006e04:	4619      	mov	r1, r3
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006e0c:	461a      	mov	r2, r3
 8006e0e:	680b      	ldr	r3, [r1, #0]
 8006e10:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006e12:	2103      	movs	r1, #3
 8006e14:	6878      	ldr	r0, [r7, #4]
 8006e16:	f000 f93d 	bl	8007094 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006e1a:	2110      	movs	r1, #16
 8006e1c:	6878      	ldr	r0, [r7, #4]
 8006e1e:	f000 f8f1 	bl	8007004 <USB_FlushTxFifo>
 8006e22:	4603      	mov	r3, r0
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d001      	beq.n	8006e2c <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 8006e28:	2301      	movs	r3, #1
 8006e2a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006e2c:	6878      	ldr	r0, [r7, #4]
 8006e2e:	f000 f90f 	bl	8007050 <USB_FlushRxFifo>
 8006e32:	4603      	mov	r3, r0
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d001      	beq.n	8006e3c <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 8006e38:	2301      	movs	r3, #1
 8006e3a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006e42:	461a      	mov	r2, r3
 8006e44:	2300      	movs	r3, #0
 8006e46:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006e4e:	461a      	mov	r2, r3
 8006e50:	2300      	movs	r3, #0
 8006e52:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006e5a:	461a      	mov	r2, r3
 8006e5c:	2300      	movs	r3, #0
 8006e5e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006e60:	2300      	movs	r3, #0
 8006e62:	613b      	str	r3, [r7, #16]
 8006e64:	e043      	b.n	8006eee <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006e66:	693b      	ldr	r3, [r7, #16]
 8006e68:	015a      	lsls	r2, r3, #5
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	4413      	add	r3, r2
 8006e6e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006e78:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006e7c:	d118      	bne.n	8006eb0 <USB_DevInit+0x144>
    {
      if (i == 0U)
 8006e7e:	693b      	ldr	r3, [r7, #16]
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d10a      	bne.n	8006e9a <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006e84:	693b      	ldr	r3, [r7, #16]
 8006e86:	015a      	lsls	r2, r3, #5
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	4413      	add	r3, r2
 8006e8c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006e90:	461a      	mov	r2, r3
 8006e92:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006e96:	6013      	str	r3, [r2, #0]
 8006e98:	e013      	b.n	8006ec2 <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006e9a:	693b      	ldr	r3, [r7, #16]
 8006e9c:	015a      	lsls	r2, r3, #5
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	4413      	add	r3, r2
 8006ea2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006ea6:	461a      	mov	r2, r3
 8006ea8:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006eac:	6013      	str	r3, [r2, #0]
 8006eae:	e008      	b.n	8006ec2 <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006eb0:	693b      	ldr	r3, [r7, #16]
 8006eb2:	015a      	lsls	r2, r3, #5
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	4413      	add	r3, r2
 8006eb8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006ebc:	461a      	mov	r2, r3
 8006ebe:	2300      	movs	r3, #0
 8006ec0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006ec2:	693b      	ldr	r3, [r7, #16]
 8006ec4:	015a      	lsls	r2, r3, #5
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	4413      	add	r3, r2
 8006eca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006ece:	461a      	mov	r2, r3
 8006ed0:	2300      	movs	r3, #0
 8006ed2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006ed4:	693b      	ldr	r3, [r7, #16]
 8006ed6:	015a      	lsls	r2, r3, #5
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	4413      	add	r3, r2
 8006edc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006ee0:	461a      	mov	r2, r3
 8006ee2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006ee6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006ee8:	693b      	ldr	r3, [r7, #16]
 8006eea:	3301      	adds	r3, #1
 8006eec:	613b      	str	r3, [r7, #16]
 8006eee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ef0:	693a      	ldr	r2, [r7, #16]
 8006ef2:	429a      	cmp	r2, r3
 8006ef4:	d3b7      	bcc.n	8006e66 <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006ef6:	2300      	movs	r3, #0
 8006ef8:	613b      	str	r3, [r7, #16]
 8006efa:	e043      	b.n	8006f84 <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006efc:	693b      	ldr	r3, [r7, #16]
 8006efe:	015a      	lsls	r2, r3, #5
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	4413      	add	r3, r2
 8006f04:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006f0e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006f12:	d118      	bne.n	8006f46 <USB_DevInit+0x1da>
    {
      if (i == 0U)
 8006f14:	693b      	ldr	r3, [r7, #16]
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d10a      	bne.n	8006f30 <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006f1a:	693b      	ldr	r3, [r7, #16]
 8006f1c:	015a      	lsls	r2, r3, #5
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	4413      	add	r3, r2
 8006f22:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f26:	461a      	mov	r2, r3
 8006f28:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006f2c:	6013      	str	r3, [r2, #0]
 8006f2e:	e013      	b.n	8006f58 <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006f30:	693b      	ldr	r3, [r7, #16]
 8006f32:	015a      	lsls	r2, r3, #5
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	4413      	add	r3, r2
 8006f38:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f3c:	461a      	mov	r2, r3
 8006f3e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006f42:	6013      	str	r3, [r2, #0]
 8006f44:	e008      	b.n	8006f58 <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006f46:	693b      	ldr	r3, [r7, #16]
 8006f48:	015a      	lsls	r2, r3, #5
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	4413      	add	r3, r2
 8006f4e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f52:	461a      	mov	r2, r3
 8006f54:	2300      	movs	r3, #0
 8006f56:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006f58:	693b      	ldr	r3, [r7, #16]
 8006f5a:	015a      	lsls	r2, r3, #5
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	4413      	add	r3, r2
 8006f60:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f64:	461a      	mov	r2, r3
 8006f66:	2300      	movs	r3, #0
 8006f68:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006f6a:	693b      	ldr	r3, [r7, #16]
 8006f6c:	015a      	lsls	r2, r3, #5
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	4413      	add	r3, r2
 8006f72:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f76:	461a      	mov	r2, r3
 8006f78:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006f7c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006f7e:	693b      	ldr	r3, [r7, #16]
 8006f80:	3301      	adds	r3, #1
 8006f82:	613b      	str	r3, [r7, #16]
 8006f84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f86:	693a      	ldr	r2, [r7, #16]
 8006f88:	429a      	cmp	r2, r3
 8006f8a:	d3b7      	bcc.n	8006efc <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006f92:	691b      	ldr	r3, [r3, #16]
 8006f94:	68fa      	ldr	r2, [r7, #12]
 8006f96:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006f9a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006f9e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	2200      	movs	r2, #0
 8006fa4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8006fac:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	699b      	ldr	r3, [r3, #24]
 8006fb2:	f043 0210 	orr.w	r2, r3, #16
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	699a      	ldr	r2, [r3, #24]
 8006fbe:	4b10      	ldr	r3, [pc, #64]	@ (8007000 <USB_DevInit+0x294>)
 8006fc0:	4313      	orrs	r3, r2
 8006fc2:	687a      	ldr	r2, [r7, #4]
 8006fc4:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006fc6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d005      	beq.n	8006fd8 <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	699b      	ldr	r3, [r3, #24]
 8006fd0:	f043 0208 	orr.w	r2, r3, #8
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006fd8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006fda:	2b01      	cmp	r3, #1
 8006fdc:	d107      	bne.n	8006fee <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	699b      	ldr	r3, [r3, #24]
 8006fe2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006fe6:	f043 0304 	orr.w	r3, r3, #4
 8006fea:	687a      	ldr	r2, [r7, #4]
 8006fec:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006fee:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ff0:	4618      	mov	r0, r3
 8006ff2:	3718      	adds	r7, #24
 8006ff4:	46bd      	mov	sp, r7
 8006ff6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006ffa:	b004      	add	sp, #16
 8006ffc:	4770      	bx	lr
 8006ffe:	bf00      	nop
 8007000:	803c3800 	.word	0x803c3800

08007004 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007004:	b480      	push	{r7}
 8007006:	b085      	sub	sp, #20
 8007008:	af00      	add	r7, sp, #0
 800700a:	6078      	str	r0, [r7, #4]
 800700c:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800700e:	2300      	movs	r3, #0
 8007010:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007012:	683b      	ldr	r3, [r7, #0]
 8007014:	019b      	lsls	r3, r3, #6
 8007016:	f043 0220 	orr.w	r2, r3, #32
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	3301      	adds	r3, #1
 8007022:	60fb      	str	r3, [r7, #12]
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	4a09      	ldr	r2, [pc, #36]	@ (800704c <USB_FlushTxFifo+0x48>)
 8007028:	4293      	cmp	r3, r2
 800702a:	d901      	bls.n	8007030 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800702c:	2303      	movs	r3, #3
 800702e:	e006      	b.n	800703e <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	691b      	ldr	r3, [r3, #16]
 8007034:	f003 0320 	and.w	r3, r3, #32
 8007038:	2b20      	cmp	r3, #32
 800703a:	d0f0      	beq.n	800701e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800703c:	2300      	movs	r3, #0
}
 800703e:	4618      	mov	r0, r3
 8007040:	3714      	adds	r7, #20
 8007042:	46bd      	mov	sp, r7
 8007044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007048:	4770      	bx	lr
 800704a:	bf00      	nop
 800704c:	00030d40 	.word	0x00030d40

08007050 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007050:	b480      	push	{r7}
 8007052:	b085      	sub	sp, #20
 8007054:	af00      	add	r7, sp, #0
 8007056:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8007058:	2300      	movs	r3, #0
 800705a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	2210      	movs	r2, #16
 8007060:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	3301      	adds	r3, #1
 8007066:	60fb      	str	r3, [r7, #12]
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	4a09      	ldr	r2, [pc, #36]	@ (8007090 <USB_FlushRxFifo+0x40>)
 800706c:	4293      	cmp	r3, r2
 800706e:	d901      	bls.n	8007074 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8007070:	2303      	movs	r3, #3
 8007072:	e006      	b.n	8007082 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	691b      	ldr	r3, [r3, #16]
 8007078:	f003 0310 	and.w	r3, r3, #16
 800707c:	2b10      	cmp	r3, #16
 800707e:	d0f0      	beq.n	8007062 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8007080:	2300      	movs	r3, #0
}
 8007082:	4618      	mov	r0, r3
 8007084:	3714      	adds	r7, #20
 8007086:	46bd      	mov	sp, r7
 8007088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800708c:	4770      	bx	lr
 800708e:	bf00      	nop
 8007090:	00030d40 	.word	0x00030d40

08007094 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007094:	b480      	push	{r7}
 8007096:	b085      	sub	sp, #20
 8007098:	af00      	add	r7, sp, #0
 800709a:	6078      	str	r0, [r7, #4]
 800709c:	460b      	mov	r3, r1
 800709e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80070aa:	681a      	ldr	r2, [r3, #0]
 80070ac:	78fb      	ldrb	r3, [r7, #3]
 80070ae:	68f9      	ldr	r1, [r7, #12]
 80070b0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80070b4:	4313      	orrs	r3, r2
 80070b6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80070b8:	2300      	movs	r3, #0
}
 80070ba:	4618      	mov	r0, r3
 80070bc:	3714      	adds	r7, #20
 80070be:	46bd      	mov	sp, r7
 80070c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c4:	4770      	bx	lr

080070c6 <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80070c6:	b480      	push	{r7}
 80070c8:	b087      	sub	sp, #28
 80070ca:	af00      	add	r7, sp, #0
 80070cc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80070d2:	693b      	ldr	r3, [r7, #16]
 80070d4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80070d8:	689b      	ldr	r3, [r3, #8]
 80070da:	f003 0306 	and.w	r3, r3, #6
 80070de:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	2b02      	cmp	r3, #2
 80070e4:	d002      	beq.n	80070ec <USB_GetDevSpeed+0x26>
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	2b06      	cmp	r3, #6
 80070ea:	d102      	bne.n	80070f2 <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80070ec:	2302      	movs	r3, #2
 80070ee:	75fb      	strb	r3, [r7, #23]
 80070f0:	e001      	b.n	80070f6 <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 80070f2:	230f      	movs	r3, #15
 80070f4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80070f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80070f8:	4618      	mov	r0, r3
 80070fa:	371c      	adds	r7, #28
 80070fc:	46bd      	mov	sp, r7
 80070fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007102:	4770      	bx	lr

08007104 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007104:	b480      	push	{r7}
 8007106:	b085      	sub	sp, #20
 8007108:	af00      	add	r7, sp, #0
 800710a:	6078      	str	r0, [r7, #4]
 800710c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007112:	683b      	ldr	r3, [r7, #0]
 8007114:	781b      	ldrb	r3, [r3, #0]
 8007116:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007118:	683b      	ldr	r3, [r7, #0]
 800711a:	785b      	ldrb	r3, [r3, #1]
 800711c:	2b01      	cmp	r3, #1
 800711e:	d13a      	bne.n	8007196 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007126:	69da      	ldr	r2, [r3, #28]
 8007128:	683b      	ldr	r3, [r7, #0]
 800712a:	781b      	ldrb	r3, [r3, #0]
 800712c:	f003 030f 	and.w	r3, r3, #15
 8007130:	2101      	movs	r1, #1
 8007132:	fa01 f303 	lsl.w	r3, r1, r3
 8007136:	b29b      	uxth	r3, r3
 8007138:	68f9      	ldr	r1, [r7, #12]
 800713a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800713e:	4313      	orrs	r3, r2
 8007140:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8007142:	68bb      	ldr	r3, [r7, #8]
 8007144:	015a      	lsls	r2, r3, #5
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	4413      	add	r3, r2
 800714a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007154:	2b00      	cmp	r3, #0
 8007156:	d155      	bne.n	8007204 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007158:	68bb      	ldr	r3, [r7, #8]
 800715a:	015a      	lsls	r2, r3, #5
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	4413      	add	r3, r2
 8007160:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007164:	681a      	ldr	r2, [r3, #0]
 8007166:	683b      	ldr	r3, [r7, #0]
 8007168:	689b      	ldr	r3, [r3, #8]
 800716a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800716e:	683b      	ldr	r3, [r7, #0]
 8007170:	78db      	ldrb	r3, [r3, #3]
 8007172:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007174:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007176:	68bb      	ldr	r3, [r7, #8]
 8007178:	059b      	lsls	r3, r3, #22
 800717a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800717c:	4313      	orrs	r3, r2
 800717e:	68ba      	ldr	r2, [r7, #8]
 8007180:	0151      	lsls	r1, r2, #5
 8007182:	68fa      	ldr	r2, [r7, #12]
 8007184:	440a      	add	r2, r1
 8007186:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800718a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800718e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007192:	6013      	str	r3, [r2, #0]
 8007194:	e036      	b.n	8007204 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800719c:	69da      	ldr	r2, [r3, #28]
 800719e:	683b      	ldr	r3, [r7, #0]
 80071a0:	781b      	ldrb	r3, [r3, #0]
 80071a2:	f003 030f 	and.w	r3, r3, #15
 80071a6:	2101      	movs	r1, #1
 80071a8:	fa01 f303 	lsl.w	r3, r1, r3
 80071ac:	041b      	lsls	r3, r3, #16
 80071ae:	68f9      	ldr	r1, [r7, #12]
 80071b0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80071b4:	4313      	orrs	r3, r2
 80071b6:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80071b8:	68bb      	ldr	r3, [r7, #8]
 80071ba:	015a      	lsls	r2, r3, #5
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	4413      	add	r3, r2
 80071c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d11a      	bne.n	8007204 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80071ce:	68bb      	ldr	r3, [r7, #8]
 80071d0:	015a      	lsls	r2, r3, #5
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	4413      	add	r3, r2
 80071d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80071da:	681a      	ldr	r2, [r3, #0]
 80071dc:	683b      	ldr	r3, [r7, #0]
 80071de:	689b      	ldr	r3, [r3, #8]
 80071e0:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80071e4:	683b      	ldr	r3, [r7, #0]
 80071e6:	78db      	ldrb	r3, [r3, #3]
 80071e8:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80071ea:	430b      	orrs	r3, r1
 80071ec:	4313      	orrs	r3, r2
 80071ee:	68ba      	ldr	r2, [r7, #8]
 80071f0:	0151      	lsls	r1, r2, #5
 80071f2:	68fa      	ldr	r2, [r7, #12]
 80071f4:	440a      	add	r2, r1
 80071f6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80071fa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80071fe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007202:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8007204:	2300      	movs	r3, #0
}
 8007206:	4618      	mov	r0, r3
 8007208:	3714      	adds	r7, #20
 800720a:	46bd      	mov	sp, r7
 800720c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007210:	4770      	bx	lr
	...

08007214 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007214:	b480      	push	{r7}
 8007216:	b085      	sub	sp, #20
 8007218:	af00      	add	r7, sp, #0
 800721a:	6078      	str	r0, [r7, #4]
 800721c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007222:	683b      	ldr	r3, [r7, #0]
 8007224:	781b      	ldrb	r3, [r3, #0]
 8007226:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8007228:	683b      	ldr	r3, [r7, #0]
 800722a:	785b      	ldrb	r3, [r3, #1]
 800722c:	2b01      	cmp	r3, #1
 800722e:	d161      	bne.n	80072f4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007230:	68bb      	ldr	r3, [r7, #8]
 8007232:	015a      	lsls	r2, r3, #5
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	4413      	add	r3, r2
 8007238:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007242:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007246:	d11f      	bne.n	8007288 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8007248:	68bb      	ldr	r3, [r7, #8]
 800724a:	015a      	lsls	r2, r3, #5
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	4413      	add	r3, r2
 8007250:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	68ba      	ldr	r2, [r7, #8]
 8007258:	0151      	lsls	r1, r2, #5
 800725a:	68fa      	ldr	r2, [r7, #12]
 800725c:	440a      	add	r2, r1
 800725e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007262:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007266:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8007268:	68bb      	ldr	r3, [r7, #8]
 800726a:	015a      	lsls	r2, r3, #5
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	4413      	add	r3, r2
 8007270:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	68ba      	ldr	r2, [r7, #8]
 8007278:	0151      	lsls	r1, r2, #5
 800727a:	68fa      	ldr	r2, [r7, #12]
 800727c:	440a      	add	r2, r1
 800727e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007282:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007286:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800728e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007290:	683b      	ldr	r3, [r7, #0]
 8007292:	781b      	ldrb	r3, [r3, #0]
 8007294:	f003 030f 	and.w	r3, r3, #15
 8007298:	2101      	movs	r1, #1
 800729a:	fa01 f303 	lsl.w	r3, r1, r3
 800729e:	b29b      	uxth	r3, r3
 80072a0:	43db      	mvns	r3, r3
 80072a2:	68f9      	ldr	r1, [r7, #12]
 80072a4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80072a8:	4013      	ands	r3, r2
 80072aa:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80072b2:	69da      	ldr	r2, [r3, #28]
 80072b4:	683b      	ldr	r3, [r7, #0]
 80072b6:	781b      	ldrb	r3, [r3, #0]
 80072b8:	f003 030f 	and.w	r3, r3, #15
 80072bc:	2101      	movs	r1, #1
 80072be:	fa01 f303 	lsl.w	r3, r1, r3
 80072c2:	b29b      	uxth	r3, r3
 80072c4:	43db      	mvns	r3, r3
 80072c6:	68f9      	ldr	r1, [r7, #12]
 80072c8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80072cc:	4013      	ands	r3, r2
 80072ce:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80072d0:	68bb      	ldr	r3, [r7, #8]
 80072d2:	015a      	lsls	r2, r3, #5
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	4413      	add	r3, r2
 80072d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80072dc:	681a      	ldr	r2, [r3, #0]
 80072de:	68bb      	ldr	r3, [r7, #8]
 80072e0:	0159      	lsls	r1, r3, #5
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	440b      	add	r3, r1
 80072e6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80072ea:	4619      	mov	r1, r3
 80072ec:	4b35      	ldr	r3, [pc, #212]	@ (80073c4 <USB_DeactivateEndpoint+0x1b0>)
 80072ee:	4013      	ands	r3, r2
 80072f0:	600b      	str	r3, [r1, #0]
 80072f2:	e060      	b.n	80073b6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80072f4:	68bb      	ldr	r3, [r7, #8]
 80072f6:	015a      	lsls	r2, r3, #5
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	4413      	add	r3, r2
 80072fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007306:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800730a:	d11f      	bne.n	800734c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800730c:	68bb      	ldr	r3, [r7, #8]
 800730e:	015a      	lsls	r2, r3, #5
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	4413      	add	r3, r2
 8007314:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	68ba      	ldr	r2, [r7, #8]
 800731c:	0151      	lsls	r1, r2, #5
 800731e:	68fa      	ldr	r2, [r7, #12]
 8007320:	440a      	add	r2, r1
 8007322:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007326:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800732a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800732c:	68bb      	ldr	r3, [r7, #8]
 800732e:	015a      	lsls	r2, r3, #5
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	4413      	add	r3, r2
 8007334:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	68ba      	ldr	r2, [r7, #8]
 800733c:	0151      	lsls	r1, r2, #5
 800733e:	68fa      	ldr	r2, [r7, #12]
 8007340:	440a      	add	r2, r1
 8007342:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007346:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800734a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007352:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007354:	683b      	ldr	r3, [r7, #0]
 8007356:	781b      	ldrb	r3, [r3, #0]
 8007358:	f003 030f 	and.w	r3, r3, #15
 800735c:	2101      	movs	r1, #1
 800735e:	fa01 f303 	lsl.w	r3, r1, r3
 8007362:	041b      	lsls	r3, r3, #16
 8007364:	43db      	mvns	r3, r3
 8007366:	68f9      	ldr	r1, [r7, #12]
 8007368:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800736c:	4013      	ands	r3, r2
 800736e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007376:	69da      	ldr	r2, [r3, #28]
 8007378:	683b      	ldr	r3, [r7, #0]
 800737a:	781b      	ldrb	r3, [r3, #0]
 800737c:	f003 030f 	and.w	r3, r3, #15
 8007380:	2101      	movs	r1, #1
 8007382:	fa01 f303 	lsl.w	r3, r1, r3
 8007386:	041b      	lsls	r3, r3, #16
 8007388:	43db      	mvns	r3, r3
 800738a:	68f9      	ldr	r1, [r7, #12]
 800738c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007390:	4013      	ands	r3, r2
 8007392:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8007394:	68bb      	ldr	r3, [r7, #8]
 8007396:	015a      	lsls	r2, r3, #5
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	4413      	add	r3, r2
 800739c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80073a0:	681a      	ldr	r2, [r3, #0]
 80073a2:	68bb      	ldr	r3, [r7, #8]
 80073a4:	0159      	lsls	r1, r3, #5
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	440b      	add	r3, r1
 80073aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80073ae:	4619      	mov	r1, r3
 80073b0:	4b05      	ldr	r3, [pc, #20]	@ (80073c8 <USB_DeactivateEndpoint+0x1b4>)
 80073b2:	4013      	ands	r3, r2
 80073b4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80073b6:	2300      	movs	r3, #0
}
 80073b8:	4618      	mov	r0, r3
 80073ba:	3714      	adds	r7, #20
 80073bc:	46bd      	mov	sp, r7
 80073be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c2:	4770      	bx	lr
 80073c4:	ec337800 	.word	0xec337800
 80073c8:	eff37800 	.word	0xeff37800

080073cc <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80073cc:	b580      	push	{r7, lr}
 80073ce:	b086      	sub	sp, #24
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	6078      	str	r0, [r7, #4]
 80073d4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80073da:	683b      	ldr	r3, [r7, #0]
 80073dc:	781b      	ldrb	r3, [r3, #0]
 80073de:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80073e0:	683b      	ldr	r3, [r7, #0]
 80073e2:	785b      	ldrb	r3, [r3, #1]
 80073e4:	2b01      	cmp	r3, #1
 80073e6:	f040 810a 	bne.w	80075fe <USB_EPStartXfer+0x232>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80073ea:	683b      	ldr	r3, [r7, #0]
 80073ec:	695b      	ldr	r3, [r3, #20]
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d132      	bne.n	8007458 <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80073f2:	693b      	ldr	r3, [r7, #16]
 80073f4:	015a      	lsls	r2, r3, #5
 80073f6:	697b      	ldr	r3, [r7, #20]
 80073f8:	4413      	add	r3, r2
 80073fa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80073fe:	691b      	ldr	r3, [r3, #16]
 8007400:	693a      	ldr	r2, [r7, #16]
 8007402:	0151      	lsls	r1, r2, #5
 8007404:	697a      	ldr	r2, [r7, #20]
 8007406:	440a      	add	r2, r1
 8007408:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800740c:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8007410:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8007414:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007416:	693b      	ldr	r3, [r7, #16]
 8007418:	015a      	lsls	r2, r3, #5
 800741a:	697b      	ldr	r3, [r7, #20]
 800741c:	4413      	add	r3, r2
 800741e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007422:	691b      	ldr	r3, [r3, #16]
 8007424:	693a      	ldr	r2, [r7, #16]
 8007426:	0151      	lsls	r1, r2, #5
 8007428:	697a      	ldr	r2, [r7, #20]
 800742a:	440a      	add	r2, r1
 800742c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007430:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007434:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007436:	693b      	ldr	r3, [r7, #16]
 8007438:	015a      	lsls	r2, r3, #5
 800743a:	697b      	ldr	r3, [r7, #20]
 800743c:	4413      	add	r3, r2
 800743e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007442:	691b      	ldr	r3, [r3, #16]
 8007444:	693a      	ldr	r2, [r7, #16]
 8007446:	0151      	lsls	r1, r2, #5
 8007448:	697a      	ldr	r2, [r7, #20]
 800744a:	440a      	add	r2, r1
 800744c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007450:	0cdb      	lsrs	r3, r3, #19
 8007452:	04db      	lsls	r3, r3, #19
 8007454:	6113      	str	r3, [r2, #16]
 8007456:	e074      	b.n	8007542 <USB_EPStartXfer+0x176>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007458:	693b      	ldr	r3, [r7, #16]
 800745a:	015a      	lsls	r2, r3, #5
 800745c:	697b      	ldr	r3, [r7, #20]
 800745e:	4413      	add	r3, r2
 8007460:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007464:	691b      	ldr	r3, [r3, #16]
 8007466:	693a      	ldr	r2, [r7, #16]
 8007468:	0151      	lsls	r1, r2, #5
 800746a:	697a      	ldr	r2, [r7, #20]
 800746c:	440a      	add	r2, r1
 800746e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007472:	0cdb      	lsrs	r3, r3, #19
 8007474:	04db      	lsls	r3, r3, #19
 8007476:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007478:	693b      	ldr	r3, [r7, #16]
 800747a:	015a      	lsls	r2, r3, #5
 800747c:	697b      	ldr	r3, [r7, #20]
 800747e:	4413      	add	r3, r2
 8007480:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007484:	691b      	ldr	r3, [r3, #16]
 8007486:	693a      	ldr	r2, [r7, #16]
 8007488:	0151      	lsls	r1, r2, #5
 800748a:	697a      	ldr	r2, [r7, #20]
 800748c:	440a      	add	r2, r1
 800748e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007492:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8007496:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800749a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800749c:	693b      	ldr	r3, [r7, #16]
 800749e:	015a      	lsls	r2, r3, #5
 80074a0:	697b      	ldr	r3, [r7, #20]
 80074a2:	4413      	add	r3, r2
 80074a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80074a8:	691a      	ldr	r2, [r3, #16]
 80074aa:	683b      	ldr	r3, [r7, #0]
 80074ac:	6959      	ldr	r1, [r3, #20]
 80074ae:	683b      	ldr	r3, [r7, #0]
 80074b0:	689b      	ldr	r3, [r3, #8]
 80074b2:	440b      	add	r3, r1
 80074b4:	1e59      	subs	r1, r3, #1
 80074b6:	683b      	ldr	r3, [r7, #0]
 80074b8:	689b      	ldr	r3, [r3, #8]
 80074ba:	fbb1 f3f3 	udiv	r3, r1, r3
 80074be:	04d9      	lsls	r1, r3, #19
 80074c0:	4baf      	ldr	r3, [pc, #700]	@ (8007780 <USB_EPStartXfer+0x3b4>)
 80074c2:	400b      	ands	r3, r1
 80074c4:	6939      	ldr	r1, [r7, #16]
 80074c6:	0148      	lsls	r0, r1, #5
 80074c8:	6979      	ldr	r1, [r7, #20]
 80074ca:	4401      	add	r1, r0
 80074cc:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80074d0:	4313      	orrs	r3, r2
 80074d2:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80074d4:	693b      	ldr	r3, [r7, #16]
 80074d6:	015a      	lsls	r2, r3, #5
 80074d8:	697b      	ldr	r3, [r7, #20]
 80074da:	4413      	add	r3, r2
 80074dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80074e0:	691a      	ldr	r2, [r3, #16]
 80074e2:	683b      	ldr	r3, [r7, #0]
 80074e4:	695b      	ldr	r3, [r3, #20]
 80074e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80074ea:	6939      	ldr	r1, [r7, #16]
 80074ec:	0148      	lsls	r0, r1, #5
 80074ee:	6979      	ldr	r1, [r7, #20]
 80074f0:	4401      	add	r1, r0
 80074f2:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80074f6:	4313      	orrs	r3, r2
 80074f8:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80074fa:	683b      	ldr	r3, [r7, #0]
 80074fc:	78db      	ldrb	r3, [r3, #3]
 80074fe:	2b01      	cmp	r3, #1
 8007500:	d11f      	bne.n	8007542 <USB_EPStartXfer+0x176>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8007502:	693b      	ldr	r3, [r7, #16]
 8007504:	015a      	lsls	r2, r3, #5
 8007506:	697b      	ldr	r3, [r7, #20]
 8007508:	4413      	add	r3, r2
 800750a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800750e:	691b      	ldr	r3, [r3, #16]
 8007510:	693a      	ldr	r2, [r7, #16]
 8007512:	0151      	lsls	r1, r2, #5
 8007514:	697a      	ldr	r2, [r7, #20]
 8007516:	440a      	add	r2, r1
 8007518:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800751c:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8007520:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8007522:	693b      	ldr	r3, [r7, #16]
 8007524:	015a      	lsls	r2, r3, #5
 8007526:	697b      	ldr	r3, [r7, #20]
 8007528:	4413      	add	r3, r2
 800752a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800752e:	691b      	ldr	r3, [r3, #16]
 8007530:	693a      	ldr	r2, [r7, #16]
 8007532:	0151      	lsls	r1, r2, #5
 8007534:	697a      	ldr	r2, [r7, #20]
 8007536:	440a      	add	r2, r1
 8007538:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800753c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007540:	6113      	str	r3, [r2, #16]
      }
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007542:	693b      	ldr	r3, [r7, #16]
 8007544:	015a      	lsls	r2, r3, #5
 8007546:	697b      	ldr	r3, [r7, #20]
 8007548:	4413      	add	r3, r2
 800754a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	693a      	ldr	r2, [r7, #16]
 8007552:	0151      	lsls	r1, r2, #5
 8007554:	697a      	ldr	r2, [r7, #20]
 8007556:	440a      	add	r2, r1
 8007558:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800755c:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8007560:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 8007562:	683b      	ldr	r3, [r7, #0]
 8007564:	78db      	ldrb	r3, [r3, #3]
 8007566:	2b01      	cmp	r3, #1
 8007568:	d015      	beq.n	8007596 <USB_EPStartXfer+0x1ca>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800756a:	683b      	ldr	r3, [r7, #0]
 800756c:	695b      	ldr	r3, [r3, #20]
 800756e:	2b00      	cmp	r3, #0
 8007570:	f000 8100 	beq.w	8007774 <USB_EPStartXfer+0x3a8>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007574:	697b      	ldr	r3, [r7, #20]
 8007576:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800757a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800757c:	683b      	ldr	r3, [r7, #0]
 800757e:	781b      	ldrb	r3, [r3, #0]
 8007580:	f003 030f 	and.w	r3, r3, #15
 8007584:	2101      	movs	r1, #1
 8007586:	fa01 f303 	lsl.w	r3, r1, r3
 800758a:	6979      	ldr	r1, [r7, #20]
 800758c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007590:	4313      	orrs	r3, r2
 8007592:	634b      	str	r3, [r1, #52]	@ 0x34
 8007594:	e0ee      	b.n	8007774 <USB_EPStartXfer+0x3a8>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007596:	697b      	ldr	r3, [r7, #20]
 8007598:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800759c:	689b      	ldr	r3, [r3, #8]
 800759e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d110      	bne.n	80075c8 <USB_EPStartXfer+0x1fc>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80075a6:	693b      	ldr	r3, [r7, #16]
 80075a8:	015a      	lsls	r2, r3, #5
 80075aa:	697b      	ldr	r3, [r7, #20]
 80075ac:	4413      	add	r3, r2
 80075ae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	693a      	ldr	r2, [r7, #16]
 80075b6:	0151      	lsls	r1, r2, #5
 80075b8:	697a      	ldr	r2, [r7, #20]
 80075ba:	440a      	add	r2, r1
 80075bc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80075c0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80075c4:	6013      	str	r3, [r2, #0]
 80075c6:	e00f      	b.n	80075e8 <USB_EPStartXfer+0x21c>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80075c8:	693b      	ldr	r3, [r7, #16]
 80075ca:	015a      	lsls	r2, r3, #5
 80075cc:	697b      	ldr	r3, [r7, #20]
 80075ce:	4413      	add	r3, r2
 80075d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	693a      	ldr	r2, [r7, #16]
 80075d8:	0151      	lsls	r1, r2, #5
 80075da:	697a      	ldr	r2, [r7, #20]
 80075dc:	440a      	add	r2, r1
 80075de:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80075e2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80075e6:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 80075e8:	683b      	ldr	r3, [r7, #0]
 80075ea:	68d9      	ldr	r1, [r3, #12]
 80075ec:	683b      	ldr	r3, [r7, #0]
 80075ee:	781a      	ldrb	r2, [r3, #0]
 80075f0:	683b      	ldr	r3, [r7, #0]
 80075f2:	695b      	ldr	r3, [r3, #20]
 80075f4:	b29b      	uxth	r3, r3
 80075f6:	6878      	ldr	r0, [r7, #4]
 80075f8:	f000 f9e2 	bl	80079c0 <USB_WritePacket>
 80075fc:	e0ba      	b.n	8007774 <USB_EPStartXfer+0x3a8>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80075fe:	693b      	ldr	r3, [r7, #16]
 8007600:	015a      	lsls	r2, r3, #5
 8007602:	697b      	ldr	r3, [r7, #20]
 8007604:	4413      	add	r3, r2
 8007606:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800760a:	691b      	ldr	r3, [r3, #16]
 800760c:	693a      	ldr	r2, [r7, #16]
 800760e:	0151      	lsls	r1, r2, #5
 8007610:	697a      	ldr	r2, [r7, #20]
 8007612:	440a      	add	r2, r1
 8007614:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007618:	0cdb      	lsrs	r3, r3, #19
 800761a:	04db      	lsls	r3, r3, #19
 800761c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800761e:	693b      	ldr	r3, [r7, #16]
 8007620:	015a      	lsls	r2, r3, #5
 8007622:	697b      	ldr	r3, [r7, #20]
 8007624:	4413      	add	r3, r2
 8007626:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800762a:	691b      	ldr	r3, [r3, #16]
 800762c:	693a      	ldr	r2, [r7, #16]
 800762e:	0151      	lsls	r1, r2, #5
 8007630:	697a      	ldr	r2, [r7, #20]
 8007632:	440a      	add	r2, r1
 8007634:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007638:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800763c:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8007640:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8007642:	683b      	ldr	r3, [r7, #0]
 8007644:	695b      	ldr	r3, [r3, #20]
 8007646:	2b00      	cmp	r3, #0
 8007648:	d123      	bne.n	8007692 <USB_EPStartXfer+0x2c6>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800764a:	693b      	ldr	r3, [r7, #16]
 800764c:	015a      	lsls	r2, r3, #5
 800764e:	697b      	ldr	r3, [r7, #20]
 8007650:	4413      	add	r3, r2
 8007652:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007656:	691a      	ldr	r2, [r3, #16]
 8007658:	683b      	ldr	r3, [r7, #0]
 800765a:	689b      	ldr	r3, [r3, #8]
 800765c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007660:	6939      	ldr	r1, [r7, #16]
 8007662:	0148      	lsls	r0, r1, #5
 8007664:	6979      	ldr	r1, [r7, #20]
 8007666:	4401      	add	r1, r0
 8007668:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800766c:	4313      	orrs	r3, r2
 800766e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007670:	693b      	ldr	r3, [r7, #16]
 8007672:	015a      	lsls	r2, r3, #5
 8007674:	697b      	ldr	r3, [r7, #20]
 8007676:	4413      	add	r3, r2
 8007678:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800767c:	691b      	ldr	r3, [r3, #16]
 800767e:	693a      	ldr	r2, [r7, #16]
 8007680:	0151      	lsls	r1, r2, #5
 8007682:	697a      	ldr	r2, [r7, #20]
 8007684:	440a      	add	r2, r1
 8007686:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800768a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800768e:	6113      	str	r3, [r2, #16]
 8007690:	e033      	b.n	80076fa <USB_EPStartXfer+0x32e>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007692:	683b      	ldr	r3, [r7, #0]
 8007694:	695a      	ldr	r2, [r3, #20]
 8007696:	683b      	ldr	r3, [r7, #0]
 8007698:	689b      	ldr	r3, [r3, #8]
 800769a:	4413      	add	r3, r2
 800769c:	1e5a      	subs	r2, r3, #1
 800769e:	683b      	ldr	r3, [r7, #0]
 80076a0:	689b      	ldr	r3, [r3, #8]
 80076a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80076a6:	81fb      	strh	r3, [r7, #14]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80076a8:	693b      	ldr	r3, [r7, #16]
 80076aa:	015a      	lsls	r2, r3, #5
 80076ac:	697b      	ldr	r3, [r7, #20]
 80076ae:	4413      	add	r3, r2
 80076b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80076b4:	691a      	ldr	r2, [r3, #16]
 80076b6:	89fb      	ldrh	r3, [r7, #14]
 80076b8:	04d9      	lsls	r1, r3, #19
 80076ba:	4b31      	ldr	r3, [pc, #196]	@ (8007780 <USB_EPStartXfer+0x3b4>)
 80076bc:	400b      	ands	r3, r1
 80076be:	6939      	ldr	r1, [r7, #16]
 80076c0:	0148      	lsls	r0, r1, #5
 80076c2:	6979      	ldr	r1, [r7, #20]
 80076c4:	4401      	add	r1, r0
 80076c6:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80076ca:	4313      	orrs	r3, r2
 80076cc:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 80076ce:	693b      	ldr	r3, [r7, #16]
 80076d0:	015a      	lsls	r2, r3, #5
 80076d2:	697b      	ldr	r3, [r7, #20]
 80076d4:	4413      	add	r3, r2
 80076d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80076da:	691a      	ldr	r2, [r3, #16]
 80076dc:	683b      	ldr	r3, [r7, #0]
 80076de:	689b      	ldr	r3, [r3, #8]
 80076e0:	89f9      	ldrh	r1, [r7, #14]
 80076e2:	fb01 f303 	mul.w	r3, r1, r3
 80076e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80076ea:	6939      	ldr	r1, [r7, #16]
 80076ec:	0148      	lsls	r0, r1, #5
 80076ee:	6979      	ldr	r1, [r7, #20]
 80076f0:	4401      	add	r1, r0
 80076f2:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80076f6:	4313      	orrs	r3, r2
 80076f8:	610b      	str	r3, [r1, #16]
    }

    if (ep->type == EP_TYPE_ISOC)
 80076fa:	683b      	ldr	r3, [r7, #0]
 80076fc:	78db      	ldrb	r3, [r3, #3]
 80076fe:	2b01      	cmp	r3, #1
 8007700:	d128      	bne.n	8007754 <USB_EPStartXfer+0x388>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007702:	697b      	ldr	r3, [r7, #20]
 8007704:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007708:	689b      	ldr	r3, [r3, #8]
 800770a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800770e:	2b00      	cmp	r3, #0
 8007710:	d110      	bne.n	8007734 <USB_EPStartXfer+0x368>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8007712:	693b      	ldr	r3, [r7, #16]
 8007714:	015a      	lsls	r2, r3, #5
 8007716:	697b      	ldr	r3, [r7, #20]
 8007718:	4413      	add	r3, r2
 800771a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	693a      	ldr	r2, [r7, #16]
 8007722:	0151      	lsls	r1, r2, #5
 8007724:	697a      	ldr	r2, [r7, #20]
 8007726:	440a      	add	r2, r1
 8007728:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800772c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007730:	6013      	str	r3, [r2, #0]
 8007732:	e00f      	b.n	8007754 <USB_EPStartXfer+0x388>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8007734:	693b      	ldr	r3, [r7, #16]
 8007736:	015a      	lsls	r2, r3, #5
 8007738:	697b      	ldr	r3, [r7, #20]
 800773a:	4413      	add	r3, r2
 800773c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	693a      	ldr	r2, [r7, #16]
 8007744:	0151      	lsls	r1, r2, #5
 8007746:	697a      	ldr	r2, [r7, #20]
 8007748:	440a      	add	r2, r1
 800774a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800774e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007752:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007754:	693b      	ldr	r3, [r7, #16]
 8007756:	015a      	lsls	r2, r3, #5
 8007758:	697b      	ldr	r3, [r7, #20]
 800775a:	4413      	add	r3, r2
 800775c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	693a      	ldr	r2, [r7, #16]
 8007764:	0151      	lsls	r1, r2, #5
 8007766:	697a      	ldr	r2, [r7, #20]
 8007768:	440a      	add	r2, r1
 800776a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800776e:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8007772:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007774:	2300      	movs	r3, #0
}
 8007776:	4618      	mov	r0, r3
 8007778:	3718      	adds	r7, #24
 800777a:	46bd      	mov	sp, r7
 800777c:	bd80      	pop	{r7, pc}
 800777e:	bf00      	nop
 8007780:	1ff80000 	.word	0x1ff80000

08007784 <USB_EP0StartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007784:	b480      	push	{r7}
 8007786:	b085      	sub	sp, #20
 8007788:	af00      	add	r7, sp, #0
 800778a:	6078      	str	r0, [r7, #4]
 800778c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007792:	683b      	ldr	r3, [r7, #0]
 8007794:	781b      	ldrb	r3, [r3, #0]
 8007796:	60bb      	str	r3, [r7, #8]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007798:	683b      	ldr	r3, [r7, #0]
 800779a:	785b      	ldrb	r3, [r3, #1]
 800779c:	2b01      	cmp	r3, #1
 800779e:	f040 80ab 	bne.w	80078f8 <USB_EP0StartXfer+0x174>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80077a2:	683b      	ldr	r3, [r7, #0]
 80077a4:	695b      	ldr	r3, [r3, #20]
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d132      	bne.n	8007810 <USB_EP0StartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80077aa:	68bb      	ldr	r3, [r7, #8]
 80077ac:	015a      	lsls	r2, r3, #5
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	4413      	add	r3, r2
 80077b2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80077b6:	691b      	ldr	r3, [r3, #16]
 80077b8:	68ba      	ldr	r2, [r7, #8]
 80077ba:	0151      	lsls	r1, r2, #5
 80077bc:	68fa      	ldr	r2, [r7, #12]
 80077be:	440a      	add	r2, r1
 80077c0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80077c4:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80077c8:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80077cc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80077ce:	68bb      	ldr	r3, [r7, #8]
 80077d0:	015a      	lsls	r2, r3, #5
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	4413      	add	r3, r2
 80077d6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80077da:	691b      	ldr	r3, [r3, #16]
 80077dc:	68ba      	ldr	r2, [r7, #8]
 80077de:	0151      	lsls	r1, r2, #5
 80077e0:	68fa      	ldr	r2, [r7, #12]
 80077e2:	440a      	add	r2, r1
 80077e4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80077e8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80077ec:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80077ee:	68bb      	ldr	r3, [r7, #8]
 80077f0:	015a      	lsls	r2, r3, #5
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	4413      	add	r3, r2
 80077f6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80077fa:	691b      	ldr	r3, [r3, #16]
 80077fc:	68ba      	ldr	r2, [r7, #8]
 80077fe:	0151      	lsls	r1, r2, #5
 8007800:	68fa      	ldr	r2, [r7, #12]
 8007802:	440a      	add	r2, r1
 8007804:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007808:	0cdb      	lsrs	r3, r3, #19
 800780a:	04db      	lsls	r3, r3, #19
 800780c:	6113      	str	r3, [r2, #16]
 800780e:	e04e      	b.n	80078ae <USB_EP0StartXfer+0x12a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007810:	68bb      	ldr	r3, [r7, #8]
 8007812:	015a      	lsls	r2, r3, #5
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	4413      	add	r3, r2
 8007818:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800781c:	691b      	ldr	r3, [r3, #16]
 800781e:	68ba      	ldr	r2, [r7, #8]
 8007820:	0151      	lsls	r1, r2, #5
 8007822:	68fa      	ldr	r2, [r7, #12]
 8007824:	440a      	add	r2, r1
 8007826:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800782a:	0cdb      	lsrs	r3, r3, #19
 800782c:	04db      	lsls	r3, r3, #19
 800782e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007830:	68bb      	ldr	r3, [r7, #8]
 8007832:	015a      	lsls	r2, r3, #5
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	4413      	add	r3, r2
 8007838:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800783c:	691b      	ldr	r3, [r3, #16]
 800783e:	68ba      	ldr	r2, [r7, #8]
 8007840:	0151      	lsls	r1, r2, #5
 8007842:	68fa      	ldr	r2, [r7, #12]
 8007844:	440a      	add	r2, r1
 8007846:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800784a:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800784e:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8007852:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8007854:	683b      	ldr	r3, [r7, #0]
 8007856:	695a      	ldr	r2, [r3, #20]
 8007858:	683b      	ldr	r3, [r7, #0]
 800785a:	689b      	ldr	r3, [r3, #8]
 800785c:	429a      	cmp	r2, r3
 800785e:	d903      	bls.n	8007868 <USB_EP0StartXfer+0xe4>
      {
        ep->xfer_len = ep->maxpacket;
 8007860:	683b      	ldr	r3, [r7, #0]
 8007862:	689a      	ldr	r2, [r3, #8]
 8007864:	683b      	ldr	r3, [r7, #0]
 8007866:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007868:	68bb      	ldr	r3, [r7, #8]
 800786a:	015a      	lsls	r2, r3, #5
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	4413      	add	r3, r2
 8007870:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007874:	691b      	ldr	r3, [r3, #16]
 8007876:	68ba      	ldr	r2, [r7, #8]
 8007878:	0151      	lsls	r1, r2, #5
 800787a:	68fa      	ldr	r2, [r7, #12]
 800787c:	440a      	add	r2, r1
 800787e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007882:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007886:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007888:	68bb      	ldr	r3, [r7, #8]
 800788a:	015a      	lsls	r2, r3, #5
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	4413      	add	r3, r2
 8007890:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007894:	691a      	ldr	r2, [r3, #16]
 8007896:	683b      	ldr	r3, [r7, #0]
 8007898:	695b      	ldr	r3, [r3, #20]
 800789a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800789e:	68b9      	ldr	r1, [r7, #8]
 80078a0:	0148      	lsls	r0, r1, #5
 80078a2:	68f9      	ldr	r1, [r7, #12]
 80078a4:	4401      	add	r1, r0
 80078a6:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80078aa:	4313      	orrs	r3, r2
 80078ac:	610b      	str	r3, [r1, #16]
    }

    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80078ae:	68bb      	ldr	r3, [r7, #8]
 80078b0:	015a      	lsls	r2, r3, #5
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	4413      	add	r3, r2
 80078b6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	68ba      	ldr	r2, [r7, #8]
 80078be:	0151      	lsls	r1, r2, #5
 80078c0:	68fa      	ldr	r2, [r7, #12]
 80078c2:	440a      	add	r2, r1
 80078c4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80078c8:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80078cc:	6013      	str	r3, [r2, #0]

    /* Enable the Tx FIFO Empty Interrupt for this EP */
    if (ep->xfer_len > 0U)
 80078ce:	683b      	ldr	r3, [r7, #0]
 80078d0:	695b      	ldr	r3, [r3, #20]
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d06d      	beq.n	80079b2 <USB_EP0StartXfer+0x22e>
    {
      USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80078dc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80078de:	683b      	ldr	r3, [r7, #0]
 80078e0:	781b      	ldrb	r3, [r3, #0]
 80078e2:	f003 030f 	and.w	r3, r3, #15
 80078e6:	2101      	movs	r1, #1
 80078e8:	fa01 f303 	lsl.w	r3, r1, r3
 80078ec:	68f9      	ldr	r1, [r7, #12]
 80078ee:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80078f2:	4313      	orrs	r3, r2
 80078f4:	634b      	str	r3, [r1, #52]	@ 0x34
 80078f6:	e05c      	b.n	80079b2 <USB_EP0StartXfer+0x22e>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80078f8:	68bb      	ldr	r3, [r7, #8]
 80078fa:	015a      	lsls	r2, r3, #5
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	4413      	add	r3, r2
 8007900:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007904:	691b      	ldr	r3, [r3, #16]
 8007906:	68ba      	ldr	r2, [r7, #8]
 8007908:	0151      	lsls	r1, r2, #5
 800790a:	68fa      	ldr	r2, [r7, #12]
 800790c:	440a      	add	r2, r1
 800790e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007912:	0cdb      	lsrs	r3, r3, #19
 8007914:	04db      	lsls	r3, r3, #19
 8007916:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007918:	68bb      	ldr	r3, [r7, #8]
 800791a:	015a      	lsls	r2, r3, #5
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	4413      	add	r3, r2
 8007920:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007924:	691b      	ldr	r3, [r3, #16]
 8007926:	68ba      	ldr	r2, [r7, #8]
 8007928:	0151      	lsls	r1, r2, #5
 800792a:	68fa      	ldr	r2, [r7, #12]
 800792c:	440a      	add	r2, r1
 800792e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007932:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8007936:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800793a:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800793c:	683b      	ldr	r3, [r7, #0]
 800793e:	695b      	ldr	r3, [r3, #20]
 8007940:	2b00      	cmp	r3, #0
 8007942:	d003      	beq.n	800794c <USB_EP0StartXfer+0x1c8>
    {
      ep->xfer_len = ep->maxpacket;
 8007944:	683b      	ldr	r3, [r7, #0]
 8007946:	689a      	ldr	r2, [r3, #8]
 8007948:	683b      	ldr	r3, [r7, #0]
 800794a:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800794c:	68bb      	ldr	r3, [r7, #8]
 800794e:	015a      	lsls	r2, r3, #5
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	4413      	add	r3, r2
 8007954:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007958:	691b      	ldr	r3, [r3, #16]
 800795a:	68ba      	ldr	r2, [r7, #8]
 800795c:	0151      	lsls	r1, r2, #5
 800795e:	68fa      	ldr	r2, [r7, #12]
 8007960:	440a      	add	r2, r1
 8007962:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007966:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800796a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800796c:	68bb      	ldr	r3, [r7, #8]
 800796e:	015a      	lsls	r2, r3, #5
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	4413      	add	r3, r2
 8007974:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007978:	691a      	ldr	r2, [r3, #16]
 800797a:	683b      	ldr	r3, [r7, #0]
 800797c:	689b      	ldr	r3, [r3, #8]
 800797e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007982:	68b9      	ldr	r1, [r7, #8]
 8007984:	0148      	lsls	r0, r1, #5
 8007986:	68f9      	ldr	r1, [r7, #12]
 8007988:	4401      	add	r1, r0
 800798a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800798e:	4313      	orrs	r3, r2
 8007990:	610b      	str	r3, [r1, #16]

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007992:	68bb      	ldr	r3, [r7, #8]
 8007994:	015a      	lsls	r2, r3, #5
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	4413      	add	r3, r2
 800799a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	68ba      	ldr	r2, [r7, #8]
 80079a2:	0151      	lsls	r1, r2, #5
 80079a4:	68fa      	ldr	r2, [r7, #12]
 80079a6:	440a      	add	r2, r1
 80079a8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80079ac:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80079b0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80079b2:	2300      	movs	r3, #0
}
 80079b4:	4618      	mov	r0, r3
 80079b6:	3714      	adds	r7, #20
 80079b8:	46bd      	mov	sp, r7
 80079ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079be:	4770      	bx	lr

080079c0 <USB_WritePacket>:
  * @param  ch_ep_num  endpoint or host channel number
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len)
{
 80079c0:	b480      	push	{r7}
 80079c2:	b089      	sub	sp, #36	@ 0x24
 80079c4:	af00      	add	r7, sp, #0
 80079c6:	60f8      	str	r0, [r7, #12]
 80079c8:	60b9      	str	r1, [r7, #8]
 80079ca:	4611      	mov	r1, r2
 80079cc:	461a      	mov	r2, r3
 80079ce:	460b      	mov	r3, r1
 80079d0:	71fb      	strb	r3, [r7, #7]
 80079d2:	4613      	mov	r3, r2
 80079d4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 80079da:	68bb      	ldr	r3, [r7, #8]
 80079dc:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  count32b = ((uint32_t)len + 3U) / 4U;
 80079de:	88bb      	ldrh	r3, [r7, #4]
 80079e0:	3303      	adds	r3, #3
 80079e2:	089b      	lsrs	r3, r3, #2
 80079e4:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 80079e6:	2300      	movs	r3, #0
 80079e8:	61bb      	str	r3, [r7, #24]
 80079ea:	e00f      	b.n	8007a0c <USB_WritePacket+0x4c>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80079ec:	79fb      	ldrb	r3, [r7, #7]
 80079ee:	031a      	lsls	r2, r3, #12
 80079f0:	697b      	ldr	r3, [r7, #20]
 80079f2:	4413      	add	r3, r2
 80079f4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80079f8:	461a      	mov	r2, r3
 80079fa:	69fb      	ldr	r3, [r7, #28]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	6013      	str	r3, [r2, #0]
    pSrc++;
 8007a00:	69fb      	ldr	r3, [r7, #28]
 8007a02:	3304      	adds	r3, #4
 8007a04:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8007a06:	69bb      	ldr	r3, [r7, #24]
 8007a08:	3301      	adds	r3, #1
 8007a0a:	61bb      	str	r3, [r7, #24]
 8007a0c:	69ba      	ldr	r2, [r7, #24]
 8007a0e:	693b      	ldr	r3, [r7, #16]
 8007a10:	429a      	cmp	r2, r3
 8007a12:	d3eb      	bcc.n	80079ec <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 8007a14:	2300      	movs	r3, #0
}
 8007a16:	4618      	mov	r0, r3
 8007a18:	3724      	adds	r7, #36	@ 0x24
 8007a1a:	46bd      	mov	sp, r7
 8007a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a20:	4770      	bx	lr

08007a22 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007a22:	b480      	push	{r7}
 8007a24:	b089      	sub	sp, #36	@ 0x24
 8007a26:	af00      	add	r7, sp, #0
 8007a28:	60f8      	str	r0, [r7, #12]
 8007a2a:	60b9      	str	r1, [r7, #8]
 8007a2c:	4613      	mov	r3, r2
 8007a2e:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8007a34:	68bb      	ldr	r3, [r7, #8]
 8007a36:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8007a38:	88fb      	ldrh	r3, [r7, #6]
 8007a3a:	3303      	adds	r3, #3
 8007a3c:	089b      	lsrs	r3, r3, #2
 8007a3e:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8007a40:	2300      	movs	r3, #0
 8007a42:	61bb      	str	r3, [r7, #24]
 8007a44:	e00b      	b.n	8007a5e <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007a46:	697b      	ldr	r3, [r7, #20]
 8007a48:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007a4c:	681a      	ldr	r2, [r3, #0]
 8007a4e:	69fb      	ldr	r3, [r7, #28]
 8007a50:	601a      	str	r2, [r3, #0]
    pDest++;
 8007a52:	69fb      	ldr	r3, [r7, #28]
 8007a54:	3304      	adds	r3, #4
 8007a56:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8007a58:	69bb      	ldr	r3, [r7, #24]
 8007a5a:	3301      	adds	r3, #1
 8007a5c:	61bb      	str	r3, [r7, #24]
 8007a5e:	69ba      	ldr	r2, [r7, #24]
 8007a60:	693b      	ldr	r3, [r7, #16]
 8007a62:	429a      	cmp	r2, r3
 8007a64:	d3ef      	bcc.n	8007a46 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8007a66:	69fb      	ldr	r3, [r7, #28]
}
 8007a68:	4618      	mov	r0, r3
 8007a6a:	3724      	adds	r7, #36	@ 0x24
 8007a6c:	46bd      	mov	sp, r7
 8007a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a72:	4770      	bx	lr

08007a74 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007a74:	b480      	push	{r7}
 8007a76:	b085      	sub	sp, #20
 8007a78:	af00      	add	r7, sp, #0
 8007a7a:	6078      	str	r0, [r7, #4]
 8007a7c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007a82:	683b      	ldr	r3, [r7, #0]
 8007a84:	781b      	ldrb	r3, [r3, #0]
 8007a86:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007a88:	683b      	ldr	r3, [r7, #0]
 8007a8a:	785b      	ldrb	r3, [r3, #1]
 8007a8c:	2b01      	cmp	r3, #1
 8007a8e:	d12c      	bne.n	8007aea <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007a90:	68bb      	ldr	r3, [r7, #8]
 8007a92:	015a      	lsls	r2, r3, #5
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	4413      	add	r3, r2
 8007a98:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	db12      	blt.n	8007ac8 <USB_EPSetStall+0x54>
 8007aa2:	68bb      	ldr	r3, [r7, #8]
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d00f      	beq.n	8007ac8 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8007aa8:	68bb      	ldr	r3, [r7, #8]
 8007aaa:	015a      	lsls	r2, r3, #5
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	4413      	add	r3, r2
 8007ab0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	68ba      	ldr	r2, [r7, #8]
 8007ab8:	0151      	lsls	r1, r2, #5
 8007aba:	68fa      	ldr	r2, [r7, #12]
 8007abc:	440a      	add	r2, r1
 8007abe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007ac2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8007ac6:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8007ac8:	68bb      	ldr	r3, [r7, #8]
 8007aca:	015a      	lsls	r2, r3, #5
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	4413      	add	r3, r2
 8007ad0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	68ba      	ldr	r2, [r7, #8]
 8007ad8:	0151      	lsls	r1, r2, #5
 8007ada:	68fa      	ldr	r2, [r7, #12]
 8007adc:	440a      	add	r2, r1
 8007ade:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007ae2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007ae6:	6013      	str	r3, [r2, #0]
 8007ae8:	e02b      	b.n	8007b42 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007aea:	68bb      	ldr	r3, [r7, #8]
 8007aec:	015a      	lsls	r2, r3, #5
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	4413      	add	r3, r2
 8007af2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	db12      	blt.n	8007b22 <USB_EPSetStall+0xae>
 8007afc:	68bb      	ldr	r3, [r7, #8]
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d00f      	beq.n	8007b22 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8007b02:	68bb      	ldr	r3, [r7, #8]
 8007b04:	015a      	lsls	r2, r3, #5
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	4413      	add	r3, r2
 8007b0a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	68ba      	ldr	r2, [r7, #8]
 8007b12:	0151      	lsls	r1, r2, #5
 8007b14:	68fa      	ldr	r2, [r7, #12]
 8007b16:	440a      	add	r2, r1
 8007b18:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007b1c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8007b20:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8007b22:	68bb      	ldr	r3, [r7, #8]
 8007b24:	015a      	lsls	r2, r3, #5
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	4413      	add	r3, r2
 8007b2a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	68ba      	ldr	r2, [r7, #8]
 8007b32:	0151      	lsls	r1, r2, #5
 8007b34:	68fa      	ldr	r2, [r7, #12]
 8007b36:	440a      	add	r2, r1
 8007b38:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007b3c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007b40:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007b42:	2300      	movs	r3, #0
}
 8007b44:	4618      	mov	r0, r3
 8007b46:	3714      	adds	r7, #20
 8007b48:	46bd      	mov	sp, r7
 8007b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b4e:	4770      	bx	lr

08007b50 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007b50:	b480      	push	{r7}
 8007b52:	b085      	sub	sp, #20
 8007b54:	af00      	add	r7, sp, #0
 8007b56:	6078      	str	r0, [r7, #4]
 8007b58:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007b5e:	683b      	ldr	r3, [r7, #0]
 8007b60:	781b      	ldrb	r3, [r3, #0]
 8007b62:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007b64:	683b      	ldr	r3, [r7, #0]
 8007b66:	785b      	ldrb	r3, [r3, #1]
 8007b68:	2b01      	cmp	r3, #1
 8007b6a:	d128      	bne.n	8007bbe <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007b6c:	68bb      	ldr	r3, [r7, #8]
 8007b6e:	015a      	lsls	r2, r3, #5
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	4413      	add	r3, r2
 8007b74:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	68ba      	ldr	r2, [r7, #8]
 8007b7c:	0151      	lsls	r1, r2, #5
 8007b7e:	68fa      	ldr	r2, [r7, #12]
 8007b80:	440a      	add	r2, r1
 8007b82:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007b86:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007b8a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007b8c:	683b      	ldr	r3, [r7, #0]
 8007b8e:	78db      	ldrb	r3, [r3, #3]
 8007b90:	2b03      	cmp	r3, #3
 8007b92:	d003      	beq.n	8007b9c <USB_EPClearStall+0x4c>
 8007b94:	683b      	ldr	r3, [r7, #0]
 8007b96:	78db      	ldrb	r3, [r3, #3]
 8007b98:	2b02      	cmp	r3, #2
 8007b9a:	d138      	bne.n	8007c0e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007b9c:	68bb      	ldr	r3, [r7, #8]
 8007b9e:	015a      	lsls	r2, r3, #5
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	4413      	add	r3, r2
 8007ba4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	68ba      	ldr	r2, [r7, #8]
 8007bac:	0151      	lsls	r1, r2, #5
 8007bae:	68fa      	ldr	r2, [r7, #12]
 8007bb0:	440a      	add	r2, r1
 8007bb2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007bb6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007bba:	6013      	str	r3, [r2, #0]
 8007bbc:	e027      	b.n	8007c0e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007bbe:	68bb      	ldr	r3, [r7, #8]
 8007bc0:	015a      	lsls	r2, r3, #5
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	4413      	add	r3, r2
 8007bc6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	68ba      	ldr	r2, [r7, #8]
 8007bce:	0151      	lsls	r1, r2, #5
 8007bd0:	68fa      	ldr	r2, [r7, #12]
 8007bd2:	440a      	add	r2, r1
 8007bd4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007bd8:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007bdc:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007bde:	683b      	ldr	r3, [r7, #0]
 8007be0:	78db      	ldrb	r3, [r3, #3]
 8007be2:	2b03      	cmp	r3, #3
 8007be4:	d003      	beq.n	8007bee <USB_EPClearStall+0x9e>
 8007be6:	683b      	ldr	r3, [r7, #0]
 8007be8:	78db      	ldrb	r3, [r3, #3]
 8007bea:	2b02      	cmp	r3, #2
 8007bec:	d10f      	bne.n	8007c0e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007bee:	68bb      	ldr	r3, [r7, #8]
 8007bf0:	015a      	lsls	r2, r3, #5
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	4413      	add	r3, r2
 8007bf6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	68ba      	ldr	r2, [r7, #8]
 8007bfe:	0151      	lsls	r1, r2, #5
 8007c00:	68fa      	ldr	r2, [r7, #12]
 8007c02:	440a      	add	r2, r1
 8007c04:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007c08:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007c0c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8007c0e:	2300      	movs	r3, #0
}
 8007c10:	4618      	mov	r0, r3
 8007c12:	3714      	adds	r7, #20
 8007c14:	46bd      	mov	sp, r7
 8007c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c1a:	4770      	bx	lr

08007c1c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8007c1c:	b480      	push	{r7}
 8007c1e:	b085      	sub	sp, #20
 8007c20:	af00      	add	r7, sp, #0
 8007c22:	6078      	str	r0, [r7, #4]
 8007c24:	460b      	mov	r3, r1
 8007c26:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	68fa      	ldr	r2, [r7, #12]
 8007c36:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007c3a:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8007c3e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007c46:	681a      	ldr	r2, [r3, #0]
 8007c48:	78fb      	ldrb	r3, [r7, #3]
 8007c4a:	011b      	lsls	r3, r3, #4
 8007c4c:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8007c50:	68f9      	ldr	r1, [r7, #12]
 8007c52:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007c56:	4313      	orrs	r3, r2
 8007c58:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8007c5a:	2300      	movs	r3, #0
}
 8007c5c:	4618      	mov	r0, r3
 8007c5e:	3714      	adds	r7, #20
 8007c60:	46bd      	mov	sp, r7
 8007c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c66:	4770      	bx	lr

08007c68 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007c68:	b480      	push	{r7}
 8007c6a:	b085      	sub	sp, #20
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	68fa      	ldr	r2, [r7, #12]
 8007c7e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8007c82:	f023 0303 	bic.w	r3, r3, #3
 8007c86:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007c8e:	685b      	ldr	r3, [r3, #4]
 8007c90:	68fa      	ldr	r2, [r7, #12]
 8007c92:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007c96:	f023 0302 	bic.w	r3, r3, #2
 8007c9a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007c9c:	2300      	movs	r3, #0
}
 8007c9e:	4618      	mov	r0, r3
 8007ca0:	3714      	adds	r7, #20
 8007ca2:	46bd      	mov	sp, r7
 8007ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca8:	4770      	bx	lr

08007caa <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007caa:	b480      	push	{r7}
 8007cac:	b085      	sub	sp, #20
 8007cae:	af00      	add	r7, sp, #0
 8007cb0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	68fa      	ldr	r2, [r7, #12]
 8007cc0:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8007cc4:	f023 0303 	bic.w	r3, r3, #3
 8007cc8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007cd0:	685b      	ldr	r3, [r3, #4]
 8007cd2:	68fa      	ldr	r2, [r7, #12]
 8007cd4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007cd8:	f043 0302 	orr.w	r3, r3, #2
 8007cdc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007cde:	2300      	movs	r3, #0
}
 8007ce0:	4618      	mov	r0, r3
 8007ce2:	3714      	adds	r7, #20
 8007ce4:	46bd      	mov	sp, r7
 8007ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cea:	4770      	bx	lr

08007cec <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8007cec:	b480      	push	{r7}
 8007cee:	b085      	sub	sp, #20
 8007cf0:	af00      	add	r7, sp, #0
 8007cf2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	695b      	ldr	r3, [r3, #20]
 8007cf8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	699b      	ldr	r3, [r3, #24]
 8007cfe:	68fa      	ldr	r2, [r7, #12]
 8007d00:	4013      	ands	r3, r2
 8007d02:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007d04:	68fb      	ldr	r3, [r7, #12]
}
 8007d06:	4618      	mov	r0, r3
 8007d08:	3714      	adds	r7, #20
 8007d0a:	46bd      	mov	sp, r7
 8007d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d10:	4770      	bx	lr

08007d12 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007d12:	b480      	push	{r7}
 8007d14:	b085      	sub	sp, #20
 8007d16:	af00      	add	r7, sp, #0
 8007d18:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007d24:	699b      	ldr	r3, [r3, #24]
 8007d26:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007d2e:	69db      	ldr	r3, [r3, #28]
 8007d30:	68ba      	ldr	r2, [r7, #8]
 8007d32:	4013      	ands	r3, r2
 8007d34:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8007d36:	68bb      	ldr	r3, [r7, #8]
 8007d38:	0c1b      	lsrs	r3, r3, #16
}
 8007d3a:	4618      	mov	r0, r3
 8007d3c:	3714      	adds	r7, #20
 8007d3e:	46bd      	mov	sp, r7
 8007d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d44:	4770      	bx	lr

08007d46 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007d46:	b480      	push	{r7}
 8007d48:	b085      	sub	sp, #20
 8007d4a:	af00      	add	r7, sp, #0
 8007d4c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007d58:	699b      	ldr	r3, [r3, #24]
 8007d5a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007d62:	69db      	ldr	r3, [r3, #28]
 8007d64:	68ba      	ldr	r2, [r7, #8]
 8007d66:	4013      	ands	r3, r2
 8007d68:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8007d6a:	68bb      	ldr	r3, [r7, #8]
 8007d6c:	b29b      	uxth	r3, r3
}
 8007d6e:	4618      	mov	r0, r3
 8007d70:	3714      	adds	r7, #20
 8007d72:	46bd      	mov	sp, r7
 8007d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d78:	4770      	bx	lr

08007d7a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007d7a:	b480      	push	{r7}
 8007d7c:	b085      	sub	sp, #20
 8007d7e:	af00      	add	r7, sp, #0
 8007d80:	6078      	str	r0, [r7, #4]
 8007d82:	460b      	mov	r3, r1
 8007d84:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8007d8a:	78fb      	ldrb	r3, [r7, #3]
 8007d8c:	015a      	lsls	r2, r3, #5
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	4413      	add	r3, r2
 8007d92:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007d96:	689b      	ldr	r3, [r3, #8]
 8007d98:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007da0:	695b      	ldr	r3, [r3, #20]
 8007da2:	68ba      	ldr	r2, [r7, #8]
 8007da4:	4013      	ands	r3, r2
 8007da6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007da8:	68bb      	ldr	r3, [r7, #8]
}
 8007daa:	4618      	mov	r0, r3
 8007dac:	3714      	adds	r7, #20
 8007dae:	46bd      	mov	sp, r7
 8007db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db4:	4770      	bx	lr

08007db6 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007db6:	b480      	push	{r7}
 8007db8:	b087      	sub	sp, #28
 8007dba:	af00      	add	r7, sp, #0
 8007dbc:	6078      	str	r0, [r7, #4]
 8007dbe:	460b      	mov	r3, r1
 8007dc0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8007dc6:	697b      	ldr	r3, [r7, #20]
 8007dc8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007dcc:	691b      	ldr	r3, [r3, #16]
 8007dce:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8007dd0:	697b      	ldr	r3, [r7, #20]
 8007dd2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007dd6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007dd8:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8007dda:	78fb      	ldrb	r3, [r7, #3]
 8007ddc:	f003 030f 	and.w	r3, r3, #15
 8007de0:	68fa      	ldr	r2, [r7, #12]
 8007de2:	fa22 f303 	lsr.w	r3, r2, r3
 8007de6:	01db      	lsls	r3, r3, #7
 8007de8:	b2db      	uxtb	r3, r3
 8007dea:	693a      	ldr	r2, [r7, #16]
 8007dec:	4313      	orrs	r3, r2
 8007dee:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8007df0:	78fb      	ldrb	r3, [r7, #3]
 8007df2:	015a      	lsls	r2, r3, #5
 8007df4:	697b      	ldr	r3, [r7, #20]
 8007df6:	4413      	add	r3, r2
 8007df8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007dfc:	689b      	ldr	r3, [r3, #8]
 8007dfe:	693a      	ldr	r2, [r7, #16]
 8007e00:	4013      	ands	r3, r2
 8007e02:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007e04:	68bb      	ldr	r3, [r7, #8]
}
 8007e06:	4618      	mov	r0, r3
 8007e08:	371c      	adds	r7, #28
 8007e0a:	46bd      	mov	sp, r7
 8007e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e10:	4770      	bx	lr

08007e12 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007e12:	b480      	push	{r7}
 8007e14:	b083      	sub	sp, #12
 8007e16:	af00      	add	r7, sp, #0
 8007e18:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	695b      	ldr	r3, [r3, #20]
 8007e1e:	f003 0301 	and.w	r3, r3, #1
}
 8007e22:	4618      	mov	r0, r3
 8007e24:	370c      	adds	r7, #12
 8007e26:	46bd      	mov	sp, r7
 8007e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e2c:	4770      	bx	lr

08007e2e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8007e2e:	b480      	push	{r7}
 8007e30:	b085      	sub	sp, #20
 8007e32:	af00      	add	r7, sp, #0
 8007e34:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	68fa      	ldr	r2, [r7, #12]
 8007e44:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007e48:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8007e4c:	f023 0307 	bic.w	r3, r3, #7
 8007e50:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007e58:	685b      	ldr	r3, [r3, #4]
 8007e5a:	68fa      	ldr	r2, [r7, #12]
 8007e5c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007e60:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007e64:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007e66:	2300      	movs	r3, #0
}
 8007e68:	4618      	mov	r0, r3
 8007e6a:	3714      	adds	r7, #20
 8007e6c:	46bd      	mov	sp, r7
 8007e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e72:	4770      	bx	lr

08007e74 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t *psetup)
{
 8007e74:	b480      	push	{r7}
 8007e76:	b085      	sub	sp, #20
 8007e78:	af00      	add	r7, sp, #0
 8007e7a:	6078      	str	r0, [r7, #4]
 8007e7c:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	333c      	adds	r3, #60	@ 0x3c
 8007e86:	3304      	adds	r3, #4
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8007e8c:	68bb      	ldr	r3, [r7, #8]
 8007e8e:	4a1c      	ldr	r2, [pc, #112]	@ (8007f00 <USB_EP0_OutStart+0x8c>)
 8007e90:	4293      	cmp	r3, r2
 8007e92:	d90a      	bls.n	8007eaa <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007ea0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007ea4:	d101      	bne.n	8007eaa <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 8007ea6:	2300      	movs	r3, #0
 8007ea8:	e024      	b.n	8007ef4 <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007eb0:	461a      	mov	r2, r3
 8007eb2:	2300      	movs	r3, #0
 8007eb4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007ebc:	691b      	ldr	r3, [r3, #16]
 8007ebe:	68fa      	ldr	r2, [r7, #12]
 8007ec0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007ec4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007ec8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007ed0:	691b      	ldr	r3, [r3, #16]
 8007ed2:	68fa      	ldr	r2, [r7, #12]
 8007ed4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007ed8:	f043 0318 	orr.w	r3, r3, #24
 8007edc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007ee4:	691b      	ldr	r3, [r3, #16]
 8007ee6:	68fa      	ldr	r2, [r7, #12]
 8007ee8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007eec:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8007ef0:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 8007ef2:	2300      	movs	r3, #0
}
 8007ef4:	4618      	mov	r0, r3
 8007ef6:	3714      	adds	r7, #20
 8007ef8:	46bd      	mov	sp, r7
 8007efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007efe:	4770      	bx	lr
 8007f00:	4f54300a 	.word	0x4f54300a

08007f04 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007f04:	b480      	push	{r7}
 8007f06:	b085      	sub	sp, #20
 8007f08:	af00      	add	r7, sp, #0
 8007f0a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8007f0c:	2300      	movs	r3, #0
 8007f0e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	3301      	adds	r3, #1
 8007f14:	60fb      	str	r3, [r7, #12]
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	4a13      	ldr	r2, [pc, #76]	@ (8007f68 <USB_CoreReset+0x64>)
 8007f1a:	4293      	cmp	r3, r2
 8007f1c:	d901      	bls.n	8007f22 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007f1e:	2303      	movs	r3, #3
 8007f20:	e01b      	b.n	8007f5a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	691b      	ldr	r3, [r3, #16]
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	daf2      	bge.n	8007f10 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007f2a:	2300      	movs	r3, #0
 8007f2c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	691b      	ldr	r3, [r3, #16]
 8007f32:	f043 0201 	orr.w	r2, r3, #1
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	3301      	adds	r3, #1
 8007f3e:	60fb      	str	r3, [r7, #12]
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	4a09      	ldr	r2, [pc, #36]	@ (8007f68 <USB_CoreReset+0x64>)
 8007f44:	4293      	cmp	r3, r2
 8007f46:	d901      	bls.n	8007f4c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007f48:	2303      	movs	r3, #3
 8007f4a:	e006      	b.n	8007f5a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	691b      	ldr	r3, [r3, #16]
 8007f50:	f003 0301 	and.w	r3, r3, #1
 8007f54:	2b01      	cmp	r3, #1
 8007f56:	d0f0      	beq.n	8007f3a <USB_CoreReset+0x36>

  return HAL_OK;
 8007f58:	2300      	movs	r3, #0
}
 8007f5a:	4618      	mov	r0, r3
 8007f5c:	3714      	adds	r7, #20
 8007f5e:	46bd      	mov	sp, r7
 8007f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f64:	4770      	bx	lr
 8007f66:	bf00      	nop
 8007f68:	00030d40 	.word	0x00030d40

08007f6c <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007f6c:	b580      	push	{r7, lr}
 8007f6e:	b084      	sub	sp, #16
 8007f70:	af00      	add	r7, sp, #0
 8007f72:	6078      	str	r0, [r7, #4]
 8007f74:	460b      	mov	r3, r1
 8007f76:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_HID_HandleTypeDef *hhid;

  hhid = USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 8007f78:	2010      	movs	r0, #16
 8007f7a:	f002 f815 	bl	8009fa8 <malloc>
 8007f7e:	4603      	mov	r3, r0
 8007f80:	60fb      	str	r3, [r7, #12]

  if (hhid == NULL)
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d105      	bne.n	8007f94 <USBD_HID_Init+0x28>
  {
    pdev->pClassData = NULL;
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	2200      	movs	r2, #0
 8007f8c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    return (uint8_t)USBD_EMEM;
 8007f90:	2302      	movs	r3, #2
 8007f92:	e01b      	b.n	8007fcc <USBD_HID_Init+0x60>
  }

  pdev->pClassData = (void *)hhid;
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	68fa      	ldr	r2, [r7, #12]
 8007f98:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	7c1b      	ldrb	r3, [r3, #16]
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d103      	bne.n	8007fac <USBD_HID_Init+0x40>
  {
    pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = HID_HS_BINTERVAL;
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	2207      	movs	r2, #7
 8007fa8:	875a      	strh	r2, [r3, #58]	@ 0x3a
 8007faa:	e002      	b.n	8007fb2 <USBD_HID_Init+0x46>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = HID_FS_BINTERVAL;
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	220a      	movs	r2, #10
 8007fb0:	875a      	strh	r2, [r3, #58]	@ 0x3a
  }

    /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 8007fb2:	2304      	movs	r3, #4
 8007fb4:	2203      	movs	r2, #3
 8007fb6:	2181      	movs	r1, #129	@ 0x81
 8007fb8:	6878      	ldr	r0, [r7, #4]
 8007fba:	f001 fdef 	bl	8009b9c <USBD_LL_OpenEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	2201      	movs	r2, #1
 8007fc2:	871a      	strh	r2, [r3, #56]	@ 0x38

  hhid->state = HID_IDLE;
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	2200      	movs	r2, #0
 8007fc8:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8007fca:	2300      	movs	r3, #0
}
 8007fcc:	4618      	mov	r0, r3
 8007fce:	3710      	adds	r7, #16
 8007fd0:	46bd      	mov	sp, r7
 8007fd2:	bd80      	pop	{r7, pc}

08007fd4 <USBD_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007fd4:	b580      	push	{r7, lr}
 8007fd6:	b082      	sub	sp, #8
 8007fd8:	af00      	add	r7, sp, #0
 8007fda:	6078      	str	r0, [r7, #4]
 8007fdc:	460b      	mov	r3, r1
 8007fde:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close HID EPs */
  (void)USBD_LL_CloseEP(pdev, HID_EPIN_ADDR);
 8007fe0:	2181      	movs	r1, #129	@ 0x81
 8007fe2:	6878      	ldr	r0, [r7, #4]
 8007fe4:	f001 fe18 	bl	8009c18 <USBD_LL_CloseEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 0U;
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	2200      	movs	r2, #0
 8007fec:	871a      	strh	r2, [r3, #56]	@ 0x38
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = 0U;
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	2200      	movs	r2, #0
 8007ff2:	875a      	strh	r2, [r3, #58]	@ 0x3a

  /* FRee allocated memory */
  if (pdev->pClassData != NULL)
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d009      	beq.n	8008012 <USBD_HID_DeInit+0x3e>
  {
    (void)USBD_free(pdev->pClassData);
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008004:	4618      	mov	r0, r3
 8008006:	f001 ffd7 	bl	8009fb8 <free>
    pdev->pClassData = NULL;
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	2200      	movs	r2, #0
 800800e:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8008012:	2300      	movs	r3, #0
}
 8008014:	4618      	mov	r0, r3
 8008016:	3708      	adds	r7, #8
 8008018:	46bd      	mov	sp, r7
 800801a:	bd80      	pop	{r7, pc}

0800801c <USBD_HID_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800801c:	b580      	push	{r7, lr}
 800801e:	b086      	sub	sp, #24
 8008020:	af00      	add	r7, sp, #0
 8008022:	6078      	str	r0, [r7, #4]
 8008024:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800802c:	60fb      	str	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 800802e:	2300      	movs	r3, #0
 8008030:	75fb      	strb	r3, [r7, #23]
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 8008032:	2300      	movs	r3, #0
 8008034:	817b      	strh	r3, [r7, #10]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008036:	683b      	ldr	r3, [r7, #0]
 8008038:	781b      	ldrb	r3, [r3, #0]
 800803a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800803e:	2b00      	cmp	r3, #0
 8008040:	d045      	beq.n	80080ce <USBD_HID_Setup+0xb2>
 8008042:	2b20      	cmp	r3, #32
 8008044:	f040 80d4 	bne.w	80081f0 <USBD_HID_Setup+0x1d4>
  {
  case USB_REQ_TYPE_CLASS :
    switch (req->bRequest)
 8008048:	683b      	ldr	r3, [r7, #0]
 800804a:	785b      	ldrb	r3, [r3, #1]
 800804c:	3b02      	subs	r3, #2
 800804e:	2b09      	cmp	r3, #9
 8008050:	d835      	bhi.n	80080be <USBD_HID_Setup+0xa2>
 8008052:	a201      	add	r2, pc, #4	@ (adr r2, 8008058 <USBD_HID_Setup+0x3c>)
 8008054:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008058:	080080af 	.word	0x080080af
 800805c:	0800808f 	.word	0x0800808f
 8008060:	080080bf 	.word	0x080080bf
 8008064:	080080bf 	.word	0x080080bf
 8008068:	080080bf 	.word	0x080080bf
 800806c:	080080bf 	.word	0x080080bf
 8008070:	080080bf 	.word	0x080080bf
 8008074:	080080bf 	.word	0x080080bf
 8008078:	0800809d 	.word	0x0800809d
 800807c:	08008081 	.word	0x08008081
    {
    case HID_REQ_SET_PROTOCOL:
      hhid->Protocol = (uint8_t)(req->wValue);
 8008080:	683b      	ldr	r3, [r7, #0]
 8008082:	885b      	ldrh	r3, [r3, #2]
 8008084:	b2db      	uxtb	r3, r3
 8008086:	461a      	mov	r2, r3
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	601a      	str	r2, [r3, #0]
      break;
 800808c:	e01e      	b.n	80080cc <USBD_HID_Setup+0xb0>

    case HID_REQ_GET_PROTOCOL:
      (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	2201      	movs	r2, #1
 8008092:	4619      	mov	r1, r3
 8008094:	6878      	ldr	r0, [r7, #4]
 8008096:	f001 f9ef 	bl	8009478 <USBD_CtlSendData>
      break;
 800809a:	e017      	b.n	80080cc <USBD_HID_Setup+0xb0>

    case HID_REQ_SET_IDLE:
      hhid->IdleState = (uint8_t)(req->wValue >> 8);
 800809c:	683b      	ldr	r3, [r7, #0]
 800809e:	885b      	ldrh	r3, [r3, #2]
 80080a0:	0a1b      	lsrs	r3, r3, #8
 80080a2:	b29b      	uxth	r3, r3
 80080a4:	b2db      	uxtb	r3, r3
 80080a6:	461a      	mov	r2, r3
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	605a      	str	r2, [r3, #4]
      break;
 80080ac:	e00e      	b.n	80080cc <USBD_HID_Setup+0xb0>

    case HID_REQ_GET_IDLE:
      (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	3304      	adds	r3, #4
 80080b2:	2201      	movs	r2, #1
 80080b4:	4619      	mov	r1, r3
 80080b6:	6878      	ldr	r0, [r7, #4]
 80080b8:	f001 f9de 	bl	8009478 <USBD_CtlSendData>
      break;
 80080bc:	e006      	b.n	80080cc <USBD_HID_Setup+0xb0>

    default:
      USBD_CtlError(pdev, req);
 80080be:	6839      	ldr	r1, [r7, #0]
 80080c0:	6878      	ldr	r0, [r7, #4]
 80080c2:	f001 f968 	bl	8009396 <USBD_CtlError>
      ret = USBD_FAIL;
 80080c6:	2303      	movs	r3, #3
 80080c8:	75fb      	strb	r3, [r7, #23]
      break;
 80080ca:	bf00      	nop
    }
    break;
 80080cc:	e097      	b.n	80081fe <USBD_HID_Setup+0x1e2>
  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80080ce:	683b      	ldr	r3, [r7, #0]
 80080d0:	785b      	ldrb	r3, [r3, #1]
 80080d2:	2b0b      	cmp	r3, #11
 80080d4:	f200 8083 	bhi.w	80081de <USBD_HID_Setup+0x1c2>
 80080d8:	a201      	add	r2, pc, #4	@ (adr r2, 80080e0 <USBD_HID_Setup+0xc4>)
 80080da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080de:	bf00      	nop
 80080e0:	08008111 	.word	0x08008111
 80080e4:	080081ed 	.word	0x080081ed
 80080e8:	080081df 	.word	0x080081df
 80080ec:	080081df 	.word	0x080081df
 80080f0:	080081df 	.word	0x080081df
 80080f4:	080081df 	.word	0x080081df
 80080f8:	08008139 	.word	0x08008139
 80080fc:	080081df 	.word	0x080081df
 8008100:	080081df 	.word	0x080081df
 8008104:	080081df 	.word	0x080081df
 8008108:	08008191 	.word	0x08008191
 800810c:	080081b9 	.word	0x080081b9
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008116:	2b03      	cmp	r3, #3
 8008118:	d107      	bne.n	800812a <USBD_HID_Setup+0x10e>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800811a:	f107 030a 	add.w	r3, r7, #10
 800811e:	2202      	movs	r2, #2
 8008120:	4619      	mov	r1, r3
 8008122:	6878      	ldr	r0, [r7, #4]
 8008124:	f001 f9a8 	bl	8009478 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8008128:	e061      	b.n	80081ee <USBD_HID_Setup+0x1d2>
        USBD_CtlError(pdev, req);
 800812a:	6839      	ldr	r1, [r7, #0]
 800812c:	6878      	ldr	r0, [r7, #4]
 800812e:	f001 f932 	bl	8009396 <USBD_CtlError>
        ret = USBD_FAIL;
 8008132:	2303      	movs	r3, #3
 8008134:	75fb      	strb	r3, [r7, #23]
      break;
 8008136:	e05a      	b.n	80081ee <USBD_HID_Setup+0x1d2>

    case USB_REQ_GET_DESCRIPTOR:
      if ((req->wValue >> 8) == HID_REPORT_DESC)
 8008138:	683b      	ldr	r3, [r7, #0]
 800813a:	885b      	ldrh	r3, [r3, #2]
 800813c:	0a1b      	lsrs	r3, r3, #8
 800813e:	b29b      	uxth	r3, r3
 8008140:	2b22      	cmp	r3, #34	@ 0x22
 8008142:	d108      	bne.n	8008156 <USBD_HID_Setup+0x13a>
      {
        len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 8008144:	683b      	ldr	r3, [r7, #0]
 8008146:	88db      	ldrh	r3, [r3, #6]
 8008148:	2b4a      	cmp	r3, #74	@ 0x4a
 800814a:	bf28      	it	cs
 800814c:	234a      	movcs	r3, #74	@ 0x4a
 800814e:	82bb      	strh	r3, [r7, #20]
        pbuf = HID_MOUSE_ReportDesc;
 8008150:	4b2d      	ldr	r3, [pc, #180]	@ (8008208 <USBD_HID_Setup+0x1ec>)
 8008152:	613b      	str	r3, [r7, #16]
 8008154:	e015      	b.n	8008182 <USBD_HID_Setup+0x166>
      }
      else if ((req->wValue >> 8) == HID_DESCRIPTOR_TYPE)
 8008156:	683b      	ldr	r3, [r7, #0]
 8008158:	885b      	ldrh	r3, [r3, #2]
 800815a:	0a1b      	lsrs	r3, r3, #8
 800815c:	b29b      	uxth	r3, r3
 800815e:	2b21      	cmp	r3, #33	@ 0x21
 8008160:	d108      	bne.n	8008174 <USBD_HID_Setup+0x158>
      {
        pbuf = USBD_HID_Desc;
 8008162:	4b2a      	ldr	r3, [pc, #168]	@ (800820c <USBD_HID_Setup+0x1f0>)
 8008164:	613b      	str	r3, [r7, #16]
        len = MIN(USB_HID_DESC_SIZ, req->wLength);
 8008166:	683b      	ldr	r3, [r7, #0]
 8008168:	88db      	ldrh	r3, [r3, #6]
 800816a:	2b09      	cmp	r3, #9
 800816c:	bf28      	it	cs
 800816e:	2309      	movcs	r3, #9
 8008170:	82bb      	strh	r3, [r7, #20]
 8008172:	e006      	b.n	8008182 <USBD_HID_Setup+0x166>
      }
      else
      {
        USBD_CtlError(pdev, req);
 8008174:	6839      	ldr	r1, [r7, #0]
 8008176:	6878      	ldr	r0, [r7, #4]
 8008178:	f001 f90d 	bl	8009396 <USBD_CtlError>
        ret = USBD_FAIL;
 800817c:	2303      	movs	r3, #3
 800817e:	75fb      	strb	r3, [r7, #23]
        break;
 8008180:	e035      	b.n	80081ee <USBD_HID_Setup+0x1d2>
      }
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008182:	8abb      	ldrh	r3, [r7, #20]
 8008184:	461a      	mov	r2, r3
 8008186:	6939      	ldr	r1, [r7, #16]
 8008188:	6878      	ldr	r0, [r7, #4]
 800818a:	f001 f975 	bl	8009478 <USBD_CtlSendData>
      break;
 800818e:	e02e      	b.n	80081ee <USBD_HID_Setup+0x1d2>

    case USB_REQ_GET_INTERFACE :
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008196:	2b03      	cmp	r3, #3
 8008198:	d107      	bne.n	80081aa <USBD_HID_Setup+0x18e>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	3308      	adds	r3, #8
 800819e:	2201      	movs	r2, #1
 80081a0:	4619      	mov	r1, r3
 80081a2:	6878      	ldr	r0, [r7, #4]
 80081a4:	f001 f968 	bl	8009478 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 80081a8:	e021      	b.n	80081ee <USBD_HID_Setup+0x1d2>
        USBD_CtlError(pdev, req);
 80081aa:	6839      	ldr	r1, [r7, #0]
 80081ac:	6878      	ldr	r0, [r7, #4]
 80081ae:	f001 f8f2 	bl	8009396 <USBD_CtlError>
        ret = USBD_FAIL;
 80081b2:	2303      	movs	r3, #3
 80081b4:	75fb      	strb	r3, [r7, #23]
      break;
 80081b6:	e01a      	b.n	80081ee <USBD_HID_Setup+0x1d2>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80081be:	2b03      	cmp	r3, #3
 80081c0:	d106      	bne.n	80081d0 <USBD_HID_Setup+0x1b4>
      {
        hhid->AltSetting = (uint8_t)(req->wValue);
 80081c2:	683b      	ldr	r3, [r7, #0]
 80081c4:	885b      	ldrh	r3, [r3, #2]
 80081c6:	b2db      	uxtb	r3, r3
 80081c8:	461a      	mov	r2, r3
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	609a      	str	r2, [r3, #8]
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 80081ce:	e00e      	b.n	80081ee <USBD_HID_Setup+0x1d2>
        USBD_CtlError(pdev, req);
 80081d0:	6839      	ldr	r1, [r7, #0]
 80081d2:	6878      	ldr	r0, [r7, #4]
 80081d4:	f001 f8df 	bl	8009396 <USBD_CtlError>
        ret = USBD_FAIL;
 80081d8:	2303      	movs	r3, #3
 80081da:	75fb      	strb	r3, [r7, #23]
      break;
 80081dc:	e007      	b.n	80081ee <USBD_HID_Setup+0x1d2>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 80081de:	6839      	ldr	r1, [r7, #0]
 80081e0:	6878      	ldr	r0, [r7, #4]
 80081e2:	f001 f8d8 	bl	8009396 <USBD_CtlError>
      ret = USBD_FAIL;
 80081e6:	2303      	movs	r3, #3
 80081e8:	75fb      	strb	r3, [r7, #23]
      break;
 80081ea:	e000      	b.n	80081ee <USBD_HID_Setup+0x1d2>
      break;
 80081ec:	bf00      	nop
    }
    break;
 80081ee:	e006      	b.n	80081fe <USBD_HID_Setup+0x1e2>

  default:
    USBD_CtlError(pdev, req);
 80081f0:	6839      	ldr	r1, [r7, #0]
 80081f2:	6878      	ldr	r0, [r7, #4]
 80081f4:	f001 f8cf 	bl	8009396 <USBD_CtlError>
    ret = USBD_FAIL;
 80081f8:	2303      	movs	r3, #3
 80081fa:	75fb      	strb	r3, [r7, #23]
    break;
 80081fc:	bf00      	nop
  }

  return (uint8_t)ret;
 80081fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8008200:	4618      	mov	r0, r3
 8008202:	3718      	adds	r7, #24
 8008204:	46bd      	mov	sp, r7
 8008206:	bd80      	pop	{r7, pc}
 8008208:	20000168 	.word	0x20000168
 800820c:	20000150 	.word	0x20000150

08008210 <USBD_HID_SendReport>:
  * @param  pdev: device instance
  * @param  buff: pointer to report
  * @retval status
  */
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len)
{
 8008210:	b580      	push	{r7, lr}
 8008212:	b086      	sub	sp, #24
 8008214:	af00      	add	r7, sp, #0
 8008216:	60f8      	str	r0, [r7, #12]
 8008218:	60b9      	str	r1, [r7, #8]
 800821a:	4613      	mov	r3, r2
 800821c:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008224:	617b      	str	r3, [r7, #20]

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800822c:	2b03      	cmp	r3, #3
 800822e:	d10c      	bne.n	800824a <USBD_HID_SendReport+0x3a>
  {
    if (hhid->state == HID_IDLE)
 8008230:	697b      	ldr	r3, [r7, #20]
 8008232:	7b1b      	ldrb	r3, [r3, #12]
 8008234:	2b00      	cmp	r3, #0
 8008236:	d108      	bne.n	800824a <USBD_HID_SendReport+0x3a>
    {
      hhid->state = HID_BUSY;
 8008238:	697b      	ldr	r3, [r7, #20]
 800823a:	2201      	movs	r2, #1
 800823c:	731a      	strb	r2, [r3, #12]
      (void)USBD_LL_Transmit(pdev, HID_EPIN_ADDR, report, len);
 800823e:	88fb      	ldrh	r3, [r7, #6]
 8008240:	68ba      	ldr	r2, [r7, #8]
 8008242:	2181      	movs	r1, #129	@ 0x81
 8008244:	68f8      	ldr	r0, [r7, #12]
 8008246:	f001 fdeb 	bl	8009e20 <USBD_LL_Transmit>
    }
  }

  return (uint8_t)USBD_OK;
 800824a:	2300      	movs	r3, #0
}
 800824c:	4618      	mov	r0, r3
 800824e:	3718      	adds	r7, #24
 8008250:	46bd      	mov	sp, r7
 8008252:	bd80      	pop	{r7, pc}

08008254 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 8008254:	b480      	push	{r7}
 8008256:	b083      	sub	sp, #12
 8008258:	af00      	add	r7, sp, #0
 800825a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_CfgFSDesc);
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	2222      	movs	r2, #34	@ 0x22
 8008260:	801a      	strh	r2, [r3, #0]

  return USBD_HID_CfgFSDesc;
 8008262:	4b03      	ldr	r3, [pc, #12]	@ (8008270 <USBD_HID_GetFSCfgDesc+0x1c>)
}
 8008264:	4618      	mov	r0, r3
 8008266:	370c      	adds	r7, #12
 8008268:	46bd      	mov	sp, r7
 800826a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800826e:	4770      	bx	lr
 8008270:	200000e4 	.word	0x200000e4

08008274 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 8008274:	b480      	push	{r7}
 8008276:	b083      	sub	sp, #12
 8008278:	af00      	add	r7, sp, #0
 800827a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_CfgHSDesc);
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	2222      	movs	r2, #34	@ 0x22
 8008280:	801a      	strh	r2, [r3, #0]

  return USBD_HID_CfgHSDesc;
 8008282:	4b03      	ldr	r3, [pc, #12]	@ (8008290 <USBD_HID_GetHSCfgDesc+0x1c>)
}
 8008284:	4618      	mov	r0, r3
 8008286:	370c      	adds	r7, #12
 8008288:	46bd      	mov	sp, r7
 800828a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800828e:	4770      	bx	lr
 8008290:	20000108 	.word	0x20000108

08008294 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008294:	b480      	push	{r7}
 8008296:	b083      	sub	sp, #12
 8008298:	af00      	add	r7, sp, #0
 800829a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_OtherSpeedCfgDesc);
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	2222      	movs	r2, #34	@ 0x22
 80082a0:	801a      	strh	r2, [r3, #0]

  return USBD_HID_OtherSpeedCfgDesc;
 80082a2:	4b03      	ldr	r3, [pc, #12]	@ (80082b0 <USBD_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 80082a4:	4618      	mov	r0, r3
 80082a6:	370c      	adds	r7, #12
 80082a8:	46bd      	mov	sp, r7
 80082aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ae:	4770      	bx	lr
 80082b0:	2000012c 	.word	0x2000012c

080082b4 <USBD_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80082b4:	b480      	push	{r7}
 80082b6:	b083      	sub	sp, #12
 80082b8:	af00      	add	r7, sp, #0
 80082ba:	6078      	str	r0, [r7, #4]
 80082bc:	460b      	mov	r3, r1
 80082be:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80082c6:	2200      	movs	r2, #0
 80082c8:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 80082ca:	2300      	movs	r3, #0
}
 80082cc:	4618      	mov	r0, r3
 80082ce:	370c      	adds	r7, #12
 80082d0:	46bd      	mov	sp, r7
 80082d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d6:	4770      	bx	lr

080082d8 <USBD_HID_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 80082d8:	b480      	push	{r7}
 80082da:	b083      	sub	sp, #12
 80082dc:	af00      	add	r7, sp, #0
 80082de:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	220a      	movs	r2, #10
 80082e4:	801a      	strh	r2, [r3, #0]

  return USBD_HID_DeviceQualifierDesc;
 80082e6:	4b03      	ldr	r3, [pc, #12]	@ (80082f4 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 80082e8:	4618      	mov	r0, r3
 80082ea:	370c      	adds	r7, #12
 80082ec:	46bd      	mov	sp, r7
 80082ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f2:	4770      	bx	lr
 80082f4:	2000015c 	.word	0x2000015c

080082f8 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80082f8:	b580      	push	{r7, lr}
 80082fa:	b086      	sub	sp, #24
 80082fc:	af00      	add	r7, sp, #0
 80082fe:	60f8      	str	r0, [r7, #12]
 8008300:	60b9      	str	r1, [r7, #8]
 8008302:	4613      	mov	r3, r2
 8008304:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	2b00      	cmp	r3, #0
 800830a:	d101      	bne.n	8008310 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800830c:	2303      	movs	r3, #3
 800830e:	e01f      	b.n	8008350 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	2200      	movs	r2, #0
 8008314:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData = NULL;
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	2200      	movs	r2, #0
 800831c:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0
  pdev->pConfDesc = NULL;
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	2200      	movs	r2, #0
 8008324:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008328:	68bb      	ldr	r3, [r7, #8]
 800832a:	2b00      	cmp	r3, #0
 800832c:	d003      	beq.n	8008336 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	68ba      	ldr	r2, [r7, #8]
 8008332:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	2201      	movs	r2, #1
 800833a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	79fa      	ldrb	r2, [r7, #7]
 8008342:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8008344:	68f8      	ldr	r0, [r7, #12]
 8008346:	f001 fbab 	bl	8009aa0 <USBD_LL_Init>
 800834a:	4603      	mov	r3, r0
 800834c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800834e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008350:	4618      	mov	r0, r3
 8008352:	3718      	adds	r7, #24
 8008354:	46bd      	mov	sp, r7
 8008356:	bd80      	pop	{r7, pc}

08008358 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008358:	b580      	push	{r7, lr}
 800835a:	b084      	sub	sp, #16
 800835c:	af00      	add	r7, sp, #0
 800835e:	6078      	str	r0, [r7, #4]
 8008360:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008362:	2300      	movs	r3, #0
 8008364:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8008366:	683b      	ldr	r3, [r7, #0]
 8008368:	2b00      	cmp	r3, #0
 800836a:	d101      	bne.n	8008370 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800836c:	2303      	movs	r3, #3
 800836e:	e016      	b.n	800839e <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	683a      	ldr	r2, [r7, #0]
 8008374:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800837e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008380:	2b00      	cmp	r3, #0
 8008382:	d00b      	beq.n	800839c <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800838a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800838c:	f107 020e 	add.w	r2, r7, #14
 8008390:	4610      	mov	r0, r2
 8008392:	4798      	blx	r3
 8008394:	4602      	mov	r2, r0
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800839c:	2300      	movs	r3, #0
}
 800839e:	4618      	mov	r0, r3
 80083a0:	3710      	adds	r7, #16
 80083a2:	46bd      	mov	sp, r7
 80083a4:	bd80      	pop	{r7, pc}

080083a6 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80083a6:	b580      	push	{r7, lr}
 80083a8:	b082      	sub	sp, #8
 80083aa:	af00      	add	r7, sp, #0
 80083ac:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80083ae:	6878      	ldr	r0, [r7, #4]
 80083b0:	f001 fbc2 	bl	8009b38 <USBD_LL_Start>
 80083b4:	4603      	mov	r3, r0
}
 80083b6:	4618      	mov	r0, r3
 80083b8:	3708      	adds	r7, #8
 80083ba:	46bd      	mov	sp, r7
 80083bc:	bd80      	pop	{r7, pc}

080083be <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80083be:	b480      	push	{r7}
 80083c0:	b083      	sub	sp, #12
 80083c2:	af00      	add	r7, sp, #0
 80083c4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80083c6:	2300      	movs	r3, #0
}
 80083c8:	4618      	mov	r0, r3
 80083ca:	370c      	adds	r7, #12
 80083cc:	46bd      	mov	sp, r7
 80083ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d2:	4770      	bx	lr

080083d4 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80083d4:	b580      	push	{r7, lr}
 80083d6:	b084      	sub	sp, #16
 80083d8:	af00      	add	r7, sp, #0
 80083da:	6078      	str	r0, [r7, #4]
 80083dc:	460b      	mov	r3, r1
 80083de:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80083e0:	2303      	movs	r3, #3
 80083e2:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d009      	beq.n	8008402 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	78fa      	ldrb	r2, [r7, #3]
 80083f8:	4611      	mov	r1, r2
 80083fa:	6878      	ldr	r0, [r7, #4]
 80083fc:	4798      	blx	r3
 80083fe:	4603      	mov	r3, r0
 8008400:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8008402:	7bfb      	ldrb	r3, [r7, #15]
}
 8008404:	4618      	mov	r0, r3
 8008406:	3710      	adds	r7, #16
 8008408:	46bd      	mov	sp, r7
 800840a:	bd80      	pop	{r7, pc}

0800840c <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800840c:	b580      	push	{r7, lr}
 800840e:	b082      	sub	sp, #8
 8008410:	af00      	add	r7, sp, #0
 8008412:	6078      	str	r0, [r7, #4]
 8008414:	460b      	mov	r3, r1
 8008416:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800841e:	2b00      	cmp	r3, #0
 8008420:	d007      	beq.n	8008432 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008428:	685b      	ldr	r3, [r3, #4]
 800842a:	78fa      	ldrb	r2, [r7, #3]
 800842c:	4611      	mov	r1, r2
 800842e:	6878      	ldr	r0, [r7, #4]
 8008430:	4798      	blx	r3
  }

  return USBD_OK;
 8008432:	2300      	movs	r3, #0
}
 8008434:	4618      	mov	r0, r3
 8008436:	3708      	adds	r7, #8
 8008438:	46bd      	mov	sp, r7
 800843a:	bd80      	pop	{r7, pc}

0800843c <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800843c:	b580      	push	{r7, lr}
 800843e:	b084      	sub	sp, #16
 8008440:	af00      	add	r7, sp, #0
 8008442:	6078      	str	r0, [r7, #4]
 8008444:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800844c:	6839      	ldr	r1, [r7, #0]
 800844e:	4618      	mov	r0, r3
 8008450:	f000 ff67 	bl	8009322 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	2201      	movs	r2, #1
 8008458:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8008462:	461a      	mov	r2, r3
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8008470:	f003 031f 	and.w	r3, r3, #31
 8008474:	2b02      	cmp	r3, #2
 8008476:	d01a      	beq.n	80084ae <USBD_LL_SetupStage+0x72>
 8008478:	2b02      	cmp	r3, #2
 800847a:	d822      	bhi.n	80084c2 <USBD_LL_SetupStage+0x86>
 800847c:	2b00      	cmp	r3, #0
 800847e:	d002      	beq.n	8008486 <USBD_LL_SetupStage+0x4a>
 8008480:	2b01      	cmp	r3, #1
 8008482:	d00a      	beq.n	800849a <USBD_LL_SetupStage+0x5e>
 8008484:	e01d      	b.n	80084c2 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800848c:	4619      	mov	r1, r3
 800848e:	6878      	ldr	r0, [r7, #4]
 8008490:	f000 fa18 	bl	80088c4 <USBD_StdDevReq>
 8008494:	4603      	mov	r3, r0
 8008496:	73fb      	strb	r3, [r7, #15]
      break;
 8008498:	e020      	b.n	80084dc <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80084a0:	4619      	mov	r1, r3
 80084a2:	6878      	ldr	r0, [r7, #4]
 80084a4:	f000 fa7c 	bl	80089a0 <USBD_StdItfReq>
 80084a8:	4603      	mov	r3, r0
 80084aa:	73fb      	strb	r3, [r7, #15]
      break;
 80084ac:	e016      	b.n	80084dc <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80084b4:	4619      	mov	r1, r3
 80084b6:	6878      	ldr	r0, [r7, #4]
 80084b8:	f000 faba 	bl	8008a30 <USBD_StdEPReq>
 80084bc:	4603      	mov	r3, r0
 80084be:	73fb      	strb	r3, [r7, #15]
      break;
 80084c0:	e00c      	b.n	80084dc <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80084c8:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80084cc:	b2db      	uxtb	r3, r3
 80084ce:	4619      	mov	r1, r3
 80084d0:	6878      	ldr	r0, [r7, #4]
 80084d2:	f001 fbd7 	bl	8009c84 <USBD_LL_StallEP>
 80084d6:	4603      	mov	r3, r0
 80084d8:	73fb      	strb	r3, [r7, #15]
      break;
 80084da:	bf00      	nop
  }

  return ret;
 80084dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80084de:	4618      	mov	r0, r3
 80084e0:	3710      	adds	r7, #16
 80084e2:	46bd      	mov	sp, r7
 80084e4:	bd80      	pop	{r7, pc}

080084e6 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80084e6:	b580      	push	{r7, lr}
 80084e8:	b086      	sub	sp, #24
 80084ea:	af00      	add	r7, sp, #0
 80084ec:	60f8      	str	r0, [r7, #12]
 80084ee:	460b      	mov	r3, r1
 80084f0:	607a      	str	r2, [r7, #4]
 80084f2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80084f4:	7afb      	ldrb	r3, [r7, #11]
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d137      	bne.n	800856a <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8008500:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008508:	2b03      	cmp	r3, #3
 800850a:	d14a      	bne.n	80085a2 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800850c:	693b      	ldr	r3, [r7, #16]
 800850e:	689a      	ldr	r2, [r3, #8]
 8008510:	693b      	ldr	r3, [r7, #16]
 8008512:	68db      	ldr	r3, [r3, #12]
 8008514:	429a      	cmp	r2, r3
 8008516:	d913      	bls.n	8008540 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008518:	693b      	ldr	r3, [r7, #16]
 800851a:	689a      	ldr	r2, [r3, #8]
 800851c:	693b      	ldr	r3, [r7, #16]
 800851e:	68db      	ldr	r3, [r3, #12]
 8008520:	1ad2      	subs	r2, r2, r3
 8008522:	693b      	ldr	r3, [r7, #16]
 8008524:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8008526:	693b      	ldr	r3, [r7, #16]
 8008528:	68da      	ldr	r2, [r3, #12]
 800852a:	693b      	ldr	r3, [r7, #16]
 800852c:	689b      	ldr	r3, [r3, #8]
 800852e:	4293      	cmp	r3, r2
 8008530:	bf28      	it	cs
 8008532:	4613      	movcs	r3, r2
 8008534:	461a      	mov	r2, r3
 8008536:	6879      	ldr	r1, [r7, #4]
 8008538:	68f8      	ldr	r0, [r7, #12]
 800853a:	f000 ffc9 	bl	80094d0 <USBD_CtlContinueRx>
 800853e:	e030      	b.n	80085a2 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008546:	691b      	ldr	r3, [r3, #16]
 8008548:	2b00      	cmp	r3, #0
 800854a:	d00a      	beq.n	8008562 <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008552:	2b03      	cmp	r3, #3
 8008554:	d105      	bne.n	8008562 <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800855c:	691b      	ldr	r3, [r3, #16]
 800855e:	68f8      	ldr	r0, [r7, #12]
 8008560:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 8008562:	68f8      	ldr	r0, [r7, #12]
 8008564:	f000 ffc5 	bl	80094f2 <USBD_CtlSendStatus>
 8008568:	e01b      	b.n	80085a2 <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008570:	699b      	ldr	r3, [r3, #24]
 8008572:	2b00      	cmp	r3, #0
 8008574:	d013      	beq.n	800859e <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800857c:	2b03      	cmp	r3, #3
 800857e:	d10e      	bne.n	800859e <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008586:	699b      	ldr	r3, [r3, #24]
 8008588:	7afa      	ldrb	r2, [r7, #11]
 800858a:	4611      	mov	r1, r2
 800858c:	68f8      	ldr	r0, [r7, #12]
 800858e:	4798      	blx	r3
 8008590:	4603      	mov	r3, r0
 8008592:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8008594:	7dfb      	ldrb	r3, [r7, #23]
 8008596:	2b00      	cmp	r3, #0
 8008598:	d003      	beq.n	80085a2 <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 800859a:	7dfb      	ldrb	r3, [r7, #23]
 800859c:	e002      	b.n	80085a4 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800859e:	2303      	movs	r3, #3
 80085a0:	e000      	b.n	80085a4 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 80085a2:	2300      	movs	r3, #0
}
 80085a4:	4618      	mov	r0, r3
 80085a6:	3718      	adds	r7, #24
 80085a8:	46bd      	mov	sp, r7
 80085aa:	bd80      	pop	{r7, pc}

080085ac <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80085ac:	b580      	push	{r7, lr}
 80085ae:	b086      	sub	sp, #24
 80085b0:	af00      	add	r7, sp, #0
 80085b2:	60f8      	str	r0, [r7, #12]
 80085b4:	460b      	mov	r3, r1
 80085b6:	607a      	str	r2, [r7, #4]
 80085b8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80085ba:	7afb      	ldrb	r3, [r7, #11]
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d16a      	bne.n	8008696 <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	3314      	adds	r3, #20
 80085c4:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80085cc:	2b02      	cmp	r3, #2
 80085ce:	d155      	bne.n	800867c <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 80085d0:	693b      	ldr	r3, [r7, #16]
 80085d2:	689a      	ldr	r2, [r3, #8]
 80085d4:	693b      	ldr	r3, [r7, #16]
 80085d6:	68db      	ldr	r3, [r3, #12]
 80085d8:	429a      	cmp	r2, r3
 80085da:	d914      	bls.n	8008606 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80085dc:	693b      	ldr	r3, [r7, #16]
 80085de:	689a      	ldr	r2, [r3, #8]
 80085e0:	693b      	ldr	r3, [r7, #16]
 80085e2:	68db      	ldr	r3, [r3, #12]
 80085e4:	1ad2      	subs	r2, r2, r3
 80085e6:	693b      	ldr	r3, [r7, #16]
 80085e8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80085ea:	693b      	ldr	r3, [r7, #16]
 80085ec:	689b      	ldr	r3, [r3, #8]
 80085ee:	461a      	mov	r2, r3
 80085f0:	6879      	ldr	r1, [r7, #4]
 80085f2:	68f8      	ldr	r0, [r7, #12]
 80085f4:	f000 ff5b 	bl	80094ae <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80085f8:	2300      	movs	r3, #0
 80085fa:	2200      	movs	r2, #0
 80085fc:	2100      	movs	r1, #0
 80085fe:	68f8      	ldr	r0, [r7, #12]
 8008600:	f001 fc46 	bl	8009e90 <USBD_LL_PrepareReceive>
 8008604:	e03a      	b.n	800867c <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8008606:	693b      	ldr	r3, [r7, #16]
 8008608:	68da      	ldr	r2, [r3, #12]
 800860a:	693b      	ldr	r3, [r7, #16]
 800860c:	689b      	ldr	r3, [r3, #8]
 800860e:	429a      	cmp	r2, r3
 8008610:	d11c      	bne.n	800864c <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8008612:	693b      	ldr	r3, [r7, #16]
 8008614:	685a      	ldr	r2, [r3, #4]
 8008616:	693b      	ldr	r3, [r7, #16]
 8008618:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800861a:	429a      	cmp	r2, r3
 800861c:	d316      	bcc.n	800864c <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800861e:	693b      	ldr	r3, [r7, #16]
 8008620:	685a      	ldr	r2, [r3, #4]
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008628:	429a      	cmp	r2, r3
 800862a:	d20f      	bcs.n	800864c <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800862c:	2200      	movs	r2, #0
 800862e:	2100      	movs	r1, #0
 8008630:	68f8      	ldr	r0, [r7, #12]
 8008632:	f000 ff3c 	bl	80094ae <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	2200      	movs	r2, #0
 800863a:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800863e:	2300      	movs	r3, #0
 8008640:	2200      	movs	r2, #0
 8008642:	2100      	movs	r1, #0
 8008644:	68f8      	ldr	r0, [r7, #12]
 8008646:	f001 fc23 	bl	8009e90 <USBD_LL_PrepareReceive>
 800864a:	e017      	b.n	800867c <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008652:	68db      	ldr	r3, [r3, #12]
 8008654:	2b00      	cmp	r3, #0
 8008656:	d00a      	beq.n	800866e <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800865e:	2b03      	cmp	r3, #3
 8008660:	d105      	bne.n	800866e <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008668:	68db      	ldr	r3, [r3, #12]
 800866a:	68f8      	ldr	r0, [r7, #12]
 800866c:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800866e:	2180      	movs	r1, #128	@ 0x80
 8008670:	68f8      	ldr	r0, [r7, #12]
 8008672:	f001 fb07 	bl	8009c84 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8008676:	68f8      	ldr	r0, [r7, #12]
 8008678:	f000 ff4e 	bl	8009518 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8008682:	2b01      	cmp	r3, #1
 8008684:	d123      	bne.n	80086ce <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8008686:	68f8      	ldr	r0, [r7, #12]
 8008688:	f7ff fe99 	bl	80083be <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	2200      	movs	r2, #0
 8008690:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8008694:	e01b      	b.n	80086ce <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800869c:	695b      	ldr	r3, [r3, #20]
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d013      	beq.n	80086ca <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80086a8:	2b03      	cmp	r3, #3
 80086aa:	d10e      	bne.n	80086ca <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80086b2:	695b      	ldr	r3, [r3, #20]
 80086b4:	7afa      	ldrb	r2, [r7, #11]
 80086b6:	4611      	mov	r1, r2
 80086b8:	68f8      	ldr	r0, [r7, #12]
 80086ba:	4798      	blx	r3
 80086bc:	4603      	mov	r3, r0
 80086be:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 80086c0:	7dfb      	ldrb	r3, [r7, #23]
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d003      	beq.n	80086ce <USBD_LL_DataInStage+0x122>
    {
      return ret;
 80086c6:	7dfb      	ldrb	r3, [r7, #23]
 80086c8:	e002      	b.n	80086d0 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80086ca:	2303      	movs	r3, #3
 80086cc:	e000      	b.n	80086d0 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 80086ce:	2300      	movs	r3, #0
}
 80086d0:	4618      	mov	r0, r3
 80086d2:	3718      	adds	r7, #24
 80086d4:	46bd      	mov	sp, r7
 80086d6:	bd80      	pop	{r7, pc}

080086d8 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80086d8:	b580      	push	{r7, lr}
 80086da:	b082      	sub	sp, #8
 80086dc:	af00      	add	r7, sp, #0
 80086de:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	2201      	movs	r2, #1
 80086e4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	2200      	movs	r2, #0
 80086ec:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	2200      	movs	r2, #0
 80086f4:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	2200      	movs	r2, #0
 80086fa:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClassData != NULL)
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008704:	2b00      	cmp	r3, #0
 8008706:	d009      	beq.n	800871c <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800870e:	685b      	ldr	r3, [r3, #4]
 8008710:	687a      	ldr	r2, [r7, #4]
 8008712:	6852      	ldr	r2, [r2, #4]
 8008714:	b2d2      	uxtb	r2, r2
 8008716:	4611      	mov	r1, r2
 8008718:	6878      	ldr	r0, [r7, #4]
 800871a:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800871c:	2340      	movs	r3, #64	@ 0x40
 800871e:	2200      	movs	r2, #0
 8008720:	2100      	movs	r1, #0
 8008722:	6878      	ldr	r0, [r7, #4]
 8008724:	f001 fa3a 	bl	8009b9c <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	2201      	movs	r2, #1
 800872c:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	2240      	movs	r2, #64	@ 0x40
 8008734:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008738:	2340      	movs	r3, #64	@ 0x40
 800873a:	2200      	movs	r2, #0
 800873c:	2180      	movs	r1, #128	@ 0x80
 800873e:	6878      	ldr	r0, [r7, #4]
 8008740:	f001 fa2c 	bl	8009b9c <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	2201      	movs	r2, #1
 8008748:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	2240      	movs	r2, #64	@ 0x40
 800874e:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8008750:	2300      	movs	r3, #0
}
 8008752:	4618      	mov	r0, r3
 8008754:	3708      	adds	r7, #8
 8008756:	46bd      	mov	sp, r7
 8008758:	bd80      	pop	{r7, pc}

0800875a <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800875a:	b480      	push	{r7}
 800875c:	b083      	sub	sp, #12
 800875e:	af00      	add	r7, sp, #0
 8008760:	6078      	str	r0, [r7, #4]
 8008762:	460b      	mov	r3, r1
 8008764:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	78fa      	ldrb	r2, [r7, #3]
 800876a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800876c:	2300      	movs	r3, #0
}
 800876e:	4618      	mov	r0, r3
 8008770:	370c      	adds	r7, #12
 8008772:	46bd      	mov	sp, r7
 8008774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008778:	4770      	bx	lr

0800877a <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800877a:	b480      	push	{r7}
 800877c:	b083      	sub	sp, #12
 800877e:	af00      	add	r7, sp, #0
 8008780:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	f893 229c 	ldrb.w	r2, [r3, #668]	@ 0x29c
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	2204      	movs	r2, #4
 8008792:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8008796:	2300      	movs	r3, #0
}
 8008798:	4618      	mov	r0, r3
 800879a:	370c      	adds	r7, #12
 800879c:	46bd      	mov	sp, r7
 800879e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087a2:	4770      	bx	lr

080087a4 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80087a4:	b480      	push	{r7}
 80087a6:	b083      	sub	sp, #12
 80087a8:	af00      	add	r7, sp, #0
 80087aa:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80087b2:	2b04      	cmp	r3, #4
 80087b4:	d105      	bne.n	80087c2 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	f893 229d 	ldrb.w	r2, [r3, #669]	@ 0x29d
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 80087c2:	2300      	movs	r3, #0
}
 80087c4:	4618      	mov	r0, r3
 80087c6:	370c      	adds	r7, #12
 80087c8:	46bd      	mov	sp, r7
 80087ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ce:	4770      	bx	lr

080087d0 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80087d0:	b580      	push	{r7, lr}
 80087d2:	b082      	sub	sp, #8
 80087d4:	af00      	add	r7, sp, #0
 80087d6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80087de:	2b03      	cmp	r3, #3
 80087e0:	d10b      	bne.n	80087fa <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80087e8:	69db      	ldr	r3, [r3, #28]
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d005      	beq.n	80087fa <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80087f4:	69db      	ldr	r3, [r3, #28]
 80087f6:	6878      	ldr	r0, [r7, #4]
 80087f8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80087fa:	2300      	movs	r3, #0
}
 80087fc:	4618      	mov	r0, r3
 80087fe:	3708      	adds	r7, #8
 8008800:	46bd      	mov	sp, r7
 8008802:	bd80      	pop	{r7, pc}

08008804 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8008804:	b480      	push	{r7}
 8008806:	b083      	sub	sp, #12
 8008808:	af00      	add	r7, sp, #0
 800880a:	6078      	str	r0, [r7, #4]
 800880c:	460b      	mov	r3, r1
 800880e:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8008810:	2300      	movs	r3, #0
}
 8008812:	4618      	mov	r0, r3
 8008814:	370c      	adds	r7, #12
 8008816:	46bd      	mov	sp, r7
 8008818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800881c:	4770      	bx	lr

0800881e <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800881e:	b480      	push	{r7}
 8008820:	b083      	sub	sp, #12
 8008822:	af00      	add	r7, sp, #0
 8008824:	6078      	str	r0, [r7, #4]
 8008826:	460b      	mov	r3, r1
 8008828:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800882a:	2300      	movs	r3, #0
}
 800882c:	4618      	mov	r0, r3
 800882e:	370c      	adds	r7, #12
 8008830:	46bd      	mov	sp, r7
 8008832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008836:	4770      	bx	lr

08008838 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8008838:	b480      	push	{r7}
 800883a:	b083      	sub	sp, #12
 800883c:	af00      	add	r7, sp, #0
 800883e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008840:	2300      	movs	r3, #0
}
 8008842:	4618      	mov	r0, r3
 8008844:	370c      	adds	r7, #12
 8008846:	46bd      	mov	sp, r7
 8008848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800884c:	4770      	bx	lr

0800884e <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800884e:	b580      	push	{r7, lr}
 8008850:	b082      	sub	sp, #8
 8008852:	af00      	add	r7, sp, #0
 8008854:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	2201      	movs	r2, #1
 800885a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  if (pdev->pClass != NULL)
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008864:	2b00      	cmp	r3, #0
 8008866:	d009      	beq.n	800887c <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800886e:	685b      	ldr	r3, [r3, #4]
 8008870:	687a      	ldr	r2, [r7, #4]
 8008872:	6852      	ldr	r2, [r2, #4]
 8008874:	b2d2      	uxtb	r2, r2
 8008876:	4611      	mov	r1, r2
 8008878:	6878      	ldr	r0, [r7, #4]
 800887a:	4798      	blx	r3
  }

  return USBD_OK;
 800887c:	2300      	movs	r3, #0
}
 800887e:	4618      	mov	r0, r3
 8008880:	3708      	adds	r7, #8
 8008882:	46bd      	mov	sp, r7
 8008884:	bd80      	pop	{r7, pc}

08008886 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8008886:	b480      	push	{r7}
 8008888:	b087      	sub	sp, #28
 800888a:	af00      	add	r7, sp, #0
 800888c:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8008892:	697b      	ldr	r3, [r7, #20]
 8008894:	781b      	ldrb	r3, [r3, #0]
 8008896:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8008898:	697b      	ldr	r3, [r7, #20]
 800889a:	3301      	adds	r3, #1
 800889c:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800889e:	697b      	ldr	r3, [r7, #20]
 80088a0:	781b      	ldrb	r3, [r3, #0]
 80088a2:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80088a4:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80088a8:	021b      	lsls	r3, r3, #8
 80088aa:	b21a      	sxth	r2, r3
 80088ac:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80088b0:	4313      	orrs	r3, r2
 80088b2:	b21b      	sxth	r3, r3
 80088b4:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80088b6:	89fb      	ldrh	r3, [r7, #14]
}
 80088b8:	4618      	mov	r0, r3
 80088ba:	371c      	adds	r7, #28
 80088bc:	46bd      	mov	sp, r7
 80088be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088c2:	4770      	bx	lr

080088c4 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80088c4:	b580      	push	{r7, lr}
 80088c6:	b084      	sub	sp, #16
 80088c8:	af00      	add	r7, sp, #0
 80088ca:	6078      	str	r0, [r7, #4]
 80088cc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80088ce:	2300      	movs	r3, #0
 80088d0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80088d2:	683b      	ldr	r3, [r7, #0]
 80088d4:	781b      	ldrb	r3, [r3, #0]
 80088d6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80088da:	2b40      	cmp	r3, #64	@ 0x40
 80088dc:	d005      	beq.n	80088ea <USBD_StdDevReq+0x26>
 80088de:	2b40      	cmp	r3, #64	@ 0x40
 80088e0:	d853      	bhi.n	800898a <USBD_StdDevReq+0xc6>
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d00b      	beq.n	80088fe <USBD_StdDevReq+0x3a>
 80088e6:	2b20      	cmp	r3, #32
 80088e8:	d14f      	bne.n	800898a <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80088f0:	689b      	ldr	r3, [r3, #8]
 80088f2:	6839      	ldr	r1, [r7, #0]
 80088f4:	6878      	ldr	r0, [r7, #4]
 80088f6:	4798      	blx	r3
 80088f8:	4603      	mov	r3, r0
 80088fa:	73fb      	strb	r3, [r7, #15]
    break;
 80088fc:	e04a      	b.n	8008994 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80088fe:	683b      	ldr	r3, [r7, #0]
 8008900:	785b      	ldrb	r3, [r3, #1]
 8008902:	2b09      	cmp	r3, #9
 8008904:	d83b      	bhi.n	800897e <USBD_StdDevReq+0xba>
 8008906:	a201      	add	r2, pc, #4	@ (adr r2, 800890c <USBD_StdDevReq+0x48>)
 8008908:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800890c:	08008961 	.word	0x08008961
 8008910:	08008975 	.word	0x08008975
 8008914:	0800897f 	.word	0x0800897f
 8008918:	0800896b 	.word	0x0800896b
 800891c:	0800897f 	.word	0x0800897f
 8008920:	0800893f 	.word	0x0800893f
 8008924:	08008935 	.word	0x08008935
 8008928:	0800897f 	.word	0x0800897f
 800892c:	08008957 	.word	0x08008957
 8008930:	08008949 	.word	0x08008949
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 8008934:	6839      	ldr	r1, [r7, #0]
 8008936:	6878      	ldr	r0, [r7, #4]
 8008938:	f000 f9da 	bl	8008cf0 <USBD_GetDescriptor>
      break;
 800893c:	e024      	b.n	8008988 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 800893e:	6839      	ldr	r1, [r7, #0]
 8008940:	6878      	ldr	r0, [r7, #4]
 8008942:	f000 fb69 	bl	8009018 <USBD_SetAddress>
      break;
 8008946:	e01f      	b.n	8008988 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 8008948:	6839      	ldr	r1, [r7, #0]
 800894a:	6878      	ldr	r0, [r7, #4]
 800894c:	f000 fba8 	bl	80090a0 <USBD_SetConfig>
 8008950:	4603      	mov	r3, r0
 8008952:	73fb      	strb	r3, [r7, #15]
      break;
 8008954:	e018      	b.n	8008988 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 8008956:	6839      	ldr	r1, [r7, #0]
 8008958:	6878      	ldr	r0, [r7, #4]
 800895a:	f000 fc45 	bl	80091e8 <USBD_GetConfig>
      break;
 800895e:	e013      	b.n	8008988 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 8008960:	6839      	ldr	r1, [r7, #0]
 8008962:	6878      	ldr	r0, [r7, #4]
 8008964:	f000 fc75 	bl	8009252 <USBD_GetStatus>
      break;
 8008968:	e00e      	b.n	8008988 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 800896a:	6839      	ldr	r1, [r7, #0]
 800896c:	6878      	ldr	r0, [r7, #4]
 800896e:	f000 fca3 	bl	80092b8 <USBD_SetFeature>
      break;
 8008972:	e009      	b.n	8008988 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 8008974:	6839      	ldr	r1, [r7, #0]
 8008976:	6878      	ldr	r0, [r7, #4]
 8008978:	f000 fcb2 	bl	80092e0 <USBD_ClrFeature>
      break;
 800897c:	e004      	b.n	8008988 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 800897e:	6839      	ldr	r1, [r7, #0]
 8008980:	6878      	ldr	r0, [r7, #4]
 8008982:	f000 fd08 	bl	8009396 <USBD_CtlError>
      break;
 8008986:	bf00      	nop
    }
    break;
 8008988:	e004      	b.n	8008994 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 800898a:	6839      	ldr	r1, [r7, #0]
 800898c:	6878      	ldr	r0, [r7, #4]
 800898e:	f000 fd02 	bl	8009396 <USBD_CtlError>
    break;
 8008992:	bf00      	nop
  }

  return ret;
 8008994:	7bfb      	ldrb	r3, [r7, #15]
}
 8008996:	4618      	mov	r0, r3
 8008998:	3710      	adds	r7, #16
 800899a:	46bd      	mov	sp, r7
 800899c:	bd80      	pop	{r7, pc}
 800899e:	bf00      	nop

080089a0 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80089a0:	b580      	push	{r7, lr}
 80089a2:	b084      	sub	sp, #16
 80089a4:	af00      	add	r7, sp, #0
 80089a6:	6078      	str	r0, [r7, #4]
 80089a8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80089aa:	2300      	movs	r3, #0
 80089ac:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80089ae:	683b      	ldr	r3, [r7, #0]
 80089b0:	781b      	ldrb	r3, [r3, #0]
 80089b2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80089b6:	2b40      	cmp	r3, #64	@ 0x40
 80089b8:	d005      	beq.n	80089c6 <USBD_StdItfReq+0x26>
 80089ba:	2b40      	cmp	r3, #64	@ 0x40
 80089bc:	d82e      	bhi.n	8008a1c <USBD_StdItfReq+0x7c>
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d001      	beq.n	80089c6 <USBD_StdItfReq+0x26>
 80089c2:	2b20      	cmp	r3, #32
 80089c4:	d12a      	bne.n	8008a1c <USBD_StdItfReq+0x7c>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80089cc:	3b01      	subs	r3, #1
 80089ce:	2b02      	cmp	r3, #2
 80089d0:	d81d      	bhi.n	8008a0e <USBD_StdItfReq+0x6e>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80089d2:	683b      	ldr	r3, [r7, #0]
 80089d4:	889b      	ldrh	r3, [r3, #4]
 80089d6:	b2db      	uxtb	r3, r3
 80089d8:	2b01      	cmp	r3, #1
 80089da:	d813      	bhi.n	8008a04 <USBD_StdItfReq+0x64>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80089e2:	689b      	ldr	r3, [r3, #8]
 80089e4:	6839      	ldr	r1, [r7, #0]
 80089e6:	6878      	ldr	r0, [r7, #4]
 80089e8:	4798      	blx	r3
 80089ea:	4603      	mov	r3, r0
 80089ec:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 80089ee:	683b      	ldr	r3, [r7, #0]
 80089f0:	88db      	ldrh	r3, [r3, #6]
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d110      	bne.n	8008a18 <USBD_StdItfReq+0x78>
 80089f6:	7bfb      	ldrb	r3, [r7, #15]
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d10d      	bne.n	8008a18 <USBD_StdItfReq+0x78>
        {
          (void)USBD_CtlSendStatus(pdev);
 80089fc:	6878      	ldr	r0, [r7, #4]
 80089fe:	f000 fd78 	bl	80094f2 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 8008a02:	e009      	b.n	8008a18 <USBD_StdItfReq+0x78>
        USBD_CtlError(pdev, req);
 8008a04:	6839      	ldr	r1, [r7, #0]
 8008a06:	6878      	ldr	r0, [r7, #4]
 8008a08:	f000 fcc5 	bl	8009396 <USBD_CtlError>
      break;
 8008a0c:	e004      	b.n	8008a18 <USBD_StdItfReq+0x78>

    default:
      USBD_CtlError(pdev, req);
 8008a0e:	6839      	ldr	r1, [r7, #0]
 8008a10:	6878      	ldr	r0, [r7, #4]
 8008a12:	f000 fcc0 	bl	8009396 <USBD_CtlError>
      break;
 8008a16:	e000      	b.n	8008a1a <USBD_StdItfReq+0x7a>
      break;
 8008a18:	bf00      	nop
    }
    break;
 8008a1a:	e004      	b.n	8008a26 <USBD_StdItfReq+0x86>

  default:
    USBD_CtlError(pdev, req);
 8008a1c:	6839      	ldr	r1, [r7, #0]
 8008a1e:	6878      	ldr	r0, [r7, #4]
 8008a20:	f000 fcb9 	bl	8009396 <USBD_CtlError>
    break;
 8008a24:	bf00      	nop
  }

  return ret;
 8008a26:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a28:	4618      	mov	r0, r3
 8008a2a:	3710      	adds	r7, #16
 8008a2c:	46bd      	mov	sp, r7
 8008a2e:	bd80      	pop	{r7, pc}

08008a30 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008a30:	b580      	push	{r7, lr}
 8008a32:	b084      	sub	sp, #16
 8008a34:	af00      	add	r7, sp, #0
 8008a36:	6078      	str	r0, [r7, #4]
 8008a38:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8008a3a:	2300      	movs	r3, #0
 8008a3c:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8008a3e:	683b      	ldr	r3, [r7, #0]
 8008a40:	889b      	ldrh	r3, [r3, #4]
 8008a42:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008a44:	683b      	ldr	r3, [r7, #0]
 8008a46:	781b      	ldrb	r3, [r3, #0]
 8008a48:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008a4c:	2b40      	cmp	r3, #64	@ 0x40
 8008a4e:	d007      	beq.n	8008a60 <USBD_StdEPReq+0x30>
 8008a50:	2b40      	cmp	r3, #64	@ 0x40
 8008a52:	f200 8142 	bhi.w	8008cda <USBD_StdEPReq+0x2aa>
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d00c      	beq.n	8008a74 <USBD_StdEPReq+0x44>
 8008a5a:	2b20      	cmp	r3, #32
 8008a5c:	f040 813d 	bne.w	8008cda <USBD_StdEPReq+0x2aa>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008a66:	689b      	ldr	r3, [r3, #8]
 8008a68:	6839      	ldr	r1, [r7, #0]
 8008a6a:	6878      	ldr	r0, [r7, #4]
 8008a6c:	4798      	blx	r3
 8008a6e:	4603      	mov	r3, r0
 8008a70:	73fb      	strb	r3, [r7, #15]
    break;
 8008a72:	e137      	b.n	8008ce4 <USBD_StdEPReq+0x2b4>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8008a74:	683b      	ldr	r3, [r7, #0]
 8008a76:	785b      	ldrb	r3, [r3, #1]
 8008a78:	2b03      	cmp	r3, #3
 8008a7a:	d007      	beq.n	8008a8c <USBD_StdEPReq+0x5c>
 8008a7c:	2b03      	cmp	r3, #3
 8008a7e:	f300 8126 	bgt.w	8008cce <USBD_StdEPReq+0x29e>
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d07d      	beq.n	8008b82 <USBD_StdEPReq+0x152>
 8008a86:	2b01      	cmp	r3, #1
 8008a88:	d03b      	beq.n	8008b02 <USBD_StdEPReq+0xd2>
 8008a8a:	e120      	b.n	8008cce <USBD_StdEPReq+0x29e>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008a92:	2b02      	cmp	r3, #2
 8008a94:	d002      	beq.n	8008a9c <USBD_StdEPReq+0x6c>
 8008a96:	2b03      	cmp	r3, #3
 8008a98:	d016      	beq.n	8008ac8 <USBD_StdEPReq+0x98>
 8008a9a:	e02c      	b.n	8008af6 <USBD_StdEPReq+0xc6>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008a9c:	7bbb      	ldrb	r3, [r7, #14]
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d00d      	beq.n	8008abe <USBD_StdEPReq+0x8e>
 8008aa2:	7bbb      	ldrb	r3, [r7, #14]
 8008aa4:	2b80      	cmp	r3, #128	@ 0x80
 8008aa6:	d00a      	beq.n	8008abe <USBD_StdEPReq+0x8e>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8008aa8:	7bbb      	ldrb	r3, [r7, #14]
 8008aaa:	4619      	mov	r1, r3
 8008aac:	6878      	ldr	r0, [r7, #4]
 8008aae:	f001 f8e9 	bl	8009c84 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008ab2:	2180      	movs	r1, #128	@ 0x80
 8008ab4:	6878      	ldr	r0, [r7, #4]
 8008ab6:	f001 f8e5 	bl	8009c84 <USBD_LL_StallEP>
 8008aba:	bf00      	nop
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8008abc:	e020      	b.n	8008b00 <USBD_StdEPReq+0xd0>
          USBD_CtlError(pdev, req);
 8008abe:	6839      	ldr	r1, [r7, #0]
 8008ac0:	6878      	ldr	r0, [r7, #4]
 8008ac2:	f000 fc68 	bl	8009396 <USBD_CtlError>
        break;
 8008ac6:	e01b      	b.n	8008b00 <USBD_StdEPReq+0xd0>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8008ac8:	683b      	ldr	r3, [r7, #0]
 8008aca:	885b      	ldrh	r3, [r3, #2]
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d10e      	bne.n	8008aee <USBD_StdEPReq+0xbe>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008ad0:	7bbb      	ldrb	r3, [r7, #14]
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d00b      	beq.n	8008aee <USBD_StdEPReq+0xbe>
 8008ad6:	7bbb      	ldrb	r3, [r7, #14]
 8008ad8:	2b80      	cmp	r3, #128	@ 0x80
 8008ada:	d008      	beq.n	8008aee <USBD_StdEPReq+0xbe>
 8008adc:	683b      	ldr	r3, [r7, #0]
 8008ade:	88db      	ldrh	r3, [r3, #6]
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d104      	bne.n	8008aee <USBD_StdEPReq+0xbe>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 8008ae4:	7bbb      	ldrb	r3, [r7, #14]
 8008ae6:	4619      	mov	r1, r3
 8008ae8:	6878      	ldr	r0, [r7, #4]
 8008aea:	f001 f8cb 	bl	8009c84 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 8008aee:	6878      	ldr	r0, [r7, #4]
 8008af0:	f000 fcff 	bl	80094f2 <USBD_CtlSendStatus>

        break;
 8008af4:	e004      	b.n	8008b00 <USBD_StdEPReq+0xd0>

      default:
        USBD_CtlError(pdev, req);
 8008af6:	6839      	ldr	r1, [r7, #0]
 8008af8:	6878      	ldr	r0, [r7, #4]
 8008afa:	f000 fc4c 	bl	8009396 <USBD_CtlError>
        break;
 8008afe:	bf00      	nop
      }
      break;
 8008b00:	e0ea      	b.n	8008cd8 <USBD_StdEPReq+0x2a8>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008b08:	2b02      	cmp	r3, #2
 8008b0a:	d002      	beq.n	8008b12 <USBD_StdEPReq+0xe2>
 8008b0c:	2b03      	cmp	r3, #3
 8008b0e:	d016      	beq.n	8008b3e <USBD_StdEPReq+0x10e>
 8008b10:	e030      	b.n	8008b74 <USBD_StdEPReq+0x144>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008b12:	7bbb      	ldrb	r3, [r7, #14]
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d00d      	beq.n	8008b34 <USBD_StdEPReq+0x104>
 8008b18:	7bbb      	ldrb	r3, [r7, #14]
 8008b1a:	2b80      	cmp	r3, #128	@ 0x80
 8008b1c:	d00a      	beq.n	8008b34 <USBD_StdEPReq+0x104>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8008b1e:	7bbb      	ldrb	r3, [r7, #14]
 8008b20:	4619      	mov	r1, r3
 8008b22:	6878      	ldr	r0, [r7, #4]
 8008b24:	f001 f8ae 	bl	8009c84 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008b28:	2180      	movs	r1, #128	@ 0x80
 8008b2a:	6878      	ldr	r0, [r7, #4]
 8008b2c:	f001 f8aa 	bl	8009c84 <USBD_LL_StallEP>
 8008b30:	bf00      	nop
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8008b32:	e025      	b.n	8008b80 <USBD_StdEPReq+0x150>
          USBD_CtlError(pdev, req);
 8008b34:	6839      	ldr	r1, [r7, #0]
 8008b36:	6878      	ldr	r0, [r7, #4]
 8008b38:	f000 fc2d 	bl	8009396 <USBD_CtlError>
        break;
 8008b3c:	e020      	b.n	8008b80 <USBD_StdEPReq+0x150>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8008b3e:	683b      	ldr	r3, [r7, #0]
 8008b40:	885b      	ldrh	r3, [r3, #2]
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d11b      	bne.n	8008b7e <USBD_StdEPReq+0x14e>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8008b46:	7bbb      	ldrb	r3, [r7, #14]
 8008b48:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d004      	beq.n	8008b5a <USBD_StdEPReq+0x12a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8008b50:	7bbb      	ldrb	r3, [r7, #14]
 8008b52:	4619      	mov	r1, r3
 8008b54:	6878      	ldr	r0, [r7, #4]
 8008b56:	f001 f8cb 	bl	8009cf0 <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 8008b5a:	6878      	ldr	r0, [r7, #4]
 8008b5c:	f000 fcc9 	bl	80094f2 <USBD_CtlSendStatus>
          ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008b66:	689b      	ldr	r3, [r3, #8]
 8008b68:	6839      	ldr	r1, [r7, #0]
 8008b6a:	6878      	ldr	r0, [r7, #4]
 8008b6c:	4798      	blx	r3
 8008b6e:	4603      	mov	r3, r0
 8008b70:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008b72:	e004      	b.n	8008b7e <USBD_StdEPReq+0x14e>

      default:
        USBD_CtlError(pdev, req);
 8008b74:	6839      	ldr	r1, [r7, #0]
 8008b76:	6878      	ldr	r0, [r7, #4]
 8008b78:	f000 fc0d 	bl	8009396 <USBD_CtlError>
        break;
 8008b7c:	e000      	b.n	8008b80 <USBD_StdEPReq+0x150>
        break;
 8008b7e:	bf00      	nop
      }
      break;
 8008b80:	e0aa      	b.n	8008cd8 <USBD_StdEPReq+0x2a8>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008b88:	2b02      	cmp	r3, #2
 8008b8a:	d002      	beq.n	8008b92 <USBD_StdEPReq+0x162>
 8008b8c:	2b03      	cmp	r3, #3
 8008b8e:	d032      	beq.n	8008bf6 <USBD_StdEPReq+0x1c6>
 8008b90:	e097      	b.n	8008cc2 <USBD_StdEPReq+0x292>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008b92:	7bbb      	ldrb	r3, [r7, #14]
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d007      	beq.n	8008ba8 <USBD_StdEPReq+0x178>
 8008b98:	7bbb      	ldrb	r3, [r7, #14]
 8008b9a:	2b80      	cmp	r3, #128	@ 0x80
 8008b9c:	d004      	beq.n	8008ba8 <USBD_StdEPReq+0x178>
        {
          USBD_CtlError(pdev, req);
 8008b9e:	6839      	ldr	r1, [r7, #0]
 8008ba0:	6878      	ldr	r0, [r7, #4]
 8008ba2:	f000 fbf8 	bl	8009396 <USBD_CtlError>
          break;
 8008ba6:	e091      	b.n	8008ccc <USBD_StdEPReq+0x29c>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008ba8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	da0b      	bge.n	8008bc8 <USBD_StdEPReq+0x198>
 8008bb0:	7bbb      	ldrb	r3, [r7, #14]
 8008bb2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008bb6:	4613      	mov	r3, r2
 8008bb8:	009b      	lsls	r3, r3, #2
 8008bba:	4413      	add	r3, r2
 8008bbc:	009b      	lsls	r3, r3, #2
 8008bbe:	3310      	adds	r3, #16
 8008bc0:	687a      	ldr	r2, [r7, #4]
 8008bc2:	4413      	add	r3, r2
 8008bc4:	3304      	adds	r3, #4
 8008bc6:	e00b      	b.n	8008be0 <USBD_StdEPReq+0x1b0>
              &pdev->ep_out[ep_addr & 0x7FU];
 8008bc8:	7bbb      	ldrb	r3, [r7, #14]
 8008bca:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008bce:	4613      	mov	r3, r2
 8008bd0:	009b      	lsls	r3, r3, #2
 8008bd2:	4413      	add	r3, r2
 8008bd4:	009b      	lsls	r3, r3, #2
 8008bd6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008bda:	687a      	ldr	r2, [r7, #4]
 8008bdc:	4413      	add	r3, r2
 8008bde:	3304      	adds	r3, #4
 8008be0:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 8008be2:	68bb      	ldr	r3, [r7, #8]
 8008be4:	2200      	movs	r2, #0
 8008be6:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008be8:	68bb      	ldr	r3, [r7, #8]
 8008bea:	2202      	movs	r2, #2
 8008bec:	4619      	mov	r1, r3
 8008bee:	6878      	ldr	r0, [r7, #4]
 8008bf0:	f000 fc42 	bl	8009478 <USBD_CtlSendData>
        break;
 8008bf4:	e06a      	b.n	8008ccc <USBD_StdEPReq+0x29c>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 8008bf6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	da11      	bge.n	8008c22 <USBD_StdEPReq+0x1f2>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008bfe:	7bbb      	ldrb	r3, [r7, #14]
 8008c00:	f003 020f 	and.w	r2, r3, #15
 8008c04:	6879      	ldr	r1, [r7, #4]
 8008c06:	4613      	mov	r3, r2
 8008c08:	009b      	lsls	r3, r3, #2
 8008c0a:	4413      	add	r3, r2
 8008c0c:	009b      	lsls	r3, r3, #2
 8008c0e:	440b      	add	r3, r1
 8008c10:	3324      	adds	r3, #36	@ 0x24
 8008c12:	881b      	ldrh	r3, [r3, #0]
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d117      	bne.n	8008c48 <USBD_StdEPReq+0x218>
          {
            USBD_CtlError(pdev, req);
 8008c18:	6839      	ldr	r1, [r7, #0]
 8008c1a:	6878      	ldr	r0, [r7, #4]
 8008c1c:	f000 fbbb 	bl	8009396 <USBD_CtlError>
            break;
 8008c20:	e054      	b.n	8008ccc <USBD_StdEPReq+0x29c>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008c22:	7bbb      	ldrb	r3, [r7, #14]
 8008c24:	f003 020f 	and.w	r2, r3, #15
 8008c28:	6879      	ldr	r1, [r7, #4]
 8008c2a:	4613      	mov	r3, r2
 8008c2c:	009b      	lsls	r3, r3, #2
 8008c2e:	4413      	add	r3, r2
 8008c30:	009b      	lsls	r3, r3, #2
 8008c32:	440b      	add	r3, r1
 8008c34:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8008c38:	881b      	ldrh	r3, [r3, #0]
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d104      	bne.n	8008c48 <USBD_StdEPReq+0x218>
          {
            USBD_CtlError(pdev, req);
 8008c3e:	6839      	ldr	r1, [r7, #0]
 8008c40:	6878      	ldr	r0, [r7, #4]
 8008c42:	f000 fba8 	bl	8009396 <USBD_CtlError>
            break;
 8008c46:	e041      	b.n	8008ccc <USBD_StdEPReq+0x29c>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008c48:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	da0b      	bge.n	8008c68 <USBD_StdEPReq+0x238>
 8008c50:	7bbb      	ldrb	r3, [r7, #14]
 8008c52:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008c56:	4613      	mov	r3, r2
 8008c58:	009b      	lsls	r3, r3, #2
 8008c5a:	4413      	add	r3, r2
 8008c5c:	009b      	lsls	r3, r3, #2
 8008c5e:	3310      	adds	r3, #16
 8008c60:	687a      	ldr	r2, [r7, #4]
 8008c62:	4413      	add	r3, r2
 8008c64:	3304      	adds	r3, #4
 8008c66:	e00b      	b.n	8008c80 <USBD_StdEPReq+0x250>
              &pdev->ep_out[ep_addr & 0x7FU];
 8008c68:	7bbb      	ldrb	r3, [r7, #14]
 8008c6a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008c6e:	4613      	mov	r3, r2
 8008c70:	009b      	lsls	r3, r3, #2
 8008c72:	4413      	add	r3, r2
 8008c74:	009b      	lsls	r3, r3, #2
 8008c76:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008c7a:	687a      	ldr	r2, [r7, #4]
 8008c7c:	4413      	add	r3, r2
 8008c7e:	3304      	adds	r3, #4
 8008c80:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008c82:	7bbb      	ldrb	r3, [r7, #14]
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d002      	beq.n	8008c8e <USBD_StdEPReq+0x25e>
 8008c88:	7bbb      	ldrb	r3, [r7, #14]
 8008c8a:	2b80      	cmp	r3, #128	@ 0x80
 8008c8c:	d103      	bne.n	8008c96 <USBD_StdEPReq+0x266>
          {
            pep->status = 0x0000U;
 8008c8e:	68bb      	ldr	r3, [r7, #8]
 8008c90:	2200      	movs	r2, #0
 8008c92:	601a      	str	r2, [r3, #0]
 8008c94:	e00e      	b.n	8008cb4 <USBD_StdEPReq+0x284>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008c96:	7bbb      	ldrb	r3, [r7, #14]
 8008c98:	4619      	mov	r1, r3
 8008c9a:	6878      	ldr	r0, [r7, #4]
 8008c9c:	f001 f85e 	bl	8009d5c <USBD_LL_IsStallEP>
 8008ca0:	4603      	mov	r3, r0
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d003      	beq.n	8008cae <USBD_StdEPReq+0x27e>
          {
            pep->status = 0x0001U;
 8008ca6:	68bb      	ldr	r3, [r7, #8]
 8008ca8:	2201      	movs	r2, #1
 8008caa:	601a      	str	r2, [r3, #0]
 8008cac:	e002      	b.n	8008cb4 <USBD_StdEPReq+0x284>
          }
          else
          {
            pep->status = 0x0000U;
 8008cae:	68bb      	ldr	r3, [r7, #8]
 8008cb0:	2200      	movs	r2, #0
 8008cb2:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008cb4:	68bb      	ldr	r3, [r7, #8]
 8008cb6:	2202      	movs	r2, #2
 8008cb8:	4619      	mov	r1, r3
 8008cba:	6878      	ldr	r0, [r7, #4]
 8008cbc:	f000 fbdc 	bl	8009478 <USBD_CtlSendData>
          break;
 8008cc0:	e004      	b.n	8008ccc <USBD_StdEPReq+0x29c>

      default:
        USBD_CtlError(pdev, req);
 8008cc2:	6839      	ldr	r1, [r7, #0]
 8008cc4:	6878      	ldr	r0, [r7, #4]
 8008cc6:	f000 fb66 	bl	8009396 <USBD_CtlError>
        break;
 8008cca:	bf00      	nop
      }
      break;
 8008ccc:	e004      	b.n	8008cd8 <USBD_StdEPReq+0x2a8>

    default:
      USBD_CtlError(pdev, req);
 8008cce:	6839      	ldr	r1, [r7, #0]
 8008cd0:	6878      	ldr	r0, [r7, #4]
 8008cd2:	f000 fb60 	bl	8009396 <USBD_CtlError>
      break;
 8008cd6:	bf00      	nop
    }
    break;
 8008cd8:	e004      	b.n	8008ce4 <USBD_StdEPReq+0x2b4>

  default:
    USBD_CtlError(pdev, req);
 8008cda:	6839      	ldr	r1, [r7, #0]
 8008cdc:	6878      	ldr	r0, [r7, #4]
 8008cde:	f000 fb5a 	bl	8009396 <USBD_CtlError>
    break;
 8008ce2:	bf00      	nop
  }

  return ret;
 8008ce4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ce6:	4618      	mov	r0, r3
 8008ce8:	3710      	adds	r7, #16
 8008cea:	46bd      	mov	sp, r7
 8008cec:	bd80      	pop	{r7, pc}
	...

08008cf0 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008cf0:	b580      	push	{r7, lr}
 8008cf2:	b084      	sub	sp, #16
 8008cf4:	af00      	add	r7, sp, #0
 8008cf6:	6078      	str	r0, [r7, #4]
 8008cf8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008cfa:	2300      	movs	r3, #0
 8008cfc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008cfe:	2300      	movs	r3, #0
 8008d00:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008d02:	2300      	movs	r3, #0
 8008d04:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008d06:	683b      	ldr	r3, [r7, #0]
 8008d08:	885b      	ldrh	r3, [r3, #2]
 8008d0a:	0a1b      	lsrs	r3, r3, #8
 8008d0c:	b29b      	uxth	r3, r3
 8008d0e:	3b01      	subs	r3, #1
 8008d10:	2b0e      	cmp	r3, #14
 8008d12:	f200 8152 	bhi.w	8008fba <USBD_GetDescriptor+0x2ca>
 8008d16:	a201      	add	r2, pc, #4	@ (adr r2, 8008d1c <USBD_GetDescriptor+0x2c>)
 8008d18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d1c:	08008d8d 	.word	0x08008d8d
 8008d20:	08008da5 	.word	0x08008da5
 8008d24:	08008de5 	.word	0x08008de5
 8008d28:	08008fbb 	.word	0x08008fbb
 8008d2c:	08008fbb 	.word	0x08008fbb
 8008d30:	08008f5b 	.word	0x08008f5b
 8008d34:	08008f87 	.word	0x08008f87
 8008d38:	08008fbb 	.word	0x08008fbb
 8008d3c:	08008fbb 	.word	0x08008fbb
 8008d40:	08008fbb 	.word	0x08008fbb
 8008d44:	08008fbb 	.word	0x08008fbb
 8008d48:	08008fbb 	.word	0x08008fbb
 8008d4c:	08008fbb 	.word	0x08008fbb
 8008d50:	08008fbb 	.word	0x08008fbb
 8008d54:	08008d59 	.word	0x08008d59
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
  case USB_DESC_TYPE_BOS:
    if (pdev->pDesc->GetBOSDescriptor != NULL)
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008d5e:	69db      	ldr	r3, [r3, #28]
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d00b      	beq.n	8008d7c <USBD_GetDescriptor+0x8c>
    {
      pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008d6a:	69db      	ldr	r3, [r3, #28]
 8008d6c:	687a      	ldr	r2, [r7, #4]
 8008d6e:	7c12      	ldrb	r2, [r2, #16]
 8008d70:	f107 0108 	add.w	r1, r7, #8
 8008d74:	4610      	mov	r0, r2
 8008d76:	4798      	blx	r3
 8008d78:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8008d7a:	e126      	b.n	8008fca <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 8008d7c:	6839      	ldr	r1, [r7, #0]
 8008d7e:	6878      	ldr	r0, [r7, #4]
 8008d80:	f000 fb09 	bl	8009396 <USBD_CtlError>
      err++;
 8008d84:	7afb      	ldrb	r3, [r7, #11]
 8008d86:	3301      	adds	r3, #1
 8008d88:	72fb      	strb	r3, [r7, #11]
    break;
 8008d8a:	e11e      	b.n	8008fca <USBD_GetDescriptor+0x2da>
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	687a      	ldr	r2, [r7, #4]
 8008d96:	7c12      	ldrb	r2, [r2, #16]
 8008d98:	f107 0108 	add.w	r1, r7, #8
 8008d9c:	4610      	mov	r0, r2
 8008d9e:	4798      	blx	r3
 8008da0:	60f8      	str	r0, [r7, #12]
    break;
 8008da2:	e112      	b.n	8008fca <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	7c1b      	ldrb	r3, [r3, #16]
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d10d      	bne.n	8008dc8 <USBD_GetDescriptor+0xd8>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008db2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008db4:	f107 0208 	add.w	r2, r7, #8
 8008db8:	4610      	mov	r0, r2
 8008dba:	4798      	blx	r3
 8008dbc:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	3301      	adds	r3, #1
 8008dc2:	2202      	movs	r2, #2
 8008dc4:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8008dc6:	e100      	b.n	8008fca <USBD_GetDescriptor+0x2da>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008dce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008dd0:	f107 0208 	add.w	r2, r7, #8
 8008dd4:	4610      	mov	r0, r2
 8008dd6:	4798      	blx	r3
 8008dd8:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	3301      	adds	r3, #1
 8008dde:	2202      	movs	r2, #2
 8008de0:	701a      	strb	r2, [r3, #0]
    break;
 8008de2:	e0f2      	b.n	8008fca <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8008de4:	683b      	ldr	r3, [r7, #0]
 8008de6:	885b      	ldrh	r3, [r3, #2]
 8008de8:	b2db      	uxtb	r3, r3
 8008dea:	2b05      	cmp	r3, #5
 8008dec:	f200 80ac 	bhi.w	8008f48 <USBD_GetDescriptor+0x258>
 8008df0:	a201      	add	r2, pc, #4	@ (adr r2, 8008df8 <USBD_GetDescriptor+0x108>)
 8008df2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008df6:	bf00      	nop
 8008df8:	08008e11 	.word	0x08008e11
 8008dfc:	08008e45 	.word	0x08008e45
 8008e00:	08008e79 	.word	0x08008e79
 8008e04:	08008ead 	.word	0x08008ead
 8008e08:	08008ee1 	.word	0x08008ee1
 8008e0c:	08008f15 	.word	0x08008f15
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008e16:	685b      	ldr	r3, [r3, #4]
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d00b      	beq.n	8008e34 <USBD_GetDescriptor+0x144>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008e22:	685b      	ldr	r3, [r3, #4]
 8008e24:	687a      	ldr	r2, [r7, #4]
 8008e26:	7c12      	ldrb	r2, [r2, #16]
 8008e28:	f107 0108 	add.w	r1, r7, #8
 8008e2c:	4610      	mov	r0, r2
 8008e2e:	4798      	blx	r3
 8008e30:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008e32:	e091      	b.n	8008f58 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8008e34:	6839      	ldr	r1, [r7, #0]
 8008e36:	6878      	ldr	r0, [r7, #4]
 8008e38:	f000 faad 	bl	8009396 <USBD_CtlError>
        err++;
 8008e3c:	7afb      	ldrb	r3, [r7, #11]
 8008e3e:	3301      	adds	r3, #1
 8008e40:	72fb      	strb	r3, [r7, #11]
      break;
 8008e42:	e089      	b.n	8008f58 <USBD_GetDescriptor+0x268>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008e4a:	689b      	ldr	r3, [r3, #8]
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d00b      	beq.n	8008e68 <USBD_GetDescriptor+0x178>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008e56:	689b      	ldr	r3, [r3, #8]
 8008e58:	687a      	ldr	r2, [r7, #4]
 8008e5a:	7c12      	ldrb	r2, [r2, #16]
 8008e5c:	f107 0108 	add.w	r1, r7, #8
 8008e60:	4610      	mov	r0, r2
 8008e62:	4798      	blx	r3
 8008e64:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008e66:	e077      	b.n	8008f58 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8008e68:	6839      	ldr	r1, [r7, #0]
 8008e6a:	6878      	ldr	r0, [r7, #4]
 8008e6c:	f000 fa93 	bl	8009396 <USBD_CtlError>
        err++;
 8008e70:	7afb      	ldrb	r3, [r7, #11]
 8008e72:	3301      	adds	r3, #1
 8008e74:	72fb      	strb	r3, [r7, #11]
      break;
 8008e76:	e06f      	b.n	8008f58 <USBD_GetDescriptor+0x268>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008e7e:	68db      	ldr	r3, [r3, #12]
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d00b      	beq.n	8008e9c <USBD_GetDescriptor+0x1ac>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008e8a:	68db      	ldr	r3, [r3, #12]
 8008e8c:	687a      	ldr	r2, [r7, #4]
 8008e8e:	7c12      	ldrb	r2, [r2, #16]
 8008e90:	f107 0108 	add.w	r1, r7, #8
 8008e94:	4610      	mov	r0, r2
 8008e96:	4798      	blx	r3
 8008e98:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008e9a:	e05d      	b.n	8008f58 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8008e9c:	6839      	ldr	r1, [r7, #0]
 8008e9e:	6878      	ldr	r0, [r7, #4]
 8008ea0:	f000 fa79 	bl	8009396 <USBD_CtlError>
        err++;
 8008ea4:	7afb      	ldrb	r3, [r7, #11]
 8008ea6:	3301      	adds	r3, #1
 8008ea8:	72fb      	strb	r3, [r7, #11]
      break;
 8008eaa:	e055      	b.n	8008f58 <USBD_GetDescriptor+0x268>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008eb2:	691b      	ldr	r3, [r3, #16]
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d00b      	beq.n	8008ed0 <USBD_GetDescriptor+0x1e0>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008ebe:	691b      	ldr	r3, [r3, #16]
 8008ec0:	687a      	ldr	r2, [r7, #4]
 8008ec2:	7c12      	ldrb	r2, [r2, #16]
 8008ec4:	f107 0108 	add.w	r1, r7, #8
 8008ec8:	4610      	mov	r0, r2
 8008eca:	4798      	blx	r3
 8008ecc:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008ece:	e043      	b.n	8008f58 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8008ed0:	6839      	ldr	r1, [r7, #0]
 8008ed2:	6878      	ldr	r0, [r7, #4]
 8008ed4:	f000 fa5f 	bl	8009396 <USBD_CtlError>
        err++;
 8008ed8:	7afb      	ldrb	r3, [r7, #11]
 8008eda:	3301      	adds	r3, #1
 8008edc:	72fb      	strb	r3, [r7, #11]
      break;
 8008ede:	e03b      	b.n	8008f58 <USBD_GetDescriptor+0x268>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008ee6:	695b      	ldr	r3, [r3, #20]
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d00b      	beq.n	8008f04 <USBD_GetDescriptor+0x214>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008ef2:	695b      	ldr	r3, [r3, #20]
 8008ef4:	687a      	ldr	r2, [r7, #4]
 8008ef6:	7c12      	ldrb	r2, [r2, #16]
 8008ef8:	f107 0108 	add.w	r1, r7, #8
 8008efc:	4610      	mov	r0, r2
 8008efe:	4798      	blx	r3
 8008f00:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008f02:	e029      	b.n	8008f58 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8008f04:	6839      	ldr	r1, [r7, #0]
 8008f06:	6878      	ldr	r0, [r7, #4]
 8008f08:	f000 fa45 	bl	8009396 <USBD_CtlError>
        err++;
 8008f0c:	7afb      	ldrb	r3, [r7, #11]
 8008f0e:	3301      	adds	r3, #1
 8008f10:	72fb      	strb	r3, [r7, #11]
      break;
 8008f12:	e021      	b.n	8008f58 <USBD_GetDescriptor+0x268>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008f1a:	699b      	ldr	r3, [r3, #24]
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d00b      	beq.n	8008f38 <USBD_GetDescriptor+0x248>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008f26:	699b      	ldr	r3, [r3, #24]
 8008f28:	687a      	ldr	r2, [r7, #4]
 8008f2a:	7c12      	ldrb	r2, [r2, #16]
 8008f2c:	f107 0108 	add.w	r1, r7, #8
 8008f30:	4610      	mov	r0, r2
 8008f32:	4798      	blx	r3
 8008f34:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008f36:	e00f      	b.n	8008f58 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8008f38:	6839      	ldr	r1, [r7, #0]
 8008f3a:	6878      	ldr	r0, [r7, #4]
 8008f3c:	f000 fa2b 	bl	8009396 <USBD_CtlError>
        err++;
 8008f40:	7afb      	ldrb	r3, [r7, #11]
 8008f42:	3301      	adds	r3, #1
 8008f44:	72fb      	strb	r3, [r7, #11]
      break;
 8008f46:	e007      	b.n	8008f58 <USBD_GetDescriptor+0x268>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 8008f48:	6839      	ldr	r1, [r7, #0]
 8008f4a:	6878      	ldr	r0, [r7, #4]
 8008f4c:	f000 fa23 	bl	8009396 <USBD_CtlError>
      err++;
 8008f50:	7afb      	ldrb	r3, [r7, #11]
 8008f52:	3301      	adds	r3, #1
 8008f54:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 8008f56:	bf00      	nop
    }
    break;
 8008f58:	e037      	b.n	8008fca <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	7c1b      	ldrb	r3, [r3, #16]
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d109      	bne.n	8008f76 <USBD_GetDescriptor+0x286>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008f68:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008f6a:	f107 0208 	add.w	r2, r7, #8
 8008f6e:	4610      	mov	r0, r2
 8008f70:	4798      	blx	r3
 8008f72:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8008f74:	e029      	b.n	8008fca <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 8008f76:	6839      	ldr	r1, [r7, #0]
 8008f78:	6878      	ldr	r0, [r7, #4]
 8008f7a:	f000 fa0c 	bl	8009396 <USBD_CtlError>
      err++;
 8008f7e:	7afb      	ldrb	r3, [r7, #11]
 8008f80:	3301      	adds	r3, #1
 8008f82:	72fb      	strb	r3, [r7, #11]
    break;
 8008f84:	e021      	b.n	8008fca <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	7c1b      	ldrb	r3, [r3, #16]
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d10d      	bne.n	8008faa <USBD_GetDescriptor+0x2ba>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008f94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008f96:	f107 0208 	add.w	r2, r7, #8
 8008f9a:	4610      	mov	r0, r2
 8008f9c:	4798      	blx	r3
 8008f9e:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	3301      	adds	r3, #1
 8008fa4:	2207      	movs	r2, #7
 8008fa6:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8008fa8:	e00f      	b.n	8008fca <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 8008faa:	6839      	ldr	r1, [r7, #0]
 8008fac:	6878      	ldr	r0, [r7, #4]
 8008fae:	f000 f9f2 	bl	8009396 <USBD_CtlError>
      err++;
 8008fb2:	7afb      	ldrb	r3, [r7, #11]
 8008fb4:	3301      	adds	r3, #1
 8008fb6:	72fb      	strb	r3, [r7, #11]
    break;
 8008fb8:	e007      	b.n	8008fca <USBD_GetDescriptor+0x2da>

  default:
    USBD_CtlError(pdev, req);
 8008fba:	6839      	ldr	r1, [r7, #0]
 8008fbc:	6878      	ldr	r0, [r7, #4]
 8008fbe:	f000 f9ea 	bl	8009396 <USBD_CtlError>
    err++;
 8008fc2:	7afb      	ldrb	r3, [r7, #11]
 8008fc4:	3301      	adds	r3, #1
 8008fc6:	72fb      	strb	r3, [r7, #11]
    break;
 8008fc8:	bf00      	nop
  }

  if (err != 0U)
 8008fca:	7afb      	ldrb	r3, [r7, #11]
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d11e      	bne.n	800900e <USBD_GetDescriptor+0x31e>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 8008fd0:	683b      	ldr	r3, [r7, #0]
 8008fd2:	88db      	ldrh	r3, [r3, #6]
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d016      	beq.n	8009006 <USBD_GetDescriptor+0x316>
    {
      if (len != 0U)
 8008fd8:	893b      	ldrh	r3, [r7, #8]
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d00e      	beq.n	8008ffc <USBD_GetDescriptor+0x30c>
      {
        len = MIN(len, req->wLength);
 8008fde:	683b      	ldr	r3, [r7, #0]
 8008fe0:	88da      	ldrh	r2, [r3, #6]
 8008fe2:	893b      	ldrh	r3, [r7, #8]
 8008fe4:	4293      	cmp	r3, r2
 8008fe6:	bf28      	it	cs
 8008fe8:	4613      	movcs	r3, r2
 8008fea:	b29b      	uxth	r3, r3
 8008fec:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 8008fee:	893b      	ldrh	r3, [r7, #8]
 8008ff0:	461a      	mov	r2, r3
 8008ff2:	68f9      	ldr	r1, [r7, #12]
 8008ff4:	6878      	ldr	r0, [r7, #4]
 8008ff6:	f000 fa3f 	bl	8009478 <USBD_CtlSendData>
 8008ffa:	e009      	b.n	8009010 <USBD_GetDescriptor+0x320>
      }
      else
      {
        USBD_CtlError(pdev, req);
 8008ffc:	6839      	ldr	r1, [r7, #0]
 8008ffe:	6878      	ldr	r0, [r7, #4]
 8009000:	f000 f9c9 	bl	8009396 <USBD_CtlError>
 8009004:	e004      	b.n	8009010 <USBD_GetDescriptor+0x320>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 8009006:	6878      	ldr	r0, [r7, #4]
 8009008:	f000 fa73 	bl	80094f2 <USBD_CtlSendStatus>
 800900c:	e000      	b.n	8009010 <USBD_GetDescriptor+0x320>
    return;
 800900e:	bf00      	nop
    }
  }
}
 8009010:	3710      	adds	r7, #16
 8009012:	46bd      	mov	sp, r7
 8009014:	bd80      	pop	{r7, pc}
 8009016:	bf00      	nop

08009018 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009018:	b580      	push	{r7, lr}
 800901a:	b084      	sub	sp, #16
 800901c:	af00      	add	r7, sp, #0
 800901e:	6078      	str	r0, [r7, #4]
 8009020:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009022:	683b      	ldr	r3, [r7, #0]
 8009024:	889b      	ldrh	r3, [r3, #4]
 8009026:	2b00      	cmp	r3, #0
 8009028:	d130      	bne.n	800908c <USBD_SetAddress+0x74>
 800902a:	683b      	ldr	r3, [r7, #0]
 800902c:	88db      	ldrh	r3, [r3, #6]
 800902e:	2b00      	cmp	r3, #0
 8009030:	d12c      	bne.n	800908c <USBD_SetAddress+0x74>
 8009032:	683b      	ldr	r3, [r7, #0]
 8009034:	885b      	ldrh	r3, [r3, #2]
 8009036:	2b7f      	cmp	r3, #127	@ 0x7f
 8009038:	d828      	bhi.n	800908c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800903a:	683b      	ldr	r3, [r7, #0]
 800903c:	885b      	ldrh	r3, [r3, #2]
 800903e:	b2db      	uxtb	r3, r3
 8009040:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009044:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800904c:	2b03      	cmp	r3, #3
 800904e:	d104      	bne.n	800905a <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8009050:	6839      	ldr	r1, [r7, #0]
 8009052:	6878      	ldr	r0, [r7, #4]
 8009054:	f000 f99f 	bl	8009396 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009058:	e01d      	b.n	8009096 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	7bfa      	ldrb	r2, [r7, #15]
 800905e:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009062:	7bfb      	ldrb	r3, [r7, #15]
 8009064:	4619      	mov	r1, r3
 8009066:	6878      	ldr	r0, [r7, #4]
 8009068:	f000 fea4 	bl	8009db4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800906c:	6878      	ldr	r0, [r7, #4]
 800906e:	f000 fa40 	bl	80094f2 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009072:	7bfb      	ldrb	r3, [r7, #15]
 8009074:	2b00      	cmp	r3, #0
 8009076:	d004      	beq.n	8009082 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	2202      	movs	r2, #2
 800907c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009080:	e009      	b.n	8009096 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	2201      	movs	r2, #1
 8009086:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800908a:	e004      	b.n	8009096 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800908c:	6839      	ldr	r1, [r7, #0]
 800908e:	6878      	ldr	r0, [r7, #4]
 8009090:	f000 f981 	bl	8009396 <USBD_CtlError>
  }
}
 8009094:	bf00      	nop
 8009096:	bf00      	nop
 8009098:	3710      	adds	r7, #16
 800909a:	46bd      	mov	sp, r7
 800909c:	bd80      	pop	{r7, pc}
	...

080090a0 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80090a0:	b580      	push	{r7, lr}
 80090a2:	b084      	sub	sp, #16
 80090a4:	af00      	add	r7, sp, #0
 80090a6:	6078      	str	r0, [r7, #4]
 80090a8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80090aa:	2300      	movs	r3, #0
 80090ac:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80090ae:	683b      	ldr	r3, [r7, #0]
 80090b0:	885b      	ldrh	r3, [r3, #2]
 80090b2:	b2da      	uxtb	r2, r3
 80090b4:	4b4b      	ldr	r3, [pc, #300]	@ (80091e4 <USBD_SetConfig+0x144>)
 80090b6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80090b8:	4b4a      	ldr	r3, [pc, #296]	@ (80091e4 <USBD_SetConfig+0x144>)
 80090ba:	781b      	ldrb	r3, [r3, #0]
 80090bc:	2b01      	cmp	r3, #1
 80090be:	d905      	bls.n	80090cc <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80090c0:	6839      	ldr	r1, [r7, #0]
 80090c2:	6878      	ldr	r0, [r7, #4]
 80090c4:	f000 f967 	bl	8009396 <USBD_CtlError>
    return USBD_FAIL;
 80090c8:	2303      	movs	r3, #3
 80090ca:	e087      	b.n	80091dc <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80090d2:	2b02      	cmp	r3, #2
 80090d4:	d002      	beq.n	80090dc <USBD_SetConfig+0x3c>
 80090d6:	2b03      	cmp	r3, #3
 80090d8:	d025      	beq.n	8009126 <USBD_SetConfig+0x86>
 80090da:	e071      	b.n	80091c0 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 80090dc:	4b41      	ldr	r3, [pc, #260]	@ (80091e4 <USBD_SetConfig+0x144>)
 80090de:	781b      	ldrb	r3, [r3, #0]
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d01c      	beq.n	800911e <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 80090e4:	4b3f      	ldr	r3, [pc, #252]	@ (80091e4 <USBD_SetConfig+0x144>)
 80090e6:	781b      	ldrb	r3, [r3, #0]
 80090e8:	461a      	mov	r2, r3
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 80090ee:	4b3d      	ldr	r3, [pc, #244]	@ (80091e4 <USBD_SetConfig+0x144>)
 80090f0:	781b      	ldrb	r3, [r3, #0]
 80090f2:	4619      	mov	r1, r3
 80090f4:	6878      	ldr	r0, [r7, #4]
 80090f6:	f7ff f96d 	bl	80083d4 <USBD_SetClassConfig>
 80090fa:	4603      	mov	r3, r0
 80090fc:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 80090fe:	7bfb      	ldrb	r3, [r7, #15]
 8009100:	2b00      	cmp	r3, #0
 8009102:	d004      	beq.n	800910e <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 8009104:	6839      	ldr	r1, [r7, #0]
 8009106:	6878      	ldr	r0, [r7, #4]
 8009108:	f000 f945 	bl	8009396 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800910c:	e065      	b.n	80091da <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800910e:	6878      	ldr	r0, [r7, #4]
 8009110:	f000 f9ef 	bl	80094f2 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	2203      	movs	r2, #3
 8009118:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    break;
 800911c:	e05d      	b.n	80091da <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800911e:	6878      	ldr	r0, [r7, #4]
 8009120:	f000 f9e7 	bl	80094f2 <USBD_CtlSendStatus>
    break;
 8009124:	e059      	b.n	80091da <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 8009126:	4b2f      	ldr	r3, [pc, #188]	@ (80091e4 <USBD_SetConfig+0x144>)
 8009128:	781b      	ldrb	r3, [r3, #0]
 800912a:	2b00      	cmp	r3, #0
 800912c:	d112      	bne.n	8009154 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	2202      	movs	r2, #2
 8009132:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      pdev->dev_config = cfgidx;
 8009136:	4b2b      	ldr	r3, [pc, #172]	@ (80091e4 <USBD_SetConfig+0x144>)
 8009138:	781b      	ldrb	r3, [r3, #0]
 800913a:	461a      	mov	r2, r3
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009140:	4b28      	ldr	r3, [pc, #160]	@ (80091e4 <USBD_SetConfig+0x144>)
 8009142:	781b      	ldrb	r3, [r3, #0]
 8009144:	4619      	mov	r1, r3
 8009146:	6878      	ldr	r0, [r7, #4]
 8009148:	f7ff f960 	bl	800840c <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 800914c:	6878      	ldr	r0, [r7, #4]
 800914e:	f000 f9d0 	bl	80094f2 <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8009152:	e042      	b.n	80091da <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 8009154:	4b23      	ldr	r3, [pc, #140]	@ (80091e4 <USBD_SetConfig+0x144>)
 8009156:	781b      	ldrb	r3, [r3, #0]
 8009158:	461a      	mov	r2, r3
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	685b      	ldr	r3, [r3, #4]
 800915e:	429a      	cmp	r2, r3
 8009160:	d02a      	beq.n	80091b8 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	685b      	ldr	r3, [r3, #4]
 8009166:	b2db      	uxtb	r3, r3
 8009168:	4619      	mov	r1, r3
 800916a:	6878      	ldr	r0, [r7, #4]
 800916c:	f7ff f94e 	bl	800840c <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 8009170:	4b1c      	ldr	r3, [pc, #112]	@ (80091e4 <USBD_SetConfig+0x144>)
 8009172:	781b      	ldrb	r3, [r3, #0]
 8009174:	461a      	mov	r2, r3
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 800917a:	4b1a      	ldr	r3, [pc, #104]	@ (80091e4 <USBD_SetConfig+0x144>)
 800917c:	781b      	ldrb	r3, [r3, #0]
 800917e:	4619      	mov	r1, r3
 8009180:	6878      	ldr	r0, [r7, #4]
 8009182:	f7ff f927 	bl	80083d4 <USBD_SetClassConfig>
 8009186:	4603      	mov	r3, r0
 8009188:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 800918a:	7bfb      	ldrb	r3, [r7, #15]
 800918c:	2b00      	cmp	r3, #0
 800918e:	d00f      	beq.n	80091b0 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 8009190:	6839      	ldr	r1, [r7, #0]
 8009192:	6878      	ldr	r0, [r7, #4]
 8009194:	f000 f8ff 	bl	8009396 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	685b      	ldr	r3, [r3, #4]
 800919c:	b2db      	uxtb	r3, r3
 800919e:	4619      	mov	r1, r3
 80091a0:	6878      	ldr	r0, [r7, #4]
 80091a2:	f7ff f933 	bl	800840c <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	2202      	movs	r2, #2
 80091aa:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    break;
 80091ae:	e014      	b.n	80091da <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 80091b0:	6878      	ldr	r0, [r7, #4]
 80091b2:	f000 f99e 	bl	80094f2 <USBD_CtlSendStatus>
    break;
 80091b6:	e010      	b.n	80091da <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 80091b8:	6878      	ldr	r0, [r7, #4]
 80091ba:	f000 f99a 	bl	80094f2 <USBD_CtlSendStatus>
    break;
 80091be:	e00c      	b.n	80091da <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 80091c0:	6839      	ldr	r1, [r7, #0]
 80091c2:	6878      	ldr	r0, [r7, #4]
 80091c4:	f000 f8e7 	bl	8009396 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 80091c8:	4b06      	ldr	r3, [pc, #24]	@ (80091e4 <USBD_SetConfig+0x144>)
 80091ca:	781b      	ldrb	r3, [r3, #0]
 80091cc:	4619      	mov	r1, r3
 80091ce:	6878      	ldr	r0, [r7, #4]
 80091d0:	f7ff f91c 	bl	800840c <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 80091d4:	2303      	movs	r3, #3
 80091d6:	73fb      	strb	r3, [r7, #15]
    break;
 80091d8:	bf00      	nop
  }

  return ret;
 80091da:	7bfb      	ldrb	r3, [r7, #15]
}
 80091dc:	4618      	mov	r0, r3
 80091de:	3710      	adds	r7, #16
 80091e0:	46bd      	mov	sp, r7
 80091e2:	bd80      	pop	{r7, pc}
 80091e4:	200005d4 	.word	0x200005d4

080091e8 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80091e8:	b580      	push	{r7, lr}
 80091ea:	b082      	sub	sp, #8
 80091ec:	af00      	add	r7, sp, #0
 80091ee:	6078      	str	r0, [r7, #4]
 80091f0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80091f2:	683b      	ldr	r3, [r7, #0]
 80091f4:	88db      	ldrh	r3, [r3, #6]
 80091f6:	2b01      	cmp	r3, #1
 80091f8:	d004      	beq.n	8009204 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80091fa:	6839      	ldr	r1, [r7, #0]
 80091fc:	6878      	ldr	r0, [r7, #4]
 80091fe:	f000 f8ca 	bl	8009396 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 8009202:	e022      	b.n	800924a <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800920a:	2b02      	cmp	r3, #2
 800920c:	dc02      	bgt.n	8009214 <USBD_GetConfig+0x2c>
 800920e:	2b00      	cmp	r3, #0
 8009210:	dc03      	bgt.n	800921a <USBD_GetConfig+0x32>
 8009212:	e015      	b.n	8009240 <USBD_GetConfig+0x58>
 8009214:	2b03      	cmp	r3, #3
 8009216:	d00b      	beq.n	8009230 <USBD_GetConfig+0x48>
 8009218:	e012      	b.n	8009240 <USBD_GetConfig+0x58>
      pdev->dev_default_config = 0U;
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	2200      	movs	r2, #0
 800921e:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	3308      	adds	r3, #8
 8009224:	2201      	movs	r2, #1
 8009226:	4619      	mov	r1, r3
 8009228:	6878      	ldr	r0, [r7, #4]
 800922a:	f000 f925 	bl	8009478 <USBD_CtlSendData>
      break;
 800922e:	e00c      	b.n	800924a <USBD_GetConfig+0x62>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	3304      	adds	r3, #4
 8009234:	2201      	movs	r2, #1
 8009236:	4619      	mov	r1, r3
 8009238:	6878      	ldr	r0, [r7, #4]
 800923a:	f000 f91d 	bl	8009478 <USBD_CtlSendData>
      break;
 800923e:	e004      	b.n	800924a <USBD_GetConfig+0x62>
      USBD_CtlError(pdev, req);
 8009240:	6839      	ldr	r1, [r7, #0]
 8009242:	6878      	ldr	r0, [r7, #4]
 8009244:	f000 f8a7 	bl	8009396 <USBD_CtlError>
      break;
 8009248:	bf00      	nop
}
 800924a:	bf00      	nop
 800924c:	3708      	adds	r7, #8
 800924e:	46bd      	mov	sp, r7
 8009250:	bd80      	pop	{r7, pc}

08009252 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009252:	b580      	push	{r7, lr}
 8009254:	b082      	sub	sp, #8
 8009256:	af00      	add	r7, sp, #0
 8009258:	6078      	str	r0, [r7, #4]
 800925a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009262:	3b01      	subs	r3, #1
 8009264:	2b02      	cmp	r3, #2
 8009266:	d81e      	bhi.n	80092a6 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 8009268:	683b      	ldr	r3, [r7, #0]
 800926a:	88db      	ldrh	r3, [r3, #6]
 800926c:	2b02      	cmp	r3, #2
 800926e:	d004      	beq.n	800927a <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 8009270:	6839      	ldr	r1, [r7, #0]
 8009272:	6878      	ldr	r0, [r7, #4]
 8009274:	f000 f88f 	bl	8009396 <USBD_CtlError>
      break;
 8009278:	e01a      	b.n	80092b0 <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	2201      	movs	r2, #1
 800927e:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8009286:	2b00      	cmp	r3, #0
 8009288:	d005      	beq.n	8009296 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	68db      	ldr	r3, [r3, #12]
 800928e:	f043 0202 	orr.w	r2, r3, #2
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	330c      	adds	r3, #12
 800929a:	2202      	movs	r2, #2
 800929c:	4619      	mov	r1, r3
 800929e:	6878      	ldr	r0, [r7, #4]
 80092a0:	f000 f8ea 	bl	8009478 <USBD_CtlSendData>
    break;
 80092a4:	e004      	b.n	80092b0 <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 80092a6:	6839      	ldr	r1, [r7, #0]
 80092a8:	6878      	ldr	r0, [r7, #4]
 80092aa:	f000 f874 	bl	8009396 <USBD_CtlError>
    break;
 80092ae:	bf00      	nop
  }
}
 80092b0:	bf00      	nop
 80092b2:	3708      	adds	r7, #8
 80092b4:	46bd      	mov	sp, r7
 80092b6:	bd80      	pop	{r7, pc}

080092b8 <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80092b8:	b580      	push	{r7, lr}
 80092ba:	b082      	sub	sp, #8
 80092bc:	af00      	add	r7, sp, #0
 80092be:	6078      	str	r0, [r7, #4]
 80092c0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80092c2:	683b      	ldr	r3, [r7, #0]
 80092c4:	885b      	ldrh	r3, [r3, #2]
 80092c6:	2b01      	cmp	r3, #1
 80092c8:	d106      	bne.n	80092d8 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	2201      	movs	r2, #1
 80092ce:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80092d2:	6878      	ldr	r0, [r7, #4]
 80092d4:	f000 f90d 	bl	80094f2 <USBD_CtlSendStatus>
  }
}
 80092d8:	bf00      	nop
 80092da:	3708      	adds	r7, #8
 80092dc:	46bd      	mov	sp, r7
 80092de:	bd80      	pop	{r7, pc}

080092e0 <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80092e0:	b580      	push	{r7, lr}
 80092e2:	b082      	sub	sp, #8
 80092e4:	af00      	add	r7, sp, #0
 80092e6:	6078      	str	r0, [r7, #4]
 80092e8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80092f0:	3b01      	subs	r3, #1
 80092f2:	2b02      	cmp	r3, #2
 80092f4:	d80b      	bhi.n	800930e <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80092f6:	683b      	ldr	r3, [r7, #0]
 80092f8:	885b      	ldrh	r3, [r3, #2]
 80092fa:	2b01      	cmp	r3, #1
 80092fc:	d10c      	bne.n	8009318 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	2200      	movs	r2, #0
 8009302:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8009306:	6878      	ldr	r0, [r7, #4]
 8009308:	f000 f8f3 	bl	80094f2 <USBD_CtlSendStatus>
      }
      break;
 800930c:	e004      	b.n	8009318 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800930e:	6839      	ldr	r1, [r7, #0]
 8009310:	6878      	ldr	r0, [r7, #4]
 8009312:	f000 f840 	bl	8009396 <USBD_CtlError>
      break;
 8009316:	e000      	b.n	800931a <USBD_ClrFeature+0x3a>
      break;
 8009318:	bf00      	nop
  }
}
 800931a:	bf00      	nop
 800931c:	3708      	adds	r7, #8
 800931e:	46bd      	mov	sp, r7
 8009320:	bd80      	pop	{r7, pc}

08009322 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009322:	b580      	push	{r7, lr}
 8009324:	b084      	sub	sp, #16
 8009326:	af00      	add	r7, sp, #0
 8009328:	6078      	str	r0, [r7, #4]
 800932a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800932c:	683b      	ldr	r3, [r7, #0]
 800932e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	781a      	ldrb	r2, [r3, #0]
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	3301      	adds	r3, #1
 800933c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	781a      	ldrb	r2, [r3, #0]
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	3301      	adds	r3, #1
 800934a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800934c:	68f8      	ldr	r0, [r7, #12]
 800934e:	f7ff fa9a 	bl	8008886 <SWAPBYTE>
 8009352:	4603      	mov	r3, r0
 8009354:	461a      	mov	r2, r3
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	3301      	adds	r3, #1
 800935e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	3301      	adds	r3, #1
 8009364:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8009366:	68f8      	ldr	r0, [r7, #12]
 8009368:	f7ff fa8d 	bl	8008886 <SWAPBYTE>
 800936c:	4603      	mov	r3, r0
 800936e:	461a      	mov	r2, r3
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	3301      	adds	r3, #1
 8009378:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	3301      	adds	r3, #1
 800937e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8009380:	68f8      	ldr	r0, [r7, #12]
 8009382:	f7ff fa80 	bl	8008886 <SWAPBYTE>
 8009386:	4603      	mov	r3, r0
 8009388:	461a      	mov	r2, r3
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	80da      	strh	r2, [r3, #6]
}
 800938e:	bf00      	nop
 8009390:	3710      	adds	r7, #16
 8009392:	46bd      	mov	sp, r7
 8009394:	bd80      	pop	{r7, pc}

08009396 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009396:	b580      	push	{r7, lr}
 8009398:	b082      	sub	sp, #8
 800939a:	af00      	add	r7, sp, #0
 800939c:	6078      	str	r0, [r7, #4]
 800939e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80093a0:	2180      	movs	r1, #128	@ 0x80
 80093a2:	6878      	ldr	r0, [r7, #4]
 80093a4:	f000 fc6e 	bl	8009c84 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80093a8:	2100      	movs	r1, #0
 80093aa:	6878      	ldr	r0, [r7, #4]
 80093ac:	f000 fc6a 	bl	8009c84 <USBD_LL_StallEP>
}
 80093b0:	bf00      	nop
 80093b2:	3708      	adds	r7, #8
 80093b4:	46bd      	mov	sp, r7
 80093b6:	bd80      	pop	{r7, pc}

080093b8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80093b8:	b580      	push	{r7, lr}
 80093ba:	b086      	sub	sp, #24
 80093bc:	af00      	add	r7, sp, #0
 80093be:	60f8      	str	r0, [r7, #12]
 80093c0:	60b9      	str	r1, [r7, #8]
 80093c2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80093c4:	2300      	movs	r3, #0
 80093c6:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d036      	beq.n	800943c <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80093d2:	6938      	ldr	r0, [r7, #16]
 80093d4:	f000 f836 	bl	8009444 <USBD_GetLen>
 80093d8:	4603      	mov	r3, r0
 80093da:	3301      	adds	r3, #1
 80093dc:	b29b      	uxth	r3, r3
 80093de:	005b      	lsls	r3, r3, #1
 80093e0:	b29a      	uxth	r2, r3
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80093e6:	7dfb      	ldrb	r3, [r7, #23]
 80093e8:	68ba      	ldr	r2, [r7, #8]
 80093ea:	4413      	add	r3, r2
 80093ec:	687a      	ldr	r2, [r7, #4]
 80093ee:	7812      	ldrb	r2, [r2, #0]
 80093f0:	701a      	strb	r2, [r3, #0]
  idx++;
 80093f2:	7dfb      	ldrb	r3, [r7, #23]
 80093f4:	3301      	adds	r3, #1
 80093f6:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80093f8:	7dfb      	ldrb	r3, [r7, #23]
 80093fa:	68ba      	ldr	r2, [r7, #8]
 80093fc:	4413      	add	r3, r2
 80093fe:	2203      	movs	r2, #3
 8009400:	701a      	strb	r2, [r3, #0]
  idx++;
 8009402:	7dfb      	ldrb	r3, [r7, #23]
 8009404:	3301      	adds	r3, #1
 8009406:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8009408:	e013      	b.n	8009432 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800940a:	7dfb      	ldrb	r3, [r7, #23]
 800940c:	68ba      	ldr	r2, [r7, #8]
 800940e:	4413      	add	r3, r2
 8009410:	693a      	ldr	r2, [r7, #16]
 8009412:	7812      	ldrb	r2, [r2, #0]
 8009414:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8009416:	693b      	ldr	r3, [r7, #16]
 8009418:	3301      	adds	r3, #1
 800941a:	613b      	str	r3, [r7, #16]
    idx++;
 800941c:	7dfb      	ldrb	r3, [r7, #23]
 800941e:	3301      	adds	r3, #1
 8009420:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8009422:	7dfb      	ldrb	r3, [r7, #23]
 8009424:	68ba      	ldr	r2, [r7, #8]
 8009426:	4413      	add	r3, r2
 8009428:	2200      	movs	r2, #0
 800942a:	701a      	strb	r2, [r3, #0]
    idx++;
 800942c:	7dfb      	ldrb	r3, [r7, #23]
 800942e:	3301      	adds	r3, #1
 8009430:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8009432:	693b      	ldr	r3, [r7, #16]
 8009434:	781b      	ldrb	r3, [r3, #0]
 8009436:	2b00      	cmp	r3, #0
 8009438:	d1e7      	bne.n	800940a <USBD_GetString+0x52>
 800943a:	e000      	b.n	800943e <USBD_GetString+0x86>
    return;
 800943c:	bf00      	nop
  }
}
 800943e:	3718      	adds	r7, #24
 8009440:	46bd      	mov	sp, r7
 8009442:	bd80      	pop	{r7, pc}

08009444 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009444:	b480      	push	{r7}
 8009446:	b085      	sub	sp, #20
 8009448:	af00      	add	r7, sp, #0
 800944a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800944c:	2300      	movs	r3, #0
 800944e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8009454:	e005      	b.n	8009462 <USBD_GetLen+0x1e>
  {
    len++;
 8009456:	7bfb      	ldrb	r3, [r7, #15]
 8009458:	3301      	adds	r3, #1
 800945a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800945c:	68bb      	ldr	r3, [r7, #8]
 800945e:	3301      	adds	r3, #1
 8009460:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8009462:	68bb      	ldr	r3, [r7, #8]
 8009464:	781b      	ldrb	r3, [r3, #0]
 8009466:	2b00      	cmp	r3, #0
 8009468:	d1f5      	bne.n	8009456 <USBD_GetLen+0x12>
  }

  return len;
 800946a:	7bfb      	ldrb	r3, [r7, #15]
}
 800946c:	4618      	mov	r0, r3
 800946e:	3714      	adds	r7, #20
 8009470:	46bd      	mov	sp, r7
 8009472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009476:	4770      	bx	lr

08009478 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8009478:	b580      	push	{r7, lr}
 800947a:	b084      	sub	sp, #16
 800947c:	af00      	add	r7, sp, #0
 800947e:	60f8      	str	r0, [r7, #12]
 8009480:	60b9      	str	r1, [r7, #8]
 8009482:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	2202      	movs	r2, #2
 8009488:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	687a      	ldr	r2, [r7, #4]
 8009490:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	687a      	ldr	r2, [r7, #4]
 8009496:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	68ba      	ldr	r2, [r7, #8]
 800949c:	2100      	movs	r1, #0
 800949e:	68f8      	ldr	r0, [r7, #12]
 80094a0:	f000 fcbe 	bl	8009e20 <USBD_LL_Transmit>

  return USBD_OK;
 80094a4:	2300      	movs	r3, #0
}
 80094a6:	4618      	mov	r0, r3
 80094a8:	3710      	adds	r7, #16
 80094aa:	46bd      	mov	sp, r7
 80094ac:	bd80      	pop	{r7, pc}

080094ae <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80094ae:	b580      	push	{r7, lr}
 80094b0:	b084      	sub	sp, #16
 80094b2:	af00      	add	r7, sp, #0
 80094b4:	60f8      	str	r0, [r7, #12]
 80094b6:	60b9      	str	r1, [r7, #8]
 80094b8:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	68ba      	ldr	r2, [r7, #8]
 80094be:	2100      	movs	r1, #0
 80094c0:	68f8      	ldr	r0, [r7, #12]
 80094c2:	f000 fcad 	bl	8009e20 <USBD_LL_Transmit>

  return USBD_OK;
 80094c6:	2300      	movs	r3, #0
}
 80094c8:	4618      	mov	r0, r3
 80094ca:	3710      	adds	r7, #16
 80094cc:	46bd      	mov	sp, r7
 80094ce:	bd80      	pop	{r7, pc}

080094d0 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80094d0:	b580      	push	{r7, lr}
 80094d2:	b084      	sub	sp, #16
 80094d4:	af00      	add	r7, sp, #0
 80094d6:	60f8      	str	r0, [r7, #12]
 80094d8:	60b9      	str	r1, [r7, #8]
 80094da:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	68ba      	ldr	r2, [r7, #8]
 80094e0:	2100      	movs	r1, #0
 80094e2:	68f8      	ldr	r0, [r7, #12]
 80094e4:	f000 fcd4 	bl	8009e90 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80094e8:	2300      	movs	r3, #0
}
 80094ea:	4618      	mov	r0, r3
 80094ec:	3710      	adds	r7, #16
 80094ee:	46bd      	mov	sp, r7
 80094f0:	bd80      	pop	{r7, pc}

080094f2 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80094f2:	b580      	push	{r7, lr}
 80094f4:	b082      	sub	sp, #8
 80094f6:	af00      	add	r7, sp, #0
 80094f8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	2204      	movs	r2, #4
 80094fe:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009502:	2300      	movs	r3, #0
 8009504:	2200      	movs	r2, #0
 8009506:	2100      	movs	r1, #0
 8009508:	6878      	ldr	r0, [r7, #4]
 800950a:	f000 fc89 	bl	8009e20 <USBD_LL_Transmit>

  return USBD_OK;
 800950e:	2300      	movs	r3, #0
}
 8009510:	4618      	mov	r0, r3
 8009512:	3708      	adds	r7, #8
 8009514:	46bd      	mov	sp, r7
 8009516:	bd80      	pop	{r7, pc}

08009518 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009518:	b580      	push	{r7, lr}
 800951a:	b082      	sub	sp, #8
 800951c:	af00      	add	r7, sp, #0
 800951e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	2205      	movs	r2, #5
 8009524:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009528:	2300      	movs	r3, #0
 800952a:	2200      	movs	r2, #0
 800952c:	2100      	movs	r1, #0
 800952e:	6878      	ldr	r0, [r7, #4]
 8009530:	f000 fcae 	bl	8009e90 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009534:	2300      	movs	r3, #0
}
 8009536:	4618      	mov	r0, r3
 8009538:	3708      	adds	r7, #8
 800953a:	46bd      	mov	sp, r7
 800953c:	bd80      	pop	{r7, pc}
	...

08009540 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009540:	b580      	push	{r7, lr}
 8009542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009544:	2200      	movs	r2, #0
 8009546:	490e      	ldr	r1, [pc, #56]	@ (8009580 <MX_USB_DEVICE_Init+0x40>)
 8009548:	480e      	ldr	r0, [pc, #56]	@ (8009584 <MX_USB_DEVICE_Init+0x44>)
 800954a:	f7fe fed5 	bl	80082f8 <USBD_Init>
 800954e:	4603      	mov	r3, r0
 8009550:	2b00      	cmp	r3, #0
 8009552:	d001      	beq.n	8009558 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009554:	f7f8 f884 	bl	8001660 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 8009558:	490b      	ldr	r1, [pc, #44]	@ (8009588 <MX_USB_DEVICE_Init+0x48>)
 800955a:	480a      	ldr	r0, [pc, #40]	@ (8009584 <MX_USB_DEVICE_Init+0x44>)
 800955c:	f7fe fefc 	bl	8008358 <USBD_RegisterClass>
 8009560:	4603      	mov	r3, r0
 8009562:	2b00      	cmp	r3, #0
 8009564:	d001      	beq.n	800956a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8009566:	f7f8 f87b 	bl	8001660 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800956a:	4806      	ldr	r0, [pc, #24]	@ (8009584 <MX_USB_DEVICE_Init+0x44>)
 800956c:	f7fe ff1b 	bl	80083a6 <USBD_Start>
 8009570:	4603      	mov	r3, r0
 8009572:	2b00      	cmp	r3, #0
 8009574:	d001      	beq.n	800957a <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 8009576:	f7f8 f873 	bl	8001660 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800957a:	bf00      	nop
 800957c:	bd80      	pop	{r7, pc}
 800957e:	bf00      	nop
 8009580:	200001b4 	.word	0x200001b4
 8009584:	200005d8 	.word	0x200005d8
 8009588:	200000ac 	.word	0x200000ac

0800958c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800958c:	b480      	push	{r7}
 800958e:	b083      	sub	sp, #12
 8009590:	af00      	add	r7, sp, #0
 8009592:	4603      	mov	r3, r0
 8009594:	6039      	str	r1, [r7, #0]
 8009596:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009598:	683b      	ldr	r3, [r7, #0]
 800959a:	2212      	movs	r2, #18
 800959c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800959e:	4b03      	ldr	r3, [pc, #12]	@ (80095ac <USBD_FS_DeviceDescriptor+0x20>)
}
 80095a0:	4618      	mov	r0, r3
 80095a2:	370c      	adds	r7, #12
 80095a4:	46bd      	mov	sp, r7
 80095a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095aa:	4770      	bx	lr
 80095ac:	200001d4 	.word	0x200001d4

080095b0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80095b0:	b480      	push	{r7}
 80095b2:	b083      	sub	sp, #12
 80095b4:	af00      	add	r7, sp, #0
 80095b6:	4603      	mov	r3, r0
 80095b8:	6039      	str	r1, [r7, #0]
 80095ba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80095bc:	683b      	ldr	r3, [r7, #0]
 80095be:	2204      	movs	r2, #4
 80095c0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80095c2:	4b03      	ldr	r3, [pc, #12]	@ (80095d0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80095c4:	4618      	mov	r0, r3
 80095c6:	370c      	adds	r7, #12
 80095c8:	46bd      	mov	sp, r7
 80095ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ce:	4770      	bx	lr
 80095d0:	200001f4 	.word	0x200001f4

080095d4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80095d4:	b580      	push	{r7, lr}
 80095d6:	b082      	sub	sp, #8
 80095d8:	af00      	add	r7, sp, #0
 80095da:	4603      	mov	r3, r0
 80095dc:	6039      	str	r1, [r7, #0]
 80095de:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80095e0:	79fb      	ldrb	r3, [r7, #7]
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d105      	bne.n	80095f2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80095e6:	683a      	ldr	r2, [r7, #0]
 80095e8:	4907      	ldr	r1, [pc, #28]	@ (8009608 <USBD_FS_ProductStrDescriptor+0x34>)
 80095ea:	4808      	ldr	r0, [pc, #32]	@ (800960c <USBD_FS_ProductStrDescriptor+0x38>)
 80095ec:	f7ff fee4 	bl	80093b8 <USBD_GetString>
 80095f0:	e004      	b.n	80095fc <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80095f2:	683a      	ldr	r2, [r7, #0]
 80095f4:	4904      	ldr	r1, [pc, #16]	@ (8009608 <USBD_FS_ProductStrDescriptor+0x34>)
 80095f6:	4805      	ldr	r0, [pc, #20]	@ (800960c <USBD_FS_ProductStrDescriptor+0x38>)
 80095f8:	f7ff fede 	bl	80093b8 <USBD_GetString>
  }
  return USBD_StrDesc;
 80095fc:	4b02      	ldr	r3, [pc, #8]	@ (8009608 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80095fe:	4618      	mov	r0, r3
 8009600:	3708      	adds	r7, #8
 8009602:	46bd      	mov	sp, r7
 8009604:	bd80      	pop	{r7, pc}
 8009606:	bf00      	nop
 8009608:	200008a8 	.word	0x200008a8
 800960c:	0800ca30 	.word	0x0800ca30

08009610 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009610:	b580      	push	{r7, lr}
 8009612:	b082      	sub	sp, #8
 8009614:	af00      	add	r7, sp, #0
 8009616:	4603      	mov	r3, r0
 8009618:	6039      	str	r1, [r7, #0]
 800961a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800961c:	683a      	ldr	r2, [r7, #0]
 800961e:	4904      	ldr	r1, [pc, #16]	@ (8009630 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009620:	4804      	ldr	r0, [pc, #16]	@ (8009634 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8009622:	f7ff fec9 	bl	80093b8 <USBD_GetString>
  return USBD_StrDesc;
 8009626:	4b02      	ldr	r3, [pc, #8]	@ (8009630 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009628:	4618      	mov	r0, r3
 800962a:	3708      	adds	r7, #8
 800962c:	46bd      	mov	sp, r7
 800962e:	bd80      	pop	{r7, pc}
 8009630:	200008a8 	.word	0x200008a8
 8009634:	0800ca38 	.word	0x0800ca38

08009638 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009638:	b580      	push	{r7, lr}
 800963a:	b082      	sub	sp, #8
 800963c:	af00      	add	r7, sp, #0
 800963e:	4603      	mov	r3, r0
 8009640:	6039      	str	r1, [r7, #0]
 8009642:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009644:	683b      	ldr	r3, [r7, #0]
 8009646:	221a      	movs	r2, #26
 8009648:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800964a:	f000 f855 	bl	80096f8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800964e:	4b02      	ldr	r3, [pc, #8]	@ (8009658 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009650:	4618      	mov	r0, r3
 8009652:	3708      	adds	r7, #8
 8009654:	46bd      	mov	sp, r7
 8009656:	bd80      	pop	{r7, pc}
 8009658:	200001f8 	.word	0x200001f8

0800965c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800965c:	b580      	push	{r7, lr}
 800965e:	b082      	sub	sp, #8
 8009660:	af00      	add	r7, sp, #0
 8009662:	4603      	mov	r3, r0
 8009664:	6039      	str	r1, [r7, #0]
 8009666:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009668:	79fb      	ldrb	r3, [r7, #7]
 800966a:	2b00      	cmp	r3, #0
 800966c:	d105      	bne.n	800967a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800966e:	683a      	ldr	r2, [r7, #0]
 8009670:	4907      	ldr	r1, [pc, #28]	@ (8009690 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009672:	4808      	ldr	r0, [pc, #32]	@ (8009694 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009674:	f7ff fea0 	bl	80093b8 <USBD_GetString>
 8009678:	e004      	b.n	8009684 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800967a:	683a      	ldr	r2, [r7, #0]
 800967c:	4904      	ldr	r1, [pc, #16]	@ (8009690 <USBD_FS_ConfigStrDescriptor+0x34>)
 800967e:	4805      	ldr	r0, [pc, #20]	@ (8009694 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009680:	f7ff fe9a 	bl	80093b8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009684:	4b02      	ldr	r3, [pc, #8]	@ (8009690 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8009686:	4618      	mov	r0, r3
 8009688:	3708      	adds	r7, #8
 800968a:	46bd      	mov	sp, r7
 800968c:	bd80      	pop	{r7, pc}
 800968e:	bf00      	nop
 8009690:	200008a8 	.word	0x200008a8
 8009694:	0800ca4c 	.word	0x0800ca4c

08009698 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009698:	b580      	push	{r7, lr}
 800969a:	b082      	sub	sp, #8
 800969c:	af00      	add	r7, sp, #0
 800969e:	4603      	mov	r3, r0
 80096a0:	6039      	str	r1, [r7, #0]
 80096a2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80096a4:	79fb      	ldrb	r3, [r7, #7]
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d105      	bne.n	80096b6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80096aa:	683a      	ldr	r2, [r7, #0]
 80096ac:	4907      	ldr	r1, [pc, #28]	@ (80096cc <USBD_FS_InterfaceStrDescriptor+0x34>)
 80096ae:	4808      	ldr	r0, [pc, #32]	@ (80096d0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80096b0:	f7ff fe82 	bl	80093b8 <USBD_GetString>
 80096b4:	e004      	b.n	80096c0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80096b6:	683a      	ldr	r2, [r7, #0]
 80096b8:	4904      	ldr	r1, [pc, #16]	@ (80096cc <USBD_FS_InterfaceStrDescriptor+0x34>)
 80096ba:	4805      	ldr	r0, [pc, #20]	@ (80096d0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80096bc:	f7ff fe7c 	bl	80093b8 <USBD_GetString>
  }
  return USBD_StrDesc;
 80096c0:	4b02      	ldr	r3, [pc, #8]	@ (80096cc <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80096c2:	4618      	mov	r0, r3
 80096c4:	3708      	adds	r7, #8
 80096c6:	46bd      	mov	sp, r7
 80096c8:	bd80      	pop	{r7, pc}
 80096ca:	bf00      	nop
 80096cc:	200008a8 	.word	0x200008a8
 80096d0:	0800ca58 	.word	0x0800ca58

080096d4 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80096d4:	b480      	push	{r7}
 80096d6:	b083      	sub	sp, #12
 80096d8:	af00      	add	r7, sp, #0
 80096da:	4603      	mov	r3, r0
 80096dc:	6039      	str	r1, [r7, #0]
 80096de:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 80096e0:	683b      	ldr	r3, [r7, #0]
 80096e2:	220c      	movs	r2, #12
 80096e4:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 80096e6:	4b03      	ldr	r3, [pc, #12]	@ (80096f4 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 80096e8:	4618      	mov	r0, r3
 80096ea:	370c      	adds	r7, #12
 80096ec:	46bd      	mov	sp, r7
 80096ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096f2:	4770      	bx	lr
 80096f4:	200001e8 	.word	0x200001e8

080096f8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80096f8:	b580      	push	{r7, lr}
 80096fa:	b084      	sub	sp, #16
 80096fc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80096fe:	4b0f      	ldr	r3, [pc, #60]	@ (800973c <Get_SerialNum+0x44>)
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009704:	4b0e      	ldr	r3, [pc, #56]	@ (8009740 <Get_SerialNum+0x48>)
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800970a:	4b0e      	ldr	r3, [pc, #56]	@ (8009744 <Get_SerialNum+0x4c>)
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009710:	68fa      	ldr	r2, [r7, #12]
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	4413      	add	r3, r2
 8009716:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	2b00      	cmp	r3, #0
 800971c:	d009      	beq.n	8009732 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800971e:	2208      	movs	r2, #8
 8009720:	4909      	ldr	r1, [pc, #36]	@ (8009748 <Get_SerialNum+0x50>)
 8009722:	68f8      	ldr	r0, [r7, #12]
 8009724:	f000 f814 	bl	8009750 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009728:	2204      	movs	r2, #4
 800972a:	4908      	ldr	r1, [pc, #32]	@ (800974c <Get_SerialNum+0x54>)
 800972c:	68b8      	ldr	r0, [r7, #8]
 800972e:	f000 f80f 	bl	8009750 <IntToUnicode>
  }
}
 8009732:	bf00      	nop
 8009734:	3710      	adds	r7, #16
 8009736:	46bd      	mov	sp, r7
 8009738:	bd80      	pop	{r7, pc}
 800973a:	bf00      	nop
 800973c:	1fff7590 	.word	0x1fff7590
 8009740:	1fff7594 	.word	0x1fff7594
 8009744:	1fff7598 	.word	0x1fff7598
 8009748:	200001fa 	.word	0x200001fa
 800974c:	2000020a 	.word	0x2000020a

08009750 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009750:	b480      	push	{r7}
 8009752:	b087      	sub	sp, #28
 8009754:	af00      	add	r7, sp, #0
 8009756:	60f8      	str	r0, [r7, #12]
 8009758:	60b9      	str	r1, [r7, #8]
 800975a:	4613      	mov	r3, r2
 800975c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800975e:	2300      	movs	r3, #0
 8009760:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009762:	2300      	movs	r3, #0
 8009764:	75fb      	strb	r3, [r7, #23]
 8009766:	e027      	b.n	80097b8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	0f1b      	lsrs	r3, r3, #28
 800976c:	2b09      	cmp	r3, #9
 800976e:	d80b      	bhi.n	8009788 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	0f1b      	lsrs	r3, r3, #28
 8009774:	b2da      	uxtb	r2, r3
 8009776:	7dfb      	ldrb	r3, [r7, #23]
 8009778:	005b      	lsls	r3, r3, #1
 800977a:	4619      	mov	r1, r3
 800977c:	68bb      	ldr	r3, [r7, #8]
 800977e:	440b      	add	r3, r1
 8009780:	3230      	adds	r2, #48	@ 0x30
 8009782:	b2d2      	uxtb	r2, r2
 8009784:	701a      	strb	r2, [r3, #0]
 8009786:	e00a      	b.n	800979e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	0f1b      	lsrs	r3, r3, #28
 800978c:	b2da      	uxtb	r2, r3
 800978e:	7dfb      	ldrb	r3, [r7, #23]
 8009790:	005b      	lsls	r3, r3, #1
 8009792:	4619      	mov	r1, r3
 8009794:	68bb      	ldr	r3, [r7, #8]
 8009796:	440b      	add	r3, r1
 8009798:	3237      	adds	r2, #55	@ 0x37
 800979a:	b2d2      	uxtb	r2, r2
 800979c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	011b      	lsls	r3, r3, #4
 80097a2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80097a4:	7dfb      	ldrb	r3, [r7, #23]
 80097a6:	005b      	lsls	r3, r3, #1
 80097a8:	3301      	adds	r3, #1
 80097aa:	68ba      	ldr	r2, [r7, #8]
 80097ac:	4413      	add	r3, r2
 80097ae:	2200      	movs	r2, #0
 80097b0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80097b2:	7dfb      	ldrb	r3, [r7, #23]
 80097b4:	3301      	adds	r3, #1
 80097b6:	75fb      	strb	r3, [r7, #23]
 80097b8:	7dfa      	ldrb	r2, [r7, #23]
 80097ba:	79fb      	ldrb	r3, [r7, #7]
 80097bc:	429a      	cmp	r2, r3
 80097be:	d3d3      	bcc.n	8009768 <IntToUnicode+0x18>
  }
}
 80097c0:	bf00      	nop
 80097c2:	bf00      	nop
 80097c4:	371c      	adds	r7, #28
 80097c6:	46bd      	mov	sp, r7
 80097c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097cc:	4770      	bx	lr
	...

080097d0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80097d0:	b580      	push	{r7, lr}
 80097d2:	b08a      	sub	sp, #40	@ 0x28
 80097d4:	af00      	add	r7, sp, #0
 80097d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80097d8:	f107 0314 	add.w	r3, r7, #20
 80097dc:	2200      	movs	r2, #0
 80097de:	601a      	str	r2, [r3, #0]
 80097e0:	605a      	str	r2, [r3, #4]
 80097e2:	609a      	str	r2, [r3, #8]
 80097e4:	60da      	str	r2, [r3, #12]
 80097e6:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80097f0:	d14e      	bne.n	8009890 <HAL_PCD_MspInit+0xc0>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80097f2:	4b29      	ldr	r3, [pc, #164]	@ (8009898 <HAL_PCD_MspInit+0xc8>)
 80097f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80097f6:	4a28      	ldr	r2, [pc, #160]	@ (8009898 <HAL_PCD_MspInit+0xc8>)
 80097f8:	f043 0301 	orr.w	r3, r3, #1
 80097fc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80097fe:	4b26      	ldr	r3, [pc, #152]	@ (8009898 <HAL_PCD_MspInit+0xc8>)
 8009800:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009802:	f003 0301 	and.w	r3, r3, #1
 8009806:	613b      	str	r3, [r7, #16]
 8009808:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800980a:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800980e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009810:	2302      	movs	r3, #2
 8009812:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009814:	2300      	movs	r3, #0
 8009816:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009818:	2303      	movs	r3, #3
 800981a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800981c:	230a      	movs	r3, #10
 800981e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009820:	f107 0314 	add.w	r3, r7, #20
 8009824:	4619      	mov	r1, r3
 8009826:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800982a:	f7f9 fc85 	bl	8003138 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800982e:	4b1a      	ldr	r3, [pc, #104]	@ (8009898 <HAL_PCD_MspInit+0xc8>)
 8009830:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009832:	4a19      	ldr	r2, [pc, #100]	@ (8009898 <HAL_PCD_MspInit+0xc8>)
 8009834:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8009838:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800983a:	4b17      	ldr	r3, [pc, #92]	@ (8009898 <HAL_PCD_MspInit+0xc8>)
 800983c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800983e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8009842:	60fb      	str	r3, [r7, #12]
 8009844:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009846:	4b14      	ldr	r3, [pc, #80]	@ (8009898 <HAL_PCD_MspInit+0xc8>)
 8009848:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800984a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800984e:	2b00      	cmp	r3, #0
 8009850:	d114      	bne.n	800987c <HAL_PCD_MspInit+0xac>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009852:	4b11      	ldr	r3, [pc, #68]	@ (8009898 <HAL_PCD_MspInit+0xc8>)
 8009854:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009856:	4a10      	ldr	r2, [pc, #64]	@ (8009898 <HAL_PCD_MspInit+0xc8>)
 8009858:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800985c:	6593      	str	r3, [r2, #88]	@ 0x58
 800985e:	4b0e      	ldr	r3, [pc, #56]	@ (8009898 <HAL_PCD_MspInit+0xc8>)
 8009860:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009862:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009866:	60bb      	str	r3, [r7, #8]
 8009868:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 800986a:	f7fa ff55 	bl	8004718 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 800986e:	4b0a      	ldr	r3, [pc, #40]	@ (8009898 <HAL_PCD_MspInit+0xc8>)
 8009870:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009872:	4a09      	ldr	r2, [pc, #36]	@ (8009898 <HAL_PCD_MspInit+0xc8>)
 8009874:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009878:	6593      	str	r3, [r2, #88]	@ 0x58
 800987a:	e001      	b.n	8009880 <HAL_PCD_MspInit+0xb0>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 800987c:	f7fa ff4c 	bl	8004718 <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8009880:	2200      	movs	r2, #0
 8009882:	2100      	movs	r1, #0
 8009884:	2043      	movs	r0, #67	@ 0x43
 8009886:	f7f9 fc20 	bl	80030ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800988a:	2043      	movs	r0, #67	@ 0x43
 800988c:	f7f9 fc39 	bl	8003102 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009890:	bf00      	nop
 8009892:	3728      	adds	r7, #40	@ 0x28
 8009894:	46bd      	mov	sp, r7
 8009896:	bd80      	pop	{r7, pc}
 8009898:	40021000 	.word	0x40021000

0800989c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800989c:	b580      	push	{r7, lr}
 800989e:	b082      	sub	sp, #8
 80098a0:	af00      	add	r7, sp, #0
 80098a2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	f8d3 2404 	ldr.w	r2, [r3, #1028]	@ 0x404
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	f503 7371 	add.w	r3, r3, #964	@ 0x3c4
 80098b0:	4619      	mov	r1, r3
 80098b2:	4610      	mov	r0, r2
 80098b4:	f7fe fdc2 	bl	800843c <USBD_LL_SetupStage>
}
 80098b8:	bf00      	nop
 80098ba:	3708      	adds	r7, #8
 80098bc:	46bd      	mov	sp, r7
 80098be:	bd80      	pop	{r7, pc}

080098c0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80098c0:	b580      	push	{r7, lr}
 80098c2:	b082      	sub	sp, #8
 80098c4:	af00      	add	r7, sp, #0
 80098c6:	6078      	str	r0, [r7, #4]
 80098c8:	460b      	mov	r3, r1
 80098ca:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	f8d3 0404 	ldr.w	r0, [r3, #1028]	@ 0x404
 80098d2:	78fa      	ldrb	r2, [r7, #3]
 80098d4:	6879      	ldr	r1, [r7, #4]
 80098d6:	4613      	mov	r3, r2
 80098d8:	00db      	lsls	r3, r3, #3
 80098da:	1a9b      	subs	r3, r3, r2
 80098dc:	009b      	lsls	r3, r3, #2
 80098de:	440b      	add	r3, r1
 80098e0:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 80098e4:	681a      	ldr	r2, [r3, #0]
 80098e6:	78fb      	ldrb	r3, [r7, #3]
 80098e8:	4619      	mov	r1, r3
 80098ea:	f7fe fdfc 	bl	80084e6 <USBD_LL_DataOutStage>
}
 80098ee:	bf00      	nop
 80098f0:	3708      	adds	r7, #8
 80098f2:	46bd      	mov	sp, r7
 80098f4:	bd80      	pop	{r7, pc}

080098f6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80098f6:	b580      	push	{r7, lr}
 80098f8:	b082      	sub	sp, #8
 80098fa:	af00      	add	r7, sp, #0
 80098fc:	6078      	str	r0, [r7, #4]
 80098fe:	460b      	mov	r3, r1
 8009900:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	f8d3 0404 	ldr.w	r0, [r3, #1028]	@ 0x404
 8009908:	78fa      	ldrb	r2, [r7, #3]
 800990a:	6879      	ldr	r1, [r7, #4]
 800990c:	4613      	mov	r3, r2
 800990e:	00db      	lsls	r3, r3, #3
 8009910:	1a9b      	subs	r3, r3, r2
 8009912:	009b      	lsls	r3, r3, #2
 8009914:	440b      	add	r3, r1
 8009916:	3348      	adds	r3, #72	@ 0x48
 8009918:	681a      	ldr	r2, [r3, #0]
 800991a:	78fb      	ldrb	r3, [r7, #3]
 800991c:	4619      	mov	r1, r3
 800991e:	f7fe fe45 	bl	80085ac <USBD_LL_DataInStage>
}
 8009922:	bf00      	nop
 8009924:	3708      	adds	r7, #8
 8009926:	46bd      	mov	sp, r7
 8009928:	bd80      	pop	{r7, pc}

0800992a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800992a:	b580      	push	{r7, lr}
 800992c:	b082      	sub	sp, #8
 800992e:	af00      	add	r7, sp, #0
 8009930:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8009938:	4618      	mov	r0, r3
 800993a:	f7fe ff49 	bl	80087d0 <USBD_LL_SOF>
}
 800993e:	bf00      	nop
 8009940:	3708      	adds	r7, #8
 8009942:	46bd      	mov	sp, r7
 8009944:	bd80      	pop	{r7, pc}

08009946 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009946:	b580      	push	{r7, lr}
 8009948:	b084      	sub	sp, #16
 800994a:	af00      	add	r7, sp, #0
 800994c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800994e:	2301      	movs	r3, #1
 8009950:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	68db      	ldr	r3, [r3, #12]
 8009956:	2b02      	cmp	r3, #2
 8009958:	d001      	beq.n	800995e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800995a:	f7f7 fe81 	bl	8001660 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8009964:	7bfa      	ldrb	r2, [r7, #15]
 8009966:	4611      	mov	r1, r2
 8009968:	4618      	mov	r0, r3
 800996a:	f7fe fef6 	bl	800875a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8009974:	4618      	mov	r0, r3
 8009976:	f7fe feaf 	bl	80086d8 <USBD_LL_Reset>
}
 800997a:	bf00      	nop
 800997c:	3710      	adds	r7, #16
 800997e:	46bd      	mov	sp, r7
 8009980:	bd80      	pop	{r7, pc}
	...

08009984 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009984:	b580      	push	{r7, lr}
 8009986:	b082      	sub	sp, #8
 8009988:	af00      	add	r7, sp, #0
 800998a:	6078      	str	r0, [r7, #4]
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	687a      	ldr	r2, [r7, #4]
 8009998:	6812      	ldr	r2, [r2, #0]
 800999a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800999e:	f043 0301 	orr.w	r3, r3, #1
 80099a2:	6013      	str	r3, [r2, #0]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 80099aa:	4618      	mov	r0, r3
 80099ac:	f7fe fee5 	bl	800877a <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	6a1b      	ldr	r3, [r3, #32]
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d005      	beq.n	80099c4 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80099b8:	4b04      	ldr	r3, [pc, #16]	@ (80099cc <HAL_PCD_SuspendCallback+0x48>)
 80099ba:	691b      	ldr	r3, [r3, #16]
 80099bc:	4a03      	ldr	r2, [pc, #12]	@ (80099cc <HAL_PCD_SuspendCallback+0x48>)
 80099be:	f043 0306 	orr.w	r3, r3, #6
 80099c2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80099c4:	bf00      	nop
 80099c6:	3708      	adds	r7, #8
 80099c8:	46bd      	mov	sp, r7
 80099ca:	bd80      	pop	{r7, pc}
 80099cc:	e000ed00 	.word	0xe000ed00

080099d0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80099d0:	b580      	push	{r7, lr}
 80099d2:	b082      	sub	sp, #8
 80099d4:	af00      	add	r7, sp, #0
 80099d6:	6078      	str	r0, [r7, #4]
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	687a      	ldr	r2, [r7, #4]
 80099e4:	6812      	ldr	r2, [r2, #0]
 80099e6:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80099ea:	f023 0301 	bic.w	r3, r3, #1
 80099ee:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	6a1b      	ldr	r3, [r3, #32]
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d007      	beq.n	8009a08 <HAL_PCD_ResumeCallback+0x38>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80099f8:	4b08      	ldr	r3, [pc, #32]	@ (8009a1c <HAL_PCD_ResumeCallback+0x4c>)
 80099fa:	691b      	ldr	r3, [r3, #16]
 80099fc:	4a07      	ldr	r2, [pc, #28]	@ (8009a1c <HAL_PCD_ResumeCallback+0x4c>)
 80099fe:	f023 0306 	bic.w	r3, r3, #6
 8009a02:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8009a04:	f000 faca 	bl	8009f9c <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8009a0e:	4618      	mov	r0, r3
 8009a10:	f7fe fec8 	bl	80087a4 <USBD_LL_Resume>
}
 8009a14:	bf00      	nop
 8009a16:	3708      	adds	r7, #8
 8009a18:	46bd      	mov	sp, r7
 8009a1a:	bd80      	pop	{r7, pc}
 8009a1c:	e000ed00 	.word	0xe000ed00

08009a20 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009a20:	b580      	push	{r7, lr}
 8009a22:	b082      	sub	sp, #8
 8009a24:	af00      	add	r7, sp, #0
 8009a26:	6078      	str	r0, [r7, #4]
 8009a28:	460b      	mov	r3, r1
 8009a2a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8009a32:	78fa      	ldrb	r2, [r7, #3]
 8009a34:	4611      	mov	r1, r2
 8009a36:	4618      	mov	r0, r3
 8009a38:	f7fe fef1 	bl	800881e <USBD_LL_IsoOUTIncomplete>
}
 8009a3c:	bf00      	nop
 8009a3e:	3708      	adds	r7, #8
 8009a40:	46bd      	mov	sp, r7
 8009a42:	bd80      	pop	{r7, pc}

08009a44 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009a44:	b580      	push	{r7, lr}
 8009a46:	b082      	sub	sp, #8
 8009a48:	af00      	add	r7, sp, #0
 8009a4a:	6078      	str	r0, [r7, #4]
 8009a4c:	460b      	mov	r3, r1
 8009a4e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8009a56:	78fa      	ldrb	r2, [r7, #3]
 8009a58:	4611      	mov	r1, r2
 8009a5a:	4618      	mov	r0, r3
 8009a5c:	f7fe fed2 	bl	8008804 <USBD_LL_IsoINIncomplete>
}
 8009a60:	bf00      	nop
 8009a62:	3708      	adds	r7, #8
 8009a64:	46bd      	mov	sp, r7
 8009a66:	bd80      	pop	{r7, pc}

08009a68 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009a68:	b580      	push	{r7, lr}
 8009a6a:	b082      	sub	sp, #8
 8009a6c:	af00      	add	r7, sp, #0
 8009a6e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8009a76:	4618      	mov	r0, r3
 8009a78:	f7fe fede 	bl	8008838 <USBD_LL_DevConnected>
}
 8009a7c:	bf00      	nop
 8009a7e:	3708      	adds	r7, #8
 8009a80:	46bd      	mov	sp, r7
 8009a82:	bd80      	pop	{r7, pc}

08009a84 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009a84:	b580      	push	{r7, lr}
 8009a86:	b082      	sub	sp, #8
 8009a88:	af00      	add	r7, sp, #0
 8009a8a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8009a92:	4618      	mov	r0, r3
 8009a94:	f7fe fedb 	bl	800884e <USBD_LL_DevDisconnected>
}
 8009a98:	bf00      	nop
 8009a9a:	3708      	adds	r7, #8
 8009a9c:	46bd      	mov	sp, r7
 8009a9e:	bd80      	pop	{r7, pc}

08009aa0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009aa0:	b580      	push	{r7, lr}
 8009aa2:	b082      	sub	sp, #8
 8009aa4:	af00      	add	r7, sp, #0
 8009aa6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	781b      	ldrb	r3, [r3, #0]
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d13c      	bne.n	8009b2a <USBD_LL_Init+0x8a>
  /* Enable USB power on Pwrctrl CR2 register. */
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8009ab0:	4a20      	ldr	r2, [pc, #128]	@ (8009b34 <USBD_LL_Init+0x94>)
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	f8c2 3404 	str.w	r3, [r2, #1028]	@ 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	4a1e      	ldr	r2, [pc, #120]	@ (8009b34 <USBD_LL_Init+0x94>)
 8009abc:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009ac0:	4b1c      	ldr	r3, [pc, #112]	@ (8009b34 <USBD_LL_Init+0x94>)
 8009ac2:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8009ac6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8009ac8:	4b1a      	ldr	r3, [pc, #104]	@ (8009b34 <USBD_LL_Init+0x94>)
 8009aca:	2206      	movs	r2, #6
 8009acc:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8009ace:	4b19      	ldr	r3, [pc, #100]	@ (8009b34 <USBD_LL_Init+0x94>)
 8009ad0:	2202      	movs	r2, #2
 8009ad2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009ad4:	4b17      	ldr	r3, [pc, #92]	@ (8009b34 <USBD_LL_Init+0x94>)
 8009ad6:	2202      	movs	r2, #2
 8009ad8:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009ada:	4b16      	ldr	r3, [pc, #88]	@ (8009b34 <USBD_LL_Init+0x94>)
 8009adc:	2200      	movs	r2, #0
 8009ade:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8009ae0:	4b14      	ldr	r3, [pc, #80]	@ (8009b34 <USBD_LL_Init+0x94>)
 8009ae2:	2200      	movs	r2, #0
 8009ae4:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8009ae6:	4b13      	ldr	r3, [pc, #76]	@ (8009b34 <USBD_LL_Init+0x94>)
 8009ae8:	2200      	movs	r2, #0
 8009aea:	625a      	str	r2, [r3, #36]	@ 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8009aec:	4b11      	ldr	r3, [pc, #68]	@ (8009b34 <USBD_LL_Init+0x94>)
 8009aee:	2200      	movs	r2, #0
 8009af0:	629a      	str	r2, [r3, #40]	@ 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8009af2:	4b10      	ldr	r3, [pc, #64]	@ (8009b34 <USBD_LL_Init+0x94>)
 8009af4:	2200      	movs	r2, #0
 8009af6:	631a      	str	r2, [r3, #48]	@ 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8009af8:	4b0e      	ldr	r3, [pc, #56]	@ (8009b34 <USBD_LL_Init+0x94>)
 8009afa:	2200      	movs	r2, #0
 8009afc:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8009afe:	480d      	ldr	r0, [pc, #52]	@ (8009b34 <USBD_LL_Init+0x94>)
 8009b00:	f7f9 fd0e 	bl	8003520 <HAL_PCD_Init>
 8009b04:	4603      	mov	r3, r0
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d001      	beq.n	8009b0e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8009b0a:	f7f7 fda9 	bl	8001660 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8009b0e:	2180      	movs	r1, #128	@ 0x80
 8009b10:	4808      	ldr	r0, [pc, #32]	@ (8009b34 <USBD_LL_Init+0x94>)
 8009b12:	f7fa fd58 	bl	80045c6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8009b16:	2240      	movs	r2, #64	@ 0x40
 8009b18:	2100      	movs	r1, #0
 8009b1a:	4806      	ldr	r0, [pc, #24]	@ (8009b34 <USBD_LL_Init+0x94>)
 8009b1c:	f7fa fd0c 	bl	8004538 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8009b20:	2280      	movs	r2, #128	@ 0x80
 8009b22:	2101      	movs	r1, #1
 8009b24:	4803      	ldr	r0, [pc, #12]	@ (8009b34 <USBD_LL_Init+0x94>)
 8009b26:	f7fa fd07 	bl	8004538 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8009b2a:	2300      	movs	r3, #0
}
 8009b2c:	4618      	mov	r0, r3
 8009b2e:	3708      	adds	r7, #8
 8009b30:	46bd      	mov	sp, r7
 8009b32:	bd80      	pop	{r7, pc}
 8009b34:	20000aa8 	.word	0x20000aa8

08009b38 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009b38:	b580      	push	{r7, lr}
 8009b3a:	b084      	sub	sp, #16
 8009b3c:	af00      	add	r7, sp, #0
 8009b3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009b40:	2300      	movs	r3, #0
 8009b42:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009b44:	2300      	movs	r3, #0
 8009b46:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8009b4e:	4618      	mov	r0, r3
 8009b50:	f7f9 fe0a 	bl	8003768 <HAL_PCD_Start>
 8009b54:	4603      	mov	r3, r0
 8009b56:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8009b58:	7bbb      	ldrb	r3, [r7, #14]
 8009b5a:	2b03      	cmp	r3, #3
 8009b5c:	d816      	bhi.n	8009b8c <USBD_LL_Start+0x54>
 8009b5e:	a201      	add	r2, pc, #4	@ (adr r2, 8009b64 <USBD_LL_Start+0x2c>)
 8009b60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b64:	08009b75 	.word	0x08009b75
 8009b68:	08009b7b 	.word	0x08009b7b
 8009b6c:	08009b81 	.word	0x08009b81
 8009b70:	08009b87 	.word	0x08009b87
    case HAL_OK :
      usb_status = USBD_OK;
 8009b74:	2300      	movs	r3, #0
 8009b76:	73fb      	strb	r3, [r7, #15]
    break;
 8009b78:	e00b      	b.n	8009b92 <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009b7a:	2303      	movs	r3, #3
 8009b7c:	73fb      	strb	r3, [r7, #15]
    break;
 8009b7e:	e008      	b.n	8009b92 <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009b80:	2301      	movs	r3, #1
 8009b82:	73fb      	strb	r3, [r7, #15]
    break;
 8009b84:	e005      	b.n	8009b92 <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009b86:	2303      	movs	r3, #3
 8009b88:	73fb      	strb	r3, [r7, #15]
    break;
 8009b8a:	e002      	b.n	8009b92 <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 8009b8c:	2303      	movs	r3, #3
 8009b8e:	73fb      	strb	r3, [r7, #15]
    break;
 8009b90:	bf00      	nop
  }
  return usb_status;
 8009b92:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b94:	4618      	mov	r0, r3
 8009b96:	3710      	adds	r7, #16
 8009b98:	46bd      	mov	sp, r7
 8009b9a:	bd80      	pop	{r7, pc}

08009b9c <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009b9c:	b580      	push	{r7, lr}
 8009b9e:	b084      	sub	sp, #16
 8009ba0:	af00      	add	r7, sp, #0
 8009ba2:	6078      	str	r0, [r7, #4]
 8009ba4:	4608      	mov	r0, r1
 8009ba6:	4611      	mov	r1, r2
 8009ba8:	461a      	mov	r2, r3
 8009baa:	4603      	mov	r3, r0
 8009bac:	70fb      	strb	r3, [r7, #3]
 8009bae:	460b      	mov	r3, r1
 8009bb0:	70bb      	strb	r3, [r7, #2]
 8009bb2:	4613      	mov	r3, r2
 8009bb4:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009bb6:	2300      	movs	r3, #0
 8009bb8:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009bba:	2300      	movs	r3, #0
 8009bbc:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8009bc4:	78bb      	ldrb	r3, [r7, #2]
 8009bc6:	883a      	ldrh	r2, [r7, #0]
 8009bc8:	78f9      	ldrb	r1, [r7, #3]
 8009bca:	f7fa f9c5 	bl	8003f58 <HAL_PCD_EP_Open>
 8009bce:	4603      	mov	r3, r0
 8009bd0:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8009bd2:	7bbb      	ldrb	r3, [r7, #14]
 8009bd4:	2b03      	cmp	r3, #3
 8009bd6:	d817      	bhi.n	8009c08 <USBD_LL_OpenEP+0x6c>
 8009bd8:	a201      	add	r2, pc, #4	@ (adr r2, 8009be0 <USBD_LL_OpenEP+0x44>)
 8009bda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bde:	bf00      	nop
 8009be0:	08009bf1 	.word	0x08009bf1
 8009be4:	08009bf7 	.word	0x08009bf7
 8009be8:	08009bfd 	.word	0x08009bfd
 8009bec:	08009c03 	.word	0x08009c03
    case HAL_OK :
      usb_status = USBD_OK;
 8009bf0:	2300      	movs	r3, #0
 8009bf2:	73fb      	strb	r3, [r7, #15]
    break;
 8009bf4:	e00b      	b.n	8009c0e <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009bf6:	2303      	movs	r3, #3
 8009bf8:	73fb      	strb	r3, [r7, #15]
    break;
 8009bfa:	e008      	b.n	8009c0e <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009bfc:	2301      	movs	r3, #1
 8009bfe:	73fb      	strb	r3, [r7, #15]
    break;
 8009c00:	e005      	b.n	8009c0e <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009c02:	2303      	movs	r3, #3
 8009c04:	73fb      	strb	r3, [r7, #15]
    break;
 8009c06:	e002      	b.n	8009c0e <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 8009c08:	2303      	movs	r3, #3
 8009c0a:	73fb      	strb	r3, [r7, #15]
    break;
 8009c0c:	bf00      	nop
  }
  return usb_status;
 8009c0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c10:	4618      	mov	r0, r3
 8009c12:	3710      	adds	r7, #16
 8009c14:	46bd      	mov	sp, r7
 8009c16:	bd80      	pop	{r7, pc}

08009c18 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009c18:	b580      	push	{r7, lr}
 8009c1a:	b084      	sub	sp, #16
 8009c1c:	af00      	add	r7, sp, #0
 8009c1e:	6078      	str	r0, [r7, #4]
 8009c20:	460b      	mov	r3, r1
 8009c22:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009c24:	2300      	movs	r3, #0
 8009c26:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009c28:	2300      	movs	r3, #0
 8009c2a:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8009c32:	78fa      	ldrb	r2, [r7, #3]
 8009c34:	4611      	mov	r1, r2
 8009c36:	4618      	mov	r0, r3
 8009c38:	f7fa f9f6 	bl	8004028 <HAL_PCD_EP_Close>
 8009c3c:	4603      	mov	r3, r0
 8009c3e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8009c40:	7bbb      	ldrb	r3, [r7, #14]
 8009c42:	2b03      	cmp	r3, #3
 8009c44:	d816      	bhi.n	8009c74 <USBD_LL_CloseEP+0x5c>
 8009c46:	a201      	add	r2, pc, #4	@ (adr r2, 8009c4c <USBD_LL_CloseEP+0x34>)
 8009c48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c4c:	08009c5d 	.word	0x08009c5d
 8009c50:	08009c63 	.word	0x08009c63
 8009c54:	08009c69 	.word	0x08009c69
 8009c58:	08009c6f 	.word	0x08009c6f
    case HAL_OK :
      usb_status = USBD_OK;
 8009c5c:	2300      	movs	r3, #0
 8009c5e:	73fb      	strb	r3, [r7, #15]
    break;
 8009c60:	e00b      	b.n	8009c7a <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009c62:	2303      	movs	r3, #3
 8009c64:	73fb      	strb	r3, [r7, #15]
    break;
 8009c66:	e008      	b.n	8009c7a <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009c68:	2301      	movs	r3, #1
 8009c6a:	73fb      	strb	r3, [r7, #15]
    break;
 8009c6c:	e005      	b.n	8009c7a <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009c6e:	2303      	movs	r3, #3
 8009c70:	73fb      	strb	r3, [r7, #15]
    break;
 8009c72:	e002      	b.n	8009c7a <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8009c74:	2303      	movs	r3, #3
 8009c76:	73fb      	strb	r3, [r7, #15]
    break;
 8009c78:	bf00      	nop
  }
  return usb_status;
 8009c7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c7c:	4618      	mov	r0, r3
 8009c7e:	3710      	adds	r7, #16
 8009c80:	46bd      	mov	sp, r7
 8009c82:	bd80      	pop	{r7, pc}

08009c84 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009c84:	b580      	push	{r7, lr}
 8009c86:	b084      	sub	sp, #16
 8009c88:	af00      	add	r7, sp, #0
 8009c8a:	6078      	str	r0, [r7, #4]
 8009c8c:	460b      	mov	r3, r1
 8009c8e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009c90:	2300      	movs	r3, #0
 8009c92:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009c94:	2300      	movs	r3, #0
 8009c96:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8009c9e:	78fa      	ldrb	r2, [r7, #3]
 8009ca0:	4611      	mov	r1, r2
 8009ca2:	4618      	mov	r0, r3
 8009ca4:	f7fa fa85 	bl	80041b2 <HAL_PCD_EP_SetStall>
 8009ca8:	4603      	mov	r3, r0
 8009caa:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8009cac:	7bbb      	ldrb	r3, [r7, #14]
 8009cae:	2b03      	cmp	r3, #3
 8009cb0:	d816      	bhi.n	8009ce0 <USBD_LL_StallEP+0x5c>
 8009cb2:	a201      	add	r2, pc, #4	@ (adr r2, 8009cb8 <USBD_LL_StallEP+0x34>)
 8009cb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009cb8:	08009cc9 	.word	0x08009cc9
 8009cbc:	08009ccf 	.word	0x08009ccf
 8009cc0:	08009cd5 	.word	0x08009cd5
 8009cc4:	08009cdb 	.word	0x08009cdb
    case HAL_OK :
      usb_status = USBD_OK;
 8009cc8:	2300      	movs	r3, #0
 8009cca:	73fb      	strb	r3, [r7, #15]
    break;
 8009ccc:	e00b      	b.n	8009ce6 <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009cce:	2303      	movs	r3, #3
 8009cd0:	73fb      	strb	r3, [r7, #15]
    break;
 8009cd2:	e008      	b.n	8009ce6 <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009cd4:	2301      	movs	r3, #1
 8009cd6:	73fb      	strb	r3, [r7, #15]
    break;
 8009cd8:	e005      	b.n	8009ce6 <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009cda:	2303      	movs	r3, #3
 8009cdc:	73fb      	strb	r3, [r7, #15]
    break;
 8009cde:	e002      	b.n	8009ce6 <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8009ce0:	2303      	movs	r3, #3
 8009ce2:	73fb      	strb	r3, [r7, #15]
    break;
 8009ce4:	bf00      	nop
  }
  return usb_status;
 8009ce6:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ce8:	4618      	mov	r0, r3
 8009cea:	3710      	adds	r7, #16
 8009cec:	46bd      	mov	sp, r7
 8009cee:	bd80      	pop	{r7, pc}

08009cf0 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009cf0:	b580      	push	{r7, lr}
 8009cf2:	b084      	sub	sp, #16
 8009cf4:	af00      	add	r7, sp, #0
 8009cf6:	6078      	str	r0, [r7, #4]
 8009cf8:	460b      	mov	r3, r1
 8009cfa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009cfc:	2300      	movs	r3, #0
 8009cfe:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009d00:	2300      	movs	r3, #0
 8009d02:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8009d0a:	78fa      	ldrb	r2, [r7, #3]
 8009d0c:	4611      	mov	r1, r2
 8009d0e:	4618      	mov	r0, r3
 8009d10:	f7fa fab1 	bl	8004276 <HAL_PCD_EP_ClrStall>
 8009d14:	4603      	mov	r3, r0
 8009d16:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8009d18:	7bbb      	ldrb	r3, [r7, #14]
 8009d1a:	2b03      	cmp	r3, #3
 8009d1c:	d816      	bhi.n	8009d4c <USBD_LL_ClearStallEP+0x5c>
 8009d1e:	a201      	add	r2, pc, #4	@ (adr r2, 8009d24 <USBD_LL_ClearStallEP+0x34>)
 8009d20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d24:	08009d35 	.word	0x08009d35
 8009d28:	08009d3b 	.word	0x08009d3b
 8009d2c:	08009d41 	.word	0x08009d41
 8009d30:	08009d47 	.word	0x08009d47
    case HAL_OK :
      usb_status = USBD_OK;
 8009d34:	2300      	movs	r3, #0
 8009d36:	73fb      	strb	r3, [r7, #15]
    break;
 8009d38:	e00b      	b.n	8009d52 <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009d3a:	2303      	movs	r3, #3
 8009d3c:	73fb      	strb	r3, [r7, #15]
    break;
 8009d3e:	e008      	b.n	8009d52 <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009d40:	2301      	movs	r3, #1
 8009d42:	73fb      	strb	r3, [r7, #15]
    break;
 8009d44:	e005      	b.n	8009d52 <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009d46:	2303      	movs	r3, #3
 8009d48:	73fb      	strb	r3, [r7, #15]
    break;
 8009d4a:	e002      	b.n	8009d52 <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8009d4c:	2303      	movs	r3, #3
 8009d4e:	73fb      	strb	r3, [r7, #15]
    break;
 8009d50:	bf00      	nop
  }
  return usb_status;
 8009d52:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d54:	4618      	mov	r0, r3
 8009d56:	3710      	adds	r7, #16
 8009d58:	46bd      	mov	sp, r7
 8009d5a:	bd80      	pop	{r7, pc}

08009d5c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009d5c:	b480      	push	{r7}
 8009d5e:	b085      	sub	sp, #20
 8009d60:	af00      	add	r7, sp, #0
 8009d62:	6078      	str	r0, [r7, #4]
 8009d64:	460b      	mov	r3, r1
 8009d66:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8009d6e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009d70:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	da0b      	bge.n	8009d90 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009d78:	78fb      	ldrb	r3, [r7, #3]
 8009d7a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009d7e:	68f9      	ldr	r1, [r7, #12]
 8009d80:	4613      	mov	r3, r2
 8009d82:	00db      	lsls	r3, r3, #3
 8009d84:	1a9b      	subs	r3, r3, r2
 8009d86:	009b      	lsls	r3, r3, #2
 8009d88:	440b      	add	r3, r1
 8009d8a:	333e      	adds	r3, #62	@ 0x3e
 8009d8c:	781b      	ldrb	r3, [r3, #0]
 8009d8e:	e00b      	b.n	8009da8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009d90:	78fb      	ldrb	r3, [r7, #3]
 8009d92:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009d96:	68f9      	ldr	r1, [r7, #12]
 8009d98:	4613      	mov	r3, r2
 8009d9a:	00db      	lsls	r3, r3, #3
 8009d9c:	1a9b      	subs	r3, r3, r2
 8009d9e:	009b      	lsls	r3, r3, #2
 8009da0:	440b      	add	r3, r1
 8009da2:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8009da6:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009da8:	4618      	mov	r0, r3
 8009daa:	3714      	adds	r7, #20
 8009dac:	46bd      	mov	sp, r7
 8009dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009db2:	4770      	bx	lr

08009db4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009db4:	b580      	push	{r7, lr}
 8009db6:	b084      	sub	sp, #16
 8009db8:	af00      	add	r7, sp, #0
 8009dba:	6078      	str	r0, [r7, #4]
 8009dbc:	460b      	mov	r3, r1
 8009dbe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009dc0:	2300      	movs	r3, #0
 8009dc2:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009dc4:	2300      	movs	r3, #0
 8009dc6:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8009dce:	78fa      	ldrb	r2, [r7, #3]
 8009dd0:	4611      	mov	r1, r2
 8009dd2:	4618      	mov	r0, r3
 8009dd4:	f7fa f89b 	bl	8003f0e <HAL_PCD_SetAddress>
 8009dd8:	4603      	mov	r3, r0
 8009dda:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8009ddc:	7bbb      	ldrb	r3, [r7, #14]
 8009dde:	2b03      	cmp	r3, #3
 8009de0:	d816      	bhi.n	8009e10 <USBD_LL_SetUSBAddress+0x5c>
 8009de2:	a201      	add	r2, pc, #4	@ (adr r2, 8009de8 <USBD_LL_SetUSBAddress+0x34>)
 8009de4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009de8:	08009df9 	.word	0x08009df9
 8009dec:	08009dff 	.word	0x08009dff
 8009df0:	08009e05 	.word	0x08009e05
 8009df4:	08009e0b 	.word	0x08009e0b
    case HAL_OK :
      usb_status = USBD_OK;
 8009df8:	2300      	movs	r3, #0
 8009dfa:	73fb      	strb	r3, [r7, #15]
    break;
 8009dfc:	e00b      	b.n	8009e16 <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009dfe:	2303      	movs	r3, #3
 8009e00:	73fb      	strb	r3, [r7, #15]
    break;
 8009e02:	e008      	b.n	8009e16 <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009e04:	2301      	movs	r3, #1
 8009e06:	73fb      	strb	r3, [r7, #15]
    break;
 8009e08:	e005      	b.n	8009e16 <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009e0a:	2303      	movs	r3, #3
 8009e0c:	73fb      	strb	r3, [r7, #15]
    break;
 8009e0e:	e002      	b.n	8009e16 <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 8009e10:	2303      	movs	r3, #3
 8009e12:	73fb      	strb	r3, [r7, #15]
    break;
 8009e14:	bf00      	nop
  }
  return usb_status;
 8009e16:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e18:	4618      	mov	r0, r3
 8009e1a:	3710      	adds	r7, #16
 8009e1c:	46bd      	mov	sp, r7
 8009e1e:	bd80      	pop	{r7, pc}

08009e20 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009e20:	b580      	push	{r7, lr}
 8009e22:	b086      	sub	sp, #24
 8009e24:	af00      	add	r7, sp, #0
 8009e26:	60f8      	str	r0, [r7, #12]
 8009e28:	607a      	str	r2, [r7, #4]
 8009e2a:	603b      	str	r3, [r7, #0]
 8009e2c:	460b      	mov	r3, r1
 8009e2e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009e30:	2300      	movs	r3, #0
 8009e32:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009e34:	2300      	movs	r3, #0
 8009e36:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8009e3e:	7af9      	ldrb	r1, [r7, #11]
 8009e40:	683b      	ldr	r3, [r7, #0]
 8009e42:	687a      	ldr	r2, [r7, #4]
 8009e44:	f7fa f978 	bl	8004138 <HAL_PCD_EP_Transmit>
 8009e48:	4603      	mov	r3, r0
 8009e4a:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 8009e4c:	7dbb      	ldrb	r3, [r7, #22]
 8009e4e:	2b03      	cmp	r3, #3
 8009e50:	d816      	bhi.n	8009e80 <USBD_LL_Transmit+0x60>
 8009e52:	a201      	add	r2, pc, #4	@ (adr r2, 8009e58 <USBD_LL_Transmit+0x38>)
 8009e54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e58:	08009e69 	.word	0x08009e69
 8009e5c:	08009e6f 	.word	0x08009e6f
 8009e60:	08009e75 	.word	0x08009e75
 8009e64:	08009e7b 	.word	0x08009e7b
    case HAL_OK :
      usb_status = USBD_OK;
 8009e68:	2300      	movs	r3, #0
 8009e6a:	75fb      	strb	r3, [r7, #23]
    break;
 8009e6c:	e00b      	b.n	8009e86 <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009e6e:	2303      	movs	r3, #3
 8009e70:	75fb      	strb	r3, [r7, #23]
    break;
 8009e72:	e008      	b.n	8009e86 <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009e74:	2301      	movs	r3, #1
 8009e76:	75fb      	strb	r3, [r7, #23]
    break;
 8009e78:	e005      	b.n	8009e86 <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009e7a:	2303      	movs	r3, #3
 8009e7c:	75fb      	strb	r3, [r7, #23]
    break;
 8009e7e:	e002      	b.n	8009e86 <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 8009e80:	2303      	movs	r3, #3
 8009e82:	75fb      	strb	r3, [r7, #23]
    break;
 8009e84:	bf00      	nop
  }
  return usb_status;
 8009e86:	7dfb      	ldrb	r3, [r7, #23]
}
 8009e88:	4618      	mov	r0, r3
 8009e8a:	3718      	adds	r7, #24
 8009e8c:	46bd      	mov	sp, r7
 8009e8e:	bd80      	pop	{r7, pc}

08009e90 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009e90:	b580      	push	{r7, lr}
 8009e92:	b086      	sub	sp, #24
 8009e94:	af00      	add	r7, sp, #0
 8009e96:	60f8      	str	r0, [r7, #12]
 8009e98:	607a      	str	r2, [r7, #4]
 8009e9a:	603b      	str	r3, [r7, #0]
 8009e9c:	460b      	mov	r3, r1
 8009e9e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009ea0:	2300      	movs	r3, #0
 8009ea2:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009ea4:	2300      	movs	r3, #0
 8009ea6:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8009eae:	7af9      	ldrb	r1, [r7, #11]
 8009eb0:	683b      	ldr	r3, [r7, #0]
 8009eb2:	687a      	ldr	r2, [r7, #4]
 8009eb4:	f7fa f902 	bl	80040bc <HAL_PCD_EP_Receive>
 8009eb8:	4603      	mov	r3, r0
 8009eba:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 8009ebc:	7dbb      	ldrb	r3, [r7, #22]
 8009ebe:	2b03      	cmp	r3, #3
 8009ec0:	d816      	bhi.n	8009ef0 <USBD_LL_PrepareReceive+0x60>
 8009ec2:	a201      	add	r2, pc, #4	@ (adr r2, 8009ec8 <USBD_LL_PrepareReceive+0x38>)
 8009ec4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ec8:	08009ed9 	.word	0x08009ed9
 8009ecc:	08009edf 	.word	0x08009edf
 8009ed0:	08009ee5 	.word	0x08009ee5
 8009ed4:	08009eeb 	.word	0x08009eeb
    case HAL_OK :
      usb_status = USBD_OK;
 8009ed8:	2300      	movs	r3, #0
 8009eda:	75fb      	strb	r3, [r7, #23]
    break;
 8009edc:	e00b      	b.n	8009ef6 <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009ede:	2303      	movs	r3, #3
 8009ee0:	75fb      	strb	r3, [r7, #23]
    break;
 8009ee2:	e008      	b.n	8009ef6 <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009ee4:	2301      	movs	r3, #1
 8009ee6:	75fb      	strb	r3, [r7, #23]
    break;
 8009ee8:	e005      	b.n	8009ef6 <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009eea:	2303      	movs	r3, #3
 8009eec:	75fb      	strb	r3, [r7, #23]
    break;
 8009eee:	e002      	b.n	8009ef6 <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 8009ef0:	2303      	movs	r3, #3
 8009ef2:	75fb      	strb	r3, [r7, #23]
    break;
 8009ef4:	bf00      	nop
  }
  return usb_status;
 8009ef6:	7dfb      	ldrb	r3, [r7, #23]
}
 8009ef8:	4618      	mov	r0, r3
 8009efa:	3718      	adds	r7, #24
 8009efc:	46bd      	mov	sp, r7
 8009efe:	bd80      	pop	{r7, pc}

08009f00 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8009f00:	b580      	push	{r7, lr}
 8009f02:	b082      	sub	sp, #8
 8009f04:	af00      	add	r7, sp, #0
 8009f06:	6078      	str	r0, [r7, #4]
 8009f08:	460b      	mov	r3, r1
 8009f0a:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8009f0c:	78fb      	ldrb	r3, [r7, #3]
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	d002      	beq.n	8009f18 <HAL_PCDEx_LPM_Callback+0x18>
 8009f12:	2b01      	cmp	r3, #1
 8009f14:	d01f      	beq.n	8009f56 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 8009f16:	e03b      	b.n	8009f90 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	6a1b      	ldr	r3, [r3, #32]
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	d007      	beq.n	8009f30 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8009f20:	f000 f83c 	bl	8009f9c <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009f24:	4b1c      	ldr	r3, [pc, #112]	@ (8009f98 <HAL_PCDEx_LPM_Callback+0x98>)
 8009f26:	691b      	ldr	r3, [r3, #16]
 8009f28:	4a1b      	ldr	r2, [pc, #108]	@ (8009f98 <HAL_PCDEx_LPM_Callback+0x98>)
 8009f2a:	f023 0306 	bic.w	r3, r3, #6
 8009f2e:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	687a      	ldr	r2, [r7, #4]
 8009f3c:	6812      	ldr	r2, [r2, #0]
 8009f3e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8009f42:	f023 0301 	bic.w	r3, r3, #1
 8009f46:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8009f4e:	4618      	mov	r0, r3
 8009f50:	f7fe fc28 	bl	80087a4 <USBD_LL_Resume>
    break;
 8009f54:	e01c      	b.n	8009f90 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	687a      	ldr	r2, [r7, #4]
 8009f62:	6812      	ldr	r2, [r2, #0]
 8009f64:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8009f68:	f043 0301 	orr.w	r3, r3, #1
 8009f6c:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8009f74:	4618      	mov	r0, r3
 8009f76:	f7fe fc00 	bl	800877a <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	6a1b      	ldr	r3, [r3, #32]
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d005      	beq.n	8009f8e <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009f82:	4b05      	ldr	r3, [pc, #20]	@ (8009f98 <HAL_PCDEx_LPM_Callback+0x98>)
 8009f84:	691b      	ldr	r3, [r3, #16]
 8009f86:	4a04      	ldr	r2, [pc, #16]	@ (8009f98 <HAL_PCDEx_LPM_Callback+0x98>)
 8009f88:	f043 0306 	orr.w	r3, r3, #6
 8009f8c:	6113      	str	r3, [r2, #16]
    break;
 8009f8e:	bf00      	nop
}
 8009f90:	bf00      	nop
 8009f92:	3708      	adds	r7, #8
 8009f94:	46bd      	mov	sp, r7
 8009f96:	bd80      	pop	{r7, pc}
 8009f98:	e000ed00 	.word	0xe000ed00

08009f9c <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8009f9c:	b580      	push	{r7, lr}
 8009f9e:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8009fa0:	f7f7 fac2 	bl	8001528 <SystemClock_Config>
}
 8009fa4:	bf00      	nop
 8009fa6:	bd80      	pop	{r7, pc}

08009fa8 <malloc>:
 8009fa8:	4b02      	ldr	r3, [pc, #8]	@ (8009fb4 <malloc+0xc>)
 8009faa:	4601      	mov	r1, r0
 8009fac:	6818      	ldr	r0, [r3, #0]
 8009fae:	f000 b82d 	b.w	800a00c <_malloc_r>
 8009fb2:	bf00      	nop
 8009fb4:	20000220 	.word	0x20000220

08009fb8 <free>:
 8009fb8:	4b02      	ldr	r3, [pc, #8]	@ (8009fc4 <free+0xc>)
 8009fba:	4601      	mov	r1, r0
 8009fbc:	6818      	ldr	r0, [r3, #0]
 8009fbe:	f001 bdfb 	b.w	800bbb8 <_free_r>
 8009fc2:	bf00      	nop
 8009fc4:	20000220 	.word	0x20000220

08009fc8 <sbrk_aligned>:
 8009fc8:	b570      	push	{r4, r5, r6, lr}
 8009fca:	4e0f      	ldr	r6, [pc, #60]	@ (800a008 <sbrk_aligned+0x40>)
 8009fcc:	460c      	mov	r4, r1
 8009fce:	6831      	ldr	r1, [r6, #0]
 8009fd0:	4605      	mov	r5, r0
 8009fd2:	b911      	cbnz	r1, 8009fda <sbrk_aligned+0x12>
 8009fd4:	f000 ff46 	bl	800ae64 <_sbrk_r>
 8009fd8:	6030      	str	r0, [r6, #0]
 8009fda:	4621      	mov	r1, r4
 8009fdc:	4628      	mov	r0, r5
 8009fde:	f000 ff41 	bl	800ae64 <_sbrk_r>
 8009fe2:	1c43      	adds	r3, r0, #1
 8009fe4:	d103      	bne.n	8009fee <sbrk_aligned+0x26>
 8009fe6:	f04f 34ff 	mov.w	r4, #4294967295
 8009fea:	4620      	mov	r0, r4
 8009fec:	bd70      	pop	{r4, r5, r6, pc}
 8009fee:	1cc4      	adds	r4, r0, #3
 8009ff0:	f024 0403 	bic.w	r4, r4, #3
 8009ff4:	42a0      	cmp	r0, r4
 8009ff6:	d0f8      	beq.n	8009fea <sbrk_aligned+0x22>
 8009ff8:	1a21      	subs	r1, r4, r0
 8009ffa:	4628      	mov	r0, r5
 8009ffc:	f000 ff32 	bl	800ae64 <_sbrk_r>
 800a000:	3001      	adds	r0, #1
 800a002:	d1f2      	bne.n	8009fea <sbrk_aligned+0x22>
 800a004:	e7ef      	b.n	8009fe6 <sbrk_aligned+0x1e>
 800a006:	bf00      	nop
 800a008:	20000eb0 	.word	0x20000eb0

0800a00c <_malloc_r>:
 800a00c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a010:	1ccd      	adds	r5, r1, #3
 800a012:	f025 0503 	bic.w	r5, r5, #3
 800a016:	3508      	adds	r5, #8
 800a018:	2d0c      	cmp	r5, #12
 800a01a:	bf38      	it	cc
 800a01c:	250c      	movcc	r5, #12
 800a01e:	2d00      	cmp	r5, #0
 800a020:	4606      	mov	r6, r0
 800a022:	db01      	blt.n	800a028 <_malloc_r+0x1c>
 800a024:	42a9      	cmp	r1, r5
 800a026:	d904      	bls.n	800a032 <_malloc_r+0x26>
 800a028:	230c      	movs	r3, #12
 800a02a:	6033      	str	r3, [r6, #0]
 800a02c:	2000      	movs	r0, #0
 800a02e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a032:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a108 <_malloc_r+0xfc>
 800a036:	f000 f869 	bl	800a10c <__malloc_lock>
 800a03a:	f8d8 3000 	ldr.w	r3, [r8]
 800a03e:	461c      	mov	r4, r3
 800a040:	bb44      	cbnz	r4, 800a094 <_malloc_r+0x88>
 800a042:	4629      	mov	r1, r5
 800a044:	4630      	mov	r0, r6
 800a046:	f7ff ffbf 	bl	8009fc8 <sbrk_aligned>
 800a04a:	1c43      	adds	r3, r0, #1
 800a04c:	4604      	mov	r4, r0
 800a04e:	d158      	bne.n	800a102 <_malloc_r+0xf6>
 800a050:	f8d8 4000 	ldr.w	r4, [r8]
 800a054:	4627      	mov	r7, r4
 800a056:	2f00      	cmp	r7, #0
 800a058:	d143      	bne.n	800a0e2 <_malloc_r+0xd6>
 800a05a:	2c00      	cmp	r4, #0
 800a05c:	d04b      	beq.n	800a0f6 <_malloc_r+0xea>
 800a05e:	6823      	ldr	r3, [r4, #0]
 800a060:	4639      	mov	r1, r7
 800a062:	4630      	mov	r0, r6
 800a064:	eb04 0903 	add.w	r9, r4, r3
 800a068:	f000 fefc 	bl	800ae64 <_sbrk_r>
 800a06c:	4581      	cmp	r9, r0
 800a06e:	d142      	bne.n	800a0f6 <_malloc_r+0xea>
 800a070:	6821      	ldr	r1, [r4, #0]
 800a072:	1a6d      	subs	r5, r5, r1
 800a074:	4629      	mov	r1, r5
 800a076:	4630      	mov	r0, r6
 800a078:	f7ff ffa6 	bl	8009fc8 <sbrk_aligned>
 800a07c:	3001      	adds	r0, #1
 800a07e:	d03a      	beq.n	800a0f6 <_malloc_r+0xea>
 800a080:	6823      	ldr	r3, [r4, #0]
 800a082:	442b      	add	r3, r5
 800a084:	6023      	str	r3, [r4, #0]
 800a086:	f8d8 3000 	ldr.w	r3, [r8]
 800a08a:	685a      	ldr	r2, [r3, #4]
 800a08c:	bb62      	cbnz	r2, 800a0e8 <_malloc_r+0xdc>
 800a08e:	f8c8 7000 	str.w	r7, [r8]
 800a092:	e00f      	b.n	800a0b4 <_malloc_r+0xa8>
 800a094:	6822      	ldr	r2, [r4, #0]
 800a096:	1b52      	subs	r2, r2, r5
 800a098:	d420      	bmi.n	800a0dc <_malloc_r+0xd0>
 800a09a:	2a0b      	cmp	r2, #11
 800a09c:	d917      	bls.n	800a0ce <_malloc_r+0xc2>
 800a09e:	1961      	adds	r1, r4, r5
 800a0a0:	42a3      	cmp	r3, r4
 800a0a2:	6025      	str	r5, [r4, #0]
 800a0a4:	bf18      	it	ne
 800a0a6:	6059      	strne	r1, [r3, #4]
 800a0a8:	6863      	ldr	r3, [r4, #4]
 800a0aa:	bf08      	it	eq
 800a0ac:	f8c8 1000 	streq.w	r1, [r8]
 800a0b0:	5162      	str	r2, [r4, r5]
 800a0b2:	604b      	str	r3, [r1, #4]
 800a0b4:	4630      	mov	r0, r6
 800a0b6:	f000 f82f 	bl	800a118 <__malloc_unlock>
 800a0ba:	f104 000b 	add.w	r0, r4, #11
 800a0be:	1d23      	adds	r3, r4, #4
 800a0c0:	f020 0007 	bic.w	r0, r0, #7
 800a0c4:	1ac2      	subs	r2, r0, r3
 800a0c6:	bf1c      	itt	ne
 800a0c8:	1a1b      	subne	r3, r3, r0
 800a0ca:	50a3      	strne	r3, [r4, r2]
 800a0cc:	e7af      	b.n	800a02e <_malloc_r+0x22>
 800a0ce:	6862      	ldr	r2, [r4, #4]
 800a0d0:	42a3      	cmp	r3, r4
 800a0d2:	bf0c      	ite	eq
 800a0d4:	f8c8 2000 	streq.w	r2, [r8]
 800a0d8:	605a      	strne	r2, [r3, #4]
 800a0da:	e7eb      	b.n	800a0b4 <_malloc_r+0xa8>
 800a0dc:	4623      	mov	r3, r4
 800a0de:	6864      	ldr	r4, [r4, #4]
 800a0e0:	e7ae      	b.n	800a040 <_malloc_r+0x34>
 800a0e2:	463c      	mov	r4, r7
 800a0e4:	687f      	ldr	r7, [r7, #4]
 800a0e6:	e7b6      	b.n	800a056 <_malloc_r+0x4a>
 800a0e8:	461a      	mov	r2, r3
 800a0ea:	685b      	ldr	r3, [r3, #4]
 800a0ec:	42a3      	cmp	r3, r4
 800a0ee:	d1fb      	bne.n	800a0e8 <_malloc_r+0xdc>
 800a0f0:	2300      	movs	r3, #0
 800a0f2:	6053      	str	r3, [r2, #4]
 800a0f4:	e7de      	b.n	800a0b4 <_malloc_r+0xa8>
 800a0f6:	230c      	movs	r3, #12
 800a0f8:	6033      	str	r3, [r6, #0]
 800a0fa:	4630      	mov	r0, r6
 800a0fc:	f000 f80c 	bl	800a118 <__malloc_unlock>
 800a100:	e794      	b.n	800a02c <_malloc_r+0x20>
 800a102:	6005      	str	r5, [r0, #0]
 800a104:	e7d6      	b.n	800a0b4 <_malloc_r+0xa8>
 800a106:	bf00      	nop
 800a108:	20000eb4 	.word	0x20000eb4

0800a10c <__malloc_lock>:
 800a10c:	4801      	ldr	r0, [pc, #4]	@ (800a114 <__malloc_lock+0x8>)
 800a10e:	f000 bef6 	b.w	800aefe <__retarget_lock_acquire_recursive>
 800a112:	bf00      	nop
 800a114:	20000ff8 	.word	0x20000ff8

0800a118 <__malloc_unlock>:
 800a118:	4801      	ldr	r0, [pc, #4]	@ (800a120 <__malloc_unlock+0x8>)
 800a11a:	f000 bef1 	b.w	800af00 <__retarget_lock_release_recursive>
 800a11e:	bf00      	nop
 800a120:	20000ff8 	.word	0x20000ff8

0800a124 <__cvt>:
 800a124:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a128:	ec57 6b10 	vmov	r6, r7, d0
 800a12c:	2f00      	cmp	r7, #0
 800a12e:	460c      	mov	r4, r1
 800a130:	4619      	mov	r1, r3
 800a132:	463b      	mov	r3, r7
 800a134:	bfbb      	ittet	lt
 800a136:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800a13a:	461f      	movlt	r7, r3
 800a13c:	2300      	movge	r3, #0
 800a13e:	232d      	movlt	r3, #45	@ 0x2d
 800a140:	700b      	strb	r3, [r1, #0]
 800a142:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a144:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800a148:	4691      	mov	r9, r2
 800a14a:	f023 0820 	bic.w	r8, r3, #32
 800a14e:	bfbc      	itt	lt
 800a150:	4632      	movlt	r2, r6
 800a152:	4616      	movlt	r6, r2
 800a154:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800a158:	d005      	beq.n	800a166 <__cvt+0x42>
 800a15a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800a15e:	d100      	bne.n	800a162 <__cvt+0x3e>
 800a160:	3401      	adds	r4, #1
 800a162:	2102      	movs	r1, #2
 800a164:	e000      	b.n	800a168 <__cvt+0x44>
 800a166:	2103      	movs	r1, #3
 800a168:	ab03      	add	r3, sp, #12
 800a16a:	9301      	str	r3, [sp, #4]
 800a16c:	ab02      	add	r3, sp, #8
 800a16e:	9300      	str	r3, [sp, #0]
 800a170:	ec47 6b10 	vmov	d0, r6, r7
 800a174:	4653      	mov	r3, sl
 800a176:	4622      	mov	r2, r4
 800a178:	f000 ff4e 	bl	800b018 <_dtoa_r>
 800a17c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800a180:	4605      	mov	r5, r0
 800a182:	d119      	bne.n	800a1b8 <__cvt+0x94>
 800a184:	f019 0f01 	tst.w	r9, #1
 800a188:	d00e      	beq.n	800a1a8 <__cvt+0x84>
 800a18a:	eb00 0904 	add.w	r9, r0, r4
 800a18e:	2200      	movs	r2, #0
 800a190:	2300      	movs	r3, #0
 800a192:	4630      	mov	r0, r6
 800a194:	4639      	mov	r1, r7
 800a196:	f7f6 fc97 	bl	8000ac8 <__aeabi_dcmpeq>
 800a19a:	b108      	cbz	r0, 800a1a0 <__cvt+0x7c>
 800a19c:	f8cd 900c 	str.w	r9, [sp, #12]
 800a1a0:	2230      	movs	r2, #48	@ 0x30
 800a1a2:	9b03      	ldr	r3, [sp, #12]
 800a1a4:	454b      	cmp	r3, r9
 800a1a6:	d31e      	bcc.n	800a1e6 <__cvt+0xc2>
 800a1a8:	9b03      	ldr	r3, [sp, #12]
 800a1aa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a1ac:	1b5b      	subs	r3, r3, r5
 800a1ae:	4628      	mov	r0, r5
 800a1b0:	6013      	str	r3, [r2, #0]
 800a1b2:	b004      	add	sp, #16
 800a1b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a1b8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800a1bc:	eb00 0904 	add.w	r9, r0, r4
 800a1c0:	d1e5      	bne.n	800a18e <__cvt+0x6a>
 800a1c2:	7803      	ldrb	r3, [r0, #0]
 800a1c4:	2b30      	cmp	r3, #48	@ 0x30
 800a1c6:	d10a      	bne.n	800a1de <__cvt+0xba>
 800a1c8:	2200      	movs	r2, #0
 800a1ca:	2300      	movs	r3, #0
 800a1cc:	4630      	mov	r0, r6
 800a1ce:	4639      	mov	r1, r7
 800a1d0:	f7f6 fc7a 	bl	8000ac8 <__aeabi_dcmpeq>
 800a1d4:	b918      	cbnz	r0, 800a1de <__cvt+0xba>
 800a1d6:	f1c4 0401 	rsb	r4, r4, #1
 800a1da:	f8ca 4000 	str.w	r4, [sl]
 800a1de:	f8da 3000 	ldr.w	r3, [sl]
 800a1e2:	4499      	add	r9, r3
 800a1e4:	e7d3      	b.n	800a18e <__cvt+0x6a>
 800a1e6:	1c59      	adds	r1, r3, #1
 800a1e8:	9103      	str	r1, [sp, #12]
 800a1ea:	701a      	strb	r2, [r3, #0]
 800a1ec:	e7d9      	b.n	800a1a2 <__cvt+0x7e>

0800a1ee <__exponent>:
 800a1ee:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a1f0:	2900      	cmp	r1, #0
 800a1f2:	bfba      	itte	lt
 800a1f4:	4249      	neglt	r1, r1
 800a1f6:	232d      	movlt	r3, #45	@ 0x2d
 800a1f8:	232b      	movge	r3, #43	@ 0x2b
 800a1fa:	2909      	cmp	r1, #9
 800a1fc:	7002      	strb	r2, [r0, #0]
 800a1fe:	7043      	strb	r3, [r0, #1]
 800a200:	dd29      	ble.n	800a256 <__exponent+0x68>
 800a202:	f10d 0307 	add.w	r3, sp, #7
 800a206:	461d      	mov	r5, r3
 800a208:	270a      	movs	r7, #10
 800a20a:	461a      	mov	r2, r3
 800a20c:	fbb1 f6f7 	udiv	r6, r1, r7
 800a210:	fb07 1416 	mls	r4, r7, r6, r1
 800a214:	3430      	adds	r4, #48	@ 0x30
 800a216:	f802 4c01 	strb.w	r4, [r2, #-1]
 800a21a:	460c      	mov	r4, r1
 800a21c:	2c63      	cmp	r4, #99	@ 0x63
 800a21e:	f103 33ff 	add.w	r3, r3, #4294967295
 800a222:	4631      	mov	r1, r6
 800a224:	dcf1      	bgt.n	800a20a <__exponent+0x1c>
 800a226:	3130      	adds	r1, #48	@ 0x30
 800a228:	1e94      	subs	r4, r2, #2
 800a22a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800a22e:	1c41      	adds	r1, r0, #1
 800a230:	4623      	mov	r3, r4
 800a232:	42ab      	cmp	r3, r5
 800a234:	d30a      	bcc.n	800a24c <__exponent+0x5e>
 800a236:	f10d 0309 	add.w	r3, sp, #9
 800a23a:	1a9b      	subs	r3, r3, r2
 800a23c:	42ac      	cmp	r4, r5
 800a23e:	bf88      	it	hi
 800a240:	2300      	movhi	r3, #0
 800a242:	3302      	adds	r3, #2
 800a244:	4403      	add	r3, r0
 800a246:	1a18      	subs	r0, r3, r0
 800a248:	b003      	add	sp, #12
 800a24a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a24c:	f813 6b01 	ldrb.w	r6, [r3], #1
 800a250:	f801 6f01 	strb.w	r6, [r1, #1]!
 800a254:	e7ed      	b.n	800a232 <__exponent+0x44>
 800a256:	2330      	movs	r3, #48	@ 0x30
 800a258:	3130      	adds	r1, #48	@ 0x30
 800a25a:	7083      	strb	r3, [r0, #2]
 800a25c:	70c1      	strb	r1, [r0, #3]
 800a25e:	1d03      	adds	r3, r0, #4
 800a260:	e7f1      	b.n	800a246 <__exponent+0x58>
	...

0800a264 <_printf_float>:
 800a264:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a268:	b08d      	sub	sp, #52	@ 0x34
 800a26a:	460c      	mov	r4, r1
 800a26c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800a270:	4616      	mov	r6, r2
 800a272:	461f      	mov	r7, r3
 800a274:	4605      	mov	r5, r0
 800a276:	f000 fdbd 	bl	800adf4 <_localeconv_r>
 800a27a:	6803      	ldr	r3, [r0, #0]
 800a27c:	9304      	str	r3, [sp, #16]
 800a27e:	4618      	mov	r0, r3
 800a280:	f7f5 fff6 	bl	8000270 <strlen>
 800a284:	2300      	movs	r3, #0
 800a286:	930a      	str	r3, [sp, #40]	@ 0x28
 800a288:	f8d8 3000 	ldr.w	r3, [r8]
 800a28c:	9005      	str	r0, [sp, #20]
 800a28e:	3307      	adds	r3, #7
 800a290:	f023 0307 	bic.w	r3, r3, #7
 800a294:	f103 0208 	add.w	r2, r3, #8
 800a298:	f894 a018 	ldrb.w	sl, [r4, #24]
 800a29c:	f8d4 b000 	ldr.w	fp, [r4]
 800a2a0:	f8c8 2000 	str.w	r2, [r8]
 800a2a4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a2a8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800a2ac:	9307      	str	r3, [sp, #28]
 800a2ae:	f8cd 8018 	str.w	r8, [sp, #24]
 800a2b2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800a2b6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a2ba:	4b9c      	ldr	r3, [pc, #624]	@ (800a52c <_printf_float+0x2c8>)
 800a2bc:	f04f 32ff 	mov.w	r2, #4294967295
 800a2c0:	f7f6 fc34 	bl	8000b2c <__aeabi_dcmpun>
 800a2c4:	bb70      	cbnz	r0, 800a324 <_printf_float+0xc0>
 800a2c6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a2ca:	4b98      	ldr	r3, [pc, #608]	@ (800a52c <_printf_float+0x2c8>)
 800a2cc:	f04f 32ff 	mov.w	r2, #4294967295
 800a2d0:	f7f6 fc0e 	bl	8000af0 <__aeabi_dcmple>
 800a2d4:	bb30      	cbnz	r0, 800a324 <_printf_float+0xc0>
 800a2d6:	2200      	movs	r2, #0
 800a2d8:	2300      	movs	r3, #0
 800a2da:	4640      	mov	r0, r8
 800a2dc:	4649      	mov	r1, r9
 800a2de:	f7f6 fbfd 	bl	8000adc <__aeabi_dcmplt>
 800a2e2:	b110      	cbz	r0, 800a2ea <_printf_float+0x86>
 800a2e4:	232d      	movs	r3, #45	@ 0x2d
 800a2e6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a2ea:	4a91      	ldr	r2, [pc, #580]	@ (800a530 <_printf_float+0x2cc>)
 800a2ec:	4b91      	ldr	r3, [pc, #580]	@ (800a534 <_printf_float+0x2d0>)
 800a2ee:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800a2f2:	bf8c      	ite	hi
 800a2f4:	4690      	movhi	r8, r2
 800a2f6:	4698      	movls	r8, r3
 800a2f8:	2303      	movs	r3, #3
 800a2fa:	6123      	str	r3, [r4, #16]
 800a2fc:	f02b 0304 	bic.w	r3, fp, #4
 800a300:	6023      	str	r3, [r4, #0]
 800a302:	f04f 0900 	mov.w	r9, #0
 800a306:	9700      	str	r7, [sp, #0]
 800a308:	4633      	mov	r3, r6
 800a30a:	aa0b      	add	r2, sp, #44	@ 0x2c
 800a30c:	4621      	mov	r1, r4
 800a30e:	4628      	mov	r0, r5
 800a310:	f000 f9d2 	bl	800a6b8 <_printf_common>
 800a314:	3001      	adds	r0, #1
 800a316:	f040 808d 	bne.w	800a434 <_printf_float+0x1d0>
 800a31a:	f04f 30ff 	mov.w	r0, #4294967295
 800a31e:	b00d      	add	sp, #52	@ 0x34
 800a320:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a324:	4642      	mov	r2, r8
 800a326:	464b      	mov	r3, r9
 800a328:	4640      	mov	r0, r8
 800a32a:	4649      	mov	r1, r9
 800a32c:	f7f6 fbfe 	bl	8000b2c <__aeabi_dcmpun>
 800a330:	b140      	cbz	r0, 800a344 <_printf_float+0xe0>
 800a332:	464b      	mov	r3, r9
 800a334:	2b00      	cmp	r3, #0
 800a336:	bfbc      	itt	lt
 800a338:	232d      	movlt	r3, #45	@ 0x2d
 800a33a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800a33e:	4a7e      	ldr	r2, [pc, #504]	@ (800a538 <_printf_float+0x2d4>)
 800a340:	4b7e      	ldr	r3, [pc, #504]	@ (800a53c <_printf_float+0x2d8>)
 800a342:	e7d4      	b.n	800a2ee <_printf_float+0x8a>
 800a344:	6863      	ldr	r3, [r4, #4]
 800a346:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800a34a:	9206      	str	r2, [sp, #24]
 800a34c:	1c5a      	adds	r2, r3, #1
 800a34e:	d13b      	bne.n	800a3c8 <_printf_float+0x164>
 800a350:	2306      	movs	r3, #6
 800a352:	6063      	str	r3, [r4, #4]
 800a354:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800a358:	2300      	movs	r3, #0
 800a35a:	6022      	str	r2, [r4, #0]
 800a35c:	9303      	str	r3, [sp, #12]
 800a35e:	ab0a      	add	r3, sp, #40	@ 0x28
 800a360:	e9cd a301 	strd	sl, r3, [sp, #4]
 800a364:	ab09      	add	r3, sp, #36	@ 0x24
 800a366:	9300      	str	r3, [sp, #0]
 800a368:	6861      	ldr	r1, [r4, #4]
 800a36a:	ec49 8b10 	vmov	d0, r8, r9
 800a36e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800a372:	4628      	mov	r0, r5
 800a374:	f7ff fed6 	bl	800a124 <__cvt>
 800a378:	9b06      	ldr	r3, [sp, #24]
 800a37a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a37c:	2b47      	cmp	r3, #71	@ 0x47
 800a37e:	4680      	mov	r8, r0
 800a380:	d129      	bne.n	800a3d6 <_printf_float+0x172>
 800a382:	1cc8      	adds	r0, r1, #3
 800a384:	db02      	blt.n	800a38c <_printf_float+0x128>
 800a386:	6863      	ldr	r3, [r4, #4]
 800a388:	4299      	cmp	r1, r3
 800a38a:	dd41      	ble.n	800a410 <_printf_float+0x1ac>
 800a38c:	f1aa 0a02 	sub.w	sl, sl, #2
 800a390:	fa5f fa8a 	uxtb.w	sl, sl
 800a394:	3901      	subs	r1, #1
 800a396:	4652      	mov	r2, sl
 800a398:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800a39c:	9109      	str	r1, [sp, #36]	@ 0x24
 800a39e:	f7ff ff26 	bl	800a1ee <__exponent>
 800a3a2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a3a4:	1813      	adds	r3, r2, r0
 800a3a6:	2a01      	cmp	r2, #1
 800a3a8:	4681      	mov	r9, r0
 800a3aa:	6123      	str	r3, [r4, #16]
 800a3ac:	dc02      	bgt.n	800a3b4 <_printf_float+0x150>
 800a3ae:	6822      	ldr	r2, [r4, #0]
 800a3b0:	07d2      	lsls	r2, r2, #31
 800a3b2:	d501      	bpl.n	800a3b8 <_printf_float+0x154>
 800a3b4:	3301      	adds	r3, #1
 800a3b6:	6123      	str	r3, [r4, #16]
 800a3b8:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d0a2      	beq.n	800a306 <_printf_float+0xa2>
 800a3c0:	232d      	movs	r3, #45	@ 0x2d
 800a3c2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a3c6:	e79e      	b.n	800a306 <_printf_float+0xa2>
 800a3c8:	9a06      	ldr	r2, [sp, #24]
 800a3ca:	2a47      	cmp	r2, #71	@ 0x47
 800a3cc:	d1c2      	bne.n	800a354 <_printf_float+0xf0>
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	d1c0      	bne.n	800a354 <_printf_float+0xf0>
 800a3d2:	2301      	movs	r3, #1
 800a3d4:	e7bd      	b.n	800a352 <_printf_float+0xee>
 800a3d6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800a3da:	d9db      	bls.n	800a394 <_printf_float+0x130>
 800a3dc:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800a3e0:	d118      	bne.n	800a414 <_printf_float+0x1b0>
 800a3e2:	2900      	cmp	r1, #0
 800a3e4:	6863      	ldr	r3, [r4, #4]
 800a3e6:	dd0b      	ble.n	800a400 <_printf_float+0x19c>
 800a3e8:	6121      	str	r1, [r4, #16]
 800a3ea:	b913      	cbnz	r3, 800a3f2 <_printf_float+0x18e>
 800a3ec:	6822      	ldr	r2, [r4, #0]
 800a3ee:	07d0      	lsls	r0, r2, #31
 800a3f0:	d502      	bpl.n	800a3f8 <_printf_float+0x194>
 800a3f2:	3301      	adds	r3, #1
 800a3f4:	440b      	add	r3, r1
 800a3f6:	6123      	str	r3, [r4, #16]
 800a3f8:	65a1      	str	r1, [r4, #88]	@ 0x58
 800a3fa:	f04f 0900 	mov.w	r9, #0
 800a3fe:	e7db      	b.n	800a3b8 <_printf_float+0x154>
 800a400:	b913      	cbnz	r3, 800a408 <_printf_float+0x1a4>
 800a402:	6822      	ldr	r2, [r4, #0]
 800a404:	07d2      	lsls	r2, r2, #31
 800a406:	d501      	bpl.n	800a40c <_printf_float+0x1a8>
 800a408:	3302      	adds	r3, #2
 800a40a:	e7f4      	b.n	800a3f6 <_printf_float+0x192>
 800a40c:	2301      	movs	r3, #1
 800a40e:	e7f2      	b.n	800a3f6 <_printf_float+0x192>
 800a410:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800a414:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a416:	4299      	cmp	r1, r3
 800a418:	db05      	blt.n	800a426 <_printf_float+0x1c2>
 800a41a:	6823      	ldr	r3, [r4, #0]
 800a41c:	6121      	str	r1, [r4, #16]
 800a41e:	07d8      	lsls	r0, r3, #31
 800a420:	d5ea      	bpl.n	800a3f8 <_printf_float+0x194>
 800a422:	1c4b      	adds	r3, r1, #1
 800a424:	e7e7      	b.n	800a3f6 <_printf_float+0x192>
 800a426:	2900      	cmp	r1, #0
 800a428:	bfd4      	ite	le
 800a42a:	f1c1 0202 	rsble	r2, r1, #2
 800a42e:	2201      	movgt	r2, #1
 800a430:	4413      	add	r3, r2
 800a432:	e7e0      	b.n	800a3f6 <_printf_float+0x192>
 800a434:	6823      	ldr	r3, [r4, #0]
 800a436:	055a      	lsls	r2, r3, #21
 800a438:	d407      	bmi.n	800a44a <_printf_float+0x1e6>
 800a43a:	6923      	ldr	r3, [r4, #16]
 800a43c:	4642      	mov	r2, r8
 800a43e:	4631      	mov	r1, r6
 800a440:	4628      	mov	r0, r5
 800a442:	47b8      	blx	r7
 800a444:	3001      	adds	r0, #1
 800a446:	d12b      	bne.n	800a4a0 <_printf_float+0x23c>
 800a448:	e767      	b.n	800a31a <_printf_float+0xb6>
 800a44a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800a44e:	f240 80dd 	bls.w	800a60c <_printf_float+0x3a8>
 800a452:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a456:	2200      	movs	r2, #0
 800a458:	2300      	movs	r3, #0
 800a45a:	f7f6 fb35 	bl	8000ac8 <__aeabi_dcmpeq>
 800a45e:	2800      	cmp	r0, #0
 800a460:	d033      	beq.n	800a4ca <_printf_float+0x266>
 800a462:	4a37      	ldr	r2, [pc, #220]	@ (800a540 <_printf_float+0x2dc>)
 800a464:	2301      	movs	r3, #1
 800a466:	4631      	mov	r1, r6
 800a468:	4628      	mov	r0, r5
 800a46a:	47b8      	blx	r7
 800a46c:	3001      	adds	r0, #1
 800a46e:	f43f af54 	beq.w	800a31a <_printf_float+0xb6>
 800a472:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800a476:	4543      	cmp	r3, r8
 800a478:	db02      	blt.n	800a480 <_printf_float+0x21c>
 800a47a:	6823      	ldr	r3, [r4, #0]
 800a47c:	07d8      	lsls	r0, r3, #31
 800a47e:	d50f      	bpl.n	800a4a0 <_printf_float+0x23c>
 800a480:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a484:	4631      	mov	r1, r6
 800a486:	4628      	mov	r0, r5
 800a488:	47b8      	blx	r7
 800a48a:	3001      	adds	r0, #1
 800a48c:	f43f af45 	beq.w	800a31a <_printf_float+0xb6>
 800a490:	f04f 0900 	mov.w	r9, #0
 800a494:	f108 38ff 	add.w	r8, r8, #4294967295
 800a498:	f104 0a1a 	add.w	sl, r4, #26
 800a49c:	45c8      	cmp	r8, r9
 800a49e:	dc09      	bgt.n	800a4b4 <_printf_float+0x250>
 800a4a0:	6823      	ldr	r3, [r4, #0]
 800a4a2:	079b      	lsls	r3, r3, #30
 800a4a4:	f100 8103 	bmi.w	800a6ae <_printf_float+0x44a>
 800a4a8:	68e0      	ldr	r0, [r4, #12]
 800a4aa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a4ac:	4298      	cmp	r0, r3
 800a4ae:	bfb8      	it	lt
 800a4b0:	4618      	movlt	r0, r3
 800a4b2:	e734      	b.n	800a31e <_printf_float+0xba>
 800a4b4:	2301      	movs	r3, #1
 800a4b6:	4652      	mov	r2, sl
 800a4b8:	4631      	mov	r1, r6
 800a4ba:	4628      	mov	r0, r5
 800a4bc:	47b8      	blx	r7
 800a4be:	3001      	adds	r0, #1
 800a4c0:	f43f af2b 	beq.w	800a31a <_printf_float+0xb6>
 800a4c4:	f109 0901 	add.w	r9, r9, #1
 800a4c8:	e7e8      	b.n	800a49c <_printf_float+0x238>
 800a4ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	dc39      	bgt.n	800a544 <_printf_float+0x2e0>
 800a4d0:	4a1b      	ldr	r2, [pc, #108]	@ (800a540 <_printf_float+0x2dc>)
 800a4d2:	2301      	movs	r3, #1
 800a4d4:	4631      	mov	r1, r6
 800a4d6:	4628      	mov	r0, r5
 800a4d8:	47b8      	blx	r7
 800a4da:	3001      	adds	r0, #1
 800a4dc:	f43f af1d 	beq.w	800a31a <_printf_float+0xb6>
 800a4e0:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800a4e4:	ea59 0303 	orrs.w	r3, r9, r3
 800a4e8:	d102      	bne.n	800a4f0 <_printf_float+0x28c>
 800a4ea:	6823      	ldr	r3, [r4, #0]
 800a4ec:	07d9      	lsls	r1, r3, #31
 800a4ee:	d5d7      	bpl.n	800a4a0 <_printf_float+0x23c>
 800a4f0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a4f4:	4631      	mov	r1, r6
 800a4f6:	4628      	mov	r0, r5
 800a4f8:	47b8      	blx	r7
 800a4fa:	3001      	adds	r0, #1
 800a4fc:	f43f af0d 	beq.w	800a31a <_printf_float+0xb6>
 800a500:	f04f 0a00 	mov.w	sl, #0
 800a504:	f104 0b1a 	add.w	fp, r4, #26
 800a508:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a50a:	425b      	negs	r3, r3
 800a50c:	4553      	cmp	r3, sl
 800a50e:	dc01      	bgt.n	800a514 <_printf_float+0x2b0>
 800a510:	464b      	mov	r3, r9
 800a512:	e793      	b.n	800a43c <_printf_float+0x1d8>
 800a514:	2301      	movs	r3, #1
 800a516:	465a      	mov	r2, fp
 800a518:	4631      	mov	r1, r6
 800a51a:	4628      	mov	r0, r5
 800a51c:	47b8      	blx	r7
 800a51e:	3001      	adds	r0, #1
 800a520:	f43f aefb 	beq.w	800a31a <_printf_float+0xb6>
 800a524:	f10a 0a01 	add.w	sl, sl, #1
 800a528:	e7ee      	b.n	800a508 <_printf_float+0x2a4>
 800a52a:	bf00      	nop
 800a52c:	7fefffff 	.word	0x7fefffff
 800a530:	0800cab4 	.word	0x0800cab4
 800a534:	0800cab0 	.word	0x0800cab0
 800a538:	0800cabc 	.word	0x0800cabc
 800a53c:	0800cab8 	.word	0x0800cab8
 800a540:	0800cac0 	.word	0x0800cac0
 800a544:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a546:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800a54a:	4553      	cmp	r3, sl
 800a54c:	bfa8      	it	ge
 800a54e:	4653      	movge	r3, sl
 800a550:	2b00      	cmp	r3, #0
 800a552:	4699      	mov	r9, r3
 800a554:	dc36      	bgt.n	800a5c4 <_printf_float+0x360>
 800a556:	f04f 0b00 	mov.w	fp, #0
 800a55a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a55e:	f104 021a 	add.w	r2, r4, #26
 800a562:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a564:	9306      	str	r3, [sp, #24]
 800a566:	eba3 0309 	sub.w	r3, r3, r9
 800a56a:	455b      	cmp	r3, fp
 800a56c:	dc31      	bgt.n	800a5d2 <_printf_float+0x36e>
 800a56e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a570:	459a      	cmp	sl, r3
 800a572:	dc3a      	bgt.n	800a5ea <_printf_float+0x386>
 800a574:	6823      	ldr	r3, [r4, #0]
 800a576:	07da      	lsls	r2, r3, #31
 800a578:	d437      	bmi.n	800a5ea <_printf_float+0x386>
 800a57a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a57c:	ebaa 0903 	sub.w	r9, sl, r3
 800a580:	9b06      	ldr	r3, [sp, #24]
 800a582:	ebaa 0303 	sub.w	r3, sl, r3
 800a586:	4599      	cmp	r9, r3
 800a588:	bfa8      	it	ge
 800a58a:	4699      	movge	r9, r3
 800a58c:	f1b9 0f00 	cmp.w	r9, #0
 800a590:	dc33      	bgt.n	800a5fa <_printf_float+0x396>
 800a592:	f04f 0800 	mov.w	r8, #0
 800a596:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a59a:	f104 0b1a 	add.w	fp, r4, #26
 800a59e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a5a0:	ebaa 0303 	sub.w	r3, sl, r3
 800a5a4:	eba3 0309 	sub.w	r3, r3, r9
 800a5a8:	4543      	cmp	r3, r8
 800a5aa:	f77f af79 	ble.w	800a4a0 <_printf_float+0x23c>
 800a5ae:	2301      	movs	r3, #1
 800a5b0:	465a      	mov	r2, fp
 800a5b2:	4631      	mov	r1, r6
 800a5b4:	4628      	mov	r0, r5
 800a5b6:	47b8      	blx	r7
 800a5b8:	3001      	adds	r0, #1
 800a5ba:	f43f aeae 	beq.w	800a31a <_printf_float+0xb6>
 800a5be:	f108 0801 	add.w	r8, r8, #1
 800a5c2:	e7ec      	b.n	800a59e <_printf_float+0x33a>
 800a5c4:	4642      	mov	r2, r8
 800a5c6:	4631      	mov	r1, r6
 800a5c8:	4628      	mov	r0, r5
 800a5ca:	47b8      	blx	r7
 800a5cc:	3001      	adds	r0, #1
 800a5ce:	d1c2      	bne.n	800a556 <_printf_float+0x2f2>
 800a5d0:	e6a3      	b.n	800a31a <_printf_float+0xb6>
 800a5d2:	2301      	movs	r3, #1
 800a5d4:	4631      	mov	r1, r6
 800a5d6:	4628      	mov	r0, r5
 800a5d8:	9206      	str	r2, [sp, #24]
 800a5da:	47b8      	blx	r7
 800a5dc:	3001      	adds	r0, #1
 800a5de:	f43f ae9c 	beq.w	800a31a <_printf_float+0xb6>
 800a5e2:	9a06      	ldr	r2, [sp, #24]
 800a5e4:	f10b 0b01 	add.w	fp, fp, #1
 800a5e8:	e7bb      	b.n	800a562 <_printf_float+0x2fe>
 800a5ea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a5ee:	4631      	mov	r1, r6
 800a5f0:	4628      	mov	r0, r5
 800a5f2:	47b8      	blx	r7
 800a5f4:	3001      	adds	r0, #1
 800a5f6:	d1c0      	bne.n	800a57a <_printf_float+0x316>
 800a5f8:	e68f      	b.n	800a31a <_printf_float+0xb6>
 800a5fa:	9a06      	ldr	r2, [sp, #24]
 800a5fc:	464b      	mov	r3, r9
 800a5fe:	4442      	add	r2, r8
 800a600:	4631      	mov	r1, r6
 800a602:	4628      	mov	r0, r5
 800a604:	47b8      	blx	r7
 800a606:	3001      	adds	r0, #1
 800a608:	d1c3      	bne.n	800a592 <_printf_float+0x32e>
 800a60a:	e686      	b.n	800a31a <_printf_float+0xb6>
 800a60c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800a610:	f1ba 0f01 	cmp.w	sl, #1
 800a614:	dc01      	bgt.n	800a61a <_printf_float+0x3b6>
 800a616:	07db      	lsls	r3, r3, #31
 800a618:	d536      	bpl.n	800a688 <_printf_float+0x424>
 800a61a:	2301      	movs	r3, #1
 800a61c:	4642      	mov	r2, r8
 800a61e:	4631      	mov	r1, r6
 800a620:	4628      	mov	r0, r5
 800a622:	47b8      	blx	r7
 800a624:	3001      	adds	r0, #1
 800a626:	f43f ae78 	beq.w	800a31a <_printf_float+0xb6>
 800a62a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a62e:	4631      	mov	r1, r6
 800a630:	4628      	mov	r0, r5
 800a632:	47b8      	blx	r7
 800a634:	3001      	adds	r0, #1
 800a636:	f43f ae70 	beq.w	800a31a <_printf_float+0xb6>
 800a63a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a63e:	2200      	movs	r2, #0
 800a640:	2300      	movs	r3, #0
 800a642:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a646:	f7f6 fa3f 	bl	8000ac8 <__aeabi_dcmpeq>
 800a64a:	b9c0      	cbnz	r0, 800a67e <_printf_float+0x41a>
 800a64c:	4653      	mov	r3, sl
 800a64e:	f108 0201 	add.w	r2, r8, #1
 800a652:	4631      	mov	r1, r6
 800a654:	4628      	mov	r0, r5
 800a656:	47b8      	blx	r7
 800a658:	3001      	adds	r0, #1
 800a65a:	d10c      	bne.n	800a676 <_printf_float+0x412>
 800a65c:	e65d      	b.n	800a31a <_printf_float+0xb6>
 800a65e:	2301      	movs	r3, #1
 800a660:	465a      	mov	r2, fp
 800a662:	4631      	mov	r1, r6
 800a664:	4628      	mov	r0, r5
 800a666:	47b8      	blx	r7
 800a668:	3001      	adds	r0, #1
 800a66a:	f43f ae56 	beq.w	800a31a <_printf_float+0xb6>
 800a66e:	f108 0801 	add.w	r8, r8, #1
 800a672:	45d0      	cmp	r8, sl
 800a674:	dbf3      	blt.n	800a65e <_printf_float+0x3fa>
 800a676:	464b      	mov	r3, r9
 800a678:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800a67c:	e6df      	b.n	800a43e <_printf_float+0x1da>
 800a67e:	f04f 0800 	mov.w	r8, #0
 800a682:	f104 0b1a 	add.w	fp, r4, #26
 800a686:	e7f4      	b.n	800a672 <_printf_float+0x40e>
 800a688:	2301      	movs	r3, #1
 800a68a:	4642      	mov	r2, r8
 800a68c:	e7e1      	b.n	800a652 <_printf_float+0x3ee>
 800a68e:	2301      	movs	r3, #1
 800a690:	464a      	mov	r2, r9
 800a692:	4631      	mov	r1, r6
 800a694:	4628      	mov	r0, r5
 800a696:	47b8      	blx	r7
 800a698:	3001      	adds	r0, #1
 800a69a:	f43f ae3e 	beq.w	800a31a <_printf_float+0xb6>
 800a69e:	f108 0801 	add.w	r8, r8, #1
 800a6a2:	68e3      	ldr	r3, [r4, #12]
 800a6a4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a6a6:	1a5b      	subs	r3, r3, r1
 800a6a8:	4543      	cmp	r3, r8
 800a6aa:	dcf0      	bgt.n	800a68e <_printf_float+0x42a>
 800a6ac:	e6fc      	b.n	800a4a8 <_printf_float+0x244>
 800a6ae:	f04f 0800 	mov.w	r8, #0
 800a6b2:	f104 0919 	add.w	r9, r4, #25
 800a6b6:	e7f4      	b.n	800a6a2 <_printf_float+0x43e>

0800a6b8 <_printf_common>:
 800a6b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a6bc:	4616      	mov	r6, r2
 800a6be:	4698      	mov	r8, r3
 800a6c0:	688a      	ldr	r2, [r1, #8]
 800a6c2:	690b      	ldr	r3, [r1, #16]
 800a6c4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a6c8:	4293      	cmp	r3, r2
 800a6ca:	bfb8      	it	lt
 800a6cc:	4613      	movlt	r3, r2
 800a6ce:	6033      	str	r3, [r6, #0]
 800a6d0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a6d4:	4607      	mov	r7, r0
 800a6d6:	460c      	mov	r4, r1
 800a6d8:	b10a      	cbz	r2, 800a6de <_printf_common+0x26>
 800a6da:	3301      	adds	r3, #1
 800a6dc:	6033      	str	r3, [r6, #0]
 800a6de:	6823      	ldr	r3, [r4, #0]
 800a6e0:	0699      	lsls	r1, r3, #26
 800a6e2:	bf42      	ittt	mi
 800a6e4:	6833      	ldrmi	r3, [r6, #0]
 800a6e6:	3302      	addmi	r3, #2
 800a6e8:	6033      	strmi	r3, [r6, #0]
 800a6ea:	6825      	ldr	r5, [r4, #0]
 800a6ec:	f015 0506 	ands.w	r5, r5, #6
 800a6f0:	d106      	bne.n	800a700 <_printf_common+0x48>
 800a6f2:	f104 0a19 	add.w	sl, r4, #25
 800a6f6:	68e3      	ldr	r3, [r4, #12]
 800a6f8:	6832      	ldr	r2, [r6, #0]
 800a6fa:	1a9b      	subs	r3, r3, r2
 800a6fc:	42ab      	cmp	r3, r5
 800a6fe:	dc26      	bgt.n	800a74e <_printf_common+0x96>
 800a700:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a704:	6822      	ldr	r2, [r4, #0]
 800a706:	3b00      	subs	r3, #0
 800a708:	bf18      	it	ne
 800a70a:	2301      	movne	r3, #1
 800a70c:	0692      	lsls	r2, r2, #26
 800a70e:	d42b      	bmi.n	800a768 <_printf_common+0xb0>
 800a710:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a714:	4641      	mov	r1, r8
 800a716:	4638      	mov	r0, r7
 800a718:	47c8      	blx	r9
 800a71a:	3001      	adds	r0, #1
 800a71c:	d01e      	beq.n	800a75c <_printf_common+0xa4>
 800a71e:	6823      	ldr	r3, [r4, #0]
 800a720:	6922      	ldr	r2, [r4, #16]
 800a722:	f003 0306 	and.w	r3, r3, #6
 800a726:	2b04      	cmp	r3, #4
 800a728:	bf02      	ittt	eq
 800a72a:	68e5      	ldreq	r5, [r4, #12]
 800a72c:	6833      	ldreq	r3, [r6, #0]
 800a72e:	1aed      	subeq	r5, r5, r3
 800a730:	68a3      	ldr	r3, [r4, #8]
 800a732:	bf0c      	ite	eq
 800a734:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a738:	2500      	movne	r5, #0
 800a73a:	4293      	cmp	r3, r2
 800a73c:	bfc4      	itt	gt
 800a73e:	1a9b      	subgt	r3, r3, r2
 800a740:	18ed      	addgt	r5, r5, r3
 800a742:	2600      	movs	r6, #0
 800a744:	341a      	adds	r4, #26
 800a746:	42b5      	cmp	r5, r6
 800a748:	d11a      	bne.n	800a780 <_printf_common+0xc8>
 800a74a:	2000      	movs	r0, #0
 800a74c:	e008      	b.n	800a760 <_printf_common+0xa8>
 800a74e:	2301      	movs	r3, #1
 800a750:	4652      	mov	r2, sl
 800a752:	4641      	mov	r1, r8
 800a754:	4638      	mov	r0, r7
 800a756:	47c8      	blx	r9
 800a758:	3001      	adds	r0, #1
 800a75a:	d103      	bne.n	800a764 <_printf_common+0xac>
 800a75c:	f04f 30ff 	mov.w	r0, #4294967295
 800a760:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a764:	3501      	adds	r5, #1
 800a766:	e7c6      	b.n	800a6f6 <_printf_common+0x3e>
 800a768:	18e1      	adds	r1, r4, r3
 800a76a:	1c5a      	adds	r2, r3, #1
 800a76c:	2030      	movs	r0, #48	@ 0x30
 800a76e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a772:	4422      	add	r2, r4
 800a774:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a778:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a77c:	3302      	adds	r3, #2
 800a77e:	e7c7      	b.n	800a710 <_printf_common+0x58>
 800a780:	2301      	movs	r3, #1
 800a782:	4622      	mov	r2, r4
 800a784:	4641      	mov	r1, r8
 800a786:	4638      	mov	r0, r7
 800a788:	47c8      	blx	r9
 800a78a:	3001      	adds	r0, #1
 800a78c:	d0e6      	beq.n	800a75c <_printf_common+0xa4>
 800a78e:	3601      	adds	r6, #1
 800a790:	e7d9      	b.n	800a746 <_printf_common+0x8e>
	...

0800a794 <_printf_i>:
 800a794:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a798:	7e0f      	ldrb	r7, [r1, #24]
 800a79a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a79c:	2f78      	cmp	r7, #120	@ 0x78
 800a79e:	4691      	mov	r9, r2
 800a7a0:	4680      	mov	r8, r0
 800a7a2:	460c      	mov	r4, r1
 800a7a4:	469a      	mov	sl, r3
 800a7a6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a7aa:	d807      	bhi.n	800a7bc <_printf_i+0x28>
 800a7ac:	2f62      	cmp	r7, #98	@ 0x62
 800a7ae:	d80a      	bhi.n	800a7c6 <_printf_i+0x32>
 800a7b0:	2f00      	cmp	r7, #0
 800a7b2:	f000 80d1 	beq.w	800a958 <_printf_i+0x1c4>
 800a7b6:	2f58      	cmp	r7, #88	@ 0x58
 800a7b8:	f000 80b8 	beq.w	800a92c <_printf_i+0x198>
 800a7bc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a7c0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a7c4:	e03a      	b.n	800a83c <_printf_i+0xa8>
 800a7c6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a7ca:	2b15      	cmp	r3, #21
 800a7cc:	d8f6      	bhi.n	800a7bc <_printf_i+0x28>
 800a7ce:	a101      	add	r1, pc, #4	@ (adr r1, 800a7d4 <_printf_i+0x40>)
 800a7d0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a7d4:	0800a82d 	.word	0x0800a82d
 800a7d8:	0800a841 	.word	0x0800a841
 800a7dc:	0800a7bd 	.word	0x0800a7bd
 800a7e0:	0800a7bd 	.word	0x0800a7bd
 800a7e4:	0800a7bd 	.word	0x0800a7bd
 800a7e8:	0800a7bd 	.word	0x0800a7bd
 800a7ec:	0800a841 	.word	0x0800a841
 800a7f0:	0800a7bd 	.word	0x0800a7bd
 800a7f4:	0800a7bd 	.word	0x0800a7bd
 800a7f8:	0800a7bd 	.word	0x0800a7bd
 800a7fc:	0800a7bd 	.word	0x0800a7bd
 800a800:	0800a93f 	.word	0x0800a93f
 800a804:	0800a86b 	.word	0x0800a86b
 800a808:	0800a8f9 	.word	0x0800a8f9
 800a80c:	0800a7bd 	.word	0x0800a7bd
 800a810:	0800a7bd 	.word	0x0800a7bd
 800a814:	0800a961 	.word	0x0800a961
 800a818:	0800a7bd 	.word	0x0800a7bd
 800a81c:	0800a86b 	.word	0x0800a86b
 800a820:	0800a7bd 	.word	0x0800a7bd
 800a824:	0800a7bd 	.word	0x0800a7bd
 800a828:	0800a901 	.word	0x0800a901
 800a82c:	6833      	ldr	r3, [r6, #0]
 800a82e:	1d1a      	adds	r2, r3, #4
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	6032      	str	r2, [r6, #0]
 800a834:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a838:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a83c:	2301      	movs	r3, #1
 800a83e:	e09c      	b.n	800a97a <_printf_i+0x1e6>
 800a840:	6833      	ldr	r3, [r6, #0]
 800a842:	6820      	ldr	r0, [r4, #0]
 800a844:	1d19      	adds	r1, r3, #4
 800a846:	6031      	str	r1, [r6, #0]
 800a848:	0606      	lsls	r6, r0, #24
 800a84a:	d501      	bpl.n	800a850 <_printf_i+0xbc>
 800a84c:	681d      	ldr	r5, [r3, #0]
 800a84e:	e003      	b.n	800a858 <_printf_i+0xc4>
 800a850:	0645      	lsls	r5, r0, #25
 800a852:	d5fb      	bpl.n	800a84c <_printf_i+0xb8>
 800a854:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a858:	2d00      	cmp	r5, #0
 800a85a:	da03      	bge.n	800a864 <_printf_i+0xd0>
 800a85c:	232d      	movs	r3, #45	@ 0x2d
 800a85e:	426d      	negs	r5, r5
 800a860:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a864:	4858      	ldr	r0, [pc, #352]	@ (800a9c8 <_printf_i+0x234>)
 800a866:	230a      	movs	r3, #10
 800a868:	e011      	b.n	800a88e <_printf_i+0xfa>
 800a86a:	6821      	ldr	r1, [r4, #0]
 800a86c:	6833      	ldr	r3, [r6, #0]
 800a86e:	0608      	lsls	r0, r1, #24
 800a870:	f853 5b04 	ldr.w	r5, [r3], #4
 800a874:	d402      	bmi.n	800a87c <_printf_i+0xe8>
 800a876:	0649      	lsls	r1, r1, #25
 800a878:	bf48      	it	mi
 800a87a:	b2ad      	uxthmi	r5, r5
 800a87c:	2f6f      	cmp	r7, #111	@ 0x6f
 800a87e:	4852      	ldr	r0, [pc, #328]	@ (800a9c8 <_printf_i+0x234>)
 800a880:	6033      	str	r3, [r6, #0]
 800a882:	bf14      	ite	ne
 800a884:	230a      	movne	r3, #10
 800a886:	2308      	moveq	r3, #8
 800a888:	2100      	movs	r1, #0
 800a88a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a88e:	6866      	ldr	r6, [r4, #4]
 800a890:	60a6      	str	r6, [r4, #8]
 800a892:	2e00      	cmp	r6, #0
 800a894:	db05      	blt.n	800a8a2 <_printf_i+0x10e>
 800a896:	6821      	ldr	r1, [r4, #0]
 800a898:	432e      	orrs	r6, r5
 800a89a:	f021 0104 	bic.w	r1, r1, #4
 800a89e:	6021      	str	r1, [r4, #0]
 800a8a0:	d04b      	beq.n	800a93a <_printf_i+0x1a6>
 800a8a2:	4616      	mov	r6, r2
 800a8a4:	fbb5 f1f3 	udiv	r1, r5, r3
 800a8a8:	fb03 5711 	mls	r7, r3, r1, r5
 800a8ac:	5dc7      	ldrb	r7, [r0, r7]
 800a8ae:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a8b2:	462f      	mov	r7, r5
 800a8b4:	42bb      	cmp	r3, r7
 800a8b6:	460d      	mov	r5, r1
 800a8b8:	d9f4      	bls.n	800a8a4 <_printf_i+0x110>
 800a8ba:	2b08      	cmp	r3, #8
 800a8bc:	d10b      	bne.n	800a8d6 <_printf_i+0x142>
 800a8be:	6823      	ldr	r3, [r4, #0]
 800a8c0:	07df      	lsls	r7, r3, #31
 800a8c2:	d508      	bpl.n	800a8d6 <_printf_i+0x142>
 800a8c4:	6923      	ldr	r3, [r4, #16]
 800a8c6:	6861      	ldr	r1, [r4, #4]
 800a8c8:	4299      	cmp	r1, r3
 800a8ca:	bfde      	ittt	le
 800a8cc:	2330      	movle	r3, #48	@ 0x30
 800a8ce:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a8d2:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a8d6:	1b92      	subs	r2, r2, r6
 800a8d8:	6122      	str	r2, [r4, #16]
 800a8da:	f8cd a000 	str.w	sl, [sp]
 800a8de:	464b      	mov	r3, r9
 800a8e0:	aa03      	add	r2, sp, #12
 800a8e2:	4621      	mov	r1, r4
 800a8e4:	4640      	mov	r0, r8
 800a8e6:	f7ff fee7 	bl	800a6b8 <_printf_common>
 800a8ea:	3001      	adds	r0, #1
 800a8ec:	d14a      	bne.n	800a984 <_printf_i+0x1f0>
 800a8ee:	f04f 30ff 	mov.w	r0, #4294967295
 800a8f2:	b004      	add	sp, #16
 800a8f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a8f8:	6823      	ldr	r3, [r4, #0]
 800a8fa:	f043 0320 	orr.w	r3, r3, #32
 800a8fe:	6023      	str	r3, [r4, #0]
 800a900:	4832      	ldr	r0, [pc, #200]	@ (800a9cc <_printf_i+0x238>)
 800a902:	2778      	movs	r7, #120	@ 0x78
 800a904:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a908:	6823      	ldr	r3, [r4, #0]
 800a90a:	6831      	ldr	r1, [r6, #0]
 800a90c:	061f      	lsls	r7, r3, #24
 800a90e:	f851 5b04 	ldr.w	r5, [r1], #4
 800a912:	d402      	bmi.n	800a91a <_printf_i+0x186>
 800a914:	065f      	lsls	r7, r3, #25
 800a916:	bf48      	it	mi
 800a918:	b2ad      	uxthmi	r5, r5
 800a91a:	6031      	str	r1, [r6, #0]
 800a91c:	07d9      	lsls	r1, r3, #31
 800a91e:	bf44      	itt	mi
 800a920:	f043 0320 	orrmi.w	r3, r3, #32
 800a924:	6023      	strmi	r3, [r4, #0]
 800a926:	b11d      	cbz	r5, 800a930 <_printf_i+0x19c>
 800a928:	2310      	movs	r3, #16
 800a92a:	e7ad      	b.n	800a888 <_printf_i+0xf4>
 800a92c:	4826      	ldr	r0, [pc, #152]	@ (800a9c8 <_printf_i+0x234>)
 800a92e:	e7e9      	b.n	800a904 <_printf_i+0x170>
 800a930:	6823      	ldr	r3, [r4, #0]
 800a932:	f023 0320 	bic.w	r3, r3, #32
 800a936:	6023      	str	r3, [r4, #0]
 800a938:	e7f6      	b.n	800a928 <_printf_i+0x194>
 800a93a:	4616      	mov	r6, r2
 800a93c:	e7bd      	b.n	800a8ba <_printf_i+0x126>
 800a93e:	6833      	ldr	r3, [r6, #0]
 800a940:	6825      	ldr	r5, [r4, #0]
 800a942:	6961      	ldr	r1, [r4, #20]
 800a944:	1d18      	adds	r0, r3, #4
 800a946:	6030      	str	r0, [r6, #0]
 800a948:	062e      	lsls	r6, r5, #24
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	d501      	bpl.n	800a952 <_printf_i+0x1be>
 800a94e:	6019      	str	r1, [r3, #0]
 800a950:	e002      	b.n	800a958 <_printf_i+0x1c4>
 800a952:	0668      	lsls	r0, r5, #25
 800a954:	d5fb      	bpl.n	800a94e <_printf_i+0x1ba>
 800a956:	8019      	strh	r1, [r3, #0]
 800a958:	2300      	movs	r3, #0
 800a95a:	6123      	str	r3, [r4, #16]
 800a95c:	4616      	mov	r6, r2
 800a95e:	e7bc      	b.n	800a8da <_printf_i+0x146>
 800a960:	6833      	ldr	r3, [r6, #0]
 800a962:	1d1a      	adds	r2, r3, #4
 800a964:	6032      	str	r2, [r6, #0]
 800a966:	681e      	ldr	r6, [r3, #0]
 800a968:	6862      	ldr	r2, [r4, #4]
 800a96a:	2100      	movs	r1, #0
 800a96c:	4630      	mov	r0, r6
 800a96e:	f7f5 fc2f 	bl	80001d0 <memchr>
 800a972:	b108      	cbz	r0, 800a978 <_printf_i+0x1e4>
 800a974:	1b80      	subs	r0, r0, r6
 800a976:	6060      	str	r0, [r4, #4]
 800a978:	6863      	ldr	r3, [r4, #4]
 800a97a:	6123      	str	r3, [r4, #16]
 800a97c:	2300      	movs	r3, #0
 800a97e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a982:	e7aa      	b.n	800a8da <_printf_i+0x146>
 800a984:	6923      	ldr	r3, [r4, #16]
 800a986:	4632      	mov	r2, r6
 800a988:	4649      	mov	r1, r9
 800a98a:	4640      	mov	r0, r8
 800a98c:	47d0      	blx	sl
 800a98e:	3001      	adds	r0, #1
 800a990:	d0ad      	beq.n	800a8ee <_printf_i+0x15a>
 800a992:	6823      	ldr	r3, [r4, #0]
 800a994:	079b      	lsls	r3, r3, #30
 800a996:	d413      	bmi.n	800a9c0 <_printf_i+0x22c>
 800a998:	68e0      	ldr	r0, [r4, #12]
 800a99a:	9b03      	ldr	r3, [sp, #12]
 800a99c:	4298      	cmp	r0, r3
 800a99e:	bfb8      	it	lt
 800a9a0:	4618      	movlt	r0, r3
 800a9a2:	e7a6      	b.n	800a8f2 <_printf_i+0x15e>
 800a9a4:	2301      	movs	r3, #1
 800a9a6:	4632      	mov	r2, r6
 800a9a8:	4649      	mov	r1, r9
 800a9aa:	4640      	mov	r0, r8
 800a9ac:	47d0      	blx	sl
 800a9ae:	3001      	adds	r0, #1
 800a9b0:	d09d      	beq.n	800a8ee <_printf_i+0x15a>
 800a9b2:	3501      	adds	r5, #1
 800a9b4:	68e3      	ldr	r3, [r4, #12]
 800a9b6:	9903      	ldr	r1, [sp, #12]
 800a9b8:	1a5b      	subs	r3, r3, r1
 800a9ba:	42ab      	cmp	r3, r5
 800a9bc:	dcf2      	bgt.n	800a9a4 <_printf_i+0x210>
 800a9be:	e7eb      	b.n	800a998 <_printf_i+0x204>
 800a9c0:	2500      	movs	r5, #0
 800a9c2:	f104 0619 	add.w	r6, r4, #25
 800a9c6:	e7f5      	b.n	800a9b4 <_printf_i+0x220>
 800a9c8:	0800cac2 	.word	0x0800cac2
 800a9cc:	0800cad3 	.word	0x0800cad3

0800a9d0 <std>:
 800a9d0:	2300      	movs	r3, #0
 800a9d2:	b510      	push	{r4, lr}
 800a9d4:	4604      	mov	r4, r0
 800a9d6:	e9c0 3300 	strd	r3, r3, [r0]
 800a9da:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a9de:	6083      	str	r3, [r0, #8]
 800a9e0:	8181      	strh	r1, [r0, #12]
 800a9e2:	6643      	str	r3, [r0, #100]	@ 0x64
 800a9e4:	81c2      	strh	r2, [r0, #14]
 800a9e6:	6183      	str	r3, [r0, #24]
 800a9e8:	4619      	mov	r1, r3
 800a9ea:	2208      	movs	r2, #8
 800a9ec:	305c      	adds	r0, #92	@ 0x5c
 800a9ee:	f000 f9f9 	bl	800ade4 <memset>
 800a9f2:	4b0d      	ldr	r3, [pc, #52]	@ (800aa28 <std+0x58>)
 800a9f4:	6263      	str	r3, [r4, #36]	@ 0x24
 800a9f6:	4b0d      	ldr	r3, [pc, #52]	@ (800aa2c <std+0x5c>)
 800a9f8:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a9fa:	4b0d      	ldr	r3, [pc, #52]	@ (800aa30 <std+0x60>)
 800a9fc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800a9fe:	4b0d      	ldr	r3, [pc, #52]	@ (800aa34 <std+0x64>)
 800aa00:	6323      	str	r3, [r4, #48]	@ 0x30
 800aa02:	4b0d      	ldr	r3, [pc, #52]	@ (800aa38 <std+0x68>)
 800aa04:	6224      	str	r4, [r4, #32]
 800aa06:	429c      	cmp	r4, r3
 800aa08:	d006      	beq.n	800aa18 <std+0x48>
 800aa0a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800aa0e:	4294      	cmp	r4, r2
 800aa10:	d002      	beq.n	800aa18 <std+0x48>
 800aa12:	33d0      	adds	r3, #208	@ 0xd0
 800aa14:	429c      	cmp	r4, r3
 800aa16:	d105      	bne.n	800aa24 <std+0x54>
 800aa18:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800aa1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aa20:	f000 ba6c 	b.w	800aefc <__retarget_lock_init_recursive>
 800aa24:	bd10      	pop	{r4, pc}
 800aa26:	bf00      	nop
 800aa28:	0800ac35 	.word	0x0800ac35
 800aa2c:	0800ac57 	.word	0x0800ac57
 800aa30:	0800ac8f 	.word	0x0800ac8f
 800aa34:	0800acb3 	.word	0x0800acb3
 800aa38:	20000eb8 	.word	0x20000eb8

0800aa3c <stdio_exit_handler>:
 800aa3c:	4a02      	ldr	r2, [pc, #8]	@ (800aa48 <stdio_exit_handler+0xc>)
 800aa3e:	4903      	ldr	r1, [pc, #12]	@ (800aa4c <stdio_exit_handler+0x10>)
 800aa40:	4803      	ldr	r0, [pc, #12]	@ (800aa50 <stdio_exit_handler+0x14>)
 800aa42:	f000 b869 	b.w	800ab18 <_fwalk_sglue>
 800aa46:	bf00      	nop
 800aa48:	20000214 	.word	0x20000214
 800aa4c:	0800c6cd 	.word	0x0800c6cd
 800aa50:	20000224 	.word	0x20000224

0800aa54 <cleanup_stdio>:
 800aa54:	6841      	ldr	r1, [r0, #4]
 800aa56:	4b0c      	ldr	r3, [pc, #48]	@ (800aa88 <cleanup_stdio+0x34>)
 800aa58:	4299      	cmp	r1, r3
 800aa5a:	b510      	push	{r4, lr}
 800aa5c:	4604      	mov	r4, r0
 800aa5e:	d001      	beq.n	800aa64 <cleanup_stdio+0x10>
 800aa60:	f001 fe34 	bl	800c6cc <_fflush_r>
 800aa64:	68a1      	ldr	r1, [r4, #8]
 800aa66:	4b09      	ldr	r3, [pc, #36]	@ (800aa8c <cleanup_stdio+0x38>)
 800aa68:	4299      	cmp	r1, r3
 800aa6a:	d002      	beq.n	800aa72 <cleanup_stdio+0x1e>
 800aa6c:	4620      	mov	r0, r4
 800aa6e:	f001 fe2d 	bl	800c6cc <_fflush_r>
 800aa72:	68e1      	ldr	r1, [r4, #12]
 800aa74:	4b06      	ldr	r3, [pc, #24]	@ (800aa90 <cleanup_stdio+0x3c>)
 800aa76:	4299      	cmp	r1, r3
 800aa78:	d004      	beq.n	800aa84 <cleanup_stdio+0x30>
 800aa7a:	4620      	mov	r0, r4
 800aa7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aa80:	f001 be24 	b.w	800c6cc <_fflush_r>
 800aa84:	bd10      	pop	{r4, pc}
 800aa86:	bf00      	nop
 800aa88:	20000eb8 	.word	0x20000eb8
 800aa8c:	20000f20 	.word	0x20000f20
 800aa90:	20000f88 	.word	0x20000f88

0800aa94 <global_stdio_init.part.0>:
 800aa94:	b510      	push	{r4, lr}
 800aa96:	4b0b      	ldr	r3, [pc, #44]	@ (800aac4 <global_stdio_init.part.0+0x30>)
 800aa98:	4c0b      	ldr	r4, [pc, #44]	@ (800aac8 <global_stdio_init.part.0+0x34>)
 800aa9a:	4a0c      	ldr	r2, [pc, #48]	@ (800aacc <global_stdio_init.part.0+0x38>)
 800aa9c:	601a      	str	r2, [r3, #0]
 800aa9e:	4620      	mov	r0, r4
 800aaa0:	2200      	movs	r2, #0
 800aaa2:	2104      	movs	r1, #4
 800aaa4:	f7ff ff94 	bl	800a9d0 <std>
 800aaa8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800aaac:	2201      	movs	r2, #1
 800aaae:	2109      	movs	r1, #9
 800aab0:	f7ff ff8e 	bl	800a9d0 <std>
 800aab4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800aab8:	2202      	movs	r2, #2
 800aaba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aabe:	2112      	movs	r1, #18
 800aac0:	f7ff bf86 	b.w	800a9d0 <std>
 800aac4:	20000ff0 	.word	0x20000ff0
 800aac8:	20000eb8 	.word	0x20000eb8
 800aacc:	0800aa3d 	.word	0x0800aa3d

0800aad0 <__sfp_lock_acquire>:
 800aad0:	4801      	ldr	r0, [pc, #4]	@ (800aad8 <__sfp_lock_acquire+0x8>)
 800aad2:	f000 ba14 	b.w	800aefe <__retarget_lock_acquire_recursive>
 800aad6:	bf00      	nop
 800aad8:	20000ff9 	.word	0x20000ff9

0800aadc <__sfp_lock_release>:
 800aadc:	4801      	ldr	r0, [pc, #4]	@ (800aae4 <__sfp_lock_release+0x8>)
 800aade:	f000 ba0f 	b.w	800af00 <__retarget_lock_release_recursive>
 800aae2:	bf00      	nop
 800aae4:	20000ff9 	.word	0x20000ff9

0800aae8 <__sinit>:
 800aae8:	b510      	push	{r4, lr}
 800aaea:	4604      	mov	r4, r0
 800aaec:	f7ff fff0 	bl	800aad0 <__sfp_lock_acquire>
 800aaf0:	6a23      	ldr	r3, [r4, #32]
 800aaf2:	b11b      	cbz	r3, 800aafc <__sinit+0x14>
 800aaf4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aaf8:	f7ff bff0 	b.w	800aadc <__sfp_lock_release>
 800aafc:	4b04      	ldr	r3, [pc, #16]	@ (800ab10 <__sinit+0x28>)
 800aafe:	6223      	str	r3, [r4, #32]
 800ab00:	4b04      	ldr	r3, [pc, #16]	@ (800ab14 <__sinit+0x2c>)
 800ab02:	681b      	ldr	r3, [r3, #0]
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	d1f5      	bne.n	800aaf4 <__sinit+0xc>
 800ab08:	f7ff ffc4 	bl	800aa94 <global_stdio_init.part.0>
 800ab0c:	e7f2      	b.n	800aaf4 <__sinit+0xc>
 800ab0e:	bf00      	nop
 800ab10:	0800aa55 	.word	0x0800aa55
 800ab14:	20000ff0 	.word	0x20000ff0

0800ab18 <_fwalk_sglue>:
 800ab18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ab1c:	4607      	mov	r7, r0
 800ab1e:	4688      	mov	r8, r1
 800ab20:	4614      	mov	r4, r2
 800ab22:	2600      	movs	r6, #0
 800ab24:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ab28:	f1b9 0901 	subs.w	r9, r9, #1
 800ab2c:	d505      	bpl.n	800ab3a <_fwalk_sglue+0x22>
 800ab2e:	6824      	ldr	r4, [r4, #0]
 800ab30:	2c00      	cmp	r4, #0
 800ab32:	d1f7      	bne.n	800ab24 <_fwalk_sglue+0xc>
 800ab34:	4630      	mov	r0, r6
 800ab36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ab3a:	89ab      	ldrh	r3, [r5, #12]
 800ab3c:	2b01      	cmp	r3, #1
 800ab3e:	d907      	bls.n	800ab50 <_fwalk_sglue+0x38>
 800ab40:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ab44:	3301      	adds	r3, #1
 800ab46:	d003      	beq.n	800ab50 <_fwalk_sglue+0x38>
 800ab48:	4629      	mov	r1, r5
 800ab4a:	4638      	mov	r0, r7
 800ab4c:	47c0      	blx	r8
 800ab4e:	4306      	orrs	r6, r0
 800ab50:	3568      	adds	r5, #104	@ 0x68
 800ab52:	e7e9      	b.n	800ab28 <_fwalk_sglue+0x10>

0800ab54 <iprintf>:
 800ab54:	b40f      	push	{r0, r1, r2, r3}
 800ab56:	b507      	push	{r0, r1, r2, lr}
 800ab58:	4906      	ldr	r1, [pc, #24]	@ (800ab74 <iprintf+0x20>)
 800ab5a:	ab04      	add	r3, sp, #16
 800ab5c:	6808      	ldr	r0, [r1, #0]
 800ab5e:	f853 2b04 	ldr.w	r2, [r3], #4
 800ab62:	6881      	ldr	r1, [r0, #8]
 800ab64:	9301      	str	r3, [sp, #4]
 800ab66:	f001 fc15 	bl	800c394 <_vfiprintf_r>
 800ab6a:	b003      	add	sp, #12
 800ab6c:	f85d eb04 	ldr.w	lr, [sp], #4
 800ab70:	b004      	add	sp, #16
 800ab72:	4770      	bx	lr
 800ab74:	20000220 	.word	0x20000220

0800ab78 <_puts_r>:
 800ab78:	6a03      	ldr	r3, [r0, #32]
 800ab7a:	b570      	push	{r4, r5, r6, lr}
 800ab7c:	6884      	ldr	r4, [r0, #8]
 800ab7e:	4605      	mov	r5, r0
 800ab80:	460e      	mov	r6, r1
 800ab82:	b90b      	cbnz	r3, 800ab88 <_puts_r+0x10>
 800ab84:	f7ff ffb0 	bl	800aae8 <__sinit>
 800ab88:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ab8a:	07db      	lsls	r3, r3, #31
 800ab8c:	d405      	bmi.n	800ab9a <_puts_r+0x22>
 800ab8e:	89a3      	ldrh	r3, [r4, #12]
 800ab90:	0598      	lsls	r0, r3, #22
 800ab92:	d402      	bmi.n	800ab9a <_puts_r+0x22>
 800ab94:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ab96:	f000 f9b2 	bl	800aefe <__retarget_lock_acquire_recursive>
 800ab9a:	89a3      	ldrh	r3, [r4, #12]
 800ab9c:	0719      	lsls	r1, r3, #28
 800ab9e:	d502      	bpl.n	800aba6 <_puts_r+0x2e>
 800aba0:	6923      	ldr	r3, [r4, #16]
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	d135      	bne.n	800ac12 <_puts_r+0x9a>
 800aba6:	4621      	mov	r1, r4
 800aba8:	4628      	mov	r0, r5
 800abaa:	f000 f8c5 	bl	800ad38 <__swsetup_r>
 800abae:	b380      	cbz	r0, 800ac12 <_puts_r+0x9a>
 800abb0:	f04f 35ff 	mov.w	r5, #4294967295
 800abb4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800abb6:	07da      	lsls	r2, r3, #31
 800abb8:	d405      	bmi.n	800abc6 <_puts_r+0x4e>
 800abba:	89a3      	ldrh	r3, [r4, #12]
 800abbc:	059b      	lsls	r3, r3, #22
 800abbe:	d402      	bmi.n	800abc6 <_puts_r+0x4e>
 800abc0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800abc2:	f000 f99d 	bl	800af00 <__retarget_lock_release_recursive>
 800abc6:	4628      	mov	r0, r5
 800abc8:	bd70      	pop	{r4, r5, r6, pc}
 800abca:	2b00      	cmp	r3, #0
 800abcc:	da04      	bge.n	800abd8 <_puts_r+0x60>
 800abce:	69a2      	ldr	r2, [r4, #24]
 800abd0:	429a      	cmp	r2, r3
 800abd2:	dc17      	bgt.n	800ac04 <_puts_r+0x8c>
 800abd4:	290a      	cmp	r1, #10
 800abd6:	d015      	beq.n	800ac04 <_puts_r+0x8c>
 800abd8:	6823      	ldr	r3, [r4, #0]
 800abda:	1c5a      	adds	r2, r3, #1
 800abdc:	6022      	str	r2, [r4, #0]
 800abde:	7019      	strb	r1, [r3, #0]
 800abe0:	68a3      	ldr	r3, [r4, #8]
 800abe2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800abe6:	3b01      	subs	r3, #1
 800abe8:	60a3      	str	r3, [r4, #8]
 800abea:	2900      	cmp	r1, #0
 800abec:	d1ed      	bne.n	800abca <_puts_r+0x52>
 800abee:	2b00      	cmp	r3, #0
 800abf0:	da11      	bge.n	800ac16 <_puts_r+0x9e>
 800abf2:	4622      	mov	r2, r4
 800abf4:	210a      	movs	r1, #10
 800abf6:	4628      	mov	r0, r5
 800abf8:	f000 f85f 	bl	800acba <__swbuf_r>
 800abfc:	3001      	adds	r0, #1
 800abfe:	d0d7      	beq.n	800abb0 <_puts_r+0x38>
 800ac00:	250a      	movs	r5, #10
 800ac02:	e7d7      	b.n	800abb4 <_puts_r+0x3c>
 800ac04:	4622      	mov	r2, r4
 800ac06:	4628      	mov	r0, r5
 800ac08:	f000 f857 	bl	800acba <__swbuf_r>
 800ac0c:	3001      	adds	r0, #1
 800ac0e:	d1e7      	bne.n	800abe0 <_puts_r+0x68>
 800ac10:	e7ce      	b.n	800abb0 <_puts_r+0x38>
 800ac12:	3e01      	subs	r6, #1
 800ac14:	e7e4      	b.n	800abe0 <_puts_r+0x68>
 800ac16:	6823      	ldr	r3, [r4, #0]
 800ac18:	1c5a      	adds	r2, r3, #1
 800ac1a:	6022      	str	r2, [r4, #0]
 800ac1c:	220a      	movs	r2, #10
 800ac1e:	701a      	strb	r2, [r3, #0]
 800ac20:	e7ee      	b.n	800ac00 <_puts_r+0x88>
	...

0800ac24 <puts>:
 800ac24:	4b02      	ldr	r3, [pc, #8]	@ (800ac30 <puts+0xc>)
 800ac26:	4601      	mov	r1, r0
 800ac28:	6818      	ldr	r0, [r3, #0]
 800ac2a:	f7ff bfa5 	b.w	800ab78 <_puts_r>
 800ac2e:	bf00      	nop
 800ac30:	20000220 	.word	0x20000220

0800ac34 <__sread>:
 800ac34:	b510      	push	{r4, lr}
 800ac36:	460c      	mov	r4, r1
 800ac38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ac3c:	f000 f900 	bl	800ae40 <_read_r>
 800ac40:	2800      	cmp	r0, #0
 800ac42:	bfab      	itete	ge
 800ac44:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800ac46:	89a3      	ldrhlt	r3, [r4, #12]
 800ac48:	181b      	addge	r3, r3, r0
 800ac4a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800ac4e:	bfac      	ite	ge
 800ac50:	6563      	strge	r3, [r4, #84]	@ 0x54
 800ac52:	81a3      	strhlt	r3, [r4, #12]
 800ac54:	bd10      	pop	{r4, pc}

0800ac56 <__swrite>:
 800ac56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac5a:	461f      	mov	r7, r3
 800ac5c:	898b      	ldrh	r3, [r1, #12]
 800ac5e:	05db      	lsls	r3, r3, #23
 800ac60:	4605      	mov	r5, r0
 800ac62:	460c      	mov	r4, r1
 800ac64:	4616      	mov	r6, r2
 800ac66:	d505      	bpl.n	800ac74 <__swrite+0x1e>
 800ac68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ac6c:	2302      	movs	r3, #2
 800ac6e:	2200      	movs	r2, #0
 800ac70:	f000 f8d4 	bl	800ae1c <_lseek_r>
 800ac74:	89a3      	ldrh	r3, [r4, #12]
 800ac76:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ac7a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ac7e:	81a3      	strh	r3, [r4, #12]
 800ac80:	4632      	mov	r2, r6
 800ac82:	463b      	mov	r3, r7
 800ac84:	4628      	mov	r0, r5
 800ac86:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ac8a:	f000 b8fb 	b.w	800ae84 <_write_r>

0800ac8e <__sseek>:
 800ac8e:	b510      	push	{r4, lr}
 800ac90:	460c      	mov	r4, r1
 800ac92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ac96:	f000 f8c1 	bl	800ae1c <_lseek_r>
 800ac9a:	1c43      	adds	r3, r0, #1
 800ac9c:	89a3      	ldrh	r3, [r4, #12]
 800ac9e:	bf15      	itete	ne
 800aca0:	6560      	strne	r0, [r4, #84]	@ 0x54
 800aca2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800aca6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800acaa:	81a3      	strheq	r3, [r4, #12]
 800acac:	bf18      	it	ne
 800acae:	81a3      	strhne	r3, [r4, #12]
 800acb0:	bd10      	pop	{r4, pc}

0800acb2 <__sclose>:
 800acb2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800acb6:	f000 b8a1 	b.w	800adfc <_close_r>

0800acba <__swbuf_r>:
 800acba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800acbc:	460e      	mov	r6, r1
 800acbe:	4614      	mov	r4, r2
 800acc0:	4605      	mov	r5, r0
 800acc2:	b118      	cbz	r0, 800accc <__swbuf_r+0x12>
 800acc4:	6a03      	ldr	r3, [r0, #32]
 800acc6:	b90b      	cbnz	r3, 800accc <__swbuf_r+0x12>
 800acc8:	f7ff ff0e 	bl	800aae8 <__sinit>
 800accc:	69a3      	ldr	r3, [r4, #24]
 800acce:	60a3      	str	r3, [r4, #8]
 800acd0:	89a3      	ldrh	r3, [r4, #12]
 800acd2:	071a      	lsls	r2, r3, #28
 800acd4:	d501      	bpl.n	800acda <__swbuf_r+0x20>
 800acd6:	6923      	ldr	r3, [r4, #16]
 800acd8:	b943      	cbnz	r3, 800acec <__swbuf_r+0x32>
 800acda:	4621      	mov	r1, r4
 800acdc:	4628      	mov	r0, r5
 800acde:	f000 f82b 	bl	800ad38 <__swsetup_r>
 800ace2:	b118      	cbz	r0, 800acec <__swbuf_r+0x32>
 800ace4:	f04f 37ff 	mov.w	r7, #4294967295
 800ace8:	4638      	mov	r0, r7
 800acea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800acec:	6823      	ldr	r3, [r4, #0]
 800acee:	6922      	ldr	r2, [r4, #16]
 800acf0:	1a98      	subs	r0, r3, r2
 800acf2:	6963      	ldr	r3, [r4, #20]
 800acf4:	b2f6      	uxtb	r6, r6
 800acf6:	4283      	cmp	r3, r0
 800acf8:	4637      	mov	r7, r6
 800acfa:	dc05      	bgt.n	800ad08 <__swbuf_r+0x4e>
 800acfc:	4621      	mov	r1, r4
 800acfe:	4628      	mov	r0, r5
 800ad00:	f001 fce4 	bl	800c6cc <_fflush_r>
 800ad04:	2800      	cmp	r0, #0
 800ad06:	d1ed      	bne.n	800ace4 <__swbuf_r+0x2a>
 800ad08:	68a3      	ldr	r3, [r4, #8]
 800ad0a:	3b01      	subs	r3, #1
 800ad0c:	60a3      	str	r3, [r4, #8]
 800ad0e:	6823      	ldr	r3, [r4, #0]
 800ad10:	1c5a      	adds	r2, r3, #1
 800ad12:	6022      	str	r2, [r4, #0]
 800ad14:	701e      	strb	r6, [r3, #0]
 800ad16:	6962      	ldr	r2, [r4, #20]
 800ad18:	1c43      	adds	r3, r0, #1
 800ad1a:	429a      	cmp	r2, r3
 800ad1c:	d004      	beq.n	800ad28 <__swbuf_r+0x6e>
 800ad1e:	89a3      	ldrh	r3, [r4, #12]
 800ad20:	07db      	lsls	r3, r3, #31
 800ad22:	d5e1      	bpl.n	800ace8 <__swbuf_r+0x2e>
 800ad24:	2e0a      	cmp	r6, #10
 800ad26:	d1df      	bne.n	800ace8 <__swbuf_r+0x2e>
 800ad28:	4621      	mov	r1, r4
 800ad2a:	4628      	mov	r0, r5
 800ad2c:	f001 fcce 	bl	800c6cc <_fflush_r>
 800ad30:	2800      	cmp	r0, #0
 800ad32:	d0d9      	beq.n	800ace8 <__swbuf_r+0x2e>
 800ad34:	e7d6      	b.n	800ace4 <__swbuf_r+0x2a>
	...

0800ad38 <__swsetup_r>:
 800ad38:	b538      	push	{r3, r4, r5, lr}
 800ad3a:	4b29      	ldr	r3, [pc, #164]	@ (800ade0 <__swsetup_r+0xa8>)
 800ad3c:	4605      	mov	r5, r0
 800ad3e:	6818      	ldr	r0, [r3, #0]
 800ad40:	460c      	mov	r4, r1
 800ad42:	b118      	cbz	r0, 800ad4c <__swsetup_r+0x14>
 800ad44:	6a03      	ldr	r3, [r0, #32]
 800ad46:	b90b      	cbnz	r3, 800ad4c <__swsetup_r+0x14>
 800ad48:	f7ff fece 	bl	800aae8 <__sinit>
 800ad4c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ad50:	0719      	lsls	r1, r3, #28
 800ad52:	d422      	bmi.n	800ad9a <__swsetup_r+0x62>
 800ad54:	06da      	lsls	r2, r3, #27
 800ad56:	d407      	bmi.n	800ad68 <__swsetup_r+0x30>
 800ad58:	2209      	movs	r2, #9
 800ad5a:	602a      	str	r2, [r5, #0]
 800ad5c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ad60:	81a3      	strh	r3, [r4, #12]
 800ad62:	f04f 30ff 	mov.w	r0, #4294967295
 800ad66:	e033      	b.n	800add0 <__swsetup_r+0x98>
 800ad68:	0758      	lsls	r0, r3, #29
 800ad6a:	d512      	bpl.n	800ad92 <__swsetup_r+0x5a>
 800ad6c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ad6e:	b141      	cbz	r1, 800ad82 <__swsetup_r+0x4a>
 800ad70:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ad74:	4299      	cmp	r1, r3
 800ad76:	d002      	beq.n	800ad7e <__swsetup_r+0x46>
 800ad78:	4628      	mov	r0, r5
 800ad7a:	f000 ff1d 	bl	800bbb8 <_free_r>
 800ad7e:	2300      	movs	r3, #0
 800ad80:	6363      	str	r3, [r4, #52]	@ 0x34
 800ad82:	89a3      	ldrh	r3, [r4, #12]
 800ad84:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800ad88:	81a3      	strh	r3, [r4, #12]
 800ad8a:	2300      	movs	r3, #0
 800ad8c:	6063      	str	r3, [r4, #4]
 800ad8e:	6923      	ldr	r3, [r4, #16]
 800ad90:	6023      	str	r3, [r4, #0]
 800ad92:	89a3      	ldrh	r3, [r4, #12]
 800ad94:	f043 0308 	orr.w	r3, r3, #8
 800ad98:	81a3      	strh	r3, [r4, #12]
 800ad9a:	6923      	ldr	r3, [r4, #16]
 800ad9c:	b94b      	cbnz	r3, 800adb2 <__swsetup_r+0x7a>
 800ad9e:	89a3      	ldrh	r3, [r4, #12]
 800ada0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800ada4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ada8:	d003      	beq.n	800adb2 <__swsetup_r+0x7a>
 800adaa:	4621      	mov	r1, r4
 800adac:	4628      	mov	r0, r5
 800adae:	f001 fcdb 	bl	800c768 <__smakebuf_r>
 800adb2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800adb6:	f013 0201 	ands.w	r2, r3, #1
 800adba:	d00a      	beq.n	800add2 <__swsetup_r+0x9a>
 800adbc:	2200      	movs	r2, #0
 800adbe:	60a2      	str	r2, [r4, #8]
 800adc0:	6962      	ldr	r2, [r4, #20]
 800adc2:	4252      	negs	r2, r2
 800adc4:	61a2      	str	r2, [r4, #24]
 800adc6:	6922      	ldr	r2, [r4, #16]
 800adc8:	b942      	cbnz	r2, 800addc <__swsetup_r+0xa4>
 800adca:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800adce:	d1c5      	bne.n	800ad5c <__swsetup_r+0x24>
 800add0:	bd38      	pop	{r3, r4, r5, pc}
 800add2:	0799      	lsls	r1, r3, #30
 800add4:	bf58      	it	pl
 800add6:	6962      	ldrpl	r2, [r4, #20]
 800add8:	60a2      	str	r2, [r4, #8]
 800adda:	e7f4      	b.n	800adc6 <__swsetup_r+0x8e>
 800addc:	2000      	movs	r0, #0
 800adde:	e7f7      	b.n	800add0 <__swsetup_r+0x98>
 800ade0:	20000220 	.word	0x20000220

0800ade4 <memset>:
 800ade4:	4402      	add	r2, r0
 800ade6:	4603      	mov	r3, r0
 800ade8:	4293      	cmp	r3, r2
 800adea:	d100      	bne.n	800adee <memset+0xa>
 800adec:	4770      	bx	lr
 800adee:	f803 1b01 	strb.w	r1, [r3], #1
 800adf2:	e7f9      	b.n	800ade8 <memset+0x4>

0800adf4 <_localeconv_r>:
 800adf4:	4800      	ldr	r0, [pc, #0]	@ (800adf8 <_localeconv_r+0x4>)
 800adf6:	4770      	bx	lr
 800adf8:	20000360 	.word	0x20000360

0800adfc <_close_r>:
 800adfc:	b538      	push	{r3, r4, r5, lr}
 800adfe:	4d06      	ldr	r5, [pc, #24]	@ (800ae18 <_close_r+0x1c>)
 800ae00:	2300      	movs	r3, #0
 800ae02:	4604      	mov	r4, r0
 800ae04:	4608      	mov	r0, r1
 800ae06:	602b      	str	r3, [r5, #0]
 800ae08:	f7f6 fd5a 	bl	80018c0 <_close>
 800ae0c:	1c43      	adds	r3, r0, #1
 800ae0e:	d102      	bne.n	800ae16 <_close_r+0x1a>
 800ae10:	682b      	ldr	r3, [r5, #0]
 800ae12:	b103      	cbz	r3, 800ae16 <_close_r+0x1a>
 800ae14:	6023      	str	r3, [r4, #0]
 800ae16:	bd38      	pop	{r3, r4, r5, pc}
 800ae18:	20000ff4 	.word	0x20000ff4

0800ae1c <_lseek_r>:
 800ae1c:	b538      	push	{r3, r4, r5, lr}
 800ae1e:	4d07      	ldr	r5, [pc, #28]	@ (800ae3c <_lseek_r+0x20>)
 800ae20:	4604      	mov	r4, r0
 800ae22:	4608      	mov	r0, r1
 800ae24:	4611      	mov	r1, r2
 800ae26:	2200      	movs	r2, #0
 800ae28:	602a      	str	r2, [r5, #0]
 800ae2a:	461a      	mov	r2, r3
 800ae2c:	f7f6 fd6f 	bl	800190e <_lseek>
 800ae30:	1c43      	adds	r3, r0, #1
 800ae32:	d102      	bne.n	800ae3a <_lseek_r+0x1e>
 800ae34:	682b      	ldr	r3, [r5, #0]
 800ae36:	b103      	cbz	r3, 800ae3a <_lseek_r+0x1e>
 800ae38:	6023      	str	r3, [r4, #0]
 800ae3a:	bd38      	pop	{r3, r4, r5, pc}
 800ae3c:	20000ff4 	.word	0x20000ff4

0800ae40 <_read_r>:
 800ae40:	b538      	push	{r3, r4, r5, lr}
 800ae42:	4d07      	ldr	r5, [pc, #28]	@ (800ae60 <_read_r+0x20>)
 800ae44:	4604      	mov	r4, r0
 800ae46:	4608      	mov	r0, r1
 800ae48:	4611      	mov	r1, r2
 800ae4a:	2200      	movs	r2, #0
 800ae4c:	602a      	str	r2, [r5, #0]
 800ae4e:	461a      	mov	r2, r3
 800ae50:	f7f6 fd19 	bl	8001886 <_read>
 800ae54:	1c43      	adds	r3, r0, #1
 800ae56:	d102      	bne.n	800ae5e <_read_r+0x1e>
 800ae58:	682b      	ldr	r3, [r5, #0]
 800ae5a:	b103      	cbz	r3, 800ae5e <_read_r+0x1e>
 800ae5c:	6023      	str	r3, [r4, #0]
 800ae5e:	bd38      	pop	{r3, r4, r5, pc}
 800ae60:	20000ff4 	.word	0x20000ff4

0800ae64 <_sbrk_r>:
 800ae64:	b538      	push	{r3, r4, r5, lr}
 800ae66:	4d06      	ldr	r5, [pc, #24]	@ (800ae80 <_sbrk_r+0x1c>)
 800ae68:	2300      	movs	r3, #0
 800ae6a:	4604      	mov	r4, r0
 800ae6c:	4608      	mov	r0, r1
 800ae6e:	602b      	str	r3, [r5, #0]
 800ae70:	f7f6 fd5a 	bl	8001928 <_sbrk>
 800ae74:	1c43      	adds	r3, r0, #1
 800ae76:	d102      	bne.n	800ae7e <_sbrk_r+0x1a>
 800ae78:	682b      	ldr	r3, [r5, #0]
 800ae7a:	b103      	cbz	r3, 800ae7e <_sbrk_r+0x1a>
 800ae7c:	6023      	str	r3, [r4, #0]
 800ae7e:	bd38      	pop	{r3, r4, r5, pc}
 800ae80:	20000ff4 	.word	0x20000ff4

0800ae84 <_write_r>:
 800ae84:	b538      	push	{r3, r4, r5, lr}
 800ae86:	4d07      	ldr	r5, [pc, #28]	@ (800aea4 <_write_r+0x20>)
 800ae88:	4604      	mov	r4, r0
 800ae8a:	4608      	mov	r0, r1
 800ae8c:	4611      	mov	r1, r2
 800ae8e:	2200      	movs	r2, #0
 800ae90:	602a      	str	r2, [r5, #0]
 800ae92:	461a      	mov	r2, r3
 800ae94:	f7f6 faf2 	bl	800147c <_write>
 800ae98:	1c43      	adds	r3, r0, #1
 800ae9a:	d102      	bne.n	800aea2 <_write_r+0x1e>
 800ae9c:	682b      	ldr	r3, [r5, #0]
 800ae9e:	b103      	cbz	r3, 800aea2 <_write_r+0x1e>
 800aea0:	6023      	str	r3, [r4, #0]
 800aea2:	bd38      	pop	{r3, r4, r5, pc}
 800aea4:	20000ff4 	.word	0x20000ff4

0800aea8 <__errno>:
 800aea8:	4b01      	ldr	r3, [pc, #4]	@ (800aeb0 <__errno+0x8>)
 800aeaa:	6818      	ldr	r0, [r3, #0]
 800aeac:	4770      	bx	lr
 800aeae:	bf00      	nop
 800aeb0:	20000220 	.word	0x20000220

0800aeb4 <__libc_init_array>:
 800aeb4:	b570      	push	{r4, r5, r6, lr}
 800aeb6:	4d0d      	ldr	r5, [pc, #52]	@ (800aeec <__libc_init_array+0x38>)
 800aeb8:	4c0d      	ldr	r4, [pc, #52]	@ (800aef0 <__libc_init_array+0x3c>)
 800aeba:	1b64      	subs	r4, r4, r5
 800aebc:	10a4      	asrs	r4, r4, #2
 800aebe:	2600      	movs	r6, #0
 800aec0:	42a6      	cmp	r6, r4
 800aec2:	d109      	bne.n	800aed8 <__libc_init_array+0x24>
 800aec4:	4d0b      	ldr	r5, [pc, #44]	@ (800aef4 <__libc_init_array+0x40>)
 800aec6:	4c0c      	ldr	r4, [pc, #48]	@ (800aef8 <__libc_init_array+0x44>)
 800aec8:	f001 fd6a 	bl	800c9a0 <_init>
 800aecc:	1b64      	subs	r4, r4, r5
 800aece:	10a4      	asrs	r4, r4, #2
 800aed0:	2600      	movs	r6, #0
 800aed2:	42a6      	cmp	r6, r4
 800aed4:	d105      	bne.n	800aee2 <__libc_init_array+0x2e>
 800aed6:	bd70      	pop	{r4, r5, r6, pc}
 800aed8:	f855 3b04 	ldr.w	r3, [r5], #4
 800aedc:	4798      	blx	r3
 800aede:	3601      	adds	r6, #1
 800aee0:	e7ee      	b.n	800aec0 <__libc_init_array+0xc>
 800aee2:	f855 3b04 	ldr.w	r3, [r5], #4
 800aee6:	4798      	blx	r3
 800aee8:	3601      	adds	r6, #1
 800aeea:	e7f2      	b.n	800aed2 <__libc_init_array+0x1e>
 800aeec:	0800ce2c 	.word	0x0800ce2c
 800aef0:	0800ce2c 	.word	0x0800ce2c
 800aef4:	0800ce2c 	.word	0x0800ce2c
 800aef8:	0800ce30 	.word	0x0800ce30

0800aefc <__retarget_lock_init_recursive>:
 800aefc:	4770      	bx	lr

0800aefe <__retarget_lock_acquire_recursive>:
 800aefe:	4770      	bx	lr

0800af00 <__retarget_lock_release_recursive>:
 800af00:	4770      	bx	lr

0800af02 <quorem>:
 800af02:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af06:	6903      	ldr	r3, [r0, #16]
 800af08:	690c      	ldr	r4, [r1, #16]
 800af0a:	42a3      	cmp	r3, r4
 800af0c:	4607      	mov	r7, r0
 800af0e:	db7e      	blt.n	800b00e <quorem+0x10c>
 800af10:	3c01      	subs	r4, #1
 800af12:	f101 0814 	add.w	r8, r1, #20
 800af16:	00a3      	lsls	r3, r4, #2
 800af18:	f100 0514 	add.w	r5, r0, #20
 800af1c:	9300      	str	r3, [sp, #0]
 800af1e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800af22:	9301      	str	r3, [sp, #4]
 800af24:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800af28:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800af2c:	3301      	adds	r3, #1
 800af2e:	429a      	cmp	r2, r3
 800af30:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800af34:	fbb2 f6f3 	udiv	r6, r2, r3
 800af38:	d32e      	bcc.n	800af98 <quorem+0x96>
 800af3a:	f04f 0a00 	mov.w	sl, #0
 800af3e:	46c4      	mov	ip, r8
 800af40:	46ae      	mov	lr, r5
 800af42:	46d3      	mov	fp, sl
 800af44:	f85c 3b04 	ldr.w	r3, [ip], #4
 800af48:	b298      	uxth	r0, r3
 800af4a:	fb06 a000 	mla	r0, r6, r0, sl
 800af4e:	0c02      	lsrs	r2, r0, #16
 800af50:	0c1b      	lsrs	r3, r3, #16
 800af52:	fb06 2303 	mla	r3, r6, r3, r2
 800af56:	f8de 2000 	ldr.w	r2, [lr]
 800af5a:	b280      	uxth	r0, r0
 800af5c:	b292      	uxth	r2, r2
 800af5e:	1a12      	subs	r2, r2, r0
 800af60:	445a      	add	r2, fp
 800af62:	f8de 0000 	ldr.w	r0, [lr]
 800af66:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800af6a:	b29b      	uxth	r3, r3
 800af6c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800af70:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800af74:	b292      	uxth	r2, r2
 800af76:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800af7a:	45e1      	cmp	r9, ip
 800af7c:	f84e 2b04 	str.w	r2, [lr], #4
 800af80:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800af84:	d2de      	bcs.n	800af44 <quorem+0x42>
 800af86:	9b00      	ldr	r3, [sp, #0]
 800af88:	58eb      	ldr	r3, [r5, r3]
 800af8a:	b92b      	cbnz	r3, 800af98 <quorem+0x96>
 800af8c:	9b01      	ldr	r3, [sp, #4]
 800af8e:	3b04      	subs	r3, #4
 800af90:	429d      	cmp	r5, r3
 800af92:	461a      	mov	r2, r3
 800af94:	d32f      	bcc.n	800aff6 <quorem+0xf4>
 800af96:	613c      	str	r4, [r7, #16]
 800af98:	4638      	mov	r0, r7
 800af9a:	f001 f8c9 	bl	800c130 <__mcmp>
 800af9e:	2800      	cmp	r0, #0
 800afa0:	db25      	blt.n	800afee <quorem+0xec>
 800afa2:	4629      	mov	r1, r5
 800afa4:	2000      	movs	r0, #0
 800afa6:	f858 2b04 	ldr.w	r2, [r8], #4
 800afaa:	f8d1 c000 	ldr.w	ip, [r1]
 800afae:	fa1f fe82 	uxth.w	lr, r2
 800afb2:	fa1f f38c 	uxth.w	r3, ip
 800afb6:	eba3 030e 	sub.w	r3, r3, lr
 800afba:	4403      	add	r3, r0
 800afbc:	0c12      	lsrs	r2, r2, #16
 800afbe:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800afc2:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800afc6:	b29b      	uxth	r3, r3
 800afc8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800afcc:	45c1      	cmp	r9, r8
 800afce:	f841 3b04 	str.w	r3, [r1], #4
 800afd2:	ea4f 4022 	mov.w	r0, r2, asr #16
 800afd6:	d2e6      	bcs.n	800afa6 <quorem+0xa4>
 800afd8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800afdc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800afe0:	b922      	cbnz	r2, 800afec <quorem+0xea>
 800afe2:	3b04      	subs	r3, #4
 800afe4:	429d      	cmp	r5, r3
 800afe6:	461a      	mov	r2, r3
 800afe8:	d30b      	bcc.n	800b002 <quorem+0x100>
 800afea:	613c      	str	r4, [r7, #16]
 800afec:	3601      	adds	r6, #1
 800afee:	4630      	mov	r0, r6
 800aff0:	b003      	add	sp, #12
 800aff2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aff6:	6812      	ldr	r2, [r2, #0]
 800aff8:	3b04      	subs	r3, #4
 800affa:	2a00      	cmp	r2, #0
 800affc:	d1cb      	bne.n	800af96 <quorem+0x94>
 800affe:	3c01      	subs	r4, #1
 800b000:	e7c6      	b.n	800af90 <quorem+0x8e>
 800b002:	6812      	ldr	r2, [r2, #0]
 800b004:	3b04      	subs	r3, #4
 800b006:	2a00      	cmp	r2, #0
 800b008:	d1ef      	bne.n	800afea <quorem+0xe8>
 800b00a:	3c01      	subs	r4, #1
 800b00c:	e7ea      	b.n	800afe4 <quorem+0xe2>
 800b00e:	2000      	movs	r0, #0
 800b010:	e7ee      	b.n	800aff0 <quorem+0xee>
 800b012:	0000      	movs	r0, r0
 800b014:	0000      	movs	r0, r0
	...

0800b018 <_dtoa_r>:
 800b018:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b01c:	69c7      	ldr	r7, [r0, #28]
 800b01e:	b097      	sub	sp, #92	@ 0x5c
 800b020:	ed8d 0b04 	vstr	d0, [sp, #16]
 800b024:	ec55 4b10 	vmov	r4, r5, d0
 800b028:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800b02a:	9107      	str	r1, [sp, #28]
 800b02c:	4681      	mov	r9, r0
 800b02e:	920c      	str	r2, [sp, #48]	@ 0x30
 800b030:	9311      	str	r3, [sp, #68]	@ 0x44
 800b032:	b97f      	cbnz	r7, 800b054 <_dtoa_r+0x3c>
 800b034:	2010      	movs	r0, #16
 800b036:	f7fe ffb7 	bl	8009fa8 <malloc>
 800b03a:	4602      	mov	r2, r0
 800b03c:	f8c9 001c 	str.w	r0, [r9, #28]
 800b040:	b920      	cbnz	r0, 800b04c <_dtoa_r+0x34>
 800b042:	4ba9      	ldr	r3, [pc, #676]	@ (800b2e8 <_dtoa_r+0x2d0>)
 800b044:	21ef      	movs	r1, #239	@ 0xef
 800b046:	48a9      	ldr	r0, [pc, #676]	@ (800b2ec <_dtoa_r+0x2d4>)
 800b048:	f001 fbfa 	bl	800c840 <__assert_func>
 800b04c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800b050:	6007      	str	r7, [r0, #0]
 800b052:	60c7      	str	r7, [r0, #12]
 800b054:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800b058:	6819      	ldr	r1, [r3, #0]
 800b05a:	b159      	cbz	r1, 800b074 <_dtoa_r+0x5c>
 800b05c:	685a      	ldr	r2, [r3, #4]
 800b05e:	604a      	str	r2, [r1, #4]
 800b060:	2301      	movs	r3, #1
 800b062:	4093      	lsls	r3, r2
 800b064:	608b      	str	r3, [r1, #8]
 800b066:	4648      	mov	r0, r9
 800b068:	f000 fe30 	bl	800bccc <_Bfree>
 800b06c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800b070:	2200      	movs	r2, #0
 800b072:	601a      	str	r2, [r3, #0]
 800b074:	1e2b      	subs	r3, r5, #0
 800b076:	bfb9      	ittee	lt
 800b078:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800b07c:	9305      	strlt	r3, [sp, #20]
 800b07e:	2300      	movge	r3, #0
 800b080:	6033      	strge	r3, [r6, #0]
 800b082:	9f05      	ldr	r7, [sp, #20]
 800b084:	4b9a      	ldr	r3, [pc, #616]	@ (800b2f0 <_dtoa_r+0x2d8>)
 800b086:	bfbc      	itt	lt
 800b088:	2201      	movlt	r2, #1
 800b08a:	6032      	strlt	r2, [r6, #0]
 800b08c:	43bb      	bics	r3, r7
 800b08e:	d112      	bne.n	800b0b6 <_dtoa_r+0x9e>
 800b090:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800b092:	f242 730f 	movw	r3, #9999	@ 0x270f
 800b096:	6013      	str	r3, [r2, #0]
 800b098:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b09c:	4323      	orrs	r3, r4
 800b09e:	f000 855a 	beq.w	800bb56 <_dtoa_r+0xb3e>
 800b0a2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800b0a4:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800b304 <_dtoa_r+0x2ec>
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	f000 855c 	beq.w	800bb66 <_dtoa_r+0xb4e>
 800b0ae:	f10a 0303 	add.w	r3, sl, #3
 800b0b2:	f000 bd56 	b.w	800bb62 <_dtoa_r+0xb4a>
 800b0b6:	ed9d 7b04 	vldr	d7, [sp, #16]
 800b0ba:	2200      	movs	r2, #0
 800b0bc:	ec51 0b17 	vmov	r0, r1, d7
 800b0c0:	2300      	movs	r3, #0
 800b0c2:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800b0c6:	f7f5 fcff 	bl	8000ac8 <__aeabi_dcmpeq>
 800b0ca:	4680      	mov	r8, r0
 800b0cc:	b158      	cbz	r0, 800b0e6 <_dtoa_r+0xce>
 800b0ce:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800b0d0:	2301      	movs	r3, #1
 800b0d2:	6013      	str	r3, [r2, #0]
 800b0d4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800b0d6:	b113      	cbz	r3, 800b0de <_dtoa_r+0xc6>
 800b0d8:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800b0da:	4b86      	ldr	r3, [pc, #536]	@ (800b2f4 <_dtoa_r+0x2dc>)
 800b0dc:	6013      	str	r3, [r2, #0]
 800b0de:	f8df a228 	ldr.w	sl, [pc, #552]	@ 800b308 <_dtoa_r+0x2f0>
 800b0e2:	f000 bd40 	b.w	800bb66 <_dtoa_r+0xb4e>
 800b0e6:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800b0ea:	aa14      	add	r2, sp, #80	@ 0x50
 800b0ec:	a915      	add	r1, sp, #84	@ 0x54
 800b0ee:	4648      	mov	r0, r9
 800b0f0:	f001 f8ce 	bl	800c290 <__d2b>
 800b0f4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800b0f8:	9002      	str	r0, [sp, #8]
 800b0fa:	2e00      	cmp	r6, #0
 800b0fc:	d078      	beq.n	800b1f0 <_dtoa_r+0x1d8>
 800b0fe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b100:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800b104:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b108:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800b10c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800b110:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800b114:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800b118:	4619      	mov	r1, r3
 800b11a:	2200      	movs	r2, #0
 800b11c:	4b76      	ldr	r3, [pc, #472]	@ (800b2f8 <_dtoa_r+0x2e0>)
 800b11e:	f7f5 f8b3 	bl	8000288 <__aeabi_dsub>
 800b122:	a36b      	add	r3, pc, #428	@ (adr r3, 800b2d0 <_dtoa_r+0x2b8>)
 800b124:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b128:	f7f5 fa66 	bl	80005f8 <__aeabi_dmul>
 800b12c:	a36a      	add	r3, pc, #424	@ (adr r3, 800b2d8 <_dtoa_r+0x2c0>)
 800b12e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b132:	f7f5 f8ab 	bl	800028c <__adddf3>
 800b136:	4604      	mov	r4, r0
 800b138:	4630      	mov	r0, r6
 800b13a:	460d      	mov	r5, r1
 800b13c:	f7f5 f9f2 	bl	8000524 <__aeabi_i2d>
 800b140:	a367      	add	r3, pc, #412	@ (adr r3, 800b2e0 <_dtoa_r+0x2c8>)
 800b142:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b146:	f7f5 fa57 	bl	80005f8 <__aeabi_dmul>
 800b14a:	4602      	mov	r2, r0
 800b14c:	460b      	mov	r3, r1
 800b14e:	4620      	mov	r0, r4
 800b150:	4629      	mov	r1, r5
 800b152:	f7f5 f89b 	bl	800028c <__adddf3>
 800b156:	4604      	mov	r4, r0
 800b158:	460d      	mov	r5, r1
 800b15a:	f7f5 fcfd 	bl	8000b58 <__aeabi_d2iz>
 800b15e:	2200      	movs	r2, #0
 800b160:	4607      	mov	r7, r0
 800b162:	2300      	movs	r3, #0
 800b164:	4620      	mov	r0, r4
 800b166:	4629      	mov	r1, r5
 800b168:	f7f5 fcb8 	bl	8000adc <__aeabi_dcmplt>
 800b16c:	b140      	cbz	r0, 800b180 <_dtoa_r+0x168>
 800b16e:	4638      	mov	r0, r7
 800b170:	f7f5 f9d8 	bl	8000524 <__aeabi_i2d>
 800b174:	4622      	mov	r2, r4
 800b176:	462b      	mov	r3, r5
 800b178:	f7f5 fca6 	bl	8000ac8 <__aeabi_dcmpeq>
 800b17c:	b900      	cbnz	r0, 800b180 <_dtoa_r+0x168>
 800b17e:	3f01      	subs	r7, #1
 800b180:	2f16      	cmp	r7, #22
 800b182:	d852      	bhi.n	800b22a <_dtoa_r+0x212>
 800b184:	4b5d      	ldr	r3, [pc, #372]	@ (800b2fc <_dtoa_r+0x2e4>)
 800b186:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b18a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b18e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800b192:	f7f5 fca3 	bl	8000adc <__aeabi_dcmplt>
 800b196:	2800      	cmp	r0, #0
 800b198:	d049      	beq.n	800b22e <_dtoa_r+0x216>
 800b19a:	3f01      	subs	r7, #1
 800b19c:	2300      	movs	r3, #0
 800b19e:	9310      	str	r3, [sp, #64]	@ 0x40
 800b1a0:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800b1a2:	1b9b      	subs	r3, r3, r6
 800b1a4:	1e5a      	subs	r2, r3, #1
 800b1a6:	bf45      	ittet	mi
 800b1a8:	f1c3 0301 	rsbmi	r3, r3, #1
 800b1ac:	9300      	strmi	r3, [sp, #0]
 800b1ae:	2300      	movpl	r3, #0
 800b1b0:	2300      	movmi	r3, #0
 800b1b2:	9206      	str	r2, [sp, #24]
 800b1b4:	bf54      	ite	pl
 800b1b6:	9300      	strpl	r3, [sp, #0]
 800b1b8:	9306      	strmi	r3, [sp, #24]
 800b1ba:	2f00      	cmp	r7, #0
 800b1bc:	db39      	blt.n	800b232 <_dtoa_r+0x21a>
 800b1be:	9b06      	ldr	r3, [sp, #24]
 800b1c0:	970d      	str	r7, [sp, #52]	@ 0x34
 800b1c2:	443b      	add	r3, r7
 800b1c4:	9306      	str	r3, [sp, #24]
 800b1c6:	2300      	movs	r3, #0
 800b1c8:	9308      	str	r3, [sp, #32]
 800b1ca:	9b07      	ldr	r3, [sp, #28]
 800b1cc:	2b09      	cmp	r3, #9
 800b1ce:	d863      	bhi.n	800b298 <_dtoa_r+0x280>
 800b1d0:	2b05      	cmp	r3, #5
 800b1d2:	bfc4      	itt	gt
 800b1d4:	3b04      	subgt	r3, #4
 800b1d6:	9307      	strgt	r3, [sp, #28]
 800b1d8:	9b07      	ldr	r3, [sp, #28]
 800b1da:	f1a3 0302 	sub.w	r3, r3, #2
 800b1de:	bfcc      	ite	gt
 800b1e0:	2400      	movgt	r4, #0
 800b1e2:	2401      	movle	r4, #1
 800b1e4:	2b03      	cmp	r3, #3
 800b1e6:	d863      	bhi.n	800b2b0 <_dtoa_r+0x298>
 800b1e8:	e8df f003 	tbb	[pc, r3]
 800b1ec:	2b375452 	.word	0x2b375452
 800b1f0:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800b1f4:	441e      	add	r6, r3
 800b1f6:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800b1fa:	2b20      	cmp	r3, #32
 800b1fc:	bfc1      	itttt	gt
 800b1fe:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800b202:	409f      	lslgt	r7, r3
 800b204:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800b208:	fa24 f303 	lsrgt.w	r3, r4, r3
 800b20c:	bfd6      	itet	le
 800b20e:	f1c3 0320 	rsble	r3, r3, #32
 800b212:	ea47 0003 	orrgt.w	r0, r7, r3
 800b216:	fa04 f003 	lslle.w	r0, r4, r3
 800b21a:	f7f5 f973 	bl	8000504 <__aeabi_ui2d>
 800b21e:	2201      	movs	r2, #1
 800b220:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800b224:	3e01      	subs	r6, #1
 800b226:	9212      	str	r2, [sp, #72]	@ 0x48
 800b228:	e776      	b.n	800b118 <_dtoa_r+0x100>
 800b22a:	2301      	movs	r3, #1
 800b22c:	e7b7      	b.n	800b19e <_dtoa_r+0x186>
 800b22e:	9010      	str	r0, [sp, #64]	@ 0x40
 800b230:	e7b6      	b.n	800b1a0 <_dtoa_r+0x188>
 800b232:	9b00      	ldr	r3, [sp, #0]
 800b234:	1bdb      	subs	r3, r3, r7
 800b236:	9300      	str	r3, [sp, #0]
 800b238:	427b      	negs	r3, r7
 800b23a:	9308      	str	r3, [sp, #32]
 800b23c:	2300      	movs	r3, #0
 800b23e:	930d      	str	r3, [sp, #52]	@ 0x34
 800b240:	e7c3      	b.n	800b1ca <_dtoa_r+0x1b2>
 800b242:	2301      	movs	r3, #1
 800b244:	9309      	str	r3, [sp, #36]	@ 0x24
 800b246:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b248:	eb07 0b03 	add.w	fp, r7, r3
 800b24c:	f10b 0301 	add.w	r3, fp, #1
 800b250:	2b01      	cmp	r3, #1
 800b252:	9303      	str	r3, [sp, #12]
 800b254:	bfb8      	it	lt
 800b256:	2301      	movlt	r3, #1
 800b258:	e006      	b.n	800b268 <_dtoa_r+0x250>
 800b25a:	2301      	movs	r3, #1
 800b25c:	9309      	str	r3, [sp, #36]	@ 0x24
 800b25e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b260:	2b00      	cmp	r3, #0
 800b262:	dd28      	ble.n	800b2b6 <_dtoa_r+0x29e>
 800b264:	469b      	mov	fp, r3
 800b266:	9303      	str	r3, [sp, #12]
 800b268:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800b26c:	2100      	movs	r1, #0
 800b26e:	2204      	movs	r2, #4
 800b270:	f102 0514 	add.w	r5, r2, #20
 800b274:	429d      	cmp	r5, r3
 800b276:	d926      	bls.n	800b2c6 <_dtoa_r+0x2ae>
 800b278:	6041      	str	r1, [r0, #4]
 800b27a:	4648      	mov	r0, r9
 800b27c:	f000 fce6 	bl	800bc4c <_Balloc>
 800b280:	4682      	mov	sl, r0
 800b282:	2800      	cmp	r0, #0
 800b284:	d142      	bne.n	800b30c <_dtoa_r+0x2f4>
 800b286:	4b1e      	ldr	r3, [pc, #120]	@ (800b300 <_dtoa_r+0x2e8>)
 800b288:	4602      	mov	r2, r0
 800b28a:	f240 11af 	movw	r1, #431	@ 0x1af
 800b28e:	e6da      	b.n	800b046 <_dtoa_r+0x2e>
 800b290:	2300      	movs	r3, #0
 800b292:	e7e3      	b.n	800b25c <_dtoa_r+0x244>
 800b294:	2300      	movs	r3, #0
 800b296:	e7d5      	b.n	800b244 <_dtoa_r+0x22c>
 800b298:	2401      	movs	r4, #1
 800b29a:	2300      	movs	r3, #0
 800b29c:	9307      	str	r3, [sp, #28]
 800b29e:	9409      	str	r4, [sp, #36]	@ 0x24
 800b2a0:	f04f 3bff 	mov.w	fp, #4294967295
 800b2a4:	2200      	movs	r2, #0
 800b2a6:	f8cd b00c 	str.w	fp, [sp, #12]
 800b2aa:	2312      	movs	r3, #18
 800b2ac:	920c      	str	r2, [sp, #48]	@ 0x30
 800b2ae:	e7db      	b.n	800b268 <_dtoa_r+0x250>
 800b2b0:	2301      	movs	r3, #1
 800b2b2:	9309      	str	r3, [sp, #36]	@ 0x24
 800b2b4:	e7f4      	b.n	800b2a0 <_dtoa_r+0x288>
 800b2b6:	f04f 0b01 	mov.w	fp, #1
 800b2ba:	f8cd b00c 	str.w	fp, [sp, #12]
 800b2be:	465b      	mov	r3, fp
 800b2c0:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800b2c4:	e7d0      	b.n	800b268 <_dtoa_r+0x250>
 800b2c6:	3101      	adds	r1, #1
 800b2c8:	0052      	lsls	r2, r2, #1
 800b2ca:	e7d1      	b.n	800b270 <_dtoa_r+0x258>
 800b2cc:	f3af 8000 	nop.w
 800b2d0:	636f4361 	.word	0x636f4361
 800b2d4:	3fd287a7 	.word	0x3fd287a7
 800b2d8:	8b60c8b3 	.word	0x8b60c8b3
 800b2dc:	3fc68a28 	.word	0x3fc68a28
 800b2e0:	509f79fb 	.word	0x509f79fb
 800b2e4:	3fd34413 	.word	0x3fd34413
 800b2e8:	0800caf1 	.word	0x0800caf1
 800b2ec:	0800cb08 	.word	0x0800cb08
 800b2f0:	7ff00000 	.word	0x7ff00000
 800b2f4:	0800cac1 	.word	0x0800cac1
 800b2f8:	3ff80000 	.word	0x3ff80000
 800b2fc:	0800cc58 	.word	0x0800cc58
 800b300:	0800cb60 	.word	0x0800cb60
 800b304:	0800caed 	.word	0x0800caed
 800b308:	0800cac0 	.word	0x0800cac0
 800b30c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800b310:	6018      	str	r0, [r3, #0]
 800b312:	9b03      	ldr	r3, [sp, #12]
 800b314:	2b0e      	cmp	r3, #14
 800b316:	f200 80a1 	bhi.w	800b45c <_dtoa_r+0x444>
 800b31a:	2c00      	cmp	r4, #0
 800b31c:	f000 809e 	beq.w	800b45c <_dtoa_r+0x444>
 800b320:	2f00      	cmp	r7, #0
 800b322:	dd33      	ble.n	800b38c <_dtoa_r+0x374>
 800b324:	4b9c      	ldr	r3, [pc, #624]	@ (800b598 <_dtoa_r+0x580>)
 800b326:	f007 020f 	and.w	r2, r7, #15
 800b32a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b32e:	ed93 7b00 	vldr	d7, [r3]
 800b332:	05f8      	lsls	r0, r7, #23
 800b334:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800b338:	ea4f 1427 	mov.w	r4, r7, asr #4
 800b33c:	d516      	bpl.n	800b36c <_dtoa_r+0x354>
 800b33e:	4b97      	ldr	r3, [pc, #604]	@ (800b59c <_dtoa_r+0x584>)
 800b340:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800b344:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b348:	f7f5 fa80 	bl	800084c <__aeabi_ddiv>
 800b34c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b350:	f004 040f 	and.w	r4, r4, #15
 800b354:	2603      	movs	r6, #3
 800b356:	4d91      	ldr	r5, [pc, #580]	@ (800b59c <_dtoa_r+0x584>)
 800b358:	b954      	cbnz	r4, 800b370 <_dtoa_r+0x358>
 800b35a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800b35e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b362:	f7f5 fa73 	bl	800084c <__aeabi_ddiv>
 800b366:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b36a:	e028      	b.n	800b3be <_dtoa_r+0x3a6>
 800b36c:	2602      	movs	r6, #2
 800b36e:	e7f2      	b.n	800b356 <_dtoa_r+0x33e>
 800b370:	07e1      	lsls	r1, r4, #31
 800b372:	d508      	bpl.n	800b386 <_dtoa_r+0x36e>
 800b374:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800b378:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b37c:	f7f5 f93c 	bl	80005f8 <__aeabi_dmul>
 800b380:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800b384:	3601      	adds	r6, #1
 800b386:	1064      	asrs	r4, r4, #1
 800b388:	3508      	adds	r5, #8
 800b38a:	e7e5      	b.n	800b358 <_dtoa_r+0x340>
 800b38c:	f000 80af 	beq.w	800b4ee <_dtoa_r+0x4d6>
 800b390:	427c      	negs	r4, r7
 800b392:	4b81      	ldr	r3, [pc, #516]	@ (800b598 <_dtoa_r+0x580>)
 800b394:	4d81      	ldr	r5, [pc, #516]	@ (800b59c <_dtoa_r+0x584>)
 800b396:	f004 020f 	and.w	r2, r4, #15
 800b39a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b39e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3a2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800b3a6:	f7f5 f927 	bl	80005f8 <__aeabi_dmul>
 800b3aa:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b3ae:	1124      	asrs	r4, r4, #4
 800b3b0:	2300      	movs	r3, #0
 800b3b2:	2602      	movs	r6, #2
 800b3b4:	2c00      	cmp	r4, #0
 800b3b6:	f040 808f 	bne.w	800b4d8 <_dtoa_r+0x4c0>
 800b3ba:	2b00      	cmp	r3, #0
 800b3bc:	d1d3      	bne.n	800b366 <_dtoa_r+0x34e>
 800b3be:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800b3c0:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800b3c4:	2b00      	cmp	r3, #0
 800b3c6:	f000 8094 	beq.w	800b4f2 <_dtoa_r+0x4da>
 800b3ca:	4b75      	ldr	r3, [pc, #468]	@ (800b5a0 <_dtoa_r+0x588>)
 800b3cc:	2200      	movs	r2, #0
 800b3ce:	4620      	mov	r0, r4
 800b3d0:	4629      	mov	r1, r5
 800b3d2:	f7f5 fb83 	bl	8000adc <__aeabi_dcmplt>
 800b3d6:	2800      	cmp	r0, #0
 800b3d8:	f000 808b 	beq.w	800b4f2 <_dtoa_r+0x4da>
 800b3dc:	9b03      	ldr	r3, [sp, #12]
 800b3de:	2b00      	cmp	r3, #0
 800b3e0:	f000 8087 	beq.w	800b4f2 <_dtoa_r+0x4da>
 800b3e4:	f1bb 0f00 	cmp.w	fp, #0
 800b3e8:	dd34      	ble.n	800b454 <_dtoa_r+0x43c>
 800b3ea:	4620      	mov	r0, r4
 800b3ec:	4b6d      	ldr	r3, [pc, #436]	@ (800b5a4 <_dtoa_r+0x58c>)
 800b3ee:	2200      	movs	r2, #0
 800b3f0:	4629      	mov	r1, r5
 800b3f2:	f7f5 f901 	bl	80005f8 <__aeabi_dmul>
 800b3f6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b3fa:	f107 38ff 	add.w	r8, r7, #4294967295
 800b3fe:	3601      	adds	r6, #1
 800b400:	465c      	mov	r4, fp
 800b402:	4630      	mov	r0, r6
 800b404:	f7f5 f88e 	bl	8000524 <__aeabi_i2d>
 800b408:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b40c:	f7f5 f8f4 	bl	80005f8 <__aeabi_dmul>
 800b410:	4b65      	ldr	r3, [pc, #404]	@ (800b5a8 <_dtoa_r+0x590>)
 800b412:	2200      	movs	r2, #0
 800b414:	f7f4 ff3a 	bl	800028c <__adddf3>
 800b418:	4605      	mov	r5, r0
 800b41a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800b41e:	2c00      	cmp	r4, #0
 800b420:	d16a      	bne.n	800b4f8 <_dtoa_r+0x4e0>
 800b422:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b426:	4b61      	ldr	r3, [pc, #388]	@ (800b5ac <_dtoa_r+0x594>)
 800b428:	2200      	movs	r2, #0
 800b42a:	f7f4 ff2d 	bl	8000288 <__aeabi_dsub>
 800b42e:	4602      	mov	r2, r0
 800b430:	460b      	mov	r3, r1
 800b432:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b436:	462a      	mov	r2, r5
 800b438:	4633      	mov	r3, r6
 800b43a:	f7f5 fb6d 	bl	8000b18 <__aeabi_dcmpgt>
 800b43e:	2800      	cmp	r0, #0
 800b440:	f040 8298 	bne.w	800b974 <_dtoa_r+0x95c>
 800b444:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b448:	462a      	mov	r2, r5
 800b44a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800b44e:	f7f5 fb45 	bl	8000adc <__aeabi_dcmplt>
 800b452:	bb38      	cbnz	r0, 800b4a4 <_dtoa_r+0x48c>
 800b454:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 800b458:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800b45c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800b45e:	2b00      	cmp	r3, #0
 800b460:	f2c0 8157 	blt.w	800b712 <_dtoa_r+0x6fa>
 800b464:	2f0e      	cmp	r7, #14
 800b466:	f300 8154 	bgt.w	800b712 <_dtoa_r+0x6fa>
 800b46a:	4b4b      	ldr	r3, [pc, #300]	@ (800b598 <_dtoa_r+0x580>)
 800b46c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b470:	ed93 7b00 	vldr	d7, [r3]
 800b474:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b476:	2b00      	cmp	r3, #0
 800b478:	ed8d 7b00 	vstr	d7, [sp]
 800b47c:	f280 80e5 	bge.w	800b64a <_dtoa_r+0x632>
 800b480:	9b03      	ldr	r3, [sp, #12]
 800b482:	2b00      	cmp	r3, #0
 800b484:	f300 80e1 	bgt.w	800b64a <_dtoa_r+0x632>
 800b488:	d10c      	bne.n	800b4a4 <_dtoa_r+0x48c>
 800b48a:	4b48      	ldr	r3, [pc, #288]	@ (800b5ac <_dtoa_r+0x594>)
 800b48c:	2200      	movs	r2, #0
 800b48e:	ec51 0b17 	vmov	r0, r1, d7
 800b492:	f7f5 f8b1 	bl	80005f8 <__aeabi_dmul>
 800b496:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b49a:	f7f5 fb33 	bl	8000b04 <__aeabi_dcmpge>
 800b49e:	2800      	cmp	r0, #0
 800b4a0:	f000 8266 	beq.w	800b970 <_dtoa_r+0x958>
 800b4a4:	2400      	movs	r4, #0
 800b4a6:	4625      	mov	r5, r4
 800b4a8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b4aa:	4656      	mov	r6, sl
 800b4ac:	ea6f 0803 	mvn.w	r8, r3
 800b4b0:	2700      	movs	r7, #0
 800b4b2:	4621      	mov	r1, r4
 800b4b4:	4648      	mov	r0, r9
 800b4b6:	f000 fc09 	bl	800bccc <_Bfree>
 800b4ba:	2d00      	cmp	r5, #0
 800b4bc:	f000 80bd 	beq.w	800b63a <_dtoa_r+0x622>
 800b4c0:	b12f      	cbz	r7, 800b4ce <_dtoa_r+0x4b6>
 800b4c2:	42af      	cmp	r7, r5
 800b4c4:	d003      	beq.n	800b4ce <_dtoa_r+0x4b6>
 800b4c6:	4639      	mov	r1, r7
 800b4c8:	4648      	mov	r0, r9
 800b4ca:	f000 fbff 	bl	800bccc <_Bfree>
 800b4ce:	4629      	mov	r1, r5
 800b4d0:	4648      	mov	r0, r9
 800b4d2:	f000 fbfb 	bl	800bccc <_Bfree>
 800b4d6:	e0b0      	b.n	800b63a <_dtoa_r+0x622>
 800b4d8:	07e2      	lsls	r2, r4, #31
 800b4da:	d505      	bpl.n	800b4e8 <_dtoa_r+0x4d0>
 800b4dc:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b4e0:	f7f5 f88a 	bl	80005f8 <__aeabi_dmul>
 800b4e4:	3601      	adds	r6, #1
 800b4e6:	2301      	movs	r3, #1
 800b4e8:	1064      	asrs	r4, r4, #1
 800b4ea:	3508      	adds	r5, #8
 800b4ec:	e762      	b.n	800b3b4 <_dtoa_r+0x39c>
 800b4ee:	2602      	movs	r6, #2
 800b4f0:	e765      	b.n	800b3be <_dtoa_r+0x3a6>
 800b4f2:	9c03      	ldr	r4, [sp, #12]
 800b4f4:	46b8      	mov	r8, r7
 800b4f6:	e784      	b.n	800b402 <_dtoa_r+0x3ea>
 800b4f8:	4b27      	ldr	r3, [pc, #156]	@ (800b598 <_dtoa_r+0x580>)
 800b4fa:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b4fc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b500:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b504:	4454      	add	r4, sl
 800b506:	2900      	cmp	r1, #0
 800b508:	d054      	beq.n	800b5b4 <_dtoa_r+0x59c>
 800b50a:	4929      	ldr	r1, [pc, #164]	@ (800b5b0 <_dtoa_r+0x598>)
 800b50c:	2000      	movs	r0, #0
 800b50e:	f7f5 f99d 	bl	800084c <__aeabi_ddiv>
 800b512:	4633      	mov	r3, r6
 800b514:	462a      	mov	r2, r5
 800b516:	f7f4 feb7 	bl	8000288 <__aeabi_dsub>
 800b51a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800b51e:	4656      	mov	r6, sl
 800b520:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b524:	f7f5 fb18 	bl	8000b58 <__aeabi_d2iz>
 800b528:	4605      	mov	r5, r0
 800b52a:	f7f4 fffb 	bl	8000524 <__aeabi_i2d>
 800b52e:	4602      	mov	r2, r0
 800b530:	460b      	mov	r3, r1
 800b532:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b536:	f7f4 fea7 	bl	8000288 <__aeabi_dsub>
 800b53a:	3530      	adds	r5, #48	@ 0x30
 800b53c:	4602      	mov	r2, r0
 800b53e:	460b      	mov	r3, r1
 800b540:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b544:	f806 5b01 	strb.w	r5, [r6], #1
 800b548:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800b54c:	f7f5 fac6 	bl	8000adc <__aeabi_dcmplt>
 800b550:	2800      	cmp	r0, #0
 800b552:	d172      	bne.n	800b63a <_dtoa_r+0x622>
 800b554:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b558:	4911      	ldr	r1, [pc, #68]	@ (800b5a0 <_dtoa_r+0x588>)
 800b55a:	2000      	movs	r0, #0
 800b55c:	f7f4 fe94 	bl	8000288 <__aeabi_dsub>
 800b560:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800b564:	f7f5 faba 	bl	8000adc <__aeabi_dcmplt>
 800b568:	2800      	cmp	r0, #0
 800b56a:	f040 80b4 	bne.w	800b6d6 <_dtoa_r+0x6be>
 800b56e:	42a6      	cmp	r6, r4
 800b570:	f43f af70 	beq.w	800b454 <_dtoa_r+0x43c>
 800b574:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800b578:	4b0a      	ldr	r3, [pc, #40]	@ (800b5a4 <_dtoa_r+0x58c>)
 800b57a:	2200      	movs	r2, #0
 800b57c:	f7f5 f83c 	bl	80005f8 <__aeabi_dmul>
 800b580:	4b08      	ldr	r3, [pc, #32]	@ (800b5a4 <_dtoa_r+0x58c>)
 800b582:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800b586:	2200      	movs	r2, #0
 800b588:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b58c:	f7f5 f834 	bl	80005f8 <__aeabi_dmul>
 800b590:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b594:	e7c4      	b.n	800b520 <_dtoa_r+0x508>
 800b596:	bf00      	nop
 800b598:	0800cc58 	.word	0x0800cc58
 800b59c:	0800cc30 	.word	0x0800cc30
 800b5a0:	3ff00000 	.word	0x3ff00000
 800b5a4:	40240000 	.word	0x40240000
 800b5a8:	401c0000 	.word	0x401c0000
 800b5ac:	40140000 	.word	0x40140000
 800b5b0:	3fe00000 	.word	0x3fe00000
 800b5b4:	4631      	mov	r1, r6
 800b5b6:	4628      	mov	r0, r5
 800b5b8:	f7f5 f81e 	bl	80005f8 <__aeabi_dmul>
 800b5bc:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800b5c0:	9413      	str	r4, [sp, #76]	@ 0x4c
 800b5c2:	4656      	mov	r6, sl
 800b5c4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b5c8:	f7f5 fac6 	bl	8000b58 <__aeabi_d2iz>
 800b5cc:	4605      	mov	r5, r0
 800b5ce:	f7f4 ffa9 	bl	8000524 <__aeabi_i2d>
 800b5d2:	4602      	mov	r2, r0
 800b5d4:	460b      	mov	r3, r1
 800b5d6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b5da:	f7f4 fe55 	bl	8000288 <__aeabi_dsub>
 800b5de:	3530      	adds	r5, #48	@ 0x30
 800b5e0:	f806 5b01 	strb.w	r5, [r6], #1
 800b5e4:	4602      	mov	r2, r0
 800b5e6:	460b      	mov	r3, r1
 800b5e8:	42a6      	cmp	r6, r4
 800b5ea:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b5ee:	f04f 0200 	mov.w	r2, #0
 800b5f2:	d124      	bne.n	800b63e <_dtoa_r+0x626>
 800b5f4:	4baf      	ldr	r3, [pc, #700]	@ (800b8b4 <_dtoa_r+0x89c>)
 800b5f6:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800b5fa:	f7f4 fe47 	bl	800028c <__adddf3>
 800b5fe:	4602      	mov	r2, r0
 800b600:	460b      	mov	r3, r1
 800b602:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b606:	f7f5 fa87 	bl	8000b18 <__aeabi_dcmpgt>
 800b60a:	2800      	cmp	r0, #0
 800b60c:	d163      	bne.n	800b6d6 <_dtoa_r+0x6be>
 800b60e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800b612:	49a8      	ldr	r1, [pc, #672]	@ (800b8b4 <_dtoa_r+0x89c>)
 800b614:	2000      	movs	r0, #0
 800b616:	f7f4 fe37 	bl	8000288 <__aeabi_dsub>
 800b61a:	4602      	mov	r2, r0
 800b61c:	460b      	mov	r3, r1
 800b61e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b622:	f7f5 fa5b 	bl	8000adc <__aeabi_dcmplt>
 800b626:	2800      	cmp	r0, #0
 800b628:	f43f af14 	beq.w	800b454 <_dtoa_r+0x43c>
 800b62c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800b62e:	1e73      	subs	r3, r6, #1
 800b630:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b632:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b636:	2b30      	cmp	r3, #48	@ 0x30
 800b638:	d0f8      	beq.n	800b62c <_dtoa_r+0x614>
 800b63a:	4647      	mov	r7, r8
 800b63c:	e03b      	b.n	800b6b6 <_dtoa_r+0x69e>
 800b63e:	4b9e      	ldr	r3, [pc, #632]	@ (800b8b8 <_dtoa_r+0x8a0>)
 800b640:	f7f4 ffda 	bl	80005f8 <__aeabi_dmul>
 800b644:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b648:	e7bc      	b.n	800b5c4 <_dtoa_r+0x5ac>
 800b64a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800b64e:	4656      	mov	r6, sl
 800b650:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b654:	4620      	mov	r0, r4
 800b656:	4629      	mov	r1, r5
 800b658:	f7f5 f8f8 	bl	800084c <__aeabi_ddiv>
 800b65c:	f7f5 fa7c 	bl	8000b58 <__aeabi_d2iz>
 800b660:	4680      	mov	r8, r0
 800b662:	f7f4 ff5f 	bl	8000524 <__aeabi_i2d>
 800b666:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b66a:	f7f4 ffc5 	bl	80005f8 <__aeabi_dmul>
 800b66e:	4602      	mov	r2, r0
 800b670:	460b      	mov	r3, r1
 800b672:	4620      	mov	r0, r4
 800b674:	4629      	mov	r1, r5
 800b676:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800b67a:	f7f4 fe05 	bl	8000288 <__aeabi_dsub>
 800b67e:	f806 4b01 	strb.w	r4, [r6], #1
 800b682:	9d03      	ldr	r5, [sp, #12]
 800b684:	eba6 040a 	sub.w	r4, r6, sl
 800b688:	42a5      	cmp	r5, r4
 800b68a:	4602      	mov	r2, r0
 800b68c:	460b      	mov	r3, r1
 800b68e:	d133      	bne.n	800b6f8 <_dtoa_r+0x6e0>
 800b690:	f7f4 fdfc 	bl	800028c <__adddf3>
 800b694:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b698:	4604      	mov	r4, r0
 800b69a:	460d      	mov	r5, r1
 800b69c:	f7f5 fa3c 	bl	8000b18 <__aeabi_dcmpgt>
 800b6a0:	b9c0      	cbnz	r0, 800b6d4 <_dtoa_r+0x6bc>
 800b6a2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b6a6:	4620      	mov	r0, r4
 800b6a8:	4629      	mov	r1, r5
 800b6aa:	f7f5 fa0d 	bl	8000ac8 <__aeabi_dcmpeq>
 800b6ae:	b110      	cbz	r0, 800b6b6 <_dtoa_r+0x69e>
 800b6b0:	f018 0f01 	tst.w	r8, #1
 800b6b4:	d10e      	bne.n	800b6d4 <_dtoa_r+0x6bc>
 800b6b6:	9902      	ldr	r1, [sp, #8]
 800b6b8:	4648      	mov	r0, r9
 800b6ba:	f000 fb07 	bl	800bccc <_Bfree>
 800b6be:	2300      	movs	r3, #0
 800b6c0:	7033      	strb	r3, [r6, #0]
 800b6c2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800b6c4:	3701      	adds	r7, #1
 800b6c6:	601f      	str	r7, [r3, #0]
 800b6c8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800b6ca:	2b00      	cmp	r3, #0
 800b6cc:	f000 824b 	beq.w	800bb66 <_dtoa_r+0xb4e>
 800b6d0:	601e      	str	r6, [r3, #0]
 800b6d2:	e248      	b.n	800bb66 <_dtoa_r+0xb4e>
 800b6d4:	46b8      	mov	r8, r7
 800b6d6:	4633      	mov	r3, r6
 800b6d8:	461e      	mov	r6, r3
 800b6da:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b6de:	2a39      	cmp	r2, #57	@ 0x39
 800b6e0:	d106      	bne.n	800b6f0 <_dtoa_r+0x6d8>
 800b6e2:	459a      	cmp	sl, r3
 800b6e4:	d1f8      	bne.n	800b6d8 <_dtoa_r+0x6c0>
 800b6e6:	2230      	movs	r2, #48	@ 0x30
 800b6e8:	f108 0801 	add.w	r8, r8, #1
 800b6ec:	f88a 2000 	strb.w	r2, [sl]
 800b6f0:	781a      	ldrb	r2, [r3, #0]
 800b6f2:	3201      	adds	r2, #1
 800b6f4:	701a      	strb	r2, [r3, #0]
 800b6f6:	e7a0      	b.n	800b63a <_dtoa_r+0x622>
 800b6f8:	4b6f      	ldr	r3, [pc, #444]	@ (800b8b8 <_dtoa_r+0x8a0>)
 800b6fa:	2200      	movs	r2, #0
 800b6fc:	f7f4 ff7c 	bl	80005f8 <__aeabi_dmul>
 800b700:	2200      	movs	r2, #0
 800b702:	2300      	movs	r3, #0
 800b704:	4604      	mov	r4, r0
 800b706:	460d      	mov	r5, r1
 800b708:	f7f5 f9de 	bl	8000ac8 <__aeabi_dcmpeq>
 800b70c:	2800      	cmp	r0, #0
 800b70e:	d09f      	beq.n	800b650 <_dtoa_r+0x638>
 800b710:	e7d1      	b.n	800b6b6 <_dtoa_r+0x69e>
 800b712:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b714:	2a00      	cmp	r2, #0
 800b716:	f000 80ea 	beq.w	800b8ee <_dtoa_r+0x8d6>
 800b71a:	9a07      	ldr	r2, [sp, #28]
 800b71c:	2a01      	cmp	r2, #1
 800b71e:	f300 80cd 	bgt.w	800b8bc <_dtoa_r+0x8a4>
 800b722:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800b724:	2a00      	cmp	r2, #0
 800b726:	f000 80c1 	beq.w	800b8ac <_dtoa_r+0x894>
 800b72a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800b72e:	9c08      	ldr	r4, [sp, #32]
 800b730:	9e00      	ldr	r6, [sp, #0]
 800b732:	9a00      	ldr	r2, [sp, #0]
 800b734:	441a      	add	r2, r3
 800b736:	9200      	str	r2, [sp, #0]
 800b738:	9a06      	ldr	r2, [sp, #24]
 800b73a:	2101      	movs	r1, #1
 800b73c:	441a      	add	r2, r3
 800b73e:	4648      	mov	r0, r9
 800b740:	9206      	str	r2, [sp, #24]
 800b742:	f000 fb77 	bl	800be34 <__i2b>
 800b746:	4605      	mov	r5, r0
 800b748:	b166      	cbz	r6, 800b764 <_dtoa_r+0x74c>
 800b74a:	9b06      	ldr	r3, [sp, #24]
 800b74c:	2b00      	cmp	r3, #0
 800b74e:	dd09      	ble.n	800b764 <_dtoa_r+0x74c>
 800b750:	42b3      	cmp	r3, r6
 800b752:	9a00      	ldr	r2, [sp, #0]
 800b754:	bfa8      	it	ge
 800b756:	4633      	movge	r3, r6
 800b758:	1ad2      	subs	r2, r2, r3
 800b75a:	9200      	str	r2, [sp, #0]
 800b75c:	9a06      	ldr	r2, [sp, #24]
 800b75e:	1af6      	subs	r6, r6, r3
 800b760:	1ad3      	subs	r3, r2, r3
 800b762:	9306      	str	r3, [sp, #24]
 800b764:	9b08      	ldr	r3, [sp, #32]
 800b766:	b30b      	cbz	r3, 800b7ac <_dtoa_r+0x794>
 800b768:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b76a:	2b00      	cmp	r3, #0
 800b76c:	f000 80c6 	beq.w	800b8fc <_dtoa_r+0x8e4>
 800b770:	2c00      	cmp	r4, #0
 800b772:	f000 80c0 	beq.w	800b8f6 <_dtoa_r+0x8de>
 800b776:	4629      	mov	r1, r5
 800b778:	4622      	mov	r2, r4
 800b77a:	4648      	mov	r0, r9
 800b77c:	f000 fc12 	bl	800bfa4 <__pow5mult>
 800b780:	9a02      	ldr	r2, [sp, #8]
 800b782:	4601      	mov	r1, r0
 800b784:	4605      	mov	r5, r0
 800b786:	4648      	mov	r0, r9
 800b788:	f000 fb6a 	bl	800be60 <__multiply>
 800b78c:	9902      	ldr	r1, [sp, #8]
 800b78e:	4680      	mov	r8, r0
 800b790:	4648      	mov	r0, r9
 800b792:	f000 fa9b 	bl	800bccc <_Bfree>
 800b796:	9b08      	ldr	r3, [sp, #32]
 800b798:	1b1b      	subs	r3, r3, r4
 800b79a:	9308      	str	r3, [sp, #32]
 800b79c:	f000 80b1 	beq.w	800b902 <_dtoa_r+0x8ea>
 800b7a0:	9a08      	ldr	r2, [sp, #32]
 800b7a2:	4641      	mov	r1, r8
 800b7a4:	4648      	mov	r0, r9
 800b7a6:	f000 fbfd 	bl	800bfa4 <__pow5mult>
 800b7aa:	9002      	str	r0, [sp, #8]
 800b7ac:	2101      	movs	r1, #1
 800b7ae:	4648      	mov	r0, r9
 800b7b0:	f000 fb40 	bl	800be34 <__i2b>
 800b7b4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b7b6:	4604      	mov	r4, r0
 800b7b8:	2b00      	cmp	r3, #0
 800b7ba:	f000 81d8 	beq.w	800bb6e <_dtoa_r+0xb56>
 800b7be:	461a      	mov	r2, r3
 800b7c0:	4601      	mov	r1, r0
 800b7c2:	4648      	mov	r0, r9
 800b7c4:	f000 fbee 	bl	800bfa4 <__pow5mult>
 800b7c8:	9b07      	ldr	r3, [sp, #28]
 800b7ca:	2b01      	cmp	r3, #1
 800b7cc:	4604      	mov	r4, r0
 800b7ce:	f300 809f 	bgt.w	800b910 <_dtoa_r+0x8f8>
 800b7d2:	9b04      	ldr	r3, [sp, #16]
 800b7d4:	2b00      	cmp	r3, #0
 800b7d6:	f040 8097 	bne.w	800b908 <_dtoa_r+0x8f0>
 800b7da:	9b05      	ldr	r3, [sp, #20]
 800b7dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b7e0:	2b00      	cmp	r3, #0
 800b7e2:	f040 8093 	bne.w	800b90c <_dtoa_r+0x8f4>
 800b7e6:	9b05      	ldr	r3, [sp, #20]
 800b7e8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b7ec:	0d1b      	lsrs	r3, r3, #20
 800b7ee:	051b      	lsls	r3, r3, #20
 800b7f0:	b133      	cbz	r3, 800b800 <_dtoa_r+0x7e8>
 800b7f2:	9b00      	ldr	r3, [sp, #0]
 800b7f4:	3301      	adds	r3, #1
 800b7f6:	9300      	str	r3, [sp, #0]
 800b7f8:	9b06      	ldr	r3, [sp, #24]
 800b7fa:	3301      	adds	r3, #1
 800b7fc:	9306      	str	r3, [sp, #24]
 800b7fe:	2301      	movs	r3, #1
 800b800:	9308      	str	r3, [sp, #32]
 800b802:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b804:	2b00      	cmp	r3, #0
 800b806:	f000 81b8 	beq.w	800bb7a <_dtoa_r+0xb62>
 800b80a:	6923      	ldr	r3, [r4, #16]
 800b80c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b810:	6918      	ldr	r0, [r3, #16]
 800b812:	f000 fac3 	bl	800bd9c <__hi0bits>
 800b816:	f1c0 0020 	rsb	r0, r0, #32
 800b81a:	9b06      	ldr	r3, [sp, #24]
 800b81c:	4418      	add	r0, r3
 800b81e:	f010 001f 	ands.w	r0, r0, #31
 800b822:	f000 8082 	beq.w	800b92a <_dtoa_r+0x912>
 800b826:	f1c0 0320 	rsb	r3, r0, #32
 800b82a:	2b04      	cmp	r3, #4
 800b82c:	dd73      	ble.n	800b916 <_dtoa_r+0x8fe>
 800b82e:	9b00      	ldr	r3, [sp, #0]
 800b830:	f1c0 001c 	rsb	r0, r0, #28
 800b834:	4403      	add	r3, r0
 800b836:	9300      	str	r3, [sp, #0]
 800b838:	9b06      	ldr	r3, [sp, #24]
 800b83a:	4403      	add	r3, r0
 800b83c:	4406      	add	r6, r0
 800b83e:	9306      	str	r3, [sp, #24]
 800b840:	9b00      	ldr	r3, [sp, #0]
 800b842:	2b00      	cmp	r3, #0
 800b844:	dd05      	ble.n	800b852 <_dtoa_r+0x83a>
 800b846:	9902      	ldr	r1, [sp, #8]
 800b848:	461a      	mov	r2, r3
 800b84a:	4648      	mov	r0, r9
 800b84c:	f000 fc04 	bl	800c058 <__lshift>
 800b850:	9002      	str	r0, [sp, #8]
 800b852:	9b06      	ldr	r3, [sp, #24]
 800b854:	2b00      	cmp	r3, #0
 800b856:	dd05      	ble.n	800b864 <_dtoa_r+0x84c>
 800b858:	4621      	mov	r1, r4
 800b85a:	461a      	mov	r2, r3
 800b85c:	4648      	mov	r0, r9
 800b85e:	f000 fbfb 	bl	800c058 <__lshift>
 800b862:	4604      	mov	r4, r0
 800b864:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800b866:	2b00      	cmp	r3, #0
 800b868:	d061      	beq.n	800b92e <_dtoa_r+0x916>
 800b86a:	9802      	ldr	r0, [sp, #8]
 800b86c:	4621      	mov	r1, r4
 800b86e:	f000 fc5f 	bl	800c130 <__mcmp>
 800b872:	2800      	cmp	r0, #0
 800b874:	da5b      	bge.n	800b92e <_dtoa_r+0x916>
 800b876:	2300      	movs	r3, #0
 800b878:	9902      	ldr	r1, [sp, #8]
 800b87a:	220a      	movs	r2, #10
 800b87c:	4648      	mov	r0, r9
 800b87e:	f000 fa47 	bl	800bd10 <__multadd>
 800b882:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b884:	9002      	str	r0, [sp, #8]
 800b886:	f107 38ff 	add.w	r8, r7, #4294967295
 800b88a:	2b00      	cmp	r3, #0
 800b88c:	f000 8177 	beq.w	800bb7e <_dtoa_r+0xb66>
 800b890:	4629      	mov	r1, r5
 800b892:	2300      	movs	r3, #0
 800b894:	220a      	movs	r2, #10
 800b896:	4648      	mov	r0, r9
 800b898:	f000 fa3a 	bl	800bd10 <__multadd>
 800b89c:	f1bb 0f00 	cmp.w	fp, #0
 800b8a0:	4605      	mov	r5, r0
 800b8a2:	dc6f      	bgt.n	800b984 <_dtoa_r+0x96c>
 800b8a4:	9b07      	ldr	r3, [sp, #28]
 800b8a6:	2b02      	cmp	r3, #2
 800b8a8:	dc49      	bgt.n	800b93e <_dtoa_r+0x926>
 800b8aa:	e06b      	b.n	800b984 <_dtoa_r+0x96c>
 800b8ac:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800b8ae:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800b8b2:	e73c      	b.n	800b72e <_dtoa_r+0x716>
 800b8b4:	3fe00000 	.word	0x3fe00000
 800b8b8:	40240000 	.word	0x40240000
 800b8bc:	9b03      	ldr	r3, [sp, #12]
 800b8be:	1e5c      	subs	r4, r3, #1
 800b8c0:	9b08      	ldr	r3, [sp, #32]
 800b8c2:	42a3      	cmp	r3, r4
 800b8c4:	db09      	blt.n	800b8da <_dtoa_r+0x8c2>
 800b8c6:	1b1c      	subs	r4, r3, r4
 800b8c8:	9b03      	ldr	r3, [sp, #12]
 800b8ca:	2b00      	cmp	r3, #0
 800b8cc:	f6bf af30 	bge.w	800b730 <_dtoa_r+0x718>
 800b8d0:	9b00      	ldr	r3, [sp, #0]
 800b8d2:	9a03      	ldr	r2, [sp, #12]
 800b8d4:	1a9e      	subs	r6, r3, r2
 800b8d6:	2300      	movs	r3, #0
 800b8d8:	e72b      	b.n	800b732 <_dtoa_r+0x71a>
 800b8da:	9b08      	ldr	r3, [sp, #32]
 800b8dc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800b8de:	9408      	str	r4, [sp, #32]
 800b8e0:	1ae3      	subs	r3, r4, r3
 800b8e2:	441a      	add	r2, r3
 800b8e4:	9e00      	ldr	r6, [sp, #0]
 800b8e6:	9b03      	ldr	r3, [sp, #12]
 800b8e8:	920d      	str	r2, [sp, #52]	@ 0x34
 800b8ea:	2400      	movs	r4, #0
 800b8ec:	e721      	b.n	800b732 <_dtoa_r+0x71a>
 800b8ee:	9c08      	ldr	r4, [sp, #32]
 800b8f0:	9e00      	ldr	r6, [sp, #0]
 800b8f2:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800b8f4:	e728      	b.n	800b748 <_dtoa_r+0x730>
 800b8f6:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800b8fa:	e751      	b.n	800b7a0 <_dtoa_r+0x788>
 800b8fc:	9a08      	ldr	r2, [sp, #32]
 800b8fe:	9902      	ldr	r1, [sp, #8]
 800b900:	e750      	b.n	800b7a4 <_dtoa_r+0x78c>
 800b902:	f8cd 8008 	str.w	r8, [sp, #8]
 800b906:	e751      	b.n	800b7ac <_dtoa_r+0x794>
 800b908:	2300      	movs	r3, #0
 800b90a:	e779      	b.n	800b800 <_dtoa_r+0x7e8>
 800b90c:	9b04      	ldr	r3, [sp, #16]
 800b90e:	e777      	b.n	800b800 <_dtoa_r+0x7e8>
 800b910:	2300      	movs	r3, #0
 800b912:	9308      	str	r3, [sp, #32]
 800b914:	e779      	b.n	800b80a <_dtoa_r+0x7f2>
 800b916:	d093      	beq.n	800b840 <_dtoa_r+0x828>
 800b918:	9a00      	ldr	r2, [sp, #0]
 800b91a:	331c      	adds	r3, #28
 800b91c:	441a      	add	r2, r3
 800b91e:	9200      	str	r2, [sp, #0]
 800b920:	9a06      	ldr	r2, [sp, #24]
 800b922:	441a      	add	r2, r3
 800b924:	441e      	add	r6, r3
 800b926:	9206      	str	r2, [sp, #24]
 800b928:	e78a      	b.n	800b840 <_dtoa_r+0x828>
 800b92a:	4603      	mov	r3, r0
 800b92c:	e7f4      	b.n	800b918 <_dtoa_r+0x900>
 800b92e:	9b03      	ldr	r3, [sp, #12]
 800b930:	2b00      	cmp	r3, #0
 800b932:	46b8      	mov	r8, r7
 800b934:	dc20      	bgt.n	800b978 <_dtoa_r+0x960>
 800b936:	469b      	mov	fp, r3
 800b938:	9b07      	ldr	r3, [sp, #28]
 800b93a:	2b02      	cmp	r3, #2
 800b93c:	dd1e      	ble.n	800b97c <_dtoa_r+0x964>
 800b93e:	f1bb 0f00 	cmp.w	fp, #0
 800b942:	f47f adb1 	bne.w	800b4a8 <_dtoa_r+0x490>
 800b946:	4621      	mov	r1, r4
 800b948:	465b      	mov	r3, fp
 800b94a:	2205      	movs	r2, #5
 800b94c:	4648      	mov	r0, r9
 800b94e:	f000 f9df 	bl	800bd10 <__multadd>
 800b952:	4601      	mov	r1, r0
 800b954:	4604      	mov	r4, r0
 800b956:	9802      	ldr	r0, [sp, #8]
 800b958:	f000 fbea 	bl	800c130 <__mcmp>
 800b95c:	2800      	cmp	r0, #0
 800b95e:	f77f ada3 	ble.w	800b4a8 <_dtoa_r+0x490>
 800b962:	4656      	mov	r6, sl
 800b964:	2331      	movs	r3, #49	@ 0x31
 800b966:	f806 3b01 	strb.w	r3, [r6], #1
 800b96a:	f108 0801 	add.w	r8, r8, #1
 800b96e:	e59f      	b.n	800b4b0 <_dtoa_r+0x498>
 800b970:	9c03      	ldr	r4, [sp, #12]
 800b972:	46b8      	mov	r8, r7
 800b974:	4625      	mov	r5, r4
 800b976:	e7f4      	b.n	800b962 <_dtoa_r+0x94a>
 800b978:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800b97c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b97e:	2b00      	cmp	r3, #0
 800b980:	f000 8101 	beq.w	800bb86 <_dtoa_r+0xb6e>
 800b984:	2e00      	cmp	r6, #0
 800b986:	dd05      	ble.n	800b994 <_dtoa_r+0x97c>
 800b988:	4629      	mov	r1, r5
 800b98a:	4632      	mov	r2, r6
 800b98c:	4648      	mov	r0, r9
 800b98e:	f000 fb63 	bl	800c058 <__lshift>
 800b992:	4605      	mov	r5, r0
 800b994:	9b08      	ldr	r3, [sp, #32]
 800b996:	2b00      	cmp	r3, #0
 800b998:	d05c      	beq.n	800ba54 <_dtoa_r+0xa3c>
 800b99a:	6869      	ldr	r1, [r5, #4]
 800b99c:	4648      	mov	r0, r9
 800b99e:	f000 f955 	bl	800bc4c <_Balloc>
 800b9a2:	4606      	mov	r6, r0
 800b9a4:	b928      	cbnz	r0, 800b9b2 <_dtoa_r+0x99a>
 800b9a6:	4b82      	ldr	r3, [pc, #520]	@ (800bbb0 <_dtoa_r+0xb98>)
 800b9a8:	4602      	mov	r2, r0
 800b9aa:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800b9ae:	f7ff bb4a 	b.w	800b046 <_dtoa_r+0x2e>
 800b9b2:	692a      	ldr	r2, [r5, #16]
 800b9b4:	3202      	adds	r2, #2
 800b9b6:	0092      	lsls	r2, r2, #2
 800b9b8:	f105 010c 	add.w	r1, r5, #12
 800b9bc:	300c      	adds	r0, #12
 800b9be:	f000 ff31 	bl	800c824 <memcpy>
 800b9c2:	2201      	movs	r2, #1
 800b9c4:	4631      	mov	r1, r6
 800b9c6:	4648      	mov	r0, r9
 800b9c8:	f000 fb46 	bl	800c058 <__lshift>
 800b9cc:	f10a 0301 	add.w	r3, sl, #1
 800b9d0:	9300      	str	r3, [sp, #0]
 800b9d2:	eb0a 030b 	add.w	r3, sl, fp
 800b9d6:	9308      	str	r3, [sp, #32]
 800b9d8:	9b04      	ldr	r3, [sp, #16]
 800b9da:	f003 0301 	and.w	r3, r3, #1
 800b9de:	462f      	mov	r7, r5
 800b9e0:	9306      	str	r3, [sp, #24]
 800b9e2:	4605      	mov	r5, r0
 800b9e4:	9b00      	ldr	r3, [sp, #0]
 800b9e6:	9802      	ldr	r0, [sp, #8]
 800b9e8:	4621      	mov	r1, r4
 800b9ea:	f103 3bff 	add.w	fp, r3, #4294967295
 800b9ee:	f7ff fa88 	bl	800af02 <quorem>
 800b9f2:	4603      	mov	r3, r0
 800b9f4:	3330      	adds	r3, #48	@ 0x30
 800b9f6:	9003      	str	r0, [sp, #12]
 800b9f8:	4639      	mov	r1, r7
 800b9fa:	9802      	ldr	r0, [sp, #8]
 800b9fc:	9309      	str	r3, [sp, #36]	@ 0x24
 800b9fe:	f000 fb97 	bl	800c130 <__mcmp>
 800ba02:	462a      	mov	r2, r5
 800ba04:	9004      	str	r0, [sp, #16]
 800ba06:	4621      	mov	r1, r4
 800ba08:	4648      	mov	r0, r9
 800ba0a:	f000 fbad 	bl	800c168 <__mdiff>
 800ba0e:	68c2      	ldr	r2, [r0, #12]
 800ba10:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ba12:	4606      	mov	r6, r0
 800ba14:	bb02      	cbnz	r2, 800ba58 <_dtoa_r+0xa40>
 800ba16:	4601      	mov	r1, r0
 800ba18:	9802      	ldr	r0, [sp, #8]
 800ba1a:	f000 fb89 	bl	800c130 <__mcmp>
 800ba1e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ba20:	4602      	mov	r2, r0
 800ba22:	4631      	mov	r1, r6
 800ba24:	4648      	mov	r0, r9
 800ba26:	920c      	str	r2, [sp, #48]	@ 0x30
 800ba28:	9309      	str	r3, [sp, #36]	@ 0x24
 800ba2a:	f000 f94f 	bl	800bccc <_Bfree>
 800ba2e:	9b07      	ldr	r3, [sp, #28]
 800ba30:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800ba32:	9e00      	ldr	r6, [sp, #0]
 800ba34:	ea42 0103 	orr.w	r1, r2, r3
 800ba38:	9b06      	ldr	r3, [sp, #24]
 800ba3a:	4319      	orrs	r1, r3
 800ba3c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ba3e:	d10d      	bne.n	800ba5c <_dtoa_r+0xa44>
 800ba40:	2b39      	cmp	r3, #57	@ 0x39
 800ba42:	d027      	beq.n	800ba94 <_dtoa_r+0xa7c>
 800ba44:	9a04      	ldr	r2, [sp, #16]
 800ba46:	2a00      	cmp	r2, #0
 800ba48:	dd01      	ble.n	800ba4e <_dtoa_r+0xa36>
 800ba4a:	9b03      	ldr	r3, [sp, #12]
 800ba4c:	3331      	adds	r3, #49	@ 0x31
 800ba4e:	f88b 3000 	strb.w	r3, [fp]
 800ba52:	e52e      	b.n	800b4b2 <_dtoa_r+0x49a>
 800ba54:	4628      	mov	r0, r5
 800ba56:	e7b9      	b.n	800b9cc <_dtoa_r+0x9b4>
 800ba58:	2201      	movs	r2, #1
 800ba5a:	e7e2      	b.n	800ba22 <_dtoa_r+0xa0a>
 800ba5c:	9904      	ldr	r1, [sp, #16]
 800ba5e:	2900      	cmp	r1, #0
 800ba60:	db04      	blt.n	800ba6c <_dtoa_r+0xa54>
 800ba62:	9807      	ldr	r0, [sp, #28]
 800ba64:	4301      	orrs	r1, r0
 800ba66:	9806      	ldr	r0, [sp, #24]
 800ba68:	4301      	orrs	r1, r0
 800ba6a:	d120      	bne.n	800baae <_dtoa_r+0xa96>
 800ba6c:	2a00      	cmp	r2, #0
 800ba6e:	ddee      	ble.n	800ba4e <_dtoa_r+0xa36>
 800ba70:	9902      	ldr	r1, [sp, #8]
 800ba72:	9300      	str	r3, [sp, #0]
 800ba74:	2201      	movs	r2, #1
 800ba76:	4648      	mov	r0, r9
 800ba78:	f000 faee 	bl	800c058 <__lshift>
 800ba7c:	4621      	mov	r1, r4
 800ba7e:	9002      	str	r0, [sp, #8]
 800ba80:	f000 fb56 	bl	800c130 <__mcmp>
 800ba84:	2800      	cmp	r0, #0
 800ba86:	9b00      	ldr	r3, [sp, #0]
 800ba88:	dc02      	bgt.n	800ba90 <_dtoa_r+0xa78>
 800ba8a:	d1e0      	bne.n	800ba4e <_dtoa_r+0xa36>
 800ba8c:	07da      	lsls	r2, r3, #31
 800ba8e:	d5de      	bpl.n	800ba4e <_dtoa_r+0xa36>
 800ba90:	2b39      	cmp	r3, #57	@ 0x39
 800ba92:	d1da      	bne.n	800ba4a <_dtoa_r+0xa32>
 800ba94:	2339      	movs	r3, #57	@ 0x39
 800ba96:	f88b 3000 	strb.w	r3, [fp]
 800ba9a:	4633      	mov	r3, r6
 800ba9c:	461e      	mov	r6, r3
 800ba9e:	3b01      	subs	r3, #1
 800baa0:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800baa4:	2a39      	cmp	r2, #57	@ 0x39
 800baa6:	d04e      	beq.n	800bb46 <_dtoa_r+0xb2e>
 800baa8:	3201      	adds	r2, #1
 800baaa:	701a      	strb	r2, [r3, #0]
 800baac:	e501      	b.n	800b4b2 <_dtoa_r+0x49a>
 800baae:	2a00      	cmp	r2, #0
 800bab0:	dd03      	ble.n	800baba <_dtoa_r+0xaa2>
 800bab2:	2b39      	cmp	r3, #57	@ 0x39
 800bab4:	d0ee      	beq.n	800ba94 <_dtoa_r+0xa7c>
 800bab6:	3301      	adds	r3, #1
 800bab8:	e7c9      	b.n	800ba4e <_dtoa_r+0xa36>
 800baba:	9a00      	ldr	r2, [sp, #0]
 800babc:	9908      	ldr	r1, [sp, #32]
 800babe:	f802 3c01 	strb.w	r3, [r2, #-1]
 800bac2:	428a      	cmp	r2, r1
 800bac4:	d028      	beq.n	800bb18 <_dtoa_r+0xb00>
 800bac6:	9902      	ldr	r1, [sp, #8]
 800bac8:	2300      	movs	r3, #0
 800baca:	220a      	movs	r2, #10
 800bacc:	4648      	mov	r0, r9
 800bace:	f000 f91f 	bl	800bd10 <__multadd>
 800bad2:	42af      	cmp	r7, r5
 800bad4:	9002      	str	r0, [sp, #8]
 800bad6:	f04f 0300 	mov.w	r3, #0
 800bada:	f04f 020a 	mov.w	r2, #10
 800bade:	4639      	mov	r1, r7
 800bae0:	4648      	mov	r0, r9
 800bae2:	d107      	bne.n	800baf4 <_dtoa_r+0xadc>
 800bae4:	f000 f914 	bl	800bd10 <__multadd>
 800bae8:	4607      	mov	r7, r0
 800baea:	4605      	mov	r5, r0
 800baec:	9b00      	ldr	r3, [sp, #0]
 800baee:	3301      	adds	r3, #1
 800baf0:	9300      	str	r3, [sp, #0]
 800baf2:	e777      	b.n	800b9e4 <_dtoa_r+0x9cc>
 800baf4:	f000 f90c 	bl	800bd10 <__multadd>
 800baf8:	4629      	mov	r1, r5
 800bafa:	4607      	mov	r7, r0
 800bafc:	2300      	movs	r3, #0
 800bafe:	220a      	movs	r2, #10
 800bb00:	4648      	mov	r0, r9
 800bb02:	f000 f905 	bl	800bd10 <__multadd>
 800bb06:	4605      	mov	r5, r0
 800bb08:	e7f0      	b.n	800baec <_dtoa_r+0xad4>
 800bb0a:	f1bb 0f00 	cmp.w	fp, #0
 800bb0e:	bfcc      	ite	gt
 800bb10:	465e      	movgt	r6, fp
 800bb12:	2601      	movle	r6, #1
 800bb14:	4456      	add	r6, sl
 800bb16:	2700      	movs	r7, #0
 800bb18:	9902      	ldr	r1, [sp, #8]
 800bb1a:	9300      	str	r3, [sp, #0]
 800bb1c:	2201      	movs	r2, #1
 800bb1e:	4648      	mov	r0, r9
 800bb20:	f000 fa9a 	bl	800c058 <__lshift>
 800bb24:	4621      	mov	r1, r4
 800bb26:	9002      	str	r0, [sp, #8]
 800bb28:	f000 fb02 	bl	800c130 <__mcmp>
 800bb2c:	2800      	cmp	r0, #0
 800bb2e:	dcb4      	bgt.n	800ba9a <_dtoa_r+0xa82>
 800bb30:	d102      	bne.n	800bb38 <_dtoa_r+0xb20>
 800bb32:	9b00      	ldr	r3, [sp, #0]
 800bb34:	07db      	lsls	r3, r3, #31
 800bb36:	d4b0      	bmi.n	800ba9a <_dtoa_r+0xa82>
 800bb38:	4633      	mov	r3, r6
 800bb3a:	461e      	mov	r6, r3
 800bb3c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bb40:	2a30      	cmp	r2, #48	@ 0x30
 800bb42:	d0fa      	beq.n	800bb3a <_dtoa_r+0xb22>
 800bb44:	e4b5      	b.n	800b4b2 <_dtoa_r+0x49a>
 800bb46:	459a      	cmp	sl, r3
 800bb48:	d1a8      	bne.n	800ba9c <_dtoa_r+0xa84>
 800bb4a:	2331      	movs	r3, #49	@ 0x31
 800bb4c:	f108 0801 	add.w	r8, r8, #1
 800bb50:	f88a 3000 	strb.w	r3, [sl]
 800bb54:	e4ad      	b.n	800b4b2 <_dtoa_r+0x49a>
 800bb56:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800bb58:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800bbb4 <_dtoa_r+0xb9c>
 800bb5c:	b11b      	cbz	r3, 800bb66 <_dtoa_r+0xb4e>
 800bb5e:	f10a 0308 	add.w	r3, sl, #8
 800bb62:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800bb64:	6013      	str	r3, [r2, #0]
 800bb66:	4650      	mov	r0, sl
 800bb68:	b017      	add	sp, #92	@ 0x5c
 800bb6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb6e:	9b07      	ldr	r3, [sp, #28]
 800bb70:	2b01      	cmp	r3, #1
 800bb72:	f77f ae2e 	ble.w	800b7d2 <_dtoa_r+0x7ba>
 800bb76:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800bb78:	9308      	str	r3, [sp, #32]
 800bb7a:	2001      	movs	r0, #1
 800bb7c:	e64d      	b.n	800b81a <_dtoa_r+0x802>
 800bb7e:	f1bb 0f00 	cmp.w	fp, #0
 800bb82:	f77f aed9 	ble.w	800b938 <_dtoa_r+0x920>
 800bb86:	4656      	mov	r6, sl
 800bb88:	9802      	ldr	r0, [sp, #8]
 800bb8a:	4621      	mov	r1, r4
 800bb8c:	f7ff f9b9 	bl	800af02 <quorem>
 800bb90:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800bb94:	f806 3b01 	strb.w	r3, [r6], #1
 800bb98:	eba6 020a 	sub.w	r2, r6, sl
 800bb9c:	4593      	cmp	fp, r2
 800bb9e:	ddb4      	ble.n	800bb0a <_dtoa_r+0xaf2>
 800bba0:	9902      	ldr	r1, [sp, #8]
 800bba2:	2300      	movs	r3, #0
 800bba4:	220a      	movs	r2, #10
 800bba6:	4648      	mov	r0, r9
 800bba8:	f000 f8b2 	bl	800bd10 <__multadd>
 800bbac:	9002      	str	r0, [sp, #8]
 800bbae:	e7eb      	b.n	800bb88 <_dtoa_r+0xb70>
 800bbb0:	0800cb60 	.word	0x0800cb60
 800bbb4:	0800cae4 	.word	0x0800cae4

0800bbb8 <_free_r>:
 800bbb8:	b538      	push	{r3, r4, r5, lr}
 800bbba:	4605      	mov	r5, r0
 800bbbc:	2900      	cmp	r1, #0
 800bbbe:	d041      	beq.n	800bc44 <_free_r+0x8c>
 800bbc0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bbc4:	1f0c      	subs	r4, r1, #4
 800bbc6:	2b00      	cmp	r3, #0
 800bbc8:	bfb8      	it	lt
 800bbca:	18e4      	addlt	r4, r4, r3
 800bbcc:	f7fe fa9e 	bl	800a10c <__malloc_lock>
 800bbd0:	4a1d      	ldr	r2, [pc, #116]	@ (800bc48 <_free_r+0x90>)
 800bbd2:	6813      	ldr	r3, [r2, #0]
 800bbd4:	b933      	cbnz	r3, 800bbe4 <_free_r+0x2c>
 800bbd6:	6063      	str	r3, [r4, #4]
 800bbd8:	6014      	str	r4, [r2, #0]
 800bbda:	4628      	mov	r0, r5
 800bbdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bbe0:	f7fe ba9a 	b.w	800a118 <__malloc_unlock>
 800bbe4:	42a3      	cmp	r3, r4
 800bbe6:	d908      	bls.n	800bbfa <_free_r+0x42>
 800bbe8:	6820      	ldr	r0, [r4, #0]
 800bbea:	1821      	adds	r1, r4, r0
 800bbec:	428b      	cmp	r3, r1
 800bbee:	bf01      	itttt	eq
 800bbf0:	6819      	ldreq	r1, [r3, #0]
 800bbf2:	685b      	ldreq	r3, [r3, #4]
 800bbf4:	1809      	addeq	r1, r1, r0
 800bbf6:	6021      	streq	r1, [r4, #0]
 800bbf8:	e7ed      	b.n	800bbd6 <_free_r+0x1e>
 800bbfa:	461a      	mov	r2, r3
 800bbfc:	685b      	ldr	r3, [r3, #4]
 800bbfe:	b10b      	cbz	r3, 800bc04 <_free_r+0x4c>
 800bc00:	42a3      	cmp	r3, r4
 800bc02:	d9fa      	bls.n	800bbfa <_free_r+0x42>
 800bc04:	6811      	ldr	r1, [r2, #0]
 800bc06:	1850      	adds	r0, r2, r1
 800bc08:	42a0      	cmp	r0, r4
 800bc0a:	d10b      	bne.n	800bc24 <_free_r+0x6c>
 800bc0c:	6820      	ldr	r0, [r4, #0]
 800bc0e:	4401      	add	r1, r0
 800bc10:	1850      	adds	r0, r2, r1
 800bc12:	4283      	cmp	r3, r0
 800bc14:	6011      	str	r1, [r2, #0]
 800bc16:	d1e0      	bne.n	800bbda <_free_r+0x22>
 800bc18:	6818      	ldr	r0, [r3, #0]
 800bc1a:	685b      	ldr	r3, [r3, #4]
 800bc1c:	6053      	str	r3, [r2, #4]
 800bc1e:	4408      	add	r0, r1
 800bc20:	6010      	str	r0, [r2, #0]
 800bc22:	e7da      	b.n	800bbda <_free_r+0x22>
 800bc24:	d902      	bls.n	800bc2c <_free_r+0x74>
 800bc26:	230c      	movs	r3, #12
 800bc28:	602b      	str	r3, [r5, #0]
 800bc2a:	e7d6      	b.n	800bbda <_free_r+0x22>
 800bc2c:	6820      	ldr	r0, [r4, #0]
 800bc2e:	1821      	adds	r1, r4, r0
 800bc30:	428b      	cmp	r3, r1
 800bc32:	bf04      	itt	eq
 800bc34:	6819      	ldreq	r1, [r3, #0]
 800bc36:	685b      	ldreq	r3, [r3, #4]
 800bc38:	6063      	str	r3, [r4, #4]
 800bc3a:	bf04      	itt	eq
 800bc3c:	1809      	addeq	r1, r1, r0
 800bc3e:	6021      	streq	r1, [r4, #0]
 800bc40:	6054      	str	r4, [r2, #4]
 800bc42:	e7ca      	b.n	800bbda <_free_r+0x22>
 800bc44:	bd38      	pop	{r3, r4, r5, pc}
 800bc46:	bf00      	nop
 800bc48:	20000eb4 	.word	0x20000eb4

0800bc4c <_Balloc>:
 800bc4c:	b570      	push	{r4, r5, r6, lr}
 800bc4e:	69c6      	ldr	r6, [r0, #28]
 800bc50:	4604      	mov	r4, r0
 800bc52:	460d      	mov	r5, r1
 800bc54:	b976      	cbnz	r6, 800bc74 <_Balloc+0x28>
 800bc56:	2010      	movs	r0, #16
 800bc58:	f7fe f9a6 	bl	8009fa8 <malloc>
 800bc5c:	4602      	mov	r2, r0
 800bc5e:	61e0      	str	r0, [r4, #28]
 800bc60:	b920      	cbnz	r0, 800bc6c <_Balloc+0x20>
 800bc62:	4b18      	ldr	r3, [pc, #96]	@ (800bcc4 <_Balloc+0x78>)
 800bc64:	4818      	ldr	r0, [pc, #96]	@ (800bcc8 <_Balloc+0x7c>)
 800bc66:	216b      	movs	r1, #107	@ 0x6b
 800bc68:	f000 fdea 	bl	800c840 <__assert_func>
 800bc6c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bc70:	6006      	str	r6, [r0, #0]
 800bc72:	60c6      	str	r6, [r0, #12]
 800bc74:	69e6      	ldr	r6, [r4, #28]
 800bc76:	68f3      	ldr	r3, [r6, #12]
 800bc78:	b183      	cbz	r3, 800bc9c <_Balloc+0x50>
 800bc7a:	69e3      	ldr	r3, [r4, #28]
 800bc7c:	68db      	ldr	r3, [r3, #12]
 800bc7e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800bc82:	b9b8      	cbnz	r0, 800bcb4 <_Balloc+0x68>
 800bc84:	2101      	movs	r1, #1
 800bc86:	fa01 f605 	lsl.w	r6, r1, r5
 800bc8a:	1d72      	adds	r2, r6, #5
 800bc8c:	0092      	lsls	r2, r2, #2
 800bc8e:	4620      	mov	r0, r4
 800bc90:	f000 fdf4 	bl	800c87c <_calloc_r>
 800bc94:	b160      	cbz	r0, 800bcb0 <_Balloc+0x64>
 800bc96:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800bc9a:	e00e      	b.n	800bcba <_Balloc+0x6e>
 800bc9c:	2221      	movs	r2, #33	@ 0x21
 800bc9e:	2104      	movs	r1, #4
 800bca0:	4620      	mov	r0, r4
 800bca2:	f000 fdeb 	bl	800c87c <_calloc_r>
 800bca6:	69e3      	ldr	r3, [r4, #28]
 800bca8:	60f0      	str	r0, [r6, #12]
 800bcaa:	68db      	ldr	r3, [r3, #12]
 800bcac:	2b00      	cmp	r3, #0
 800bcae:	d1e4      	bne.n	800bc7a <_Balloc+0x2e>
 800bcb0:	2000      	movs	r0, #0
 800bcb2:	bd70      	pop	{r4, r5, r6, pc}
 800bcb4:	6802      	ldr	r2, [r0, #0]
 800bcb6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800bcba:	2300      	movs	r3, #0
 800bcbc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800bcc0:	e7f7      	b.n	800bcb2 <_Balloc+0x66>
 800bcc2:	bf00      	nop
 800bcc4:	0800caf1 	.word	0x0800caf1
 800bcc8:	0800cb71 	.word	0x0800cb71

0800bccc <_Bfree>:
 800bccc:	b570      	push	{r4, r5, r6, lr}
 800bcce:	69c6      	ldr	r6, [r0, #28]
 800bcd0:	4605      	mov	r5, r0
 800bcd2:	460c      	mov	r4, r1
 800bcd4:	b976      	cbnz	r6, 800bcf4 <_Bfree+0x28>
 800bcd6:	2010      	movs	r0, #16
 800bcd8:	f7fe f966 	bl	8009fa8 <malloc>
 800bcdc:	4602      	mov	r2, r0
 800bcde:	61e8      	str	r0, [r5, #28]
 800bce0:	b920      	cbnz	r0, 800bcec <_Bfree+0x20>
 800bce2:	4b09      	ldr	r3, [pc, #36]	@ (800bd08 <_Bfree+0x3c>)
 800bce4:	4809      	ldr	r0, [pc, #36]	@ (800bd0c <_Bfree+0x40>)
 800bce6:	218f      	movs	r1, #143	@ 0x8f
 800bce8:	f000 fdaa 	bl	800c840 <__assert_func>
 800bcec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bcf0:	6006      	str	r6, [r0, #0]
 800bcf2:	60c6      	str	r6, [r0, #12]
 800bcf4:	b13c      	cbz	r4, 800bd06 <_Bfree+0x3a>
 800bcf6:	69eb      	ldr	r3, [r5, #28]
 800bcf8:	6862      	ldr	r2, [r4, #4]
 800bcfa:	68db      	ldr	r3, [r3, #12]
 800bcfc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800bd00:	6021      	str	r1, [r4, #0]
 800bd02:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800bd06:	bd70      	pop	{r4, r5, r6, pc}
 800bd08:	0800caf1 	.word	0x0800caf1
 800bd0c:	0800cb71 	.word	0x0800cb71

0800bd10 <__multadd>:
 800bd10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bd14:	690d      	ldr	r5, [r1, #16]
 800bd16:	4607      	mov	r7, r0
 800bd18:	460c      	mov	r4, r1
 800bd1a:	461e      	mov	r6, r3
 800bd1c:	f101 0c14 	add.w	ip, r1, #20
 800bd20:	2000      	movs	r0, #0
 800bd22:	f8dc 3000 	ldr.w	r3, [ip]
 800bd26:	b299      	uxth	r1, r3
 800bd28:	fb02 6101 	mla	r1, r2, r1, r6
 800bd2c:	0c1e      	lsrs	r6, r3, #16
 800bd2e:	0c0b      	lsrs	r3, r1, #16
 800bd30:	fb02 3306 	mla	r3, r2, r6, r3
 800bd34:	b289      	uxth	r1, r1
 800bd36:	3001      	adds	r0, #1
 800bd38:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800bd3c:	4285      	cmp	r5, r0
 800bd3e:	f84c 1b04 	str.w	r1, [ip], #4
 800bd42:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800bd46:	dcec      	bgt.n	800bd22 <__multadd+0x12>
 800bd48:	b30e      	cbz	r6, 800bd8e <__multadd+0x7e>
 800bd4a:	68a3      	ldr	r3, [r4, #8]
 800bd4c:	42ab      	cmp	r3, r5
 800bd4e:	dc19      	bgt.n	800bd84 <__multadd+0x74>
 800bd50:	6861      	ldr	r1, [r4, #4]
 800bd52:	4638      	mov	r0, r7
 800bd54:	3101      	adds	r1, #1
 800bd56:	f7ff ff79 	bl	800bc4c <_Balloc>
 800bd5a:	4680      	mov	r8, r0
 800bd5c:	b928      	cbnz	r0, 800bd6a <__multadd+0x5a>
 800bd5e:	4602      	mov	r2, r0
 800bd60:	4b0c      	ldr	r3, [pc, #48]	@ (800bd94 <__multadd+0x84>)
 800bd62:	480d      	ldr	r0, [pc, #52]	@ (800bd98 <__multadd+0x88>)
 800bd64:	21ba      	movs	r1, #186	@ 0xba
 800bd66:	f000 fd6b 	bl	800c840 <__assert_func>
 800bd6a:	6922      	ldr	r2, [r4, #16]
 800bd6c:	3202      	adds	r2, #2
 800bd6e:	f104 010c 	add.w	r1, r4, #12
 800bd72:	0092      	lsls	r2, r2, #2
 800bd74:	300c      	adds	r0, #12
 800bd76:	f000 fd55 	bl	800c824 <memcpy>
 800bd7a:	4621      	mov	r1, r4
 800bd7c:	4638      	mov	r0, r7
 800bd7e:	f7ff ffa5 	bl	800bccc <_Bfree>
 800bd82:	4644      	mov	r4, r8
 800bd84:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800bd88:	3501      	adds	r5, #1
 800bd8a:	615e      	str	r6, [r3, #20]
 800bd8c:	6125      	str	r5, [r4, #16]
 800bd8e:	4620      	mov	r0, r4
 800bd90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bd94:	0800cb60 	.word	0x0800cb60
 800bd98:	0800cb71 	.word	0x0800cb71

0800bd9c <__hi0bits>:
 800bd9c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800bda0:	4603      	mov	r3, r0
 800bda2:	bf36      	itet	cc
 800bda4:	0403      	lslcc	r3, r0, #16
 800bda6:	2000      	movcs	r0, #0
 800bda8:	2010      	movcc	r0, #16
 800bdaa:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800bdae:	bf3c      	itt	cc
 800bdb0:	021b      	lslcc	r3, r3, #8
 800bdb2:	3008      	addcc	r0, #8
 800bdb4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800bdb8:	bf3c      	itt	cc
 800bdba:	011b      	lslcc	r3, r3, #4
 800bdbc:	3004      	addcc	r0, #4
 800bdbe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bdc2:	bf3c      	itt	cc
 800bdc4:	009b      	lslcc	r3, r3, #2
 800bdc6:	3002      	addcc	r0, #2
 800bdc8:	2b00      	cmp	r3, #0
 800bdca:	db05      	blt.n	800bdd8 <__hi0bits+0x3c>
 800bdcc:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800bdd0:	f100 0001 	add.w	r0, r0, #1
 800bdd4:	bf08      	it	eq
 800bdd6:	2020      	moveq	r0, #32
 800bdd8:	4770      	bx	lr

0800bdda <__lo0bits>:
 800bdda:	6803      	ldr	r3, [r0, #0]
 800bddc:	4602      	mov	r2, r0
 800bdde:	f013 0007 	ands.w	r0, r3, #7
 800bde2:	d00b      	beq.n	800bdfc <__lo0bits+0x22>
 800bde4:	07d9      	lsls	r1, r3, #31
 800bde6:	d421      	bmi.n	800be2c <__lo0bits+0x52>
 800bde8:	0798      	lsls	r0, r3, #30
 800bdea:	bf49      	itett	mi
 800bdec:	085b      	lsrmi	r3, r3, #1
 800bdee:	089b      	lsrpl	r3, r3, #2
 800bdf0:	2001      	movmi	r0, #1
 800bdf2:	6013      	strmi	r3, [r2, #0]
 800bdf4:	bf5c      	itt	pl
 800bdf6:	6013      	strpl	r3, [r2, #0]
 800bdf8:	2002      	movpl	r0, #2
 800bdfa:	4770      	bx	lr
 800bdfc:	b299      	uxth	r1, r3
 800bdfe:	b909      	cbnz	r1, 800be04 <__lo0bits+0x2a>
 800be00:	0c1b      	lsrs	r3, r3, #16
 800be02:	2010      	movs	r0, #16
 800be04:	b2d9      	uxtb	r1, r3
 800be06:	b909      	cbnz	r1, 800be0c <__lo0bits+0x32>
 800be08:	3008      	adds	r0, #8
 800be0a:	0a1b      	lsrs	r3, r3, #8
 800be0c:	0719      	lsls	r1, r3, #28
 800be0e:	bf04      	itt	eq
 800be10:	091b      	lsreq	r3, r3, #4
 800be12:	3004      	addeq	r0, #4
 800be14:	0799      	lsls	r1, r3, #30
 800be16:	bf04      	itt	eq
 800be18:	089b      	lsreq	r3, r3, #2
 800be1a:	3002      	addeq	r0, #2
 800be1c:	07d9      	lsls	r1, r3, #31
 800be1e:	d403      	bmi.n	800be28 <__lo0bits+0x4e>
 800be20:	085b      	lsrs	r3, r3, #1
 800be22:	f100 0001 	add.w	r0, r0, #1
 800be26:	d003      	beq.n	800be30 <__lo0bits+0x56>
 800be28:	6013      	str	r3, [r2, #0]
 800be2a:	4770      	bx	lr
 800be2c:	2000      	movs	r0, #0
 800be2e:	4770      	bx	lr
 800be30:	2020      	movs	r0, #32
 800be32:	4770      	bx	lr

0800be34 <__i2b>:
 800be34:	b510      	push	{r4, lr}
 800be36:	460c      	mov	r4, r1
 800be38:	2101      	movs	r1, #1
 800be3a:	f7ff ff07 	bl	800bc4c <_Balloc>
 800be3e:	4602      	mov	r2, r0
 800be40:	b928      	cbnz	r0, 800be4e <__i2b+0x1a>
 800be42:	4b05      	ldr	r3, [pc, #20]	@ (800be58 <__i2b+0x24>)
 800be44:	4805      	ldr	r0, [pc, #20]	@ (800be5c <__i2b+0x28>)
 800be46:	f240 1145 	movw	r1, #325	@ 0x145
 800be4a:	f000 fcf9 	bl	800c840 <__assert_func>
 800be4e:	2301      	movs	r3, #1
 800be50:	6144      	str	r4, [r0, #20]
 800be52:	6103      	str	r3, [r0, #16]
 800be54:	bd10      	pop	{r4, pc}
 800be56:	bf00      	nop
 800be58:	0800cb60 	.word	0x0800cb60
 800be5c:	0800cb71 	.word	0x0800cb71

0800be60 <__multiply>:
 800be60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be64:	4617      	mov	r7, r2
 800be66:	690a      	ldr	r2, [r1, #16]
 800be68:	693b      	ldr	r3, [r7, #16]
 800be6a:	429a      	cmp	r2, r3
 800be6c:	bfa8      	it	ge
 800be6e:	463b      	movge	r3, r7
 800be70:	4689      	mov	r9, r1
 800be72:	bfa4      	itt	ge
 800be74:	460f      	movge	r7, r1
 800be76:	4699      	movge	r9, r3
 800be78:	693d      	ldr	r5, [r7, #16]
 800be7a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800be7e:	68bb      	ldr	r3, [r7, #8]
 800be80:	6879      	ldr	r1, [r7, #4]
 800be82:	eb05 060a 	add.w	r6, r5, sl
 800be86:	42b3      	cmp	r3, r6
 800be88:	b085      	sub	sp, #20
 800be8a:	bfb8      	it	lt
 800be8c:	3101      	addlt	r1, #1
 800be8e:	f7ff fedd 	bl	800bc4c <_Balloc>
 800be92:	b930      	cbnz	r0, 800bea2 <__multiply+0x42>
 800be94:	4602      	mov	r2, r0
 800be96:	4b41      	ldr	r3, [pc, #260]	@ (800bf9c <__multiply+0x13c>)
 800be98:	4841      	ldr	r0, [pc, #260]	@ (800bfa0 <__multiply+0x140>)
 800be9a:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800be9e:	f000 fccf 	bl	800c840 <__assert_func>
 800bea2:	f100 0414 	add.w	r4, r0, #20
 800bea6:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800beaa:	4623      	mov	r3, r4
 800beac:	2200      	movs	r2, #0
 800beae:	4573      	cmp	r3, lr
 800beb0:	d320      	bcc.n	800bef4 <__multiply+0x94>
 800beb2:	f107 0814 	add.w	r8, r7, #20
 800beb6:	f109 0114 	add.w	r1, r9, #20
 800beba:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800bebe:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800bec2:	9302      	str	r3, [sp, #8]
 800bec4:	1beb      	subs	r3, r5, r7
 800bec6:	3b15      	subs	r3, #21
 800bec8:	f023 0303 	bic.w	r3, r3, #3
 800becc:	3304      	adds	r3, #4
 800bece:	3715      	adds	r7, #21
 800bed0:	42bd      	cmp	r5, r7
 800bed2:	bf38      	it	cc
 800bed4:	2304      	movcc	r3, #4
 800bed6:	9301      	str	r3, [sp, #4]
 800bed8:	9b02      	ldr	r3, [sp, #8]
 800beda:	9103      	str	r1, [sp, #12]
 800bedc:	428b      	cmp	r3, r1
 800bede:	d80c      	bhi.n	800befa <__multiply+0x9a>
 800bee0:	2e00      	cmp	r6, #0
 800bee2:	dd03      	ble.n	800beec <__multiply+0x8c>
 800bee4:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800bee8:	2b00      	cmp	r3, #0
 800beea:	d055      	beq.n	800bf98 <__multiply+0x138>
 800beec:	6106      	str	r6, [r0, #16]
 800beee:	b005      	add	sp, #20
 800bef0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bef4:	f843 2b04 	str.w	r2, [r3], #4
 800bef8:	e7d9      	b.n	800beae <__multiply+0x4e>
 800befa:	f8b1 a000 	ldrh.w	sl, [r1]
 800befe:	f1ba 0f00 	cmp.w	sl, #0
 800bf02:	d01f      	beq.n	800bf44 <__multiply+0xe4>
 800bf04:	46c4      	mov	ip, r8
 800bf06:	46a1      	mov	r9, r4
 800bf08:	2700      	movs	r7, #0
 800bf0a:	f85c 2b04 	ldr.w	r2, [ip], #4
 800bf0e:	f8d9 3000 	ldr.w	r3, [r9]
 800bf12:	fa1f fb82 	uxth.w	fp, r2
 800bf16:	b29b      	uxth	r3, r3
 800bf18:	fb0a 330b 	mla	r3, sl, fp, r3
 800bf1c:	443b      	add	r3, r7
 800bf1e:	f8d9 7000 	ldr.w	r7, [r9]
 800bf22:	0c12      	lsrs	r2, r2, #16
 800bf24:	0c3f      	lsrs	r7, r7, #16
 800bf26:	fb0a 7202 	mla	r2, sl, r2, r7
 800bf2a:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800bf2e:	b29b      	uxth	r3, r3
 800bf30:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bf34:	4565      	cmp	r5, ip
 800bf36:	f849 3b04 	str.w	r3, [r9], #4
 800bf3a:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800bf3e:	d8e4      	bhi.n	800bf0a <__multiply+0xaa>
 800bf40:	9b01      	ldr	r3, [sp, #4]
 800bf42:	50e7      	str	r7, [r4, r3]
 800bf44:	9b03      	ldr	r3, [sp, #12]
 800bf46:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800bf4a:	3104      	adds	r1, #4
 800bf4c:	f1b9 0f00 	cmp.w	r9, #0
 800bf50:	d020      	beq.n	800bf94 <__multiply+0x134>
 800bf52:	6823      	ldr	r3, [r4, #0]
 800bf54:	4647      	mov	r7, r8
 800bf56:	46a4      	mov	ip, r4
 800bf58:	f04f 0a00 	mov.w	sl, #0
 800bf5c:	f8b7 b000 	ldrh.w	fp, [r7]
 800bf60:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800bf64:	fb09 220b 	mla	r2, r9, fp, r2
 800bf68:	4452      	add	r2, sl
 800bf6a:	b29b      	uxth	r3, r3
 800bf6c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bf70:	f84c 3b04 	str.w	r3, [ip], #4
 800bf74:	f857 3b04 	ldr.w	r3, [r7], #4
 800bf78:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800bf7c:	f8bc 3000 	ldrh.w	r3, [ip]
 800bf80:	fb09 330a 	mla	r3, r9, sl, r3
 800bf84:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800bf88:	42bd      	cmp	r5, r7
 800bf8a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800bf8e:	d8e5      	bhi.n	800bf5c <__multiply+0xfc>
 800bf90:	9a01      	ldr	r2, [sp, #4]
 800bf92:	50a3      	str	r3, [r4, r2]
 800bf94:	3404      	adds	r4, #4
 800bf96:	e79f      	b.n	800bed8 <__multiply+0x78>
 800bf98:	3e01      	subs	r6, #1
 800bf9a:	e7a1      	b.n	800bee0 <__multiply+0x80>
 800bf9c:	0800cb60 	.word	0x0800cb60
 800bfa0:	0800cb71 	.word	0x0800cb71

0800bfa4 <__pow5mult>:
 800bfa4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bfa8:	4615      	mov	r5, r2
 800bfaa:	f012 0203 	ands.w	r2, r2, #3
 800bfae:	4607      	mov	r7, r0
 800bfb0:	460e      	mov	r6, r1
 800bfb2:	d007      	beq.n	800bfc4 <__pow5mult+0x20>
 800bfb4:	4c25      	ldr	r4, [pc, #148]	@ (800c04c <__pow5mult+0xa8>)
 800bfb6:	3a01      	subs	r2, #1
 800bfb8:	2300      	movs	r3, #0
 800bfba:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800bfbe:	f7ff fea7 	bl	800bd10 <__multadd>
 800bfc2:	4606      	mov	r6, r0
 800bfc4:	10ad      	asrs	r5, r5, #2
 800bfc6:	d03d      	beq.n	800c044 <__pow5mult+0xa0>
 800bfc8:	69fc      	ldr	r4, [r7, #28]
 800bfca:	b97c      	cbnz	r4, 800bfec <__pow5mult+0x48>
 800bfcc:	2010      	movs	r0, #16
 800bfce:	f7fd ffeb 	bl	8009fa8 <malloc>
 800bfd2:	4602      	mov	r2, r0
 800bfd4:	61f8      	str	r0, [r7, #28]
 800bfd6:	b928      	cbnz	r0, 800bfe4 <__pow5mult+0x40>
 800bfd8:	4b1d      	ldr	r3, [pc, #116]	@ (800c050 <__pow5mult+0xac>)
 800bfda:	481e      	ldr	r0, [pc, #120]	@ (800c054 <__pow5mult+0xb0>)
 800bfdc:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800bfe0:	f000 fc2e 	bl	800c840 <__assert_func>
 800bfe4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800bfe8:	6004      	str	r4, [r0, #0]
 800bfea:	60c4      	str	r4, [r0, #12]
 800bfec:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800bff0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800bff4:	b94c      	cbnz	r4, 800c00a <__pow5mult+0x66>
 800bff6:	f240 2171 	movw	r1, #625	@ 0x271
 800bffa:	4638      	mov	r0, r7
 800bffc:	f7ff ff1a 	bl	800be34 <__i2b>
 800c000:	2300      	movs	r3, #0
 800c002:	f8c8 0008 	str.w	r0, [r8, #8]
 800c006:	4604      	mov	r4, r0
 800c008:	6003      	str	r3, [r0, #0]
 800c00a:	f04f 0900 	mov.w	r9, #0
 800c00e:	07eb      	lsls	r3, r5, #31
 800c010:	d50a      	bpl.n	800c028 <__pow5mult+0x84>
 800c012:	4631      	mov	r1, r6
 800c014:	4622      	mov	r2, r4
 800c016:	4638      	mov	r0, r7
 800c018:	f7ff ff22 	bl	800be60 <__multiply>
 800c01c:	4631      	mov	r1, r6
 800c01e:	4680      	mov	r8, r0
 800c020:	4638      	mov	r0, r7
 800c022:	f7ff fe53 	bl	800bccc <_Bfree>
 800c026:	4646      	mov	r6, r8
 800c028:	106d      	asrs	r5, r5, #1
 800c02a:	d00b      	beq.n	800c044 <__pow5mult+0xa0>
 800c02c:	6820      	ldr	r0, [r4, #0]
 800c02e:	b938      	cbnz	r0, 800c040 <__pow5mult+0x9c>
 800c030:	4622      	mov	r2, r4
 800c032:	4621      	mov	r1, r4
 800c034:	4638      	mov	r0, r7
 800c036:	f7ff ff13 	bl	800be60 <__multiply>
 800c03a:	6020      	str	r0, [r4, #0]
 800c03c:	f8c0 9000 	str.w	r9, [r0]
 800c040:	4604      	mov	r4, r0
 800c042:	e7e4      	b.n	800c00e <__pow5mult+0x6a>
 800c044:	4630      	mov	r0, r6
 800c046:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c04a:	bf00      	nop
 800c04c:	0800cc24 	.word	0x0800cc24
 800c050:	0800caf1 	.word	0x0800caf1
 800c054:	0800cb71 	.word	0x0800cb71

0800c058 <__lshift>:
 800c058:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c05c:	460c      	mov	r4, r1
 800c05e:	6849      	ldr	r1, [r1, #4]
 800c060:	6923      	ldr	r3, [r4, #16]
 800c062:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c066:	68a3      	ldr	r3, [r4, #8]
 800c068:	4607      	mov	r7, r0
 800c06a:	4691      	mov	r9, r2
 800c06c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c070:	f108 0601 	add.w	r6, r8, #1
 800c074:	42b3      	cmp	r3, r6
 800c076:	db0b      	blt.n	800c090 <__lshift+0x38>
 800c078:	4638      	mov	r0, r7
 800c07a:	f7ff fde7 	bl	800bc4c <_Balloc>
 800c07e:	4605      	mov	r5, r0
 800c080:	b948      	cbnz	r0, 800c096 <__lshift+0x3e>
 800c082:	4602      	mov	r2, r0
 800c084:	4b28      	ldr	r3, [pc, #160]	@ (800c128 <__lshift+0xd0>)
 800c086:	4829      	ldr	r0, [pc, #164]	@ (800c12c <__lshift+0xd4>)
 800c088:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800c08c:	f000 fbd8 	bl	800c840 <__assert_func>
 800c090:	3101      	adds	r1, #1
 800c092:	005b      	lsls	r3, r3, #1
 800c094:	e7ee      	b.n	800c074 <__lshift+0x1c>
 800c096:	2300      	movs	r3, #0
 800c098:	f100 0114 	add.w	r1, r0, #20
 800c09c:	f100 0210 	add.w	r2, r0, #16
 800c0a0:	4618      	mov	r0, r3
 800c0a2:	4553      	cmp	r3, sl
 800c0a4:	db33      	blt.n	800c10e <__lshift+0xb6>
 800c0a6:	6920      	ldr	r0, [r4, #16]
 800c0a8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c0ac:	f104 0314 	add.w	r3, r4, #20
 800c0b0:	f019 091f 	ands.w	r9, r9, #31
 800c0b4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c0b8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c0bc:	d02b      	beq.n	800c116 <__lshift+0xbe>
 800c0be:	f1c9 0e20 	rsb	lr, r9, #32
 800c0c2:	468a      	mov	sl, r1
 800c0c4:	2200      	movs	r2, #0
 800c0c6:	6818      	ldr	r0, [r3, #0]
 800c0c8:	fa00 f009 	lsl.w	r0, r0, r9
 800c0cc:	4310      	orrs	r0, r2
 800c0ce:	f84a 0b04 	str.w	r0, [sl], #4
 800c0d2:	f853 2b04 	ldr.w	r2, [r3], #4
 800c0d6:	459c      	cmp	ip, r3
 800c0d8:	fa22 f20e 	lsr.w	r2, r2, lr
 800c0dc:	d8f3      	bhi.n	800c0c6 <__lshift+0x6e>
 800c0de:	ebac 0304 	sub.w	r3, ip, r4
 800c0e2:	3b15      	subs	r3, #21
 800c0e4:	f023 0303 	bic.w	r3, r3, #3
 800c0e8:	3304      	adds	r3, #4
 800c0ea:	f104 0015 	add.w	r0, r4, #21
 800c0ee:	4560      	cmp	r0, ip
 800c0f0:	bf88      	it	hi
 800c0f2:	2304      	movhi	r3, #4
 800c0f4:	50ca      	str	r2, [r1, r3]
 800c0f6:	b10a      	cbz	r2, 800c0fc <__lshift+0xa4>
 800c0f8:	f108 0602 	add.w	r6, r8, #2
 800c0fc:	3e01      	subs	r6, #1
 800c0fe:	4638      	mov	r0, r7
 800c100:	612e      	str	r6, [r5, #16]
 800c102:	4621      	mov	r1, r4
 800c104:	f7ff fde2 	bl	800bccc <_Bfree>
 800c108:	4628      	mov	r0, r5
 800c10a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c10e:	f842 0f04 	str.w	r0, [r2, #4]!
 800c112:	3301      	adds	r3, #1
 800c114:	e7c5      	b.n	800c0a2 <__lshift+0x4a>
 800c116:	3904      	subs	r1, #4
 800c118:	f853 2b04 	ldr.w	r2, [r3], #4
 800c11c:	f841 2f04 	str.w	r2, [r1, #4]!
 800c120:	459c      	cmp	ip, r3
 800c122:	d8f9      	bhi.n	800c118 <__lshift+0xc0>
 800c124:	e7ea      	b.n	800c0fc <__lshift+0xa4>
 800c126:	bf00      	nop
 800c128:	0800cb60 	.word	0x0800cb60
 800c12c:	0800cb71 	.word	0x0800cb71

0800c130 <__mcmp>:
 800c130:	690a      	ldr	r2, [r1, #16]
 800c132:	4603      	mov	r3, r0
 800c134:	6900      	ldr	r0, [r0, #16]
 800c136:	1a80      	subs	r0, r0, r2
 800c138:	b530      	push	{r4, r5, lr}
 800c13a:	d10e      	bne.n	800c15a <__mcmp+0x2a>
 800c13c:	3314      	adds	r3, #20
 800c13e:	3114      	adds	r1, #20
 800c140:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800c144:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800c148:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800c14c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800c150:	4295      	cmp	r5, r2
 800c152:	d003      	beq.n	800c15c <__mcmp+0x2c>
 800c154:	d205      	bcs.n	800c162 <__mcmp+0x32>
 800c156:	f04f 30ff 	mov.w	r0, #4294967295
 800c15a:	bd30      	pop	{r4, r5, pc}
 800c15c:	42a3      	cmp	r3, r4
 800c15e:	d3f3      	bcc.n	800c148 <__mcmp+0x18>
 800c160:	e7fb      	b.n	800c15a <__mcmp+0x2a>
 800c162:	2001      	movs	r0, #1
 800c164:	e7f9      	b.n	800c15a <__mcmp+0x2a>
	...

0800c168 <__mdiff>:
 800c168:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c16c:	4689      	mov	r9, r1
 800c16e:	4606      	mov	r6, r0
 800c170:	4611      	mov	r1, r2
 800c172:	4648      	mov	r0, r9
 800c174:	4614      	mov	r4, r2
 800c176:	f7ff ffdb 	bl	800c130 <__mcmp>
 800c17a:	1e05      	subs	r5, r0, #0
 800c17c:	d112      	bne.n	800c1a4 <__mdiff+0x3c>
 800c17e:	4629      	mov	r1, r5
 800c180:	4630      	mov	r0, r6
 800c182:	f7ff fd63 	bl	800bc4c <_Balloc>
 800c186:	4602      	mov	r2, r0
 800c188:	b928      	cbnz	r0, 800c196 <__mdiff+0x2e>
 800c18a:	4b3f      	ldr	r3, [pc, #252]	@ (800c288 <__mdiff+0x120>)
 800c18c:	f240 2137 	movw	r1, #567	@ 0x237
 800c190:	483e      	ldr	r0, [pc, #248]	@ (800c28c <__mdiff+0x124>)
 800c192:	f000 fb55 	bl	800c840 <__assert_func>
 800c196:	2301      	movs	r3, #1
 800c198:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c19c:	4610      	mov	r0, r2
 800c19e:	b003      	add	sp, #12
 800c1a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c1a4:	bfbc      	itt	lt
 800c1a6:	464b      	movlt	r3, r9
 800c1a8:	46a1      	movlt	r9, r4
 800c1aa:	4630      	mov	r0, r6
 800c1ac:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800c1b0:	bfba      	itte	lt
 800c1b2:	461c      	movlt	r4, r3
 800c1b4:	2501      	movlt	r5, #1
 800c1b6:	2500      	movge	r5, #0
 800c1b8:	f7ff fd48 	bl	800bc4c <_Balloc>
 800c1bc:	4602      	mov	r2, r0
 800c1be:	b918      	cbnz	r0, 800c1c8 <__mdiff+0x60>
 800c1c0:	4b31      	ldr	r3, [pc, #196]	@ (800c288 <__mdiff+0x120>)
 800c1c2:	f240 2145 	movw	r1, #581	@ 0x245
 800c1c6:	e7e3      	b.n	800c190 <__mdiff+0x28>
 800c1c8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800c1cc:	6926      	ldr	r6, [r4, #16]
 800c1ce:	60c5      	str	r5, [r0, #12]
 800c1d0:	f109 0310 	add.w	r3, r9, #16
 800c1d4:	f109 0514 	add.w	r5, r9, #20
 800c1d8:	f104 0e14 	add.w	lr, r4, #20
 800c1dc:	f100 0b14 	add.w	fp, r0, #20
 800c1e0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800c1e4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800c1e8:	9301      	str	r3, [sp, #4]
 800c1ea:	46d9      	mov	r9, fp
 800c1ec:	f04f 0c00 	mov.w	ip, #0
 800c1f0:	9b01      	ldr	r3, [sp, #4]
 800c1f2:	f85e 0b04 	ldr.w	r0, [lr], #4
 800c1f6:	f853 af04 	ldr.w	sl, [r3, #4]!
 800c1fa:	9301      	str	r3, [sp, #4]
 800c1fc:	fa1f f38a 	uxth.w	r3, sl
 800c200:	4619      	mov	r1, r3
 800c202:	b283      	uxth	r3, r0
 800c204:	1acb      	subs	r3, r1, r3
 800c206:	0c00      	lsrs	r0, r0, #16
 800c208:	4463      	add	r3, ip
 800c20a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800c20e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800c212:	b29b      	uxth	r3, r3
 800c214:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800c218:	4576      	cmp	r6, lr
 800c21a:	f849 3b04 	str.w	r3, [r9], #4
 800c21e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c222:	d8e5      	bhi.n	800c1f0 <__mdiff+0x88>
 800c224:	1b33      	subs	r3, r6, r4
 800c226:	3b15      	subs	r3, #21
 800c228:	f023 0303 	bic.w	r3, r3, #3
 800c22c:	3415      	adds	r4, #21
 800c22e:	3304      	adds	r3, #4
 800c230:	42a6      	cmp	r6, r4
 800c232:	bf38      	it	cc
 800c234:	2304      	movcc	r3, #4
 800c236:	441d      	add	r5, r3
 800c238:	445b      	add	r3, fp
 800c23a:	461e      	mov	r6, r3
 800c23c:	462c      	mov	r4, r5
 800c23e:	4544      	cmp	r4, r8
 800c240:	d30e      	bcc.n	800c260 <__mdiff+0xf8>
 800c242:	f108 0103 	add.w	r1, r8, #3
 800c246:	1b49      	subs	r1, r1, r5
 800c248:	f021 0103 	bic.w	r1, r1, #3
 800c24c:	3d03      	subs	r5, #3
 800c24e:	45a8      	cmp	r8, r5
 800c250:	bf38      	it	cc
 800c252:	2100      	movcc	r1, #0
 800c254:	440b      	add	r3, r1
 800c256:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c25a:	b191      	cbz	r1, 800c282 <__mdiff+0x11a>
 800c25c:	6117      	str	r7, [r2, #16]
 800c25e:	e79d      	b.n	800c19c <__mdiff+0x34>
 800c260:	f854 1b04 	ldr.w	r1, [r4], #4
 800c264:	46e6      	mov	lr, ip
 800c266:	0c08      	lsrs	r0, r1, #16
 800c268:	fa1c fc81 	uxtah	ip, ip, r1
 800c26c:	4471      	add	r1, lr
 800c26e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800c272:	b289      	uxth	r1, r1
 800c274:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800c278:	f846 1b04 	str.w	r1, [r6], #4
 800c27c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c280:	e7dd      	b.n	800c23e <__mdiff+0xd6>
 800c282:	3f01      	subs	r7, #1
 800c284:	e7e7      	b.n	800c256 <__mdiff+0xee>
 800c286:	bf00      	nop
 800c288:	0800cb60 	.word	0x0800cb60
 800c28c:	0800cb71 	.word	0x0800cb71

0800c290 <__d2b>:
 800c290:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c294:	460f      	mov	r7, r1
 800c296:	2101      	movs	r1, #1
 800c298:	ec59 8b10 	vmov	r8, r9, d0
 800c29c:	4616      	mov	r6, r2
 800c29e:	f7ff fcd5 	bl	800bc4c <_Balloc>
 800c2a2:	4604      	mov	r4, r0
 800c2a4:	b930      	cbnz	r0, 800c2b4 <__d2b+0x24>
 800c2a6:	4602      	mov	r2, r0
 800c2a8:	4b23      	ldr	r3, [pc, #140]	@ (800c338 <__d2b+0xa8>)
 800c2aa:	4824      	ldr	r0, [pc, #144]	@ (800c33c <__d2b+0xac>)
 800c2ac:	f240 310f 	movw	r1, #783	@ 0x30f
 800c2b0:	f000 fac6 	bl	800c840 <__assert_func>
 800c2b4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800c2b8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c2bc:	b10d      	cbz	r5, 800c2c2 <__d2b+0x32>
 800c2be:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c2c2:	9301      	str	r3, [sp, #4]
 800c2c4:	f1b8 0300 	subs.w	r3, r8, #0
 800c2c8:	d023      	beq.n	800c312 <__d2b+0x82>
 800c2ca:	4668      	mov	r0, sp
 800c2cc:	9300      	str	r3, [sp, #0]
 800c2ce:	f7ff fd84 	bl	800bdda <__lo0bits>
 800c2d2:	e9dd 1200 	ldrd	r1, r2, [sp]
 800c2d6:	b1d0      	cbz	r0, 800c30e <__d2b+0x7e>
 800c2d8:	f1c0 0320 	rsb	r3, r0, #32
 800c2dc:	fa02 f303 	lsl.w	r3, r2, r3
 800c2e0:	430b      	orrs	r3, r1
 800c2e2:	40c2      	lsrs	r2, r0
 800c2e4:	6163      	str	r3, [r4, #20]
 800c2e6:	9201      	str	r2, [sp, #4]
 800c2e8:	9b01      	ldr	r3, [sp, #4]
 800c2ea:	61a3      	str	r3, [r4, #24]
 800c2ec:	2b00      	cmp	r3, #0
 800c2ee:	bf0c      	ite	eq
 800c2f0:	2201      	moveq	r2, #1
 800c2f2:	2202      	movne	r2, #2
 800c2f4:	6122      	str	r2, [r4, #16]
 800c2f6:	b1a5      	cbz	r5, 800c322 <__d2b+0x92>
 800c2f8:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800c2fc:	4405      	add	r5, r0
 800c2fe:	603d      	str	r5, [r7, #0]
 800c300:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800c304:	6030      	str	r0, [r6, #0]
 800c306:	4620      	mov	r0, r4
 800c308:	b003      	add	sp, #12
 800c30a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c30e:	6161      	str	r1, [r4, #20]
 800c310:	e7ea      	b.n	800c2e8 <__d2b+0x58>
 800c312:	a801      	add	r0, sp, #4
 800c314:	f7ff fd61 	bl	800bdda <__lo0bits>
 800c318:	9b01      	ldr	r3, [sp, #4]
 800c31a:	6163      	str	r3, [r4, #20]
 800c31c:	3020      	adds	r0, #32
 800c31e:	2201      	movs	r2, #1
 800c320:	e7e8      	b.n	800c2f4 <__d2b+0x64>
 800c322:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c326:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800c32a:	6038      	str	r0, [r7, #0]
 800c32c:	6918      	ldr	r0, [r3, #16]
 800c32e:	f7ff fd35 	bl	800bd9c <__hi0bits>
 800c332:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c336:	e7e5      	b.n	800c304 <__d2b+0x74>
 800c338:	0800cb60 	.word	0x0800cb60
 800c33c:	0800cb71 	.word	0x0800cb71

0800c340 <__sfputc_r>:
 800c340:	6893      	ldr	r3, [r2, #8]
 800c342:	3b01      	subs	r3, #1
 800c344:	2b00      	cmp	r3, #0
 800c346:	b410      	push	{r4}
 800c348:	6093      	str	r3, [r2, #8]
 800c34a:	da08      	bge.n	800c35e <__sfputc_r+0x1e>
 800c34c:	6994      	ldr	r4, [r2, #24]
 800c34e:	42a3      	cmp	r3, r4
 800c350:	db01      	blt.n	800c356 <__sfputc_r+0x16>
 800c352:	290a      	cmp	r1, #10
 800c354:	d103      	bne.n	800c35e <__sfputc_r+0x1e>
 800c356:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c35a:	f7fe bcae 	b.w	800acba <__swbuf_r>
 800c35e:	6813      	ldr	r3, [r2, #0]
 800c360:	1c58      	adds	r0, r3, #1
 800c362:	6010      	str	r0, [r2, #0]
 800c364:	7019      	strb	r1, [r3, #0]
 800c366:	4608      	mov	r0, r1
 800c368:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c36c:	4770      	bx	lr

0800c36e <__sfputs_r>:
 800c36e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c370:	4606      	mov	r6, r0
 800c372:	460f      	mov	r7, r1
 800c374:	4614      	mov	r4, r2
 800c376:	18d5      	adds	r5, r2, r3
 800c378:	42ac      	cmp	r4, r5
 800c37a:	d101      	bne.n	800c380 <__sfputs_r+0x12>
 800c37c:	2000      	movs	r0, #0
 800c37e:	e007      	b.n	800c390 <__sfputs_r+0x22>
 800c380:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c384:	463a      	mov	r2, r7
 800c386:	4630      	mov	r0, r6
 800c388:	f7ff ffda 	bl	800c340 <__sfputc_r>
 800c38c:	1c43      	adds	r3, r0, #1
 800c38e:	d1f3      	bne.n	800c378 <__sfputs_r+0xa>
 800c390:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c394 <_vfiprintf_r>:
 800c394:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c398:	460d      	mov	r5, r1
 800c39a:	b09d      	sub	sp, #116	@ 0x74
 800c39c:	4614      	mov	r4, r2
 800c39e:	4698      	mov	r8, r3
 800c3a0:	4606      	mov	r6, r0
 800c3a2:	b118      	cbz	r0, 800c3ac <_vfiprintf_r+0x18>
 800c3a4:	6a03      	ldr	r3, [r0, #32]
 800c3a6:	b90b      	cbnz	r3, 800c3ac <_vfiprintf_r+0x18>
 800c3a8:	f7fe fb9e 	bl	800aae8 <__sinit>
 800c3ac:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c3ae:	07d9      	lsls	r1, r3, #31
 800c3b0:	d405      	bmi.n	800c3be <_vfiprintf_r+0x2a>
 800c3b2:	89ab      	ldrh	r3, [r5, #12]
 800c3b4:	059a      	lsls	r2, r3, #22
 800c3b6:	d402      	bmi.n	800c3be <_vfiprintf_r+0x2a>
 800c3b8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c3ba:	f7fe fda0 	bl	800aefe <__retarget_lock_acquire_recursive>
 800c3be:	89ab      	ldrh	r3, [r5, #12]
 800c3c0:	071b      	lsls	r3, r3, #28
 800c3c2:	d501      	bpl.n	800c3c8 <_vfiprintf_r+0x34>
 800c3c4:	692b      	ldr	r3, [r5, #16]
 800c3c6:	b99b      	cbnz	r3, 800c3f0 <_vfiprintf_r+0x5c>
 800c3c8:	4629      	mov	r1, r5
 800c3ca:	4630      	mov	r0, r6
 800c3cc:	f7fe fcb4 	bl	800ad38 <__swsetup_r>
 800c3d0:	b170      	cbz	r0, 800c3f0 <_vfiprintf_r+0x5c>
 800c3d2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c3d4:	07dc      	lsls	r4, r3, #31
 800c3d6:	d504      	bpl.n	800c3e2 <_vfiprintf_r+0x4e>
 800c3d8:	f04f 30ff 	mov.w	r0, #4294967295
 800c3dc:	b01d      	add	sp, #116	@ 0x74
 800c3de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c3e2:	89ab      	ldrh	r3, [r5, #12]
 800c3e4:	0598      	lsls	r0, r3, #22
 800c3e6:	d4f7      	bmi.n	800c3d8 <_vfiprintf_r+0x44>
 800c3e8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c3ea:	f7fe fd89 	bl	800af00 <__retarget_lock_release_recursive>
 800c3ee:	e7f3      	b.n	800c3d8 <_vfiprintf_r+0x44>
 800c3f0:	2300      	movs	r3, #0
 800c3f2:	9309      	str	r3, [sp, #36]	@ 0x24
 800c3f4:	2320      	movs	r3, #32
 800c3f6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c3fa:	f8cd 800c 	str.w	r8, [sp, #12]
 800c3fe:	2330      	movs	r3, #48	@ 0x30
 800c400:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800c5b0 <_vfiprintf_r+0x21c>
 800c404:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c408:	f04f 0901 	mov.w	r9, #1
 800c40c:	4623      	mov	r3, r4
 800c40e:	469a      	mov	sl, r3
 800c410:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c414:	b10a      	cbz	r2, 800c41a <_vfiprintf_r+0x86>
 800c416:	2a25      	cmp	r2, #37	@ 0x25
 800c418:	d1f9      	bne.n	800c40e <_vfiprintf_r+0x7a>
 800c41a:	ebba 0b04 	subs.w	fp, sl, r4
 800c41e:	d00b      	beq.n	800c438 <_vfiprintf_r+0xa4>
 800c420:	465b      	mov	r3, fp
 800c422:	4622      	mov	r2, r4
 800c424:	4629      	mov	r1, r5
 800c426:	4630      	mov	r0, r6
 800c428:	f7ff ffa1 	bl	800c36e <__sfputs_r>
 800c42c:	3001      	adds	r0, #1
 800c42e:	f000 80a7 	beq.w	800c580 <_vfiprintf_r+0x1ec>
 800c432:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c434:	445a      	add	r2, fp
 800c436:	9209      	str	r2, [sp, #36]	@ 0x24
 800c438:	f89a 3000 	ldrb.w	r3, [sl]
 800c43c:	2b00      	cmp	r3, #0
 800c43e:	f000 809f 	beq.w	800c580 <_vfiprintf_r+0x1ec>
 800c442:	2300      	movs	r3, #0
 800c444:	f04f 32ff 	mov.w	r2, #4294967295
 800c448:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c44c:	f10a 0a01 	add.w	sl, sl, #1
 800c450:	9304      	str	r3, [sp, #16]
 800c452:	9307      	str	r3, [sp, #28]
 800c454:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c458:	931a      	str	r3, [sp, #104]	@ 0x68
 800c45a:	4654      	mov	r4, sl
 800c45c:	2205      	movs	r2, #5
 800c45e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c462:	4853      	ldr	r0, [pc, #332]	@ (800c5b0 <_vfiprintf_r+0x21c>)
 800c464:	f7f3 feb4 	bl	80001d0 <memchr>
 800c468:	9a04      	ldr	r2, [sp, #16]
 800c46a:	b9d8      	cbnz	r0, 800c4a4 <_vfiprintf_r+0x110>
 800c46c:	06d1      	lsls	r1, r2, #27
 800c46e:	bf44      	itt	mi
 800c470:	2320      	movmi	r3, #32
 800c472:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c476:	0713      	lsls	r3, r2, #28
 800c478:	bf44      	itt	mi
 800c47a:	232b      	movmi	r3, #43	@ 0x2b
 800c47c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c480:	f89a 3000 	ldrb.w	r3, [sl]
 800c484:	2b2a      	cmp	r3, #42	@ 0x2a
 800c486:	d015      	beq.n	800c4b4 <_vfiprintf_r+0x120>
 800c488:	9a07      	ldr	r2, [sp, #28]
 800c48a:	4654      	mov	r4, sl
 800c48c:	2000      	movs	r0, #0
 800c48e:	f04f 0c0a 	mov.w	ip, #10
 800c492:	4621      	mov	r1, r4
 800c494:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c498:	3b30      	subs	r3, #48	@ 0x30
 800c49a:	2b09      	cmp	r3, #9
 800c49c:	d94b      	bls.n	800c536 <_vfiprintf_r+0x1a2>
 800c49e:	b1b0      	cbz	r0, 800c4ce <_vfiprintf_r+0x13a>
 800c4a0:	9207      	str	r2, [sp, #28]
 800c4a2:	e014      	b.n	800c4ce <_vfiprintf_r+0x13a>
 800c4a4:	eba0 0308 	sub.w	r3, r0, r8
 800c4a8:	fa09 f303 	lsl.w	r3, r9, r3
 800c4ac:	4313      	orrs	r3, r2
 800c4ae:	9304      	str	r3, [sp, #16]
 800c4b0:	46a2      	mov	sl, r4
 800c4b2:	e7d2      	b.n	800c45a <_vfiprintf_r+0xc6>
 800c4b4:	9b03      	ldr	r3, [sp, #12]
 800c4b6:	1d19      	adds	r1, r3, #4
 800c4b8:	681b      	ldr	r3, [r3, #0]
 800c4ba:	9103      	str	r1, [sp, #12]
 800c4bc:	2b00      	cmp	r3, #0
 800c4be:	bfbb      	ittet	lt
 800c4c0:	425b      	neglt	r3, r3
 800c4c2:	f042 0202 	orrlt.w	r2, r2, #2
 800c4c6:	9307      	strge	r3, [sp, #28]
 800c4c8:	9307      	strlt	r3, [sp, #28]
 800c4ca:	bfb8      	it	lt
 800c4cc:	9204      	strlt	r2, [sp, #16]
 800c4ce:	7823      	ldrb	r3, [r4, #0]
 800c4d0:	2b2e      	cmp	r3, #46	@ 0x2e
 800c4d2:	d10a      	bne.n	800c4ea <_vfiprintf_r+0x156>
 800c4d4:	7863      	ldrb	r3, [r4, #1]
 800c4d6:	2b2a      	cmp	r3, #42	@ 0x2a
 800c4d8:	d132      	bne.n	800c540 <_vfiprintf_r+0x1ac>
 800c4da:	9b03      	ldr	r3, [sp, #12]
 800c4dc:	1d1a      	adds	r2, r3, #4
 800c4de:	681b      	ldr	r3, [r3, #0]
 800c4e0:	9203      	str	r2, [sp, #12]
 800c4e2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c4e6:	3402      	adds	r4, #2
 800c4e8:	9305      	str	r3, [sp, #20]
 800c4ea:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800c5c0 <_vfiprintf_r+0x22c>
 800c4ee:	7821      	ldrb	r1, [r4, #0]
 800c4f0:	2203      	movs	r2, #3
 800c4f2:	4650      	mov	r0, sl
 800c4f4:	f7f3 fe6c 	bl	80001d0 <memchr>
 800c4f8:	b138      	cbz	r0, 800c50a <_vfiprintf_r+0x176>
 800c4fa:	9b04      	ldr	r3, [sp, #16]
 800c4fc:	eba0 000a 	sub.w	r0, r0, sl
 800c500:	2240      	movs	r2, #64	@ 0x40
 800c502:	4082      	lsls	r2, r0
 800c504:	4313      	orrs	r3, r2
 800c506:	3401      	adds	r4, #1
 800c508:	9304      	str	r3, [sp, #16]
 800c50a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c50e:	4829      	ldr	r0, [pc, #164]	@ (800c5b4 <_vfiprintf_r+0x220>)
 800c510:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c514:	2206      	movs	r2, #6
 800c516:	f7f3 fe5b 	bl	80001d0 <memchr>
 800c51a:	2800      	cmp	r0, #0
 800c51c:	d03f      	beq.n	800c59e <_vfiprintf_r+0x20a>
 800c51e:	4b26      	ldr	r3, [pc, #152]	@ (800c5b8 <_vfiprintf_r+0x224>)
 800c520:	bb1b      	cbnz	r3, 800c56a <_vfiprintf_r+0x1d6>
 800c522:	9b03      	ldr	r3, [sp, #12]
 800c524:	3307      	adds	r3, #7
 800c526:	f023 0307 	bic.w	r3, r3, #7
 800c52a:	3308      	adds	r3, #8
 800c52c:	9303      	str	r3, [sp, #12]
 800c52e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c530:	443b      	add	r3, r7
 800c532:	9309      	str	r3, [sp, #36]	@ 0x24
 800c534:	e76a      	b.n	800c40c <_vfiprintf_r+0x78>
 800c536:	fb0c 3202 	mla	r2, ip, r2, r3
 800c53a:	460c      	mov	r4, r1
 800c53c:	2001      	movs	r0, #1
 800c53e:	e7a8      	b.n	800c492 <_vfiprintf_r+0xfe>
 800c540:	2300      	movs	r3, #0
 800c542:	3401      	adds	r4, #1
 800c544:	9305      	str	r3, [sp, #20]
 800c546:	4619      	mov	r1, r3
 800c548:	f04f 0c0a 	mov.w	ip, #10
 800c54c:	4620      	mov	r0, r4
 800c54e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c552:	3a30      	subs	r2, #48	@ 0x30
 800c554:	2a09      	cmp	r2, #9
 800c556:	d903      	bls.n	800c560 <_vfiprintf_r+0x1cc>
 800c558:	2b00      	cmp	r3, #0
 800c55a:	d0c6      	beq.n	800c4ea <_vfiprintf_r+0x156>
 800c55c:	9105      	str	r1, [sp, #20]
 800c55e:	e7c4      	b.n	800c4ea <_vfiprintf_r+0x156>
 800c560:	fb0c 2101 	mla	r1, ip, r1, r2
 800c564:	4604      	mov	r4, r0
 800c566:	2301      	movs	r3, #1
 800c568:	e7f0      	b.n	800c54c <_vfiprintf_r+0x1b8>
 800c56a:	ab03      	add	r3, sp, #12
 800c56c:	9300      	str	r3, [sp, #0]
 800c56e:	462a      	mov	r2, r5
 800c570:	4b12      	ldr	r3, [pc, #72]	@ (800c5bc <_vfiprintf_r+0x228>)
 800c572:	a904      	add	r1, sp, #16
 800c574:	4630      	mov	r0, r6
 800c576:	f7fd fe75 	bl	800a264 <_printf_float>
 800c57a:	4607      	mov	r7, r0
 800c57c:	1c78      	adds	r0, r7, #1
 800c57e:	d1d6      	bne.n	800c52e <_vfiprintf_r+0x19a>
 800c580:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c582:	07d9      	lsls	r1, r3, #31
 800c584:	d405      	bmi.n	800c592 <_vfiprintf_r+0x1fe>
 800c586:	89ab      	ldrh	r3, [r5, #12]
 800c588:	059a      	lsls	r2, r3, #22
 800c58a:	d402      	bmi.n	800c592 <_vfiprintf_r+0x1fe>
 800c58c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c58e:	f7fe fcb7 	bl	800af00 <__retarget_lock_release_recursive>
 800c592:	89ab      	ldrh	r3, [r5, #12]
 800c594:	065b      	lsls	r3, r3, #25
 800c596:	f53f af1f 	bmi.w	800c3d8 <_vfiprintf_r+0x44>
 800c59a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c59c:	e71e      	b.n	800c3dc <_vfiprintf_r+0x48>
 800c59e:	ab03      	add	r3, sp, #12
 800c5a0:	9300      	str	r3, [sp, #0]
 800c5a2:	462a      	mov	r2, r5
 800c5a4:	4b05      	ldr	r3, [pc, #20]	@ (800c5bc <_vfiprintf_r+0x228>)
 800c5a6:	a904      	add	r1, sp, #16
 800c5a8:	4630      	mov	r0, r6
 800c5aa:	f7fe f8f3 	bl	800a794 <_printf_i>
 800c5ae:	e7e4      	b.n	800c57a <_vfiprintf_r+0x1e6>
 800c5b0:	0800cbca 	.word	0x0800cbca
 800c5b4:	0800cbd4 	.word	0x0800cbd4
 800c5b8:	0800a265 	.word	0x0800a265
 800c5bc:	0800c36f 	.word	0x0800c36f
 800c5c0:	0800cbd0 	.word	0x0800cbd0

0800c5c4 <__sflush_r>:
 800c5c4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c5c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c5cc:	0716      	lsls	r6, r2, #28
 800c5ce:	4605      	mov	r5, r0
 800c5d0:	460c      	mov	r4, r1
 800c5d2:	d454      	bmi.n	800c67e <__sflush_r+0xba>
 800c5d4:	684b      	ldr	r3, [r1, #4]
 800c5d6:	2b00      	cmp	r3, #0
 800c5d8:	dc02      	bgt.n	800c5e0 <__sflush_r+0x1c>
 800c5da:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800c5dc:	2b00      	cmp	r3, #0
 800c5de:	dd48      	ble.n	800c672 <__sflush_r+0xae>
 800c5e0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c5e2:	2e00      	cmp	r6, #0
 800c5e4:	d045      	beq.n	800c672 <__sflush_r+0xae>
 800c5e6:	2300      	movs	r3, #0
 800c5e8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800c5ec:	682f      	ldr	r7, [r5, #0]
 800c5ee:	6a21      	ldr	r1, [r4, #32]
 800c5f0:	602b      	str	r3, [r5, #0]
 800c5f2:	d030      	beq.n	800c656 <__sflush_r+0x92>
 800c5f4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800c5f6:	89a3      	ldrh	r3, [r4, #12]
 800c5f8:	0759      	lsls	r1, r3, #29
 800c5fa:	d505      	bpl.n	800c608 <__sflush_r+0x44>
 800c5fc:	6863      	ldr	r3, [r4, #4]
 800c5fe:	1ad2      	subs	r2, r2, r3
 800c600:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800c602:	b10b      	cbz	r3, 800c608 <__sflush_r+0x44>
 800c604:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800c606:	1ad2      	subs	r2, r2, r3
 800c608:	2300      	movs	r3, #0
 800c60a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c60c:	6a21      	ldr	r1, [r4, #32]
 800c60e:	4628      	mov	r0, r5
 800c610:	47b0      	blx	r6
 800c612:	1c43      	adds	r3, r0, #1
 800c614:	89a3      	ldrh	r3, [r4, #12]
 800c616:	d106      	bne.n	800c626 <__sflush_r+0x62>
 800c618:	6829      	ldr	r1, [r5, #0]
 800c61a:	291d      	cmp	r1, #29
 800c61c:	d82b      	bhi.n	800c676 <__sflush_r+0xb2>
 800c61e:	4a2a      	ldr	r2, [pc, #168]	@ (800c6c8 <__sflush_r+0x104>)
 800c620:	40ca      	lsrs	r2, r1
 800c622:	07d6      	lsls	r6, r2, #31
 800c624:	d527      	bpl.n	800c676 <__sflush_r+0xb2>
 800c626:	2200      	movs	r2, #0
 800c628:	6062      	str	r2, [r4, #4]
 800c62a:	04d9      	lsls	r1, r3, #19
 800c62c:	6922      	ldr	r2, [r4, #16]
 800c62e:	6022      	str	r2, [r4, #0]
 800c630:	d504      	bpl.n	800c63c <__sflush_r+0x78>
 800c632:	1c42      	adds	r2, r0, #1
 800c634:	d101      	bne.n	800c63a <__sflush_r+0x76>
 800c636:	682b      	ldr	r3, [r5, #0]
 800c638:	b903      	cbnz	r3, 800c63c <__sflush_r+0x78>
 800c63a:	6560      	str	r0, [r4, #84]	@ 0x54
 800c63c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c63e:	602f      	str	r7, [r5, #0]
 800c640:	b1b9      	cbz	r1, 800c672 <__sflush_r+0xae>
 800c642:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c646:	4299      	cmp	r1, r3
 800c648:	d002      	beq.n	800c650 <__sflush_r+0x8c>
 800c64a:	4628      	mov	r0, r5
 800c64c:	f7ff fab4 	bl	800bbb8 <_free_r>
 800c650:	2300      	movs	r3, #0
 800c652:	6363      	str	r3, [r4, #52]	@ 0x34
 800c654:	e00d      	b.n	800c672 <__sflush_r+0xae>
 800c656:	2301      	movs	r3, #1
 800c658:	4628      	mov	r0, r5
 800c65a:	47b0      	blx	r6
 800c65c:	4602      	mov	r2, r0
 800c65e:	1c50      	adds	r0, r2, #1
 800c660:	d1c9      	bne.n	800c5f6 <__sflush_r+0x32>
 800c662:	682b      	ldr	r3, [r5, #0]
 800c664:	2b00      	cmp	r3, #0
 800c666:	d0c6      	beq.n	800c5f6 <__sflush_r+0x32>
 800c668:	2b1d      	cmp	r3, #29
 800c66a:	d001      	beq.n	800c670 <__sflush_r+0xac>
 800c66c:	2b16      	cmp	r3, #22
 800c66e:	d11e      	bne.n	800c6ae <__sflush_r+0xea>
 800c670:	602f      	str	r7, [r5, #0]
 800c672:	2000      	movs	r0, #0
 800c674:	e022      	b.n	800c6bc <__sflush_r+0xf8>
 800c676:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c67a:	b21b      	sxth	r3, r3
 800c67c:	e01b      	b.n	800c6b6 <__sflush_r+0xf2>
 800c67e:	690f      	ldr	r7, [r1, #16]
 800c680:	2f00      	cmp	r7, #0
 800c682:	d0f6      	beq.n	800c672 <__sflush_r+0xae>
 800c684:	0793      	lsls	r3, r2, #30
 800c686:	680e      	ldr	r6, [r1, #0]
 800c688:	bf08      	it	eq
 800c68a:	694b      	ldreq	r3, [r1, #20]
 800c68c:	600f      	str	r7, [r1, #0]
 800c68e:	bf18      	it	ne
 800c690:	2300      	movne	r3, #0
 800c692:	eba6 0807 	sub.w	r8, r6, r7
 800c696:	608b      	str	r3, [r1, #8]
 800c698:	f1b8 0f00 	cmp.w	r8, #0
 800c69c:	dde9      	ble.n	800c672 <__sflush_r+0xae>
 800c69e:	6a21      	ldr	r1, [r4, #32]
 800c6a0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800c6a2:	4643      	mov	r3, r8
 800c6a4:	463a      	mov	r2, r7
 800c6a6:	4628      	mov	r0, r5
 800c6a8:	47b0      	blx	r6
 800c6aa:	2800      	cmp	r0, #0
 800c6ac:	dc08      	bgt.n	800c6c0 <__sflush_r+0xfc>
 800c6ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c6b2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c6b6:	81a3      	strh	r3, [r4, #12]
 800c6b8:	f04f 30ff 	mov.w	r0, #4294967295
 800c6bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c6c0:	4407      	add	r7, r0
 800c6c2:	eba8 0800 	sub.w	r8, r8, r0
 800c6c6:	e7e7      	b.n	800c698 <__sflush_r+0xd4>
 800c6c8:	20400001 	.word	0x20400001

0800c6cc <_fflush_r>:
 800c6cc:	b538      	push	{r3, r4, r5, lr}
 800c6ce:	690b      	ldr	r3, [r1, #16]
 800c6d0:	4605      	mov	r5, r0
 800c6d2:	460c      	mov	r4, r1
 800c6d4:	b913      	cbnz	r3, 800c6dc <_fflush_r+0x10>
 800c6d6:	2500      	movs	r5, #0
 800c6d8:	4628      	mov	r0, r5
 800c6da:	bd38      	pop	{r3, r4, r5, pc}
 800c6dc:	b118      	cbz	r0, 800c6e6 <_fflush_r+0x1a>
 800c6de:	6a03      	ldr	r3, [r0, #32]
 800c6e0:	b90b      	cbnz	r3, 800c6e6 <_fflush_r+0x1a>
 800c6e2:	f7fe fa01 	bl	800aae8 <__sinit>
 800c6e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c6ea:	2b00      	cmp	r3, #0
 800c6ec:	d0f3      	beq.n	800c6d6 <_fflush_r+0xa>
 800c6ee:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800c6f0:	07d0      	lsls	r0, r2, #31
 800c6f2:	d404      	bmi.n	800c6fe <_fflush_r+0x32>
 800c6f4:	0599      	lsls	r1, r3, #22
 800c6f6:	d402      	bmi.n	800c6fe <_fflush_r+0x32>
 800c6f8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c6fa:	f7fe fc00 	bl	800aefe <__retarget_lock_acquire_recursive>
 800c6fe:	4628      	mov	r0, r5
 800c700:	4621      	mov	r1, r4
 800c702:	f7ff ff5f 	bl	800c5c4 <__sflush_r>
 800c706:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c708:	07da      	lsls	r2, r3, #31
 800c70a:	4605      	mov	r5, r0
 800c70c:	d4e4      	bmi.n	800c6d8 <_fflush_r+0xc>
 800c70e:	89a3      	ldrh	r3, [r4, #12]
 800c710:	059b      	lsls	r3, r3, #22
 800c712:	d4e1      	bmi.n	800c6d8 <_fflush_r+0xc>
 800c714:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c716:	f7fe fbf3 	bl	800af00 <__retarget_lock_release_recursive>
 800c71a:	e7dd      	b.n	800c6d8 <_fflush_r+0xc>

0800c71c <__swhatbuf_r>:
 800c71c:	b570      	push	{r4, r5, r6, lr}
 800c71e:	460c      	mov	r4, r1
 800c720:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c724:	2900      	cmp	r1, #0
 800c726:	b096      	sub	sp, #88	@ 0x58
 800c728:	4615      	mov	r5, r2
 800c72a:	461e      	mov	r6, r3
 800c72c:	da0d      	bge.n	800c74a <__swhatbuf_r+0x2e>
 800c72e:	89a3      	ldrh	r3, [r4, #12]
 800c730:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800c734:	f04f 0100 	mov.w	r1, #0
 800c738:	bf14      	ite	ne
 800c73a:	2340      	movne	r3, #64	@ 0x40
 800c73c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800c740:	2000      	movs	r0, #0
 800c742:	6031      	str	r1, [r6, #0]
 800c744:	602b      	str	r3, [r5, #0]
 800c746:	b016      	add	sp, #88	@ 0x58
 800c748:	bd70      	pop	{r4, r5, r6, pc}
 800c74a:	466a      	mov	r2, sp
 800c74c:	f000 f848 	bl	800c7e0 <_fstat_r>
 800c750:	2800      	cmp	r0, #0
 800c752:	dbec      	blt.n	800c72e <__swhatbuf_r+0x12>
 800c754:	9901      	ldr	r1, [sp, #4]
 800c756:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800c75a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800c75e:	4259      	negs	r1, r3
 800c760:	4159      	adcs	r1, r3
 800c762:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c766:	e7eb      	b.n	800c740 <__swhatbuf_r+0x24>

0800c768 <__smakebuf_r>:
 800c768:	898b      	ldrh	r3, [r1, #12]
 800c76a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c76c:	079d      	lsls	r5, r3, #30
 800c76e:	4606      	mov	r6, r0
 800c770:	460c      	mov	r4, r1
 800c772:	d507      	bpl.n	800c784 <__smakebuf_r+0x1c>
 800c774:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800c778:	6023      	str	r3, [r4, #0]
 800c77a:	6123      	str	r3, [r4, #16]
 800c77c:	2301      	movs	r3, #1
 800c77e:	6163      	str	r3, [r4, #20]
 800c780:	b003      	add	sp, #12
 800c782:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c784:	ab01      	add	r3, sp, #4
 800c786:	466a      	mov	r2, sp
 800c788:	f7ff ffc8 	bl	800c71c <__swhatbuf_r>
 800c78c:	9f00      	ldr	r7, [sp, #0]
 800c78e:	4605      	mov	r5, r0
 800c790:	4639      	mov	r1, r7
 800c792:	4630      	mov	r0, r6
 800c794:	f7fd fc3a 	bl	800a00c <_malloc_r>
 800c798:	b948      	cbnz	r0, 800c7ae <__smakebuf_r+0x46>
 800c79a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c79e:	059a      	lsls	r2, r3, #22
 800c7a0:	d4ee      	bmi.n	800c780 <__smakebuf_r+0x18>
 800c7a2:	f023 0303 	bic.w	r3, r3, #3
 800c7a6:	f043 0302 	orr.w	r3, r3, #2
 800c7aa:	81a3      	strh	r3, [r4, #12]
 800c7ac:	e7e2      	b.n	800c774 <__smakebuf_r+0xc>
 800c7ae:	89a3      	ldrh	r3, [r4, #12]
 800c7b0:	6020      	str	r0, [r4, #0]
 800c7b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c7b6:	81a3      	strh	r3, [r4, #12]
 800c7b8:	9b01      	ldr	r3, [sp, #4]
 800c7ba:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800c7be:	b15b      	cbz	r3, 800c7d8 <__smakebuf_r+0x70>
 800c7c0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c7c4:	4630      	mov	r0, r6
 800c7c6:	f000 f81d 	bl	800c804 <_isatty_r>
 800c7ca:	b128      	cbz	r0, 800c7d8 <__smakebuf_r+0x70>
 800c7cc:	89a3      	ldrh	r3, [r4, #12]
 800c7ce:	f023 0303 	bic.w	r3, r3, #3
 800c7d2:	f043 0301 	orr.w	r3, r3, #1
 800c7d6:	81a3      	strh	r3, [r4, #12]
 800c7d8:	89a3      	ldrh	r3, [r4, #12]
 800c7da:	431d      	orrs	r5, r3
 800c7dc:	81a5      	strh	r5, [r4, #12]
 800c7de:	e7cf      	b.n	800c780 <__smakebuf_r+0x18>

0800c7e0 <_fstat_r>:
 800c7e0:	b538      	push	{r3, r4, r5, lr}
 800c7e2:	4d07      	ldr	r5, [pc, #28]	@ (800c800 <_fstat_r+0x20>)
 800c7e4:	2300      	movs	r3, #0
 800c7e6:	4604      	mov	r4, r0
 800c7e8:	4608      	mov	r0, r1
 800c7ea:	4611      	mov	r1, r2
 800c7ec:	602b      	str	r3, [r5, #0]
 800c7ee:	f7f5 f873 	bl	80018d8 <_fstat>
 800c7f2:	1c43      	adds	r3, r0, #1
 800c7f4:	d102      	bne.n	800c7fc <_fstat_r+0x1c>
 800c7f6:	682b      	ldr	r3, [r5, #0]
 800c7f8:	b103      	cbz	r3, 800c7fc <_fstat_r+0x1c>
 800c7fa:	6023      	str	r3, [r4, #0]
 800c7fc:	bd38      	pop	{r3, r4, r5, pc}
 800c7fe:	bf00      	nop
 800c800:	20000ff4 	.word	0x20000ff4

0800c804 <_isatty_r>:
 800c804:	b538      	push	{r3, r4, r5, lr}
 800c806:	4d06      	ldr	r5, [pc, #24]	@ (800c820 <_isatty_r+0x1c>)
 800c808:	2300      	movs	r3, #0
 800c80a:	4604      	mov	r4, r0
 800c80c:	4608      	mov	r0, r1
 800c80e:	602b      	str	r3, [r5, #0]
 800c810:	f7f5 f872 	bl	80018f8 <_isatty>
 800c814:	1c43      	adds	r3, r0, #1
 800c816:	d102      	bne.n	800c81e <_isatty_r+0x1a>
 800c818:	682b      	ldr	r3, [r5, #0]
 800c81a:	b103      	cbz	r3, 800c81e <_isatty_r+0x1a>
 800c81c:	6023      	str	r3, [r4, #0]
 800c81e:	bd38      	pop	{r3, r4, r5, pc}
 800c820:	20000ff4 	.word	0x20000ff4

0800c824 <memcpy>:
 800c824:	440a      	add	r2, r1
 800c826:	4291      	cmp	r1, r2
 800c828:	f100 33ff 	add.w	r3, r0, #4294967295
 800c82c:	d100      	bne.n	800c830 <memcpy+0xc>
 800c82e:	4770      	bx	lr
 800c830:	b510      	push	{r4, lr}
 800c832:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c836:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c83a:	4291      	cmp	r1, r2
 800c83c:	d1f9      	bne.n	800c832 <memcpy+0xe>
 800c83e:	bd10      	pop	{r4, pc}

0800c840 <__assert_func>:
 800c840:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c842:	4614      	mov	r4, r2
 800c844:	461a      	mov	r2, r3
 800c846:	4b09      	ldr	r3, [pc, #36]	@ (800c86c <__assert_func+0x2c>)
 800c848:	681b      	ldr	r3, [r3, #0]
 800c84a:	4605      	mov	r5, r0
 800c84c:	68d8      	ldr	r0, [r3, #12]
 800c84e:	b14c      	cbz	r4, 800c864 <__assert_func+0x24>
 800c850:	4b07      	ldr	r3, [pc, #28]	@ (800c870 <__assert_func+0x30>)
 800c852:	9100      	str	r1, [sp, #0]
 800c854:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c858:	4906      	ldr	r1, [pc, #24]	@ (800c874 <__assert_func+0x34>)
 800c85a:	462b      	mov	r3, r5
 800c85c:	f000 f842 	bl	800c8e4 <fiprintf>
 800c860:	f000 f852 	bl	800c908 <abort>
 800c864:	4b04      	ldr	r3, [pc, #16]	@ (800c878 <__assert_func+0x38>)
 800c866:	461c      	mov	r4, r3
 800c868:	e7f3      	b.n	800c852 <__assert_func+0x12>
 800c86a:	bf00      	nop
 800c86c:	20000220 	.word	0x20000220
 800c870:	0800cbe5 	.word	0x0800cbe5
 800c874:	0800cbf2 	.word	0x0800cbf2
 800c878:	0800cc20 	.word	0x0800cc20

0800c87c <_calloc_r>:
 800c87c:	b570      	push	{r4, r5, r6, lr}
 800c87e:	fba1 5402 	umull	r5, r4, r1, r2
 800c882:	b934      	cbnz	r4, 800c892 <_calloc_r+0x16>
 800c884:	4629      	mov	r1, r5
 800c886:	f7fd fbc1 	bl	800a00c <_malloc_r>
 800c88a:	4606      	mov	r6, r0
 800c88c:	b928      	cbnz	r0, 800c89a <_calloc_r+0x1e>
 800c88e:	4630      	mov	r0, r6
 800c890:	bd70      	pop	{r4, r5, r6, pc}
 800c892:	220c      	movs	r2, #12
 800c894:	6002      	str	r2, [r0, #0]
 800c896:	2600      	movs	r6, #0
 800c898:	e7f9      	b.n	800c88e <_calloc_r+0x12>
 800c89a:	462a      	mov	r2, r5
 800c89c:	4621      	mov	r1, r4
 800c89e:	f7fe faa1 	bl	800ade4 <memset>
 800c8a2:	e7f4      	b.n	800c88e <_calloc_r+0x12>

0800c8a4 <__ascii_mbtowc>:
 800c8a4:	b082      	sub	sp, #8
 800c8a6:	b901      	cbnz	r1, 800c8aa <__ascii_mbtowc+0x6>
 800c8a8:	a901      	add	r1, sp, #4
 800c8aa:	b142      	cbz	r2, 800c8be <__ascii_mbtowc+0x1a>
 800c8ac:	b14b      	cbz	r3, 800c8c2 <__ascii_mbtowc+0x1e>
 800c8ae:	7813      	ldrb	r3, [r2, #0]
 800c8b0:	600b      	str	r3, [r1, #0]
 800c8b2:	7812      	ldrb	r2, [r2, #0]
 800c8b4:	1e10      	subs	r0, r2, #0
 800c8b6:	bf18      	it	ne
 800c8b8:	2001      	movne	r0, #1
 800c8ba:	b002      	add	sp, #8
 800c8bc:	4770      	bx	lr
 800c8be:	4610      	mov	r0, r2
 800c8c0:	e7fb      	b.n	800c8ba <__ascii_mbtowc+0x16>
 800c8c2:	f06f 0001 	mvn.w	r0, #1
 800c8c6:	e7f8      	b.n	800c8ba <__ascii_mbtowc+0x16>

0800c8c8 <__ascii_wctomb>:
 800c8c8:	4603      	mov	r3, r0
 800c8ca:	4608      	mov	r0, r1
 800c8cc:	b141      	cbz	r1, 800c8e0 <__ascii_wctomb+0x18>
 800c8ce:	2aff      	cmp	r2, #255	@ 0xff
 800c8d0:	d904      	bls.n	800c8dc <__ascii_wctomb+0x14>
 800c8d2:	228a      	movs	r2, #138	@ 0x8a
 800c8d4:	601a      	str	r2, [r3, #0]
 800c8d6:	f04f 30ff 	mov.w	r0, #4294967295
 800c8da:	4770      	bx	lr
 800c8dc:	700a      	strb	r2, [r1, #0]
 800c8de:	2001      	movs	r0, #1
 800c8e0:	4770      	bx	lr
	...

0800c8e4 <fiprintf>:
 800c8e4:	b40e      	push	{r1, r2, r3}
 800c8e6:	b503      	push	{r0, r1, lr}
 800c8e8:	4601      	mov	r1, r0
 800c8ea:	ab03      	add	r3, sp, #12
 800c8ec:	4805      	ldr	r0, [pc, #20]	@ (800c904 <fiprintf+0x20>)
 800c8ee:	f853 2b04 	ldr.w	r2, [r3], #4
 800c8f2:	6800      	ldr	r0, [r0, #0]
 800c8f4:	9301      	str	r3, [sp, #4]
 800c8f6:	f7ff fd4d 	bl	800c394 <_vfiprintf_r>
 800c8fa:	b002      	add	sp, #8
 800c8fc:	f85d eb04 	ldr.w	lr, [sp], #4
 800c900:	b003      	add	sp, #12
 800c902:	4770      	bx	lr
 800c904:	20000220 	.word	0x20000220

0800c908 <abort>:
 800c908:	b508      	push	{r3, lr}
 800c90a:	2006      	movs	r0, #6
 800c90c:	f000 f82c 	bl	800c968 <raise>
 800c910:	2001      	movs	r0, #1
 800c912:	f7f4 ffad 	bl	8001870 <_exit>

0800c916 <_raise_r>:
 800c916:	291f      	cmp	r1, #31
 800c918:	b538      	push	{r3, r4, r5, lr}
 800c91a:	4605      	mov	r5, r0
 800c91c:	460c      	mov	r4, r1
 800c91e:	d904      	bls.n	800c92a <_raise_r+0x14>
 800c920:	2316      	movs	r3, #22
 800c922:	6003      	str	r3, [r0, #0]
 800c924:	f04f 30ff 	mov.w	r0, #4294967295
 800c928:	bd38      	pop	{r3, r4, r5, pc}
 800c92a:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800c92c:	b112      	cbz	r2, 800c934 <_raise_r+0x1e>
 800c92e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c932:	b94b      	cbnz	r3, 800c948 <_raise_r+0x32>
 800c934:	4628      	mov	r0, r5
 800c936:	f000 f831 	bl	800c99c <_getpid_r>
 800c93a:	4622      	mov	r2, r4
 800c93c:	4601      	mov	r1, r0
 800c93e:	4628      	mov	r0, r5
 800c940:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c944:	f000 b818 	b.w	800c978 <_kill_r>
 800c948:	2b01      	cmp	r3, #1
 800c94a:	d00a      	beq.n	800c962 <_raise_r+0x4c>
 800c94c:	1c59      	adds	r1, r3, #1
 800c94e:	d103      	bne.n	800c958 <_raise_r+0x42>
 800c950:	2316      	movs	r3, #22
 800c952:	6003      	str	r3, [r0, #0]
 800c954:	2001      	movs	r0, #1
 800c956:	e7e7      	b.n	800c928 <_raise_r+0x12>
 800c958:	2100      	movs	r1, #0
 800c95a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800c95e:	4620      	mov	r0, r4
 800c960:	4798      	blx	r3
 800c962:	2000      	movs	r0, #0
 800c964:	e7e0      	b.n	800c928 <_raise_r+0x12>
	...

0800c968 <raise>:
 800c968:	4b02      	ldr	r3, [pc, #8]	@ (800c974 <raise+0xc>)
 800c96a:	4601      	mov	r1, r0
 800c96c:	6818      	ldr	r0, [r3, #0]
 800c96e:	f7ff bfd2 	b.w	800c916 <_raise_r>
 800c972:	bf00      	nop
 800c974:	20000220 	.word	0x20000220

0800c978 <_kill_r>:
 800c978:	b538      	push	{r3, r4, r5, lr}
 800c97a:	4d07      	ldr	r5, [pc, #28]	@ (800c998 <_kill_r+0x20>)
 800c97c:	2300      	movs	r3, #0
 800c97e:	4604      	mov	r4, r0
 800c980:	4608      	mov	r0, r1
 800c982:	4611      	mov	r1, r2
 800c984:	602b      	str	r3, [r5, #0]
 800c986:	f7f4 ff63 	bl	8001850 <_kill>
 800c98a:	1c43      	adds	r3, r0, #1
 800c98c:	d102      	bne.n	800c994 <_kill_r+0x1c>
 800c98e:	682b      	ldr	r3, [r5, #0]
 800c990:	b103      	cbz	r3, 800c994 <_kill_r+0x1c>
 800c992:	6023      	str	r3, [r4, #0]
 800c994:	bd38      	pop	{r3, r4, r5, pc}
 800c996:	bf00      	nop
 800c998:	20000ff4 	.word	0x20000ff4

0800c99c <_getpid_r>:
 800c99c:	f7f4 bf50 	b.w	8001840 <_getpid>

0800c9a0 <_init>:
 800c9a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c9a2:	bf00      	nop
 800c9a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c9a6:	bc08      	pop	{r3}
 800c9a8:	469e      	mov	lr, r3
 800c9aa:	4770      	bx	lr

0800c9ac <_fini>:
 800c9ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c9ae:	bf00      	nop
 800c9b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c9b2:	bc08      	pop	{r3}
 800c9b4:	469e      	mov	lr, r3
 800c9b6:	4770      	bx	lr
